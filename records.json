[
    {
        "title": "audio-level.mdx",
        "link": "/android/v2/advanced-features/audio-level",
        "keywords": [],
        "headings": ["Audio Level", "Active Speaker Views", "Dominant Speaker"],
        "content": "--- title: Show Audio Levels nav: 8.01 ---  The concepts explained  are: 1. [Getting Audio Levels   speaking peers](#audio-level). 2. [Creating  UI  shows  loudest speaking users](#active-speaker-views). 3. [Dominant Speaker -  loudest speaker](#dominant-speaker).  ## Audio Level  The audio level  every speaking peer can  retrieved  registering  instance  `HMSAudioListener`  `hmsSDK.addAudioObserver` like so.   <Tabs id=\"add-audio-observer\" items={['Kotlin', 'Java']} />  <Tab id='add-audio-observer-0'>  ```kotlin hmsSDK.addAudioObserver(object : HMSAudioListener {         override fun onAudioLevelUpdate(speakers: Array<HMSSpeaker>) {           Log.v(\"TAG\",                   \"Active Speakers are: ${speakers.map { s -> \"${s.peer?.name} ${s.level}\" }}}\"           )         }       })  ```  </Tab>  <Tab id='add-audio-observer-1'>  ```java hmsSdk.addAudioObserver(new HMSAudioListener() {             @Override             public void onAudioLevelUpdate(@NonNull HMSSpeaker[] hmsSpeakers) {                 StringBuilder allSpeakers = new StringBuilder(\"Active speakers are: \");                 for( HMSSpeaker speaker : hmsSpeakers) {                   String name;                   if(speaker.getPeer() != null ) {                     name = speaker.getPeer().getName()                   } else {                     name = \"\"                   }                     allSpeakers.append(name)                         .append(\" \")                         .append(speaker.getLevel())                         .append(\"\\n\");                 }                 Log.d(\"tag\", allSpeakers.toString());             }         }); ``` </Tab>   Here   properties   `HMSSpeaker` class:  - trackId : `String`. The track id   audio track   speaker. - level : `Int`. The level   audio. It may vary  0-100. A higher value indicates  higher speaking volume. - hmsTrack : HMSTrack?. The audio track corresponding   speaker. It may  null   speaker   speaking loudly, leaves. - peer : HMSPeer?. The peer   speaking. This may  null   peer  left   update information  reached   person.   ## Active Speaker Views To maintain  active speaker view,    default view   [open source advanced sample app](https://github.com/100mslive/100ms-android),  need  keep track    active speakers   time. We'll  using  input  `HMSAudioListener`  mentioned    building something  attempts  show   active speakers  minimizing re-ordering  list.  This  achived   sample app  means   [ActiveSpeakerCache](https://github.com/100mslive/100ms-android/blob/b02ad19b7ad1bcc3b9973a2a6a4e1a36c121f477/app/src/main/java/live/hms/app2/ui/meeting/activespeaker/ActiveSpeakerCache.kt), [ActiveSpeakerHandler](https://github.com/100mslive/100ms-android/blob/b02ad19b7ad1bcc3b9973a2a6a4e1a36c121f477/app/src/main/java/live/hms/app2/ui/meeting/activespeaker/ActiveSpeakerHandler.kt)   piping  input   `HMSAudioListener`   handler  demonstrated [here](https://github.com/100mslive/100ms-android/blob/0ebfc6527bafbda7236d5245dedb5fefb262bfcc/app/src/main/java/live/hms/app2/ui/meeting/MeetingViewModel.kt#L126).  ## Dominant Speaker   The dominant speaker   speaker   loudest   given moment. There's  callback     `onPeerUpdate` callback  `HMSUpdateListener`.  Here's  method signature  onPeerUpdate: `override fun onPeerUpdate(type: HMSPeerUpdate, hmsPeer: HMSPeer)`  When  dominant speaker  changed,  will  updates   type: - `HMSPeerUpdate.BECAME_DOMINANT_SPEAKER` When  new person becomes  dominant speaker.  - `HMSPeerUpdate.NO_DOMINANT_SPEAKER` When  current dominant speaker stops talking    one  replace them.  The `hmsPeer` parameter contains  person  updates apply to. ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/audio-level"
    },
    {
        "title": "hls-stats.mdx",
        "link": "/android/v2/advanced-features/hls-stats",
        "keywords": [],
        "headings": [
            "Stats Information",
            "Add dependency",
            "Instantiate PlayerEventsCollector",
            "Listening to updates from PlayerEventsCollector",
            "Interpretting the values : "
        ],
        "content": "--- title: Stats  HLS Player nav: 8.04 ---  ## Stats Information  Statistics   on-going stream can  viewed  user  debugging purposes. It can also  used   standalone dependency  required    dependency  100ms SDK.  ## Add dependency  -   Adding  Player-Stats plugin  SDK dependency   app-level `build.gradle`.  [![](https://img.shields.io/badge/dynamic/xml.svg?label=100ms&color=blue&query=%2F%2Fmetadata%2Fversioning%2Flatest&url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Flive%2F100ms%2Fandroid-sdk%2Fmaven-metadata.xml)](https://jitpack.io/#100mslive/android-sdk)   <Tabs id=\"sdk-imports\" items={['Maven Central', 'Jitpack']} />  <Tab id='sdk-imports-0'>  ```json{5-8}:settings.gradle section=AddSDKDependencies sectionIndex=1 dependencies {  // See  version   badge above.  // There  separate libraries   sdk, virtual background  hls-player-stats.  //     add just  ones  need.  def hmsVersion = \"x.x.x\"  implementation \"live.100ms:android-sdk:$hmsVersion\"  implementation \"live.100ms:hls-player-stats:$hmsVersion\" } ```  </Tab>   <Tab id='sdk-imports-1'>  ```json{2,4-6}:build.gradle section=AddSDKDependencies sectionIndex=2 dependencies {  def hmsVersion = \"x.x.x\"  // See  version   jitpack badge above.  implementation \"com.github.100mslive.android-sdk:lib:$hmsVersion\"  implementation \"com.github.100mslive.android-sdk:stats:$hmsVersion\"  } ```  </Tab>  <Note>  **Note**      This Plugin supports Exoplayer versions 2.15.0  above.  </Note>  ## Instantiate PlayerEventsCollector  An Existing exoplayer instance can  directly attached  PlayerEventsCollector  follows :   <Tabs id=\"instanstiate-PlayerStatsPlugin\" items={['Kotlin', 'Java']} />  <Tab id='instanstiate-PlayerStatsPlugin-0'>  ```kotlin             //  existing exoplayer instance             val exoplayer : Exoplayer               //    optional configuration provided  instantiated  creating  object,              // @param `eventRate`   rate  milliseconds   client wants  recieve  events.(default set  2000 i.e 2 seconds)             val initConfig = InitConfig(eventRate = 2000)              playerEventsCollector = PlayerEventsCollector(exoplayer : exoplayer)  ```  </Tab>  <Tab id='instanstiate-PlayerStatsPlugin-1'>  ```java             //  existing exoplayer instance             Exoplayer exoplayer;               //    optional configuration provided  instantiated  creating  object,              // @param `eventRate`   rate  milliseconds   client wants  recieve  events.(default set  2000 i.e 2 seconds)             InitConfig initConfig = new InitConfig(2000);              PlayerEventsCollector playerEventsCollector = PlayerEventsCollector(exoplayer,initConfig);  ```  </Tab>  ## Listening  updates  PlayerEventsCollector   To start listeneing updates   plugin , listener can  attached  follows :   <Tabs id=\"addListener-PlayerStatsPlugin\" items={['Kotlin', 'Java']} />  <Tab id='addListener-PlayerStatsPlugin-0'>  ```kotlin            playerEventsCollector.addListener(object : PlayerEventsListener {                 override fun onEventUpdate(playerStats: PlayerStats) {                     // playerStats object contains information    stats provided   plugin.                     //  information   object  mentioned   end   document.                 }             })  ```  </Tab>  <Tab id='addListener-PlayerStatsPlugin-1'>  ```java             playerEventsCollector.addListener(new PlayerEventsListener() {                 @Override                 public void onEventUpdate(@NonNull PlayerStats playerStats) {                                     }             }); ```  </Tab>   To stop listeneing updates   plugin , listener can  removed  follows :   <Tabs id=\"removeListener-PlayerStatsPlugin\" items={['Kotlin', 'Java']} />  <Tab id='removeListener-PlayerStatsPlugin-0'>  ```kotlin             playerEventsCollector.removeListener()  ```  </Tab>  <Tab id='removeListener-PlayerStatsPlugin-1'>  ```java             playerEventsCollector.removeListener();  ```  </Tab>  <Note>  **Note**      removeListener() must  called  view listening    destroyed  </Note>  ## Interpretting  values :    | Name  Description  Unit  Usage | | ---  ---  ---  --- | | bandwidthEstimate  The current bandwidth,  estimated   player  bytes per second  Use   show  current network speed   user | | bytesDownloaded  The total bytes downloaded within  given poll duration  Bytes  Use   calculate  total Bytes downloaded   session   show  network activity | | bitrate  bitrate   current layer  played  bytes per second  Use  show  bitrate chart   user | | bufferedDuration  An estimate   total buffered duration   current position  ms  This can  used  show  much data  already buffered | | video width  The width   video   pixels  Used  know  resolution  played | | video height  The height   video  pixels  Used  know  resolution  played | | video frameRate  The frame rate  frames per second  Used  know  FPS | | droppedFrames  The number  dropped frames since  last call   method  Int  Used  calculate  total number  dropped frames  | | distanceFromLiveEdge  Distance  current playing position  live edge  Int  Used  calculate  far current player position   live edge  content. | ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/hls-stats"
    },
    {
        "title": "peer-metadata-update.mdx",
        "link": "/android/v2/advanced-features/peer-metadata-update",
        "keywords": [],
        "headings": ["Reading metadata", "Responding to updates", "Updating Metadata"],
        "content": "--- title: Peer Metadata Update nav: 8.02 ---  Looking  persistent state  can  set   peer  updated anytime,  everyone   room? Peer metadata  it.  Metadata can  set initially   `HMSConfig` object  passed   join method.  This section will show   to: 1. [Read Peer Metadata](#reading-metadata). 2. [Respond    remote peer changes  metadata](#responding-to-updates). 3. [How  set  peer's metadata](#updating-metadata).  The `HMSPeer` object prior  2.2.1 contained `customerDescription`  read-only string whose value  change throughout  call. This   replaced  `metadata`. The value  initially assigned    now can  changed   peer  owns it.  Any peer can change  metadata  themselves. Currently one peer  change another peer's metadata.  To change   metadata value  peer  call `changeMetadata`   `HMSSdk` instance.  The data may   arbitrary string though    changed  null.  ## Reading metadata  To read metadata, read  `metadata` value   `HMSPeer` instance.  ## Responding  updates  Whenever  remote peer's metadata  updated  callback will  received  `onPeerUpdate(update : HMSPeerUpdate, peer : HMSPeer)`  `HMSUpdateListener`   `update` value will   type `HMSPeerUpdate.METADATA_CHANGED`.  When  callback  received  UI   peer   updated  well.  ## Updating Metadata  Here    peer can set   metadata   random string. In  case  string  stringified json.  <Tabs id=\"change-metadata\" items={['Kotlin', 'Java']} />  <Tab id='change-metadata-0'>  ```kotlin val newMetadata = \"{\\\"ms\\\": 100 }\" hmsSdk.changeMetadata(newMetadata, object : HMSActionResultListener {     override fun onSuccess() {      }      override fun onError(error: HMSException) {      }  }) ```  </Tab>  <Tab id='change-metadata-1'>  ```java String newMetadata =\"{\\\"ms\\\": 100 }\"; hmsSdk.changeMetadata(newMetadata, new HMSActionResultListener() {     @Override     public void onSuccess() {      }      @Override     public void onError(@NonNull HMSException e) {      } }); ``` </Tab>  ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/peer-metadata-update"
    },
    {
        "title": "peer-network-quality.mdx",
        "link": "/android/v2/advanced-features/peer-network-quality",
        "keywords": [],
        "headings": [
            "Network Quality Information",
            "Limitations",
            "Reading Network Quality Information",
            "Interpreting the Values"
        ],
        "content": "--- title: Show Network Quality For Peers nav: 8.03 ---  ## Network Quality Information  The network quality  every peer can  retrieved  registering  instance  `HmsUpdateListener`  `hmsSDK`.  ## Limitations The network quality information per peer  calculated   server  observing  well  peer can download  peer's videos.  > ⚠️ If  peer   subscribing   videos network quality updates will NOT  sent    anyone   call.  This depends    videos  peer  seeing,   possible   large call   people  on-screen  degraded tiles,  tiles  others  videos    peer   see  videos will    network quality information   sent  others.  ## Reading Network Quality Information  Whenever peer network quality changes  update will  fired  `onPeerUpdate(update : HMSPeerUpdate, peer : HMSPeer)` of HMSUpdateListener   update value will   type `HMSPeerUpdate.NETWORK_QUALITY_UPDATED`.   > 💡The`HMSPeer` object represents  person   call.   It  look something like this:  <Tabs id=\"peer-quality_update\" items={['Kotlin', 'Java']} />  <Tab id='peer-quality_update-0'>   ```kotlin override fun onPeerUpdate(type: HMSPeerUpdate, hmsPeer: HMSPeer) {      (type) {         HMSPeerUpdate.NETWORK_QUALITY_UPDATED -> {             // values can  accessed using hmsPeer.networkQuality?.downlinkQuality                val quality = hmsPeer.networkQuality?.downlinkQuality                }     } }  ```  </Tab>  <Tab id='peer-quality_update-1'>  ```java      @Override void onPeerUpdate(HMSPeerUpdate type, HMSPeer hmsPeer) {     switch (type) {         case NETWORK_QUALITY_UPDATED:             HMSNetworkQuality quality = peer.getNetworkQuality();                         if(quality != null) {                 int networkQuality = quality.getDownlinkQuality();             }             break;         // ....     } }    ```  </Tab>  ## Interpreting  Values `peer.networkQuality?.downlinkQuality` will   value  0  5. - -1 -> Network check failure -  0  -> Very bad network  network check failure -  1  -> Poor network -  2  -> Bad network -  3  -> Average -  4  -> Good -  5  -> Best",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/peer-network-quality"
    },
    {
        "title": "simulcast.mdx",
        "link": "/android/v2/advanced-features/simulcast",
        "keywords": [],
        "headings": ["Minimum Requirements", "100ms SDK Simulcast APIs"],
        "content": "---  title: Simulcast  nav: 8.04 ---  Simulcast enables [Adaptive Bitrate](../foundation/adaptive-bitrate) (ABR)  video conferencing scenarios. This means 100ms SDKs can upgrade  downgrade video quality  remote tracks based  user preferences  network conditions.  ## Minimum Requirements  - SDK version 2.5.2  higher - Simulcast enabled  room template  ## 100ms SDK Simulcast APIs  You interact   simulcast feature  setting `HMSRemoteVideoTrack`'s `setLayer` function. By default  layer  set  high i.e HMSLayer.HIGH Let's look   track interface:  ```kotlin class HMSRemoteVideoTrack { \t /**    * Public api  set layer  [HMSLayer.HIGH], [HMSLayer.LOW], [HMSLayer.MEDIUM]    */   fun setLayer(HMSLayer: HMSLayer) \t\t \t/**    * Public API  get layers definition    */   fun getLayerDefinition() : List<HMSSimulcastLayerDefinition>  \t/**    * Public API  get  current selected HMSLayer    */   fun getLayer() : HMSLayer      }  data class HMSSimulcastLayerDefinition( \tval resolution: HMSVideoResolution,  \tval layer: HMSLayer )  enum class HMSLayer  {  \tLOW, MEDIUM, HIGH  } ```  Here `getLayerDefinition()` property holds  array  currently available layers   track  `layer` property   currently selected layer.  Within `HMSSimulcastLayerDefinition`  get  resolution   layer name   high/medium/low. ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/simulcast"
    },
    {
        "title": "track-settings.mdx",
        "link": "/android/v2/advanced-features/track-settings",
        "keywords": [],
        "headings": [
            "cameraFacing",
            "forceSoftwareDecoding",
            "disableAutoResize",
            "initialState",
            "setUseHardwareAcousticEchoCanceler"
        ],
        "content": "--- title: Set Track Settings (Video/Audio) nav: 13.4 ---  You can customize local peer's Audio & Video track settings  creating instance  100ms SDK.   These settings   optional parameter  meant   passed   `build` function  `trackSettings` parameter    `HMSTrackSettings` object.  ```kotlin HMSSDK         .Builder(application)         .setTrackSettings(trackSettings) // track setting          ...         .build() ```   You can set  quality  description   Audio tracks  setiings like `initialState()`, `setUseHardwareAcousticEchoCanceler()` etc  ```kotlin val trackSettings = HMSTrackSettings.Builder()         .audio(             HMSAudioTrackSettings.Builder()                 .setUseHardwareAcousticEchoCanceler(true/false)                 .initialState(MUTED/UNMUTED)                 .build()) ```   Similarly,  Video tracks  can use like  `cameraFacing()`, `resolution()`, `forceSoftwareDecoding()` etc  ```kotlin val trackSettings = HMSTrackSettings.Builder()       .video(         .disableAutoResize(true/false)         .forceSoftwareDecoder(true/false)         .initialState(MUTED/UNMUTED)         .build()) ```  ## cameraFacing Property specifies  camera  open  joining. It can  toggled later on. Default value  set  `HMSCameraFacing.FRONT`  ```kotlin HMSCameraFacing.FRONT HMSCameraFacing.BACK ```  ## forceSoftwareDecoding This can  used  alot  video  rendered   single time. It  known  hardware decoder  certain phones  tend  work well  large grids. This may cause adverse effect like phone heating up, use  flag   required. Default value  set  `false` ```kotlin  HMSVideoTrackSettings.Builder() .forceSoftwareDecoder(true) ... ```  ## disableAutoResize The SDK intelligently downscales  resolution when, publisher's bandwidth  flaky   cpu bound. This resuls   low resolution   viewers. But   viewers  persistent  want highest resolution   times,   setting comes  handy. Default value  set  `false` ```kotlin  HMSVideoTrackSettings.Builder() .disableAutoResize(true) ... ```  ## initialState This keeps  inital state   particular role    new role  assigned. Usecase : user might want  turn on/off  joining  call.  Default value  set  `HMSTrackSettings.InitState.UNMUTED`  ```kotlin .initialState(HMSTrackSettings.InitState.MUTED) ... HMSTrackSettings.InitState.MUTED/ HMSTrackSettings.InitState.UNMUTED ```  ## setUseHardwareAcousticEchoCanceler  This setting use's  phone's Acoustic echo Cancellation instead  relying   SDK's software based implementation.  Default value  set  `true` ```kotlin  HMSVideoTrackSettings.Builder() .setUseHardwareAcousticEchoCanceler(true) ... ```  Here's  sample implementation  adding track settings  initializing 100ms SDK -  ```kotlin  val hmsTrackSettings = HMSTrackSettings.Builder()         .audio(             HMSAudioTrackSettings.Builder()                 .setUseHardwareAcousticEchoCanceler(true)                 .initialState(HMSTrackSettings.InitState.MUTED)                 .build()         )         .video(             HMSVideoTrackSettings.Builder().disableAutoResize(false)                 .forceSoftwareDecoder(true)                 .initialState(HMSTrackSettings.InitState.MUTED)                 .build()         )         .build()  HMSSDK         .Builder(application)         .setTrackSettings(hmsTrackSettings)         .build() ```  ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/track-settings"
    },
    {
        "title": "webrtc-stats.mdx",
        "link": "/android/v2/advanced-features/webrtc-stats",
        "keywords": [],
        "headings": [
            "HMSRTCStatsReport",
            "HMSLocalAudioStats",
            "HMSLocalVideoStats",
            "HMSRemoteAudioStats",
            "HMSRemoteVideoStats",
            "Hierarchy"
        ],
        "content": "--- title: Stats  WebRTC nav: 13.3 ---  Sometimes  need  way  capture certain metrics related   call. This may  helpful   want  tailor  experience   users  debug issues. Typical metrics  interest  audio/video bitrate, round trip time, total consumed bandwidth  packet loss. 100ms SDK provides  data via dedicated delegate callbacks found  `HMSStatsObserver`. These will  called   fixed interval  one second   room   joined. You can get stats   per track basis ( `fun onRemoteAudioStats(audioStats: HMSRemoteAudioStats, hmsTrack: HMSTrack?, hmsPeer: HMSPeer?)`)    overall summary (`fun onRTCStats(rtcStats: HMSRTCStatsReport)`).  To begin getting callbacks  statistics, call `hmsSDK.addRtcStatsObserver(HMSStatsObserver)`   implementation  `HMSStatsObserver`.  > 💡 Note: Gathering stats takes several ms  can   large operation  requested   room  thousands  peers. Consider whether  additional load  necessary.  Here   full list  callbacks:  ```kotlin /// This callback provides stats   local audio track. fun onLocalAudioStats(audioStats: HMSLocalAudioStats, hmsTrack: HMSTrack?, hmsPeer: HMSPeer?)  /// This callback provides stats   local video track. fun onLocalVideoStats(videoStats: HMSLocalVideoStats, hmsTrack: HMSTrack?, hmsPeer: HMSPeer?)  /// This callback provides stats   remote audio track. fun onRemoteAudioStats(audioStats: HMSRemoteAudioStats, hmsTrack: HMSTrack?, hmsPeer: HMSPeer?)  /// This callback provides stats   remote video track. fun onRemoteVideoStats(videoStats: HMSRemoteVideoStats, hmsTrack: HMSTrack?, hmsPeer: HMSPeer?)  /// This callback provides combined stats   session. fun onRTCStats(rtcStats: HMSRTCStatsReport) ```  ## HMSRTCStatsReport  This class will contain  combined stats   room.  ```kotlin class HMSRTCStats { \t// Total bytes sent   current session. \tval bytesSent: Long \t// Total bytes received   current session. \tval bytesReceived: Long \t// Total packets received   current session. \tval packetsReceived: Long \t// Total packets lost   current session. \tval packetsLost: Long \t// Total outgoing bitrate observed since previous report. \tval bitrateSent: Double \t// Total incoming bitrate observed since previous report  Kb/s. \tval bitrateReceived: Double \t// Average round trip time observed since previous report  Kb/s. \tval roundTripTime: Double }  class HMSRTCStatsReport { \t// Combined audio + video values \tval combined: HMSRTCStats \t// Summary   audio tracks \tval audio: HMSRTCStats \t// Summary   video tracks \tval video: HMSRTCStats } ```  ## HMSLocalAudioStats  This class contains stats related  local audio track.  ```kotlin data class HMSLocalAudioStats( \t// Round trip time observed since previous report. \tval roundTripTime: Double?, \t// Total bytes sent   track   current session. \tval bytesSent: Long?, \t// Outgoing bitrate   track observed since previous report  Kb/s. \tval bitrate: Double? ) : HMSStats.HMSLocalStats() ```  ## HMSLocalVideoStats  This class contains stats related  local video track.  ```kotlin data class HMSLocalVideoStats( \t// Round trip time observed since previous report. \tval roundTripTime: Double?, \t// Total bytes sent   track   current session. \tval bytesSent: Long?, \t// Outgoing bitrate   track observed since previous report  Kb/s. \tval bitrate: Double?, \t// Resolution  video frames  sent. \tval resolution: HMSVideoResolution?, \t// Frame rate  video frames  sent (FPS). \tval frameRate: Double? ) : HMSStats.HMSLocalStats()  data class HMSVideoResolution(   var width: Int,   var height: Int, )  ```  ## HMSRemoteAudioStats  This class contains stats related  remote audio track.  ```kotlin data class HMSRemoteAudioStats( \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550. \tval jitter: Double?, \t// Total bytes received   track   current session. \tval bytesReceived: Long?, \t// Incoming bitrate   track observed since previous report  Kb/s. \tval bitrate: Double?, \t// Total packets received   track   current session. \tval packetsReceived: Long?, \t// Total packets lost   track   current session. \tval packetsLost: Int,  ) : HMSStats.HMSRemoteStats() ```  ## HMSRemoteVideoStats  This class contains stats related  remote video track.  ```kotlin data class HMSRemoteVideoStats( \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550. \tval jitter: Double?, \t// Total bytes received   track   current session. \tval bytesReceived: Long?, \t// Incoming bitrate   track observed since previous report  Kb/s. \tval bitrate: Double?, \t// Total packets received   track   current session. \tval packetsReceived: Long?, \t// Total packets lost   track   current session. \tval packetsLost: Int? \t// Resolution  video frames  received. \tval resolution: HMSVideoResolution? \t// Frame rate  video frames  received (FPS). \tval frameRate: Double?  ) : HMSStats.HMSRemoteStats() ```  ## Hierarchy  Here's  hierarchy   sealed classes  stats  ```kotlin sealed class HMSStats {     sealed class HMSLocalStats : HMSStats()      sealed class HMSRemoteStats : HMSStats() } ``` ",
        "platformName": "Android",
        "objectID": "/android/v2/advanced-features/webrtc-stats"
    },
    {
        "title": "release-notes.mdx",
        "link": "/android/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "v2.5.5 - 2022-12-17",
            "Fixed",
            "v2.5.4 - 2022-12-15",
            "Added",
            "Fixed",
            "Deprecated",
            "v2.5.3 - 2022-12-7",
            "Added ",
            "Fixed",
            "v2.5.2 - 2022-11-25",
            "Added",
            "Fixed",
            "v2.5.1 - 2022-10-28",
            "Added",
            "Changed",
            "v2.5.0 - 2022-10-14",
            "Added",
            "v2.4.9 - 2022-09-30",
            "Added",
            "Changed",
            "Fixed",
            "v2.4.8 - 2022-08-12",
            "Fixed",
            "v2.4.7 - 2022-07-28",
            "Fixed",
            "Changed",
            "v2.4.6 - 2022-07-15",
            "Fixed",
            "v2.4.5 - 2022-07-14",
            "Fixed",
            "Added",
            "v2.4.4 - 2022-07-07",
            "Fixed",
            "v2.4.3 - 2022-07-01",
            "Fixed",
            "Added",
            "v2.4.2 - 2022-06-22",
            "Fixed",
            "Added",
            "Changed",
            "v2.4.1 - 2022-06-14",
            "Fixed",
            "Added",
            "v2.4.0 - 2022-06-09",
            "Fixed",
            "Changed",
            "Added",
            "v2.3.9 - 2022-05-18",
            "Fixed",
            "Changed",
            "v2.3.7 - 2022-05-09",
            "Fixed",
            "Added",
            "2.3.6 - 2022-04-28",
            "Fixed",
            "Added",
            "2.3.5 - 2022-04-20",
            "Fixed",
            "Added",
            "2.3.4 - 2022-03-28",
            "Fixed",
            "Added",
            "2.3.3 - 2022-03-17",
            "Fixed",
            "Added",
            "2.3.2 - 2022-03-14",
            "Fixed",
            "2.3.1 - 2022-02-25",
            "Fixed",
            "2.3.0 - 2022-02-23",
            "Added",
            "Changed",
            "Fixed",
            "2.2.9 - 2022-02-08",
            "Added",
            "Changed",
            "Fixed",
            "2.2.8 - 2022-01-24",
            "Added",
            "Changed",
            "2.2.7 - 2022-01-18",
            "Changed",
            "2.2.6 - 2022-01-14",
            "Added",
            "Fixed",
            "2.2.5 - 2021-12-29",
            "Fixed",
            "Added",
            "Changed",
            "2.2.4 - 2021-12-20",
            "Fixed",
            "Added",
            "2.2.3 - 2021-12-03",
            "Fixed",
            "Added",
            "2.2.2 - 2021-11-25",
            "Added",
            "Fixed",
            "Fixed",
            "2.2.0 - 2021-11-19",
            "Fixed",
            "Added",
            "2.1.9 - 2021-11-11",
            "Added",
            "Fixed",
            "2.1.8 - 2021-11-03",
            "Added",
            "Fixed",
            "2.1.7 - 2021-11-01",
            "Changed",
            "2.1.6 - 2021-10-28",
            "Breaking Changes",
            "Fixed",
            "Added",
            "2.1.5 - 2021-10-27",
            "Fixed",
            "2.1.4 - 2021-10-18",
            "Fixed",
            "Added",
            "2.1.3 - 2021-10-04",
            "Fixed",
            "Added",
            "Updated",
            "2.1.2 - 2021-09-20",
            "Fixed",
            "2.1.1 - 2021-09-10",
            "Fixed",
            "2.1.0 - 2021-09-03",
            "Fixed",
            "2.0.9 - 2021-08-27",
            "Added",
            "Changed",
            "2.0.8 - 2021-08-17",
            "Added",
            "Changed",
            "2.0.7 - 2021-08-06",
            "Fixed",
            "2.0.6 - 2021-07-27",
            "Fixed",
            "Added",
            "2.0.5 - 2021-07-20",
            "Added",
            "2.0.4 - 2021-07-09",
            "Fixed",
            "Added",
            "2.0.2 - 2021-06-30",
            "Fixed",
            "2.0.1 - 2021-06-29",
            "Added",
            "Fixed",
            "2.0.0-beta02 - 2021-06-24",
            "Added",
            "2.0.0-beta01 - 2021-06-16",
            "Added",
            "2.0.0-alpha04 - 2021-06-04",
            "Added"
        ],
        "content": "--- title: Release Notes nav: 15 description: Release Notes  100ms Android SDK --- ## v2.5.5 - 2022-12-17 ### Fixed * `TRACK_REMOVE` update   sent  screen-share   new peer  joined  room  screen-share  already  progress  ## v2.5.4 - 2022-12-15 ### Added * [Auto Simulcast](https://www.100ms.live/docs/android/v2/migrations/surfaceview-migration) - HMSVideoView  used, changes  simulcast layer based   size automatically  reduce bandwidth consumption. * [Bulk role change](https://www.100ms.live/docs/android/v2/features/change-role#bulk-role-change) - A list  roles   provided  change several peers   role   single one  one API call.  ### Fixed * Only  single update  sent   local peer   role  changed instead  two.  ### Deprecated * The method `changeRole`  now `changeRoleForPeer`. No functional changes.  ## v2.5.3 - 2022-12-7 ### Added  * HMSVideoView - Easy  use abstraction  SurfaceViewRenderer ### Fixed * Simulcast bug   layers   added   HMSRemoteVideoTrack * Fix  audio capture  picking  correct sampling rate  mic automatically   ## v2.5.2 - 2022-11-25 ### Added * Simulcast. * Quality limitation reasons   local video track. * Extra Analytics. * Current  past sdks  2.4.0  also deployed  Maven Central along  jitpack.  ### Fixed * A bug  degraded tracks   recover   certain situation. * Consistent naming  HLS player stats across platforms.  ## v2.5.1 - 2022-10-28 ### Added * Updated webrtc  fix hardware simulcast resolution  changing  layers. * Screenshare now gets unpublished   role   peer  changed  one  can't.  ### Changed * Messages   sent via REST api now arrive   null sender peer,  previously    sent  all. `senderPeer`  HMSMessages can  null now.  ## v2.5.0 - 2022-10-14 ### Added * SFN module  can  used  receive periodic player stats  HLS playback * Option  `HMSVideoTrackSettings`  force device  use `software decoder`  ## v2.4.9 - 2022-09-30 ### Added * Session Metadata API(alpha version) * Added better Telemetrics  analytics * Initial states(Muted/Unmuted)  local video  audio track can  mentioned  joining using  `HMSVideoTrackSettings`  `HMSAudioTrackSettings`   builder  `HMSSDK`  ### Changed * Deprecated `ROOM_NAME_UPDATED`  `ROOM_ID_UPDATED` types  `HMSRoomUpdate`     longer used * Updated WebRTC  m104  m97  ### Fixed * SDK calling `leave()`   removed   room leading  `peer.leave.failure` webhook along  `peer.leave.success` * LetterBoxing(Black borders  top  bottom) observed  sharing screen  landscape mode * NPE fix  performance measurement  calling join   websocket connection * Send offline analytics events   right environment  ## v2.4.8 - 2022-08-12 #### Fixed * `removeSink` will  stop  download   `videoTrack`    sinks attached    removed * Stop camera capturer  calling `leave`  Preview page * Setting  correct audio output device   Bluetooth headset   `connecting` state  ## v2.4.7 - 2022-07-28 #### Fixed * Calling `switchCamera` API leads trigerring  `onSuccess` callback twice * `onRoomUpdate`  type `HMSRoomUpdate.ROOM_PEER_COUNT_UPDATED`  getting called  peer count changes   room * Peer  able  publish tracks  updated  webrtc  HLS  rejoins   reconnection  webrtc Mode  #### Changed * `HMSHLSConfig`  now  optional parameter  calling `startHLSStreaming`  `stopHLSStreaming` * The `meetingUrl` parameter  creating `HMSHLSMeetingURLVariant` instance  `HMSHLSConfig`  optional now. If nothing  provided HMS system will take  default meetingUrl  starting HLS stream * `changeRoleForce` permission  `HMSRole`  now removed   longer used * `recording` permission  `HMSRole`  now broken  - `browserRecording`  `rtmpStreaming` * `streaming` permission  `HMSRole`  now `hlsStreaming`  ## v2.4.6 - 2022-07-15 #### Fixed * Checking  targetApiVersion along  Device SDK version  initializing Bluetooth manager  ## v2.4.5 - 2022-07-14 #### Fixed * `peer_list_time` calculation * Audio device switch issues * Bluetooth issues  HLS mode * Removed additional Bluetooth permission  SDK  android 30  above  #### Added * `Join response time`  analytics * Support  enable  disable webrtc's AutoResize option  publishing video track  ## v2.4.4 - 2022-07-07 #### Fixed * Web-Socket reconnection  working  non webrtc peers  ## v2.4.3 - 2022-07-01 #### Fixed * `cameraFacing` field  `HMSVideoTrackSettings`  getting updated  calling `switchCamera` API * Issue  'peer   joined' error  joining  SDK reconnection * Automatic proguard rules  fixed. No app-side proguard configuration  required  production builds  100ms.  #### Added * APIs  stream device audio  different modes * APIs  view  change  output speaker selected   SDK  playout * Analytics events  measure `retry` counts  JOIN calls  ## v2.4.2 - 2022-06-22 #### Fixed * Webrtc  able  find Camera  Android Camera Manager leading  `CantAccessCaptureDevice` error  calling preview  join API * Assertion Crash  Network Monitor  trying  create new instane  HMSSDK   call   progress * Chances  Multiple socket connection getting created incase   network disconnection  preview screen  join gets called   time  #### Added * `setAudioMode` API  change  Audio  mode manually  in-call volume  media volume * Retry  5xx  429 errors   RPC calls * Analytics events  measure `peer-list` time * Join optimization   sending offer  non webrtc peers  #### Changed * Made TrackError  switching camera non-terminal * Removed recreation  Lists happening  SDK, leading  slowness  calling certain APIs  big rooms. Affected APIs   change  :- `getPeers()` , `getRemotePeers()`, `getPlugins()` - now return `List` instead  `Array`  ## v2.4.1 - 2022-06-14 #### Fixed * Made SDK compatible  compileSDKversion 30  reducing version  Room lib  2.3.0  #### Added * Analytics events  measure join  preview time * Retry  5xx errors  internal join message  ## v2.4.0 - 2022-06-09 #### Fixed * Update  width  height  screen-share video track  published based   rotation  device * Crash fix  Android 12  app   provide Bluetooth Connect permission. SDK now sends  non-terminal error * Crash fix  Android 12  calling  `HMSScreenCaptureService.getStopScreenSharePendingIntent` API  starting screenshare * Un-necessarily sending `HLS_RECORDING_STATE_UPDATED`  `onRoomUpdate` callback  HLS Streaming  enabled  #### Changed * Socket close  cancel,  ensures  leave api   wait  server response hence initiating internal teardown immediately  #### Added * Offline storage  Analytics event. Events    send immediately via websockets   persisted   db  will  sent later  connection returns * Remove height/width check  rtmp  browser recording  SDK * RemoveRtcStatsObserver API  added  ## v2.3.9 - 2022-05-18 #### Fixed * Screen Share  starting  highest resolution * Serverside Subscribe degradation fix - marking track  degraded  removeSink  called * IO Exception Crash  Android 12,   alarm manager  Log Util * NPE Crash fix  webrtc stats monitor * Crash  LogUtils  #### Changed * `serverReceiveTime` data type  `HMSMessage`    type `Long` instead  `Date`  ## v2.3.7 - 2022-05-09 #### Fixed * A crash   rare cases  analytics events   sent   room  ending.  #### Added * `sessionId`   new parameter  HMSRoom. It  updated   current sessionId   room  joined.  ## 2.3.6 - 2022-04-28 #### Fixed * Fixed bug: Local peer  null  stats callbacks * Fixed bug: `onSuccess` callback  called  `preview`/`join`  network goes  BEFORE ws-connect  comes back  sometime  #### Added * Server Side Subscribe Degradation  ## 2.3.5 - 2022-04-20 #### Fixed * Crash fix: `InvalidTokenFormat` exeception. This   thrown   `onError` callback instead * Fixed bug: Sending `TRACK_DEGRADED`   required   cases  #### Added * Apps can now add resolution(w*h)  starting `RTMP` Streaming * SDK   capability  write logs   filesystem  devices. Apps can enable  disable  initializing  SDK  ## 2.3.4 - 2022-03-28 #### Fixed * HLS recording status  always updated  stopped. * Rare crash  cameras  unavailable   seemed   app like none exist.  #### Added * Network Quality  preview. [Network quality](../features/network-quality-reports) reports can now  requested   preview screen. Use  returned value  determine    suggest people's internet   slow  join  video etc. * Network Quality  calls. [Peer Network Quality](../advanced-features/peer-network-quality) updates  now received   call. Use   show  strong  peer's internet    call.  ## 2.3.3 - 2022-03-17 #### Fixed * `Leave`  finishing  SDK   reconnection state. Hence  `join` calls    getting queued   called    HMSSDK instance * Improved subscribe degradation   new add sinks  handled properly  SDK  already  degraded state * Crash fix  starting/stopping HLS  `HlsStartRecording`  null   #### Added * Added Hls Recording  initial PeerList * Ignore `room-state` updates  joining  ## 2.3.2 - 2022-03-14 #### Fixed * ERROR Analytics events   sent  ## 2.3.1 - 2022-02-25 #### Fixed * NPE  `OnPeerUpdateManager`  sometimes `room-sate` message comes  `policy-change` message. Ignoring  first `room-sate` message   cases  ## 2.3.0 - 2022-02-23 #### Added * `HlsRecordingConfig`  `HMSHLSConfig` object * `onPeerUpdate`  `onRoomUpdate` callbacks  'HMSPreviewListener'  get info   room  Preview screen *  Server will send  timeout error   peer stays  preview page   along *  Calling `preview` API  without  `leave` call  result   error  #### Changed * Synced leave function * Make `leave` API call  server sync instead  async  #### Fixed * Socket  now cancelled instead  close,   causing queued messages   processed after   teardown leading  crashes  `Failed  set remote offer sdp: Called  wrong state: closed` error * NPE  `sendMessage` API  ## 2.2.9 - 2022-02-08 #### Added * Local track updates like mute/unmute will  send  well via `onTrackUpdate` * Added `startedAt`  `stoppedAt` field  `Browser`  `SFU` recording  #### Changed * Upgraded kotlin version  `1.6.10` * Upgraded webrtc version  `m97` * `customerUserID` can  null  #### Fixed * Crash Fix  joining without mic permission * Stop screenshare  calling `leave()` API  screenshare  going on * Potential fix  `ClassCastException`  accesing `localPeer`  publishing * Fix  `HMSException: Network connection lost` crash  connection failed  joining * Improved time taken  YUV conversion  virtual background * Fixed background image overlay   ## 2.2.8 - 2022-01-24  #### Added  -   Added APIs  support  `Virtual Background` -   Use  following dependency along  main 100ms SDK dependency  support VB plugin     ```         implementation 'com.github.100mslive.android-sdk:virtualBackground:2.2.8'     ```  #### Changed  -   Gradle Dependency  add core 100ms SDK features  changed  following     ```         implementation 'com.github.100mslive.android-sdk:lib:x.x.x'     ```  ## 2.2.7 - 2022-01-18  #### Changed  -   Downgrading `androidx.core:core-ktx`  `1.6.0`  support apps  compile sdk version < 31.  ## 2.2.6 - 2022-01-14  #### Added  -   Added analytics  collect whether device  using h/w  s/w AEC -   Added `isTerminal` property  `HMSException` - Use  property  determine whether peer can continue   room  not -   Added analytics  collect info  `could  find FRONT camera` issue -   Added analytics events  phone call interruptions -   Queue-ing analytics events  maybe getting missed  websocket  present  #### Fixed  -   Bug fix - All Remote peers get muted  local peer   local peer receives  phone call   moment     one else   room -   `onReconnection` will   send continuously & will  sent    start. It   sent continously  SDK  retrying. -   NPE crash fix  `OnPeerUpdateManager`  `SDKStore.getRoom`  ## 2.2.5 - 2021-12-29  #### Fixed  -   OOM Crash due  printing  `SDKStore` object  `HMSSpeaker` -   Clear local track mute status   sdk  cleared -   Fix  `java.lang.IllegalStateException: No camera device found  FRONT` crash - Now  peer will  able  join  room    videoTrack  #### Added  -   An optional `HMSActionResultListener`  added  `switchCamera` API - errors will  sent back  app   errors come up -   Send  local Screenshare Track  app  `onTrackUpdate` -   Added new analytics event `videopresence.failed`  cases  SDK  find  camera  capture  #### Changed  -   Device permission denied errors   terminal errors anymore.     Clients will get  `onJoin`  `onPreview` callback even  audio  video tracks   created   SDK due   issues   capture device.     `onError` callbacks will also  called along    callbacks  ## 2.2.4 - 2021-12-20  #### Fixed  -   RTMP updates  fired  server notifies -   `switchCamera` API   need  Coroutine scope   called from  #### Added  -   APIs  start/stop HLS Streaming (beta version) -   `HLS_STREAMING_STATE_UPDATED` enum  `HMSRoomUpdate`  notify changes  HLS streaming status  `HMSRoom` -   Beta version  `getStats()` API -   `startScreenShare` API now take  optional `Notification`  app  can  used  stop  screenshare  ## 2.2.3 - 2021-12-03  #### Fixed  -   `UninitializedPropertyException` crash  calling `acceptChangeRole` due  socket  getting initialized -   Permission Errors  non terminal now  #### Added  -   Subscribe Degradation events  sent  analytics  ## 2.2.2 - 2021-11-25  #### Added  -   `changeMetadata` API  change  `metadata`  `HMSPeer`. This change will  updated    will  persistent  #### Fixed  -   `HMSRoomUpdate` will  trigerred   local peer  initiated  start  stop Recording -   The room's Recording status will  checked upon reconnection   peer -   Screenshare   unpublished   reconnection mode -   `setVolume()` API  `RemoteAudioTrack` can now take  value  0.0  10.0  #### Fixed  -   Analytic fixes -   Fix issue  self role change   calling `roleChange` twice -   Remove token  URL Params  ## 2.2.0 - 2021-11-19  #### Fixed  -   Analytic fixes -   Fix issue  self role change   calling `roleChange` twice -   Remove token  URL Params  #### Added  -   Add Audio Recording errors  Analytics -   Add  instrumentation tests  ## 2.1.9 - 2021-11-11  #### Added  -   Beta version  `screenshare` API -   `Leave` API now takes   optional parameter  return `success`  `error` callbacks  #### Fixed  -   `Class cast exception` crash fix  End Room API  called  server  `requested_by` peer  null  ## 2.1.8 - 2021-11-03  #### Added  -   `getRoom` API  `HMSSDK`  will return  `HMSRoom` instance   user  joined, `NULL` otherwise  #### Fixed  -   Crash fix - `IllegalArgumentException: Receiver  registered`  calling leave immediately  joining -   `Already JOINED` HMSException will now  coming  `onError`  `HMSUpdateListener` instead   throwing  fatal Exception -   RTMP Recording fixes  ## 2.1.7 - 2021-11-01  #### Changed  The timeouts   websocket operations   server   increased  5 seconds  11 seconds.  If  join  failing   lack  feedback,    larger margin within   succeed now.  ## 2.1.6 - 2021-10-28  #### Breaking Changes  `requestedBy: HMSPeer`  `HMSChangeTrackStateRequest`  now nullable. It   mute   person tried  mute  unmute someone  immediately left  room.  #### Fixed  -   Check  Role change  remote peers  reconnection -   Return correct value  isPlaybackAllowed -   HMSTrack  null  local peer  HMSSpeaker -   `onSuccess` callback   `acceptChangeRequest` method  never  called. This will now  called appropriately.     This request can safely  ignored   SDK already muted  peer  may  helpful  recognizing   mute came externally.     A check like  following  now required   `onChangeTrackStateRequest`:  ```kotlin              (details.track.isMute != details.mute) {               // Process ChangeTrackMuteRequest             } ```  #### Added  -   Added `customerId`  `description`  HMSPeer's tostring(). -   `HMSChangeTrackStateRequest`  now sent even  peers  muted. Previously,   remote peer requested  peer  mute,     ChangeTrackStateRequest -   The way packet loss  measured  track degradation  changed  ## 2.1.5 - 2021-10-27  #### Fixed  -   Crash fix  \"MediaStream   disposed\" -   happen  multiple peers leave  join  large room  ## 2.1.4 - 2021-10-18  #### Fixed  -   Videos send  Pixel 3 device  distorted -   UninitializedPropertyAccessException crash fix  leave -   Using subscribe degradation  set   local peer's role  #### Added  -   `HMSTrack` obj  `HMSSpeaker`  ## 2.1.3 - 2021-10-04  #### Fixed  -   Reconnection improvements - reconnection time  reduced -   Analytics fix  #### Added  -   Ability  start/stop  RTMP Streaming  Recording -   Ability  change  mute status  one  many remote HMSTrack   peers   particular role,   tracks   particular source, type  source AND type. -   Ability  use either software  hardware acoustic echo cancellation   application layer  #### Updated  -   Updated  latest m94 release  webrtc  ## 2.1.2 - 2021-09-20  #### Fixed  -   Donot degrade videos  reconnection -   SendTrack updates  reconnection   new peer joins  SDK  reconnection -   Muting new tracks   getting added  SDK mutes  remote tracks  interruption  ## 2.1.1 - 2021-09-10  #### Fixed  -   SDK Reconnection  network disconnection improvement -   NPE Crash fix  preview screen  case  SDK reconnection -   Fix: onPreview getting  called twice incase  SDK reconnection  ## 2.1.0 - 2021-09-03  #### Fixed  -   Subscribe Degradation improvements -   sendBroadcast API now accepts  type  HMSMessageType -   Concurrent modification Exception Crash fix  ## 2.0.9 - 2021-08-27  #### Added  -   Support  self role change  #### Changed  -   Updated webrtc lib  latest -   Bug fix(can reuse   instance  hmsSDK  rejoin  room) -   Few memory leak -   IMP --> With  release  need  add  dependancy  webrtc library. Anyone migrating  previous versions, PLEASE REMOVE  webrtc dependancy   app's build.gradle  ## 2.0.8 - 2021-08-17  #### Added  -   Sending private  group messages APIs -   Remove peer   room API -   Remote mute peer API -   End room API  #### Changed  -   send(message:) API renamed  sendBroadcastMessage  ## 2.0.7 - 2021-08-06  #### Fixed  -   Bug fixes  subscribe degradation -   Bug fixes  role change -   Bug fixes  onReconnection handling -   Bug fix  incoming phone call handling  ## 2.0.6 - 2021-07-27  #### Fixed  -   Bugs  change role  #### Added  -   Support  subscribe degradation  ## 2.0.5 - 2021-07-20  #### Added  -   HMSSpeaker contains HMSPeer instead  peerId -   Support  changing  roles  ## 2.0.4 - 2021-07-09  #### Fixed  -   Crash fixes  leave  network change -   Audio Routing  earpiece  interruption -   No audio  BT headset  connecting disconnecting error -   Check  role allows publishing  preview -   Release camera  leave  #### Added  -   SDK will handle  interruptions like incoming voice  VoIP calls -   Pass HMSRole  client via HMSPeer  ## 2.0.2 - 2021-06-30  #### Fixed  -   Made `hmsSDK.getLocalpeer()` nullable -   Fix logging bug -   Fix bug  `ontrackUpdate` came  RTCTrack  ## 2.0.1 - 2021-06-29  #### Added  -   Retry  join call returns server error  5xx  429 -   `isTerminal` property  analytics  #### Fixed  -   NPE Crash  SDKStore.getLocalPeer() -   Unsupported notification message crash -   Call onError callback  webrtc subscription failure  ## 2.0.0-beta02 - 2021-06-24  #### Added  -   Preview API -   Enabled Opus dtx  audio -   Added retry  INIT api call  ## 2.0.0-beta01 - 2021-06-16  #### Added  -   Proper error messages  client  server -   Handling  bad network conditions  retrying inside SDK -   Audio Manager  part   SDK -   Callbacks  `onReconnecting`  `onReconnected` -   Added Analytics  track issues  ## 2.0.0-alpha04 - 2021-06-04  #### Added  -   Simplified SDK interfaces  can power  fully-featured video conferencing application     -   `join`     -   `leave`     -   `listeners`  tracks/peers/other data -   Features  covered   release      -   Handling network disconnections \\(disconnect  wi-fi  4g ends  call\\)     -   Handling subscription network degradations     -   Handling second order publish network degradations     -   Detailed analytics     -   Recording  -   Please contact @akash goswami   Slack channel     questions",
        "platformName": "Android",
        "objectID": "/android/v2/changelog/release-notes"
    },
    {
        "title": "log_utils.mdx",
        "link": "/android/v2/debugging/log_utils",
        "keywords": [],
        "headings": [
            "Save Logs from SDK in Local Storage",
            "Implementation Details",
            "Fetching the Log Directory From SDK"
        ],
        "content": "--- title: Writing HmsLogs  Local Storage nav: 8.03 ---  ## Save Logs  SDK  Local Storage  Logs  `hmsSDK` can  saved   file  local storage  setting  settings  `HmsLogSettings`  Builder  `hmsSDK` instance. In  , whenever    log printed  hmsSDK  will  saved   seperate file.    > 💡 Each new meeting will   seperate `session log`  file name  `session-log-${room_id}` file,  \"${room_id}\"   placeholder   ### Implementation Details  HmsLogSettings must  passed   parameter  hmsSdk builder object  instantiation.  Params:  `maxDirSizeInBytes` - max dir size  bytes   maintained  /logs default - set  10mb. <br /> > 💡 Note :   directory size exceeds  `maxDirSizeInBytes` provided  client,   will delete  oldest files next time user starts  meeting  make room  new ones. <br /><br /> A background service  also started   day  make sure  size  directory never exceeds  desired size.  `isLogStorageEnabled` - set  true  /logs    saved else false default - false. <br /> `level` - set log level  logs  observe default - HMSLogger.Debug <br />   <Tabs id=\"save-log-dir\" items={['Kotlin', 'Java']} />  <Tab id='save-log-dir-0'>  ``` kotlin       private val hmsLogSettings : HMSLogSettings = HMSLogSettings(LogAlarmManager.DEFAULT_DIR_SIZE,true)      val hmsSDK = HMSSDK         .Builder(application)         .setLogSettings(hmsLogSettings)         .build()  ``` </Tab>  <Tab id='save-log-dir-1'>  ``` java       HMSLogSettings hmsLogSettings = new HMSLogSettings(LogAlarmManager.DEFAULT_DIR_SIZE,true, HMSLogger.LogLevel.DEBUG);      HMSSDK hmssdk = new HMSSDK.Builder(application)     .setTrackSettings(hmsTrackSettings)     .build();  ``` </Tab>  > 💡 whenever    crash  `hmsSDK` ,  will  logged   file named  `crash-log-${room_id}`  ${room_id}   placeholder.  ## Fetching  Log Directory From SDK  It  look something like this:  ```kotlin  import live.hms.video.utils.LogUtils  ```  <Tabs id=\"fetch-log-dir\" items={['Kotlin', 'Java']} />  <Tab id='fetch-log-dir-0'>  ```kotlin        val dir : File = LogUtils.getDirPath(context = context) ``` </Tab> <Tab id='fetch-log-dir-1'>  ```java        File dir = LogUtils.getDirPath(context) ```  </Tab>",
        "platformName": "Android",
        "objectID": "/android/v2/debugging/log_utils"
    },
    {
        "title": "audio-mode.mdx",
        "link": "/android/v2/features/audio-mode",
        "keywords": [],
        "headings": ["Switch audio mode"],
        "content": "---\r title: Audio Mode Change\r nav: 13\r ---\r API  change Audio Mode manually. The  common use-case   toggle  (in-call volume/media volume)   call volume [AudioManager.MODE_IN_COMMUNICATION] media volume [AudioManager.MODE_NORMAL]\r \r ## Switch audio mode\r \r ```kotlin\r fun setAudioMode(audioMode : Int)\r ```\r \r \r * Types  audio mode. [Audio Modes  Android](https://developer.android.com/reference/android/media/AudioManager#MODE_IN_COMMUNICATION) \r * MODE_NORMAL - Normal audio mode:  ringing   call established. (common one!)\r * MODE_RINGTONE - Ringing audio mode. An incoming   signaled.\r * MODE_IN_CALL - In call audio mode. A telephony call  established.(common one!)\r * MODE_IN_COMMUNICATION - In communication audio mode. An audio/video chat  VoIP call  established.\r * MODE_CALL_SCREENING - Call screening  progress. Call  connected  audio  accessible  call screening applications   audio use cases  still possible\r \r invoke  method  appropriate option,  switch audio mode manually\r \r \r <Tabs id=\"switch-device\" items={['Kotlin', 'Java']} />\r \r <Tab id='switch-device-0'>\r \r ```kotlin\r         hmsSDK.setAudioMode(AudioManager.MODE_NORMAL)\r ```\r </Tab>\r <Tab id='switch-device-1'>\r \r ```java\r         hmsSDK.setAudioMode(AudioManager.MODE_NORMAL);\r ```\r \r </Tab>",
        "platformName": "Android",
        "objectID": "/android/v2/features/audio-mode"
    },
    {
        "title": "audio-output-routing.mdx",
        "link": "/android/v2/features/audio-output-routing",
        "keywords": [],
        "headings": [
            "Switch audio focus to another device",
            "Adding a listener",
            "Get current focussed device"
        ],
        "content": "---\r title: Audio Output Routing\r nav: 13\r ---\r \r Audio Routing can  helpful   case  user wants  switch output  device    default focussed one  SDK.\r \r ## Switch audio focus  another device\r \r \r ```kotlin\r fun switchAudioOutput(audioDevice: AudioDevice)\r ```\r \r \r * Types  audio routing supported.\r * SPEAKER   - route audio  device speaker\r * EARPIECE  - route audio  device earpiece\r * WIRED     - route audio  connected wired device\r * BLUETOOTH - route audio  connected bluetooth device\r * AUTOMATIC - automatic routing\r \r invoke  method  appropriate option ,  switch  output   device\r \r `audioDevice`   [AudioDevice] type   audio   routed.\r \r <Tabs id=\"switch-device\" items={['Kotlin', 'Java']} />\r \r <Tab id='switch-device-0'>\r \r ```kotlin\r         hmsSDK.switchAudioOutput(AudioDevice.SPEAKER_PHONE)\r ```\r </Tab>\r <Tab id='switch-device-1'>\r \r ```java\r         hmsSDK.switchAudioOutput(AudioDevice.SPEAKER_PHONE);\r ```\r \r </Tab>\r \r ## Adding  listener\r \r ```kotlin\r fun setAudioDeviceChangeListener(audioManagerDeviceChangeListener: AudioManagerDeviceChangeListener)\r ```\r add  listener  get updates whenever  device  removed  attached   device.\r `audioManagerDeviceChangeListener` -  listener   passed   able  listen  device updates.\r \r callback methods : \r 1. `onAudioDeviceChanged` -  method  invoked  output device  changed.\r 2. `onError` -  method  invoked     error  switching  output device.\r \r \r <Tabs id=\"device-change-listener\" items={['Kotlin', 'Java']} />\r \r <Tab id='device-change-listener-0'>\r \r ```kotlin\r \r         hmsSDK.setAudioDeviceChangeListener(object :\r             HMSAudioManager.AudioManagerDeviceChangeListener {\r             override fun onAudioDeviceChanged(\r                 device: HMSAudioManager.AudioDevice?,\r                 listOfDevices: MutableSet<HMSAudioManager.AudioDevice>?\r             ) {\r               \r             }\r \r             override fun onError(error: HMSException?) {\r                 HMSLogger.d(TAG, \"error : ${error?.description}\")\r             }\r         })\r \r ```\r </Tab>\r <Tab id='device-change-listener-1'>\r \r ```java\r \r \r         hmsSDK.setAudioDeviceChangeListener(new HMSAudioManager.AudioManagerDeviceChangeListener() {\r             @Override\r             public void onAudioDeviceChanged(HMSAudioManager.AudioDevice audioDevice, Set<HMSAudioManager.AudioDevice> listOfDevices) {\r                 \r             }\r \r             @Override\r             public void onError(HMSException e) {\r \r             }\r         });\r \r \r ```\r \r </Tab>\r \r \r ## Get current focussed device\r \r ```kotlin\r fun getAudioOutputRouteType() : AudioDevice\r ```\r \r invoke  method get current device type   audio output   routed.\r \r <Tabs id=\"fetch-current-device\" items={['Kotlin', 'Java']} />\r \r <Tab id='fetch-current-device-0'>\r \r ```kotlin\r         hmsSDK.getAudioOutputRouteType()\r ```\r </Tab>\r <Tab id='fetch-current-device-1'>\r \r ```java\r         hmsSDK.getAudioOutputRouteType();\r ```\r \r </Tab>\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/audio-output-routing"
    },
    {
        "title": "audio-share.mdx",
        "link": "/android/v2/features/audio-share",
        "keywords": [],
        "headings": [
            "How does audio share work",
            "How to stream device audio from the app (without a custom notification)",
            "How to add a custom notification",
            "How to change mode",
            "How to stop audio sharing"
        ],
        "content": "---\r title: Audio Share (Beta)\r nav: 12\r ---\r \r This feature   analog  screen capture,   audio.\r There may  cases   application needs  stream music   either stored   device locally     app present   device   room   peer  joined.\r \r Examples   use cases can   FM like application   host  want  stream music  also interacting  others   room   host   gaming app   want  stream music   device   room along   regular audio track.\r \r ## How  audio share work\r \r > The Audio share option  works  Android 10  above.\r \r 100ms SDK uses  [MediaProjection](https://developer.android.com/guide/topics/media/av-capture#capture_audio_playback) APIs  Android  capture  device audio  stream  along   user's regular audio track. To achieve  SDK starts  foreground service\r and starts capturing  device audio  mixes  bytes   data collected  mic,    stream contains  system music  mic data.\r \r This API gives apps  ability  copy  audio  played   apps   set  usage\r to USAGE_MEDIA, USAGE_GAME,  USAGE_UNKNOWN. (Audio  apps like YouTube etc can  captured)\r \r ## How  stream device audio   app (without  custom notification)\r \r To start streaming device audio , app needs  call  `startAudioshare` method  `HMSSDK`,  takes  three parameters -\r The first one  `HMSActionResultListener`    callback object needed  inform  `success`\r or `failure`   action\r The second one   `Intent`    result data  MediaProjection permission activity;\r the calling app must validate  result code  `Activity.RESULT_OK` before\r calling  method.\r The third one  one   modes  type `AudioMixingMode`    user wants  stream. This can  one    three available types -\r TALK_ONLY :  data captured  mic will  streamed   room\r TALK_AND_MUSIC: data captured  mic  well  playback audio  captured  device will  streamed   room\r MUSIC_ONLY:   playback audio  captured  device will  streamed   room\r \r Following   snippet    use this:\r \r <Tabs id=\"startaudioshare\" items={['Kotlin']} />\r \r <Tab id='startaudioshare-0'>\r \r ```kotlin\r // Define  result Launcher\r   var resultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->\r      (result.resultCode == Activity.RESULT_OK) {\r       val mediaProjectionPermissionResultData: Intent? = result.data\r       // Pass  intent  hmsSDK\r       hmsSDK.startAudioshare(object : HMSActionResultListener {\r         override fun onError(error: HMSException) {\r           //  error occurred\r         }\r \r         override fun onSuccess() {\r           // started successfully\r         }\r \r       } ,mediaProjectionPermissionResultData, AudioMixingMode.TALK_AND_MUSIC)\r     }\r   }\r \r     // Get  MEDIA_PROJECTION_SERVICE  launch  result launcher\r     val mediaProjectionManager: MediaProjectionManager? = requireContext().getSystemService(\r                 Context.MEDIA_PROJECTION_SERVICE\r               )  MediaProjectionManager\r     resultLauncher.launch(mediaProjectionManager?.createScreenCaptureIntent())\r \r ```\r \r It  important  note   API will  work   `resultCode`  NOT `Activity.RESULT_OK`.\r SDK will also start  foreground service   notification   starts capturing  audio   device.\r \r ## How  add  custom notification\r \r To take  look     implemented   sample app, click [here](https://github.com/100mslive/100ms-android/blob/3590777bf0a3677cb9b5001034ea9ed7087f9d90/app/src/main/java/live/hms/app2/ui/meeting/MeetingViewModel.kt#L860).\r \r `hmssdk.startAudioShare` also takes  optional fourth parameter  type notification. See   build  custom notification   android docs [here](https://developer.android.com/training/notify-user/build-notification).\r \r It  look something like this:\r Since    standard Android notification  full range  customization  available.\r \r ```kotlin\r \r   fun startScreenshare(mediaProjectionPermissionResultData: Intent?, actionListener: HMSActionResultListener) {\r     // Without custom notification\r     // hmsSDK.startAudioshare(actionListener ,mediaProjectionPermissionResultData, AudioMixingMode.TALK_AND_MUSIC)\r \r     // With custom notification\r     val notification = NotificationCompat.Builder(getApplication(), \"ScreenCapture channel\")\r       .setContentText(\"Screenshare running  roomId: ${hmsRoom?.roomId}\")\r       .setSmallIcon(R.drawable.arrow_up_float)\r       .build()\r \r     hmsSDK.startScreenshare(actionListener, mediaProjectionPermissionResultData, notification, AudioMixingMode.TALK_AND_MUSIC)\r   }\r \r ```\r \r </Tab>\r \r ## How  change mode\r \r To change  mode  user  streaming audio, call  `setAudioMixingMode` API  pass one   modes  of\r `TALK_ONLY`  `TALK_AND_MUSIC`  `MUSIC_ONLY`\r \r Note  `TALK_ONLY` mode  equivalent  regular mode,   without starting  API\r \r ## How  stop audio sharing\r \r To stop capturing device audio  streaming   room, call  `stopAudioShare` API  provide  `HMSActionResultListener`\r to listen   success  error callbacks.\r \r <Tabs id=\"stopaudioshare\" items={['Kotlin']} />\r \r <Tab id='stopaudioshare-0'>\r \r ```kotlin\r \r       hmsSDK.stopAudioshare(object : HMSActionResultListener {\r         override fun onError(error: HMSException) {\r           //  error occurred\r         }\r \r         override fun onSuccess() {\r           // stopped successfully\r         }\r \r       } )\r \r ```\r \r </Tab>\r \r > It  advisable  call `leave` API   `onDestroy()`   `activity`/ `fragment` that\r \r     started  sharing  device audio otherwise  foreground service will  running  even user kills the\r     app   Recents tab.\r \r > DONOT forget  add  following permission  foreground service\r \r ```kotlin\r \r     <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />\r \r ```\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/audio-share"
    },
    {
        "title": "auto-video-degrade-restore.mdx",
        "link": "/android/v2/features/auto-video-degrade-restore",
        "keywords": [],
        "headings": ["Responding in the app"],
        "content": "---\r title: Auto Video Degrade/Restore\r nav: 8\r ---\r \r Sometimes people  bad internet connections  everyone deserves  good meeting.\r \r When  network   slow  support audio  video conversations together,  100ms SDK can automatically turn  downloading  peer's videos,  may improve  audio quality  avoid disconnections.\r \r If  network quality improves,  videos will  restored automatically  well.\r \r To turn  subscribe degradation   room, open  [templates](https://dashboard.100ms.live/templates)   dashboard  enable   roles there. Here's  information  [templates](/android/v2/foundation/templates-and-roles).\r \r ## Responding   app\r \r All `HMSVideoTracks`, within  `HMSPeer`'s   variable called `isDegraded`.\r \r If `isDegraded`  true,   UI, treat     video  turned off. If  UI   changed,  video tile will appear black.\r \r An important note    `addSink`  `removeSink` still need   called   video even   degraded. If   done:\r 1. Subscribe degradation will  know  many videos  supposed   shown  videos may degrade, never   restored again.\r 2. In  case   video   screen    degraded, remove sink may   called   depending   code. If    happen   video  restored later   end  downloading multiple  videos     shown.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/auto-video-degrade-restore"
    },
    {
        "title": "change-role.mdx",
        "link": "/android/v2/features/change-role",
        "keywords": [],
        "headings": ["Single Peer Role Change", "Bulk Role Change"],
        "content": "---\r title: Change Role\r nav: 11\r ---\r \r Role   powerful concept  takes  lot  complexity away  handling permissions  supporting features like breakout rooms. [Learn   roles here.](../foundation/templates-and-roles)\r \r Each `HMSPeer` instance   `role` property  returns  `HMSRole` instance. You can use  property   following:\r \r 1. Check   role  allowed  publish. i.e can  send video (and   resolution)? can  send audio? can  share screen? Who can  role subscribe to? (For example student can  see  teacher's video) This  can  discovered  checking `publishSettings`  `subscribeSettings` properties.\r 2. Check  actions  role can perform. i.e can  change someone else current role, end meeting, remove someone   room. This  can  discovered  checking  `permissions` property.\r \r > 💡 Anyone   role change permission can change anyone's role. Including   role. As  version 2.0.9   Android SDK.\r \r In certain scenarios  may want  change someone's role. Imagine  audio room  2 roles \"speaker\"  \"listener.\" Only someone   \"speaker\" role can publish audio   room  \"listener\" can  subscribe. Now   point \"speaker\" may decide  nominate  \"listener\"  become  \"speaker.\" This    `changeRoleOfPeer` API comes in.\r \r You may choose  either:\r 1. [Single Peer Role Change](#single-peer-role-change): Change  role   single peer   specified one.\r 2. [Bulk Role Change](#bulk-role-change): Change  role   peers   certain role,   specified one.\r \r ## Single Peer Role Change\r \r To invoke  API  will need 4 parameters.\r \r -   `peer`: An instance  `HMSPeer`   peer  role  want  change.\r -   `toRole`: The `HMSRole` instance   target role.\r -   `force`: Whether  want  change  role without asking   give   chance  accept/reject.\r -   `hmsActionResultListener`: The `HMSActionResultListener`  will get  success  failure callback depending   result   request. Note: success  mean   role  changed, just   server accepted  request  valid.\r \r All  peers     current room  accessible via `getPeers` method  `HMSSDK` instance   successful room join.\r \r A list   available roles   current room can  accessed via  `getRoles` method  `HMSSDK`.\r \r Once     can invoke:\r \r <Tabs id=\"change-role-single\" items={['Kotlin', 'Java']} />\r \r <Tab id='change-role-single-0'>\r \r ```kotlin\r fun changeRoleOfPeer(forPeer: HMSPeer, toRole: HMSRole, force: Boolean)\r     hmsSDK.changeRoleOfPeer(peer, toRole, force, object : HMSActionResultListener {\r         override fun onSuccess() {\r             // The request  sent successfully\r         }\r \r         override fun onError(error: HMSException) {\r             // There   error.\r         }\r     })\r }\r ```\r \r </Tab>\r \r <Tab id='change-role-single-1'>\r \r ```java\r public void changeRoleOfPeer(HMSPeer peer, HMSRole toRole, Boolean force) {\r     hmsSDK.changeRoleOfPeer(peer, toRole, force, new HMSActionResultListener() {\r         @Override\r         public void onSuccess() {\r             // The request  sent successfully\r         }\r \r         @Override\r         public void onError(@NonNull HMSException e) {\r             // There   error\r         }\r     });\r }\r ```\r \r </Tab>\r \r \r \r If  peer accepted  request   role changed,  will get  update   `HMSUpdateListener`:\r \r ```kotlin\r fun onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer)\r ```\r \r with    peer  passed  targetPeer   `ROLE_CHANGED` update type.\r \r The `force` parameter  `changeRole`,  false,  basically  polite request: \"Would  like  change  role  listener  speaker?\"  can  ignored    party. The way  works    party will first receive a\r \r ```kotlin\r fun onRoleChangeRequest(request: HMSRoleChangeRequest)\r ```\r \r callback  `HMSUpdateListener`. At  point  app can choose  show  prompt   user asking  permission. If  user accepts, app  call\r \r ```kotlin\r hmsSDK.acceptChangeRole(hmsRoleChangeRequest)\r ```\r \r with   request   received  `onRoleChangeRequest`  completes  `changeRole` loop. Both parties will receive  `roleUpdated` callback     can  necessary UI updates. Now  user actually becomes  speaker   audio publishing will start automatically.\r \r Now lets imagine  newly nominated speaker   behaving nicely   want  move  back  listener without  prompt. This    `force` parameter comes in. When   set  `true`   party will  receive  confirmation `roleChangeRequest`  instead will straight away receive  new set  updated permissions  stop publishing. `roleUpdated` callback will still  fired    app can update  user's UI state.\r \r \r ## Bulk Role Change\r Bulk role change  used   want  convert  roles   list  roles,  another role.\r \r For example  peers join  room   `waiting` role   want  change    `viewers`   use  API.\r \r It takes fewer parameters    single peer. Here   method signature.\r \r ```kotlin\r fun changeRoleOfPeersWithRoles(ofRoles: List<HMSRole>,\r                                 toRole: HMSRole,\r                                 hmsActionResultListener: HMSActionResultListener)\r ```\r \r 1. `ofRoles`   list  `HMSRole` whose role   changed.\r 2. `toRole`   `HMSRole`    changed to.\r 3. `hmsActionResultListener`  onSuccess  onError callbacks   result   operation.\r \r Note    empty list  sent  `ofRoles`,  roles will  changed. This   avoid accidentally changing roles  may   intended    bots  provide recording  streaming   roles `beam`.\r \r Also bulk role changes  always forced,  dialog will  given   peer  accept it,  will just  changed immediately.\r \r Here's   method   called  change  `guest`  `waiting` roles  `host`:\r \r <Tabs id=\"change-role-bulk\" items={['Kotlin', 'Java']} />\r \r <Tab id='change-role-bulk-0'>\r \r ```kotlin\r fun changeRoles(hmsSdk: HMSSDK) {\r         val rolesToChange : List<HMSRole> = hmsSdk.getRoles()\r             .filter {\r                 it.name == \"guest\" || it.name == \"waiting\"\r             }\r         val toRole : HMSRole = hmsSdk.getRoles().find { it.name == \"host\" }!!\r \r         hmsSdk.changeRoleOfPeersWithRoles(rolesToChange, toRole, object : HMSActionResultListener {\r             override fun onError(error: HMSException) {\r                 // Error\r             }\r \r             override fun onSuccess() {\r                 // Roles changed successfully\r             }\r \r         })\r     }\r ```\r \r </Tab>\r \r <Tab id='change-role-bulk-1'>\r \r ```java\r public void changeRoles(HMSSDK hmsSdk) {\r         List<HMSRole> rolesToChange = new ArrayList<>();\r         HMSRole toRole = null;\r          (HMSRole role : hmsSdk.getRoles()) {\r             if(role.getName().equals(\"guest\") || role.getName().equals(\"waiting\")) {\r                 rolesToChange.add(role);\r             }\r             if(role.getName().equals(\"host\")) {\r                 toRole = role;\r             }\r         }\r         hmsSdk.changeRoleOfPeersWithRoles(rolesToChange, toRole, new HMSActionResultListener() {\r             @Override\r             public void onSuccess() {\r                 // Role changed\r             }\r \r             @Override\r             public void onError(@NonNull HMSException e) {\r                 // Error occurred\r             }\r         });\r     }\r ```\r \r </Tab>\r \r ### Bulk Role Change Errors  You may get  following errors  bulk role change:  | Message                                 Meaning                                                  | |----------------------------------------|----------------------------------------------------------| | invalid role                    A role   list  roles  change   exist   room.           | | target role clash  requested roles   'toRole'  also listed  one  change  'toRole' | | role    required permission  Peer    role change permission.               | | peer left                               The peer  role    changed  left.          | | role invalid                            The 'toRole'  invalid.                                 |\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/change-role"
    },
    {
        "title": "change-user-name.mdx",
        "link": "/android/v2/features/change-user-name",
        "keywords": [],
        "headings": ["Responding to name changes", "Changing the name"],
        "content": "---\r title: Change User Name\r nav: 15.0\r ---\r \r Any peer can change   name    joining  room. Before joining,  name     specified  `HMSConfig`   passed   join method. This document shows   name can  changed  joining.\r \r ## Responding  name changes\r \r Whenever  remote peer's name  changed  callback will  received  `onPeerUpdate(update : HMSPeerUpdate, peer : HMSPeer)`  `HMSUpdateListener`   `update` will   type `HMSPeerUpdate.NAME_CHANGED`.\r \r When  callback  received  UI   peer   updated  well.\r \r ## Changing  name\r \r The peer  wants  change  name  call  following method   `HMSSdk` instance.\r \r <Tabs id=\"change-name\" items={['Kotlin', 'Java']} />\r \r <Tab id='change-name-0'>\r \r ```kotlin\r val newName = \"Ashwini Shetty\"\r hmsSdk.changeName(newName, object : HMSActionResultListener {\r     override fun onSuccess() {\r \r     }\r \r     override fun onError(error: HMSException) {\r \r     }\r \r })\r ```\r \r </Tab>\r \r <Tab id='change-name-1'>\r \r ```java\r String newName = \"Ashwini Shetty\";\r hmsSdk.changeName(newName, new HMSActionResultListener() {\r     @Override\r     public void onSuccess() {\r \r     }\r \r     @Override\r     public void onError(@NonNull HMSException e) {\r \r     }\r });\r ```\r </Tab>\r \r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/change-user-name"
    },
    {
        "title": "chat.mdx",
        "link": "/android/v2/features/chat",
        "keywords": [],
        "headings": [
            "Addressing messages",
            "Sending Chat Messages",
            "Sending Broadcast Messages",
            "Sending Direct Messages",
            "Sending Group Messages",
            "Receiving Chat Messages",
            "Putting together a list of chat messages.",
            "Identifying who the message was for"
        ],
        "content": "---\r title: Chat\r nav: 8\r ---\r \r What's  video call without  able  send messages    too? 100ms supports chat  every video/audio room  create.\r \r You can see  example  every type  message (of  types below)  sent  displayed   advanced [sample app](https://github.com/100mslive/100ms-android/).\r \r ### Addressing messages\r \r * [Broadcast messages](#sending-broadcast-messages)  sent  Everyone   chat `hmssdk.sendBroadcastMessage`.\r \r * [Direct messages](#sending-direct-messages)  sent   specific person `hmssdk.sendDirectMessage`.\r \r * [Group messages](#sending-group-messages)  sent  everyone   particular `HMSRole`. Such   `hosts`   `teachers`   `students` `hmsSdk.sendGroupMessage`.\r     * Learn   [roles](../foundation/templates-and-roles)    create    backend.\r \r ### Sending Chat Messages\r \r #### Sending Broadcast Messages\r \r Want  let everyone   chat know something? Call `sendBroadcastMessage`   instance  `HMSSDK`   send  broadcast.\r \r The parameters are:\r \r 1. *textMessage*: The text   message.\r 2. *type*: The type   message, default  `HMSMessageType.CHAT`.\r 3. *hmsMessageResultListener*: An instance  `HMSMessageResultListener`.\r     - `onSuccess` will  called   server receives  request. The `onSuccess` contains  `HMSMessage`    updated `serverReceiveTime`  date containing  server timestamp.\r     - `onError` will  called   instance  `HMSException` detailing  went wrong.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error.\r >\r >It   convey whether  message  delivered   read   recipient.\r >\r >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r <Tabs id=\"broadcastmsg\" items={['Kotlin', 'Java']} />\r \r <Tab id='broadcastmsg-0'>\r \r ```kotlin\r hmssdk.sendBroadcastMessage(textMessage, HMSMessageType.CHAT,\r     object : HMSMessageResultListener {\r       override fun onError(error: HMSException) {\r       }\r \r       override fun onSuccess(hmsMessage: HMSMessage) {\r       }\r })\r ```\r </Tab>\r \r <Tab id='broadcastmsg-1'>\r \r ```java\r hmssdk.sendBroadcastMessage(textMessage, HMSMessageType.CHAT,\r     new HMSMessageResultListener() {\r         @Override\r         public void onSuccess(@NonNull HMSMessage hmsMessage) {\r             \r         }\r \r         @Override\r         public void onError(@NonNull HMSException e) {\r \r         }\r     }\r );\r ```\r </Tab>\r \r #### Sending Direct Messages\r \r Got secrets  share? Send  message directly   single person   chat   direct message. Call `sendDirectMessage`   instance  `HMSSDK`.\r \r The parameters are:\r \r 1. *textMessage*: The text   message.\r 2. *type*: The type   message, default  `HMSMessageType.CHAT`.\r 3. *peerTo*: The `HMSPeer` instance   receive message.\r 4. *hmsMessageResultListener*: An instance  `HMSMessageResultListener`.\r     - `onSuccess` will  called   server receives  request. The `onSuccess` contains  `HMSMessage`    updated `serverReceiveTime`  date containing  server timestamp.\r     - `onError` will  called   instane  `HMSException` detailing  went wrong.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error.\r >\r >It   convey whether  message  delivered   read   recipient.\r >\r >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r <Tabs id=\"directmsg\" items={['Kotlin', 'Java']} />\r \r <Tab id='directmsg-0'>\r \r ```kotlin\r fun sendDirectMessage(textMessage : String, recipient : HMSPeer) {\r     hmssdk.sendDirectMessage(textMessage, HMSMessageType.CHAT, recipient, \r         object : HMSMessageResultListener {\r             override fun onError(error: HMSException) {\r             }\r \r             override fun onSuccess(hmsMessage: HMSMessage) {\r             }\r             })\r }\r ```\r \r </Tab>\r \r <Tab id='directmsg-1'>\r \r ```java\r     private void sendDirectMessage(String textMessage, HMSPeer recipient ) {\r         hmsSdk.sendDirectMessage(textMessage, HMSMessageType.CHAT, recipient, \r             new HMSMessageResultListener() {\r                     @Override\r                     public void onSuccess(@NonNull HMSMessage hmsMessage) {\r                         \r                     }\r \r                     @Override\r                     public void onError(@NonNull HMSException e) {\r \r                     }\r         }); \r     }\r ```\r \r </Tab>\r \r \r #### Sending Group Messages\r \r Need  call attention    hosts? All  teachers? All  developers? Call `sendGroupMessage`   instance  `HMSSDK`.\r \r The parameters are:\r \r 1. *textMessage*: The text   message.\r 2. *type*: The type   message, default  `HMSMessageType.CHAT`.\r 3. *hmsRolesTo*: The `List<HMSRoles>`   [roles](../foundation/templates-and-roles)   receive  message.\r 4. *hmsMessageResultListener*: An instance  `HMSMessageResultListener`.\r     - `onSuccess` will  called   server receives  request. The `onSuccess` contains  `HMSMessage`    updated `serverReceiveTime`  date containing  server timestamp.\r     - `onError` will  called   instane  `HMSException` detailing  went wrong.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error.\r >\r >It   convey whether  message  delivered   read   recipient.\r >\r >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r <Tabs id=\"groupmsg\" items={['Kotlin', 'Java']} />\r \r <Tab id='groupmsg-0'>\r \r ```kotlin\r \r private fun sendGroupMessage(textMessage: String, recipients : List<HMSRole> ) {\r     hmssdk.sendGroupMessage(message.message, HMSMessageType.CHAT, recipients, object : HMSMessageResultListener {\r       override fun onError(error: HMSException) {\r       }\r \r       override fun onSuccess(hmsMessage: HMSMessage) {\r       }\r \r     })\r   }\r \r ```\r \r </Tab>\r \r <Tab id='groupmsg-1'>\r \r ```java\r \r private void sendGroupMessage(String textMessage, List<HMSRole> recipients) {\r     hmsSdk.sendGroupMessage(textMessage, HMSMessageType.CHAT, recipients, \r             new HMSMessageResultListener() {\r                 @Override\r                 public void onSuccess(@NonNull HMSMessage hmsMessage) {\r                     \r                 }\r     \r                 @Override\r                 public void onError(@NonNull HMSException e) {\r     \r                 }\r     });\r }\r \r ```\r \r </Tab>\r \r ### Receiving Chat Messages\r \r When  called `hmsSdk.join(config, hmsUpdateListener)`  join  room,  `HMSUpdateListener` implementation   passed    callback `fun onMessageReceived(message: HMSMessage)`.\r \r This   receive new messages  `HMSMessage`   call. It contains:\r \r ```kotlin\r \r data class HMSMessage internal constructor(\r   val message: String,\r   val type: String,\r   val recipient: HMSMessageRecipient = HMSMessageRecipient(),\r   var serverReceiveTime: Date,\r   var sender: HMSPeer\r )\r ```\r \r * message: Content   text message   text description   raw message.\r * type: Type  message sent. Default value  `HMSMessageType.CHAT`.\r * recipient: The intended recipient(s)   message   `HMSMessageRecipient`.\r * serverReceiveTime: timestamp    messaging server receives  message. Update  time    messages   comes back   server  `HMSUpdateListener.onMessageReceived`  accurate ordering    messages.\r * sender: The `HMSPeer`   sending  message.\r \r Identifying Senders:\r \r The sender   message  always contained   `sender` field  HMSMessage. This lets  get  name  peer id   message sender.\r \r Message Body:\r \r The body   message   `message`   String.\r \r Time:\r \r The time  message  sent  contained  `time`   Java Date.\r \r ### Putting together  list  chat messages.\r The UI  completely     decide! You'll also need  hold onto   received messages   want  display history.\r \r #### Identifying   message  for\r \r The HMSMessageRecipient contained   `recipient` field  `HMSMessage` lets  know   message  for.\r \r The `HMSMessageRecipient` contains:\r ```kotlin\r class HMSMessageRecipient internal constructor(\r     var recipientPeer: HMSPeer? = null,\r     var recipientRoles: List<HMSRole> = mutableListOf(),\r     var recipientType: HMSMessageRecipientType : HMSMessageRecipientType\r )\r ```\r \r recipientPeer: Only contains  peer   specific single peer   direct messaged.\r \r recipientRoles: Only contains values   group message   sent  many roles.\r \r recipientType: Will  `HMSMessageRecipientType.BROADCAST`   message  sent  everyone. If   true,   two fields will  null  empty respectively.\r \r `HMSMessageRecipientType.PEER` will  set    direct message.\r \r `HMSMessageRecipientType.ROLES` will  set    message  one  many roles.\r \r A good way  map     app   class like `Recipient` below. You  choose  copy  file   code   mapping.\r \r \r ```kotlin{17-23}:RecipientMapping.kt\r \r sealed class Recipient {\r     \r     object Everyone : Recipient() {\r         override fun toString(): String = \"Everyone\"\r     }\r     \r     data class Role(val role : HMSRole) : Recipient() {\r         override fun toString(): String =\r             role.name\r     }\r     \r     data class Peer(val peer : HMSPeer) : Recipient() {\r         override fun toString(): String = peer.name\r     }\r \r     companion object {\r         fun toRecipient(message : HMSMessageRecipient) : Recipient =\r             when(message.recipientType) {\r                 HMSMessageRecipientType.BROADCAST -> Everyone\r                 HMSMessageRecipientType.PEER -> Peer(message.recipientPeer!!)\r                 HMSMessageRecipientType.ROLES -> Role(message.recipientRoles.firstOrNull()!!)\r         }\r     }\r }\r ```\r \r So    need  convert  message    class  can set  recipient like:\r \r ```kotlin{7}\r override fun onMessageReceived(message: HMSMessage) {\r     ChatMessage(\r         message.sender.name,\r         message.serverReceiveTime,\r         message.message,\r         false,\r         recipient = Recipient.toRecipient(message.recipient)\r     )\r }\r ```",
        "platformName": "Android",
        "objectID": "/android/v2/features/chat"
    },
    {
        "title": "echo-cancellation.mdx",
        "link": "/android/v2/features/echo-cancellation",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Echo Cancellation\r nav: 14\r ---\r \r The 100ms Android SDK automatically applies  best known settings  cancel echos  devices. However  android devices  issues   hardware echo cancellation  benefit  relying   software  it.\r \r While  continually update  SDK   latest known devices    issue,  may run  one   tested  yet.\r \r If  find   certain device echos   joins  meeting despite this, turning   hardware echo cancellation may solve  problem. This    hardware echo cancellation  supported   device,  SDK prefers hardware  software.\r \r Echo cancellation settings can   applied   meeting  joined. The 100ms Android SDK provides  way  turn     builder function.\r \r > 💡 Note  option must selectively  turned   devices based   [models](https://developer.android.com/reference/android/os/Build) disabling hardware echo cancellation   devices will result   devices echoing   before.\r \r <Tabs id=\"echocancellation\" items={['Kotlin', 'Java']} />\r \r <Tab id='echocancellation-0'>\r \r ```kotlin\r  val faultyHardwareCancellationModels: HashSet<String> =\r     hashSetOf(\"phone 1\", \"phone 2\") // Get   Build.MODEL   device.\r \r  private val useHardwareEchoCancellation = !faultyHardwareCancellationModels\r                                             .contains(Build.MODEL)\r \r  private val hmsTrackSettings = HMSTrackSettings.Builder()\r     .audio(\r         HMSAudioTrackSettings.Builder()\r         .setUseHardwareAcousticEchoCanceler(useHardwareEchoCancellation).build()\r     )\r     .build()\r \r   val hmsSDK = HMSSDK\r     .Builder(application)\r     .setTrackSettings(hmsTrackSettings) // SDK uses HW echo cancellation,  nothing  set  builder\r     .build()\r ```\r \r </Tab>\r \r <Tab id='echocancellation-1'>\r \r ```java\r  private HashSet<String> faultyHardwareCancellationModels =  new HashSet<String>(){{\r      add(\"phone 1\"); // Get   Build.MODEL   device.\r      add(\"phone 2\"); // Get   Build.MODEL   device.\r  }};\r \r  private boolean useHardwareEchoCancellation = !faultyHardwareCancellationModels\r         .contains(Build.MODEL);\r \r  HMSTrackSettings hmsTrackSettings = new HMSTrackSettings.Builder()\r     .audio(new HMSAudioTrackSettings.Builder()\r         .setUseHardwareAcousticEchoCanceler(useHardwareEchoCancellation).build()\r     )\r  .build();\r \r  HMSSDK hmssdk = new HMSSDK.Builder(application)\r     .setTrackSettings(hmsTrackSettings)\r     .build();\r ```\r \r </Tab>\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/echo-cancellation"
    },
    {
        "title": "end-room.mdx",
        "link": "/android/v2/features/end-room",
        "keywords": [],
        "headings": [
            "Permissions",
            "Ending the Room",
            "How to handle an end room callback for receivers"
        ],
        "content": "---\r title: End Room\r nav: 7\r ---\r \r Done  talking   time  end  video call room  everyone  just yourself? You may  looking  end  room.\r \r ### Permissions\r \r Can't let just anyone end  video call room. First  need  create  [role](../foundation/templates-and-roles)   permissions  end  room.\r \r The permission  end  room  called `PermissionsParams.endRoom`    check   within  `HMSRole`   peer  see    it.\r \r Here's   check whether  local peer   permission  end  room:\r \r <Tabs id=\"endroom\" items={['Kotlin', 'Java 8', 'Java 7']} />\r \r <Tab id='endroom-0'>\r \r ```kotlin\r fun isAllowedToEndMeeting(): Boolean {\r     return hmsSDK.getLocalPeer()!!\r                 .hmsRole.permission?\r                 .endRoom == true\r }\r \r ```\r \r </Tab>\r \r <Tab id='endroom-1'>\r \r \r  ```java\r  private boolean hasEndRoomPermissions() {\r     return Optional.ofNullable(hmsSdk.getLocalPeer())\r             .map(HMSPeer::getHmsRole)\r             .map(HMSRole::getPermission)\r             .map(PermissionsParams::getEndRoom)\r             .orElse(false);\r  }\r  ```\r \r  </Tab>\r  \r <Tab id='endroom-2'>\r \r ```java\r private boolean hasEndRoomPermissions() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r     if(peer != null) {\r         HMSRole role = peer.getHmsRole();\r         if(role != null) {\r             PermissionsParams permissions = role.getPermission();\r             if(permissions != null) {\r                 return permissions.getEndRoom();\r             }\r         }\r     }\r     return false;\r }\r ```\r \r </Tab>\r \r `hmsSdk.getLocalPeer()` will  return null  long     preview    meeting. Since  likely  need  check  permissions     one    ok.\r \r ### Ending  Room\r \r Once  sure  peer   permissions  end  room,  can end   calling `hmsSdk.endRoom`.\r \r `endRoom` takes three parameters.\r \r 1. *message*: The String message  want  show people    forced  leave. This   good place  thank   joining  room  informing     ended.\r 2. *lock*: A Boolean  whether  want  prevent anyone  rejoining  room. If false,  will  allowed  enter  room    client called `join`. If   true,  will NOT able  join  room again.\r 3. *hmsActionResultListener*: These   callbacks  let  know whether  room  ended successfully  not. If  room   closed, `onSuccess` will  called. For  errors `onError` will  called   appropriate `HMSException`.\r \r > 💡 After calling endRoom  video calling UI   disposed   well since    peers will get  `onPeerRemoved` callback. The caller   rely   `onSuccess` callback  `endRoom`  decide   terminate  meeting room UI locally.\r \r <Tabs id=\"endroomcall\" items={['Kotlin', 'Java']} />\r \r <Tab id='endroomcall-0'>\r \r ```kotlin\r val message = \"Closing time. Thanks  coming!\"\r val lock = false\r \r hmsSDK.endRoom(message, lock, object : HMSActionResultListener{\r     override fun onError(error: HMSException) {\r     }\r \r     override fun onSuccess() {\r     }\r })\r ```\r </Tab>\r \r <Tab id='endroomcall-1'>\r \r \r ```java\r String message = \"Closing time. Thanks  coming!\";\r boolean lock = false;\r \r hmsSDK.endRoom(message, lock, new HMSActionResultListener() {\r     @Override\r     public void onSuccess() {\r         \r     }\r \r     @Override\r     public void onError(@NonNull HMSException e) {\r \r     }\r });\r ```\r </Tab>\r \r ### How  handle  end room callback  receivers\r \r Once  peer  adequate permissions calls `endRoom`,   peers   room will receive  callback  `HMSUpdateListener.onRemovedFromRoom`.\r \r The `onRemovedFromRoom` callback   single parameter called `HMSRemovedFromRoom`   following structure.\r \r ```kotlin\r data class HMSRemovedFromRoom(\r     val reason : String,\r     val peerWhoRemoved : HMSRemotePeer?,\r     val roomWasEnded : Boolean\r )\r ```\r \r > 💡 This    callback  will  triggered   peer  [removed   room](remove-peer)  well. Except  `roomEnded` will  true   entire room  ended.\r \r * *reason*: The string message detailing   room  ended.\r * *peerWhoRemoved*: The details   peer  called `endRoom`.\r * *roomWasEnded*: True   entire room  ended. False    receiving peer  removed.\r \r Clients  read  callback  show  appropriate UI.",
        "platformName": "Android",
        "objectID": "/android/v2/features/end-room"
    },
    {
        "title": "error-handling.mdx",
        "link": "/android/v2/features/error-handling",
        "keywords": [],
        "headings": [],
        "content": "--- title: Error Handling nav: 10 ---  When  make  API call  access  HMS SDK,  SDK may return error codes. ErrorCodes  returned   problem    recovered without app intervention  occurred.  These  returned  `HMSException`   `onError` callback   `HMSUpdateListner`.  Following   different error codes   returned   SDK . Before returning  error code, SDK retries  errors\\(whichever  possible\\).  | **Error Code**  **Cause   error**                                  **Action   taken**                                                                                      | | :-------------  :-----------------------------------------------------  :---------------------------------------------------------------------------------------------------------- | | **1000**        Generic Error                                           Need  debug   logs.                                                                            | | **1003**        Websocket disconnected - Happens due  network issues  Mention user  check  network connection  try    time.                                | | **2002**        Invalid Endpoint URL                                    Check  endpoint provided  calling `join`  `HMSSDK`.                                               | | **2003**        Endpoint   reachable                               Mention user  check  network connection  try    time.                                | | **2004**        Token    proper JWT format                       The token passed  calling `join`    correct format. Retry getting  new token.                  | | **3000**        Generic Error                                           Need  debug   logs.                                                                            | | **3001**        Cant Access Capture Device                              Ask user  check permission granted  audio/video capture devices.                                        | | **3002**        Capture Device   Available                         Ask user  check   audio/video capture device  connected  not.                                    | | **3003**        Capture device   use    application      Show notification  user mentioning   capturing device  used    application currently. | | **3005**        There   media  return                             For building HMSTrackSettings either audio  video track    present.                                | | **3006**        Invalid Video Settings                                  Simulcast   started without providing video settings.                                               | | **3007**        Codec  change mid call                            Codec   changed mid call.                                                                           | | **3011**        Mic Capture Failed                                      Failed  capture mic access.                                                                               | | **3012**        Bluetooth Inaccessible                                  BLUETOOTH_CONNECT permission missing .                                                                      | | **3013**        Bluetooth Inaccessible                                  General Bluetooth Permission missing.                                                                               | | **4001**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                    | | **4002**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                    | | **4003**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                    | | **4004**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                    | | **4005**        ICE Connection Failed due  network issue              Mention user  check  network connection  try    time.                                | | **5001**        Trying  join  room   already joined           Trying  join  already joined room.                                                                      | | **5002**        Trying  start Preview   already started        Trying  start Preview   already started.                                                           | | **6000**        Client failed  connect                                Client failed  connect.                                                                                   | | **6002**        webRTC Error: Error  renegotiating                 Please try again.                                                                                           | | **6004**        Json parsing failed                                     Need  debug   logs.                                                                            | | **6008**        Unable  send message                                  Cannot send message. Peer  null. The SDK must  disconnected   room.                                | | **6008**        API  supported                                       This API   support   current Android Version (Android-31).                                        | | **7001**        Platform Not Supported                                  The platform   supported  plugin                                                                    | | **7002**        Plugin Init Failed                                      Plugin initialization  failed                                                                            | | **7003**        Plugin Processing Failed                                Plugin processing failed                                                                                    | | **7004**        Plugin Add Already Going                              Plugin add  already  progress                                                                           | | **7005**        Bluetooth Sco Connection Failed                         Bluetooth headset  either  available    processing state.                                         | | **400**         Error occurred                                          This can usually happen due  token issues(Check logs   description). Need  logs  debug.      | | **401**         Error occurred                                          This can usually happen due  token issues(Check logs   description). Need  logs  debug.      | | **410**         Peer  gone                                            The peer    present   room.                                                                    | | **500**         Error occurred                                          This   general server error(Check logs   description).  Need  logs  debug.                  | ",
        "platformName": "Android",
        "objectID": "/android/v2/features/error-handling"
    },
    {
        "title": "hls.mdx",
        "link": "/android/v2/features/hls",
        "keywords": [],
        "headings": [
            "Starting ",
            "Default View",
            "Custom View",
            "Optional HLS Recording",
            "Stopping HLS",
            "Current Room Status",
            "Tips"
        ],
        "content": "--- title: HLS Streaming / Recording nav: 13.2 ---  HLS Streaming allows  scaling  millions  viewers  near real time. You can give  link  your web-app  will  converted   HLS feed   server  can  played across devices  consumption.  Behind  scenes,  will  achieved    bot join  room  stream   sees  hears. Once  feed  ready,  server will give  URL  can  played using  HLS Player.  > Note   media server serving  content   case  owned  100ms. If  looking   way  stream on YouTube, Twitch etc., please   look   RTMP streaming docs [here](./rtmp-recording).  ## Starting   HLS can  started  two ways depending   level  customization  need. 1. Default View: The simplest view  just begin  stream  default UI  parameters. 2. Custom Views: To use   UI  HLS streaming,  need  provide   web-app URL   bot  join  stream.  #### Default View  Begins  stream  default parameters.  <Tabs id=\"hls-default-view\" items={['Kotlin', 'Java']} />  <Tab id='hls-default-view-0'>  ```kotlin hmsSdkHost.startHLSStreaming(hmsActionResultListener = object : HMSActionResultListener {     override fun onSuccess() {         // hls  started successfully     }      override fun onError(error: HMSException) {         // hls failed  start  error $error     }  }) ```  </Tab>  <Tab id='hls-default-view-1'>  ```java hmsSdkHost.startHLSStreaming(null, new HMSActionResultListener() {     @Override     public void onSuccess() {         // hls  started successfully     }      @Override     public void onError(@NonNull HMSException error) {         // hls failed  start  error $error     } });  ```  </Tab>  #### Custom View To use   browser UI  HLS,  need  pass   meeting URL. The 100ms bot will open  URL  join  room, so it must allow access without  user level interaction. In  future it'll  possible  start HLS  multiple  URLs    room.  For  purpose  API supports taking   array, although currently   first element   array will  used. To distinguish  multiple URLs  additional field `metadata` can  optionally passed. The `meetingURL`  `metadata`  clubbed together  form   call  `variant`.  You can call `hmsSDK.startHLSStreaming`   `HMSHLSConfig`   array   variants. `HMSHlsRecordingConfig`  optional.  <Tabs id=\"hls\" items={['Kotlin', 'Java']} />  <Tab id='hls-0'>  ```kotlin fun hlsStreaming(meetingUrl : String, hmssdk: HMSSDK) {         val meetingUrlVariant1 = HMSHLSMeetingURLVariant(             meetingUrl = meetingUrl,             metadata = \"tag  reference\"         )          val hlsConfig = HMSHLSConfig(listOf(meetingUrlVariant1))          hmssdk.startHLSStreaming(hlsConfig, object : HMSActionResultListener {             override fun onSuccess() {              }              override fun onError(error: HMSException) {              }         })     }  ```  </Tab>  <Tab id='hls-1'>   ```java public void hlsStreaming(String meetingUrl, HMSSDK hmssdk) {     HMSHLSMeetingURLVariant meetingURLVariant1 = new HMSHLSMeetingURLVariant(             meetingUrl,             \"tag  reference\"     );     ArrayList<HMSHLSMeetingURLVariant> variantList = new ArrayList<>();     variantList.add(meetingURLVariant1);      HMSHLSConfig hlsConfig = new HMSHLSConfig(variantList, null);      hmssdk.startHLSStreaming(hlsConfig, new HMSActionResultListener() {         @Override         public void onSuccess() {                     }          @Override         public void onError(@NonNull HMSException error) {          }     }); } ````  </Tab>   ### Optional HLS Recording Optionally  record  HLS stream  may specify  `HMSHlsRecordingConfig` within  `HMSHLSConfig`.  Here's   `HMSHlsRecordingConfig` looks like  ```kotlin  data class HMSHlsRecordingConfig(     val singleFilePerLayer : Boolean,     val videoOnDemand : Boolean )  ```  1. `singleFilePerLayer`   desired end result   mp4 file per HLS layer, false  default. 2. `videoOnDemand`   desired end result   zip  m3u8    chunks, false  default.  Here's   looks like  call  recording configs.  <Tabs id=\"hls-recording-config\" items={['Kotlin', 'Java']} />  <Tab id='hls-recording-config-0'>  ```kotlin // Optional recording config val hlsRecordingConfig = HMSHlsRecordingConfig(false, false)  val hlsConfig = HMSHLSConfig(listOf(meetingUrlVariant), hlsRecordingConfig) ```  </Tab>  <Tab id='hls-recording-config-1'>  ```java // Optional recording config HMSHlsRecordingConfig recordingConfig = new HMSHlsRecordingConfig(false, false);  HMSHLSConfig hlsConfig = new HMSHLSConfig(variantList, recordingConfig);  ```  </Tab>  ## Stopping HLS  You can call `hmsSDK.stopHLSStreaming`  stop HLS Streaming  will stop   variants.  <Tabs id=\"hls-stop\" items={['Kotlin', 'Java']} />  <Tab id='hls-stop-0'>  ```kotlin hmssdk.stopHLSStreaming(null, object : HMSActionResultListener {             override fun onSuccess() {                             }              override fun onError(error: HMSException) {                             }          }) ```  </Tab>  <Tab id='hls-stop-1'>  ```java hmssdk.stopHLSStreaming(null, new HMSActionResultListener() {             @Override             public void onSuccess() {                             }              @Override             public void onError(@NonNull HMSException error) {              }         }); ``` </Tab>  > Want  see   works   live project? [Take  look](https://github.com/100mslive/100ms-android/blob/bba78d425c4e59e1344dc18f50b6494f5160a89f/app/src/main/java/live/hms/app2/ui/meeting/MeetingViewModel.kt#L933)   advanced sample app.  ## Current Room Status  The current status   room  always reflected   `HMSRoom` object.  Here   relevant properties inside  `HMSRoom` object   can read  get  current hls streaming status   room namely: `hlsStreamingState`.  The object contains  boolean `running`  lets  know   active   room right now  well  list  active variants.   1. **hlsStreamingState**  instance  `HMSHLSStreamingState`,  looks like:  ```kotlin data class HMSHLSStreamingState(         val running : Boolean,         val variants : ArrayList<HMSHLSVariant>?, ) ```  This represents  livestream  one   HLS URLs   container  `HMSHLSVariant`. Which looks like: ```kotlin data class HMSHLSVariant(         val hlsStreamUrl: String?,         val meetingUrl: String?,         val metadata: String?,         val startedAt: Long? ) ```  The room status   checked  following two places -  1. In  `onJoin(room: HMSRoom)` callback  `HMSUpdateListener`     The properties mentioned  will    `HMSRoom` object. 2. In  `onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom)` callback  `HMSUpdateListener`.     The `HMSRoomUpdate` type will  `HMSRoomUpdate.HLS_STREAMING_STATE_UPDATED`.  ## Tips  * If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up. * If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users  used  reloading  page   scenarios   difficult  achieve   automated case. * Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page  join  happen within  time interval. ",
        "platformName": "Android",
        "objectID": "/android/v2/features/hls"
    },
    {
        "title": "integration.mdx",
        "link": "/android/v2/features/integration",
        "keywords": [],
        "headings": ["Adding Dependencies", "Permissions"],
        "content": "---\r title: Integrating The SDK\r nav: 5.5\r ---\r \r Three main sections  are:\r [Adding Dependencies](#adding-dependencies) - Dependencies   100ms Android SDK.\r [Adding  100ms SDK](#adding-the-100ms-sdk) - To add  SDK   project's dependencies.\r [Adding Permissions](#permissions) - Since  video calling app needs camera/record-audio permissions  need    apps  work.\r \r ### Adding Dependencies\r \r \r [![](https://img.shields.io/badge/dynamic/xml.svg?label=100ms&color=blue&query=%2F%2Fmetadata%2Fversioning%2Flatest&url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Flive%2F100ms%2Fandroid-sdk%2Fmaven-metadata.xml)](https://jitpack.io/#100mslive/android-sdk) \r \r <Tabs id=\"sdk-imports\" items={['Maven Central', 'Jitpack']} />\r \r <Tab id='sdk-imports-0'>\r ​\r \r ```json{5-8}:settings.gradle section=AddSDKDependencies sectionIndex=1\r dependencies {\r  // See  version   badge above.\r  // There  separate libraries   sdk, virtual background  hls-player-stats.\r  //     add just  ones  need.\r  def hmsVersion = \"x.x.x\"\r  implementation \"live.100ms:android-sdk:$hmsVersion\"    // Essential\r  implementation \"live.100ms:virtual-background:$hmsVersion\" // Optional\r  implementation \"live.100ms:hls-player-stats:$hmsVersion\"   // Optional\r }\r ```\r \r </Tab>\r \r \r <Tab id='sdk-imports-1'>\r \r There  one extra step  use  jitpack libraries.\r \r -   Add  JitPack repository   root `settings.gradle`   end   `respositories` closure:\r \r You can open   Android Studio  double tapping shift  typing `settings.gradle`.\r \r ```json{7}:settings.gradle section=AddSDKDependencies sectionIndex=1\r dependencyResolutionManagement {\r  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\r  repositories {\r  google()\r  mavenCentral()\r  jcenter() // Warning:  repository  going  shut  soon\r  maven { url 'https://jitpack.io' }\r     }\r }\r rootProject.name = \"MyVideoCallApp\"\r include ':app'\r \r ```\r \r -   Add  100ms sdk dependency   app-level `build.gradle`\r \r ```json{2,4-6}:build.gradle section=AddSDKDependencies sectionIndex=2\r dependencies {\r  def hmsVersion = \"x.x.x\"\r  // See  version   jitpack badge above.\r  implementation \"com.github.100mslive.android-sdk:lib:$hmsVersion\"          // Essential\r  implementation \"com.github.100mslive.android-sdk:virtualBackground:$hmsVersion\" // Optional\r  implementation \"com.github.100mslive.android-sdk:stats:$hmsVersion\"            // Optional\r \r }\r ```\r \r </Tab>\r \r \r ### Permissions\r \r Camera, Recording Audio  Internet permissions  required. Add    manifest.\r \r ```xml:AndroidManifest.xml\r     <uses-permission android:name=\"android.permission.CAMERA\" />\r     <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\r     <uses-permission android:name=\"android.permission.INTERNET\" />\r ```\r \r You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/integration"
    },
    {
        "title": "interruption-handling.mdx",
        "link": "/android/v2/features/interruption-handling",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Interruption Handling\r nav: 9\r ---\r \r You're chatting away   video call and, uh-oh,  phone call comes in. No worries,  100ms SDK abstracts away handling  situation  you.\r \r When  telephonic voice call comes    user accepts  following happens.\r \r -   All videos including    turned off.\r -   You  muted.\r \r When  call ends  SDK will restore  videos, taking care   un-mute     muted    call came in. Neither will  un-mute   peers    muted    app.\r \r No code required,  happens automatically   calls.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/interruption-handling"
    },
    {
        "title": "join.mdx",
        "link": "/android/v2/features/join",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Join Room\r nav: 6\r ---\r \r Joining  room  one    basic functionalities    100ms  built  easy, developer friendly API  get  started.\r \r A user can interact  participants   room   _joining_  room.\r \r When user indicates   want  _join_  room,  app   -\r \r 1. User Name,  name    displayed   peers   room\r 2. User ID,  unique identifier   user. Usually  [UUID string](https://docs.oracle.com/javase/8/docs/api/java/util/UUID.html#randomUUID--).\r 3. Room ID,  unique room identifier     generated & passed   app   backend.\r 4. Authentication Token,  client side authentication token generated   Token Service.\r \r Now    aforementioned data,  can proceed  join  room.\r \r 1. First, create  instance  `HMSSDK` class. Store  instance   property. Ensure   SDK object  alive  memory    can receive event callbacks  SDK. Simplest way      follows -\r \r <Tabs id=\"create-hmssdk\" items={['Kotlin', 'Java']} />\r \r <Tab id='create-hmssdk-0'>\r \r ```kotlin\r   private val hmsSDK = HMSSDK\r     .Builder(application)\r     .build()\r ```\r \r </Tab>\r \r <Tab id='create-hmssdk-1'>\r \r ```java\r     HMSSDK hmssdk = new HMSSDK.Builder(application)\r                                 .build();\r \r ```\r \r </Tab>\r \r > Note: If   using Preview   must already   instance  HMSSDK  invoking Preview APIs.\r \r 2. Next, create  object  `HMSConfig` class using  available joining configurations\r \r <Tabs id=\"createconfig\" items={['Kotlin', 'Java']} />\r \r <Tab id=\"createconfig-0\">\r \r ```kotlin\r val hmsConfig = HMSConfig(\"user display name\", authToken)\r ```\r \r </Tab>\r \r <Tab id=\"createconfig-1\">\r \r ```java\r HMSConfig config = new HMSConfig(\"user display name\", authToken);\r ```\r \r </Tab>\r \r 3. You'll want  handle  callbacks  joining  room  making  ViewModel, Presenter  whatever  using  handle business logic implement  HMSUpdateListener interface  overriding  methods.\r \r 4. Now,   primed  join  room. All      pass  `config` object  `hmsSDK`\r \r <Tabs id=\"join-room\" items={['Kotlin', 'Java']} />\r \r <Tab id=\"join-room-0\">\r \r ```kotlin\r fun joinRoom(config : HMSConfig, hmsUpdateListener : HMSUpdateListener){\r     hmsSDK.join(config, hmsUpdateListener)\r }\r ```\r \r </Tab>\r \r <Tab id='join-room-1'>\r \r ```java\r private void joinRoom(HMSConfig config, HMSUpdateListener hmsUpdateListener ) {\r     hmsSdk.join(config, hmsUpdateListener);\r }\r ```\r \r </Tab>\r \r That's it. You  joined  room successfully. 🥳\r \r Now,  take  look   signature   Join API\r \r ```kotlin\r fun join(config: HMSConfig, hmsUpdateListener: HMSUpdateListener)\r ```\r \r As evident, `join` accepts 2 arguments -\r \r -   `config`:  object  type `HMSConfig` class,  room configuration object  encapsulates user & token data.\r -   `hmsUpdateListener`:  class conforming  `HMSUpdateListener` interface.\r \r The methods  `HMSUpdateListener`  invoked  notify updates happening   room like  peer joins/leaves,  track got muted/unmutes, etc.\r \r After calling `join`  app will  provided  update   100ms SDK.\r \r ✅ If successful,  `fun onJoin(room: HMSRoom)` method  `HMSUpdateListener` will  invoked  information   room encapsulated   `HMSRoom` object.\r \r ❌ If failure,  `fun onError(error: HMSException)` method will  invoked  exact failure reason.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/join"
    },
    {
        "title": "leave.mdx",
        "link": "/android/v2/features/leave",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Leave Room\r nav: 7\r ---\r \r Once  done   call  want  exit, call leave   HMSSDK instance  created  join it.\r \r <Tabs id=\"leave\" items={['Kotlin', 'Java']} />\r \r <Tab id='leave-0'>\r \r ```kotlin\r hmsSDK.leave()\r ```\r </Tab>\r \r <Tab id='leave-1'>\r \r ```java\r hmsSDK.leave();\r ```\r </Tab>\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/leave"
    },
    {
        "title": "Mirror.mdx",
        "link": "/android/v2/features/Mirror",
        "keywords": [],
        "headings": [
            " Code",
            "Sample App Code",
            "Visual Examples",
            "Front Camera",
            "Back Camera",
            "Camera Flip Effects"
        ],
        "content": "--- title: Mirrored Video nav: 16 --- Whenever  video  rendered   SurfaceViewRenderer  can flip  video frame   horizontally i.e creating  mirror frame.  * [Code](#code) * [Visual Examples](#visual-examples) * [Switching  front  back camera    view](#camera-flip-effects)  ##  Code  Invoke `setMirror` method  `true`,  flip  horizontally  `false`  restore    original form. Since    property   SurfaceViewRenderer  will persist across release  reinitializations.   <Tabs id=\"switch-device\" items={['Kotlin', 'Java']} />  <Tab id='switch-device-0'>  ```kotlin surfaceViewRenderer.setMirror(true) ``` </Tab> <Tab id='switch-device-1'>  ```java surfaceViewRenderer.setMirror(true); ```  </Tab>  ## Sample App Code Long press   video tile   sample app  get  `Mirror` option. There  can select  inverted  normal views   given video tile.   ## Visual Examples  #### Front Camera The default view   mirroring. If   facing  front camera,     look like   display   phone.  Actual position    sit, display position    will look   `SurfaceViewRenderer`.  ```      Actual Position                       Display Position  ┌─────────────────────────┐           ┌─────────────────────────┐ │                         │           │                         │ │                         │           │                         │ │   Phone Front Camera    │           │   Phone Front Camera    │ │                         │           │                         │ │                         │           │                         │ │                         │           │                         │ │                   You   │           │   You                   │ │                         │           │                         │ │                         │           │                         │ └─────────────────────────┘           └─────────────────────────┘ ```   To change this, turn  mirroring  `setMirror(true)`.  ```      Actual Position                       Display Position  ┌─────────────────────────┐           ┌─────────────────────────┐ │                         │           │                         │ │                         │           │                         │ │   Phone Front Camera    │           │   Phone Front Camera    │ │                         │           │                         │ │                         │           │                         │ │                         │           │                         │ │                   You   │           │                   You   │ │                         │           │                         │ │                         │           │                         │ └─────────────────────────┘           └─────────────────────────┘ ```  #### Back Camera Since  left  right   back camera vs  display   same,  non mirrored view   back camera      mirrored view   front camera. The Actual  Display positions  reverse   back camera.  ## Camera Flip Effects If  call `setMirror`   instance  SurfaceViewRenderer   flip  camera  front  back  vice versa,  value persists. A given surface  mirrored will remain mirrored. It   noted however  left   front facing  camera  left   back facing camera  opposites. So  may want  change setMirror  flipping   reason. ",
        "platformName": "Android",
        "objectID": "/android/v2/features/Mirror"
    },
    {
        "title": "mute.mdx",
        "link": "/android/v2/features/mute",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Mute / Unmute\r nav: 8\r ---\r \r Mute  something  applies   audio  video. When  mute audio,    heard   people. When  mute video,  will   broadcasting  video   people.\r \r It can  called  local (you)  remote (other people) peers' audio  video tracks.\r \r You get  reference    local peer  `getLocalPeer`  `HMSSDK`.\r \r You can     remote peers  `HMSRemoteVideoTrack`  `HMSRemoteAudioTrack`. Get  people's peers  calling `hmsSDK.getRemotePeers()`\r \r > 💡 You may get null   track     allowed  publish  track according   `HMSRole`.\r \r <Tabs id=\"peer\" items={['Kotlin', 'Java']} />\r \r <Tab id='peer-0'>\r \r ```kotlin\r val myPeer = hmsSDK.getLocalPeer()\r myPeer?.videoTrack?.setMute(true)\r myPeer?.audioTrack?.setMute(true)\r ```\r </Tab>\r \r <Tab id='peer-1'>\r \r ```java\r HMSLocalPeer myPeer = hmssdk.getLocalPeer();\r HMSLocalAudioTrack myAudioTrack = myPeer.getAudioTrack();\r if(myAudioTrack != null) {\r     myAudioTrack.setMute(true);\r }\r \r HMSLocalVideoTrack myVideoTrack = myPeer.getVideoTrack();\r if(myVideoTrack != null) {\r     myVideoTrack.setMute(true);\r }\r ```\r </Tab>\r \r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/mute"
    },
    {
        "title": "network-quality-reports.mdx",
        "link": "/android/v2/features/network-quality-reports",
        "keywords": [],
        "headings": [
            "Requesting/Reading a Network Quality Update in Preview",
            "Interpreting the Values"
        ],
        "content": "---\r title: Network Quality Reports\r nav: 13.4\r ---\r \r Video/Audio conferencing   nature  data intensive operation. The 100ms SDK attempts  stabilize connections especially  subscribe degradation  turned    template   possible  really bad connections  users will still  problems.\r \r It can  helpful  measure  user's connection speed  joining  room  order  set expectations  decide    join  video  etc.\r \r The 100ms SDK provides  way  measure  user's downlink speed   preview screen.\r \r > ⚠️ The downlink speed  measured    user download  file (1mb    writing)   WebSocket connection  established   preview.\r \r The download will  continued     fixed number  seconds (For example 10 seconds)   speed   interval  calculated. The entire file may   downloaded   exceeds  timeout.\r \r DNS time   counted  this,  throughput  measured.\r \r ## Requesting/Reading  Network Quality Update  Preview\r \r When creating  `HMSConfig` object  request  preview, set  `captureNetworkQualityInPreview`  `true`  measure  user's downlink network quality.\r \r When available,  information will  returned  `onPeerUpdate`   `HMSPreviewListener`   update type `HMSPeerUpdate.NETWORK_QUALITY_UPDATED`. It can  retrieved    `HMSPeer` object's `networkQuality` property.\r \r <Tabs id=\"network-quality-preview\" items={['Kotlin', 'Java']} />\r \r <Tab id='network-quality-preview-0'>\r \r ```kotlin\r fun requestPreviewWithNetworkQuality(hmsSdk: HMSSDK,\r       authToken : String, metadata: String) {\r \r     val requestNetworkQuality = true\r \r     val hmsPreviewListener = object : HMSPreviewListener {\r         override fun onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer) {\r             if(type == HMSPeerUpdate.NETWORK_QUALITY_UPDATED)\r                 println(\"NetworkQuality  ${peer.networkQuality?.downlinkQuality}\")\r         }\r \r         override fun onPreview(room: HMSRoom, localTracks: Array<HMSTrack>) {}\r         override fun onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom) {}\r         override fun onError(error: HMSException) {}\r     }\r \r     val config = HMSConfig(\r         \"Aniket\",\r         authToken,\r         metadata,\r         requestNetworkQuality\r         )\r \r \r     hmsSdk.preview(config, hmsPreviewListener)\r }\r ```\r \r </Tab>\r \r <Tab id='network-quality-preview-1'>\r \r ```java\r \r void requestPreviewWithNetworkQuality(HMSSDK hmsSdk,\r                                         String authToken,\r                                         String metadata) {\r     Boolean requestNetworkQuality = true;\r \r     HMSPreviewListener hmsPreviewListener = new HMSPreviewListener() {\r         @Override\r         public void onPeerUpdate(@NonNull HMSPeerUpdate type, @NonNull HMSPeer hmsPeer) {\r              (type == HMSPeerUpdate.NETWORK_QUALITY_UPDATED)\r                 Log.d(TAG, \"NetworkQuality  ${peer.networkQuality?.downlinkQuality}\");\r         }\r \r         @Override public void onPreview(@NonNull HMSRoom hmsRoom, @NonNull HMSTrack[] hmsTracks) {}\r         @Override public void onRoomUpdate(@NonNull HMSRoomUpdate hmsRoomUpdate, @NonNull HMSRoom hmsRoom) {}\r         @Override public void onError(@NonNull HMSException e) {}\r \r     };\r \r     HMSConfig config = new HMSConfig(\r             \"Aniket\",\r             authToken,\r             metadata,\r             requestNetworkQuality\r     );\r \r     hmsSdk.preview(config, hmsPreviewListener);\r }\r ```\r \r </Tab>\r \r Here's  class definition  `HMSNetworkQuality`,    property   `HMSPeer`.\r \r ```kotlin\r data class HMSNetworkQuality(\r     val downlinkQuality: Int\r )\r ```\r \r ## Interpreting  Values\r \r `peer.networkQuality?.downlinkQuality` will   value  -1  5.\r \r -   -1 -> Test timeout.\r -   0 -> Very bad network  network check failure.\r -   1 -> Poor network.\r -   2 -> Bad network.\r -   3 -> Average.\r -   4 -> Good.\r -   5 -> Best.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/network-quality-reports"
    },
    {
        "title": "PeerCount.mdx",
        "link": "/android/v2/features/PeerCount",
        "keywords": [],
        "headings": [],
        "content": "--- title: Peer Count nav: 17 ---  The `HMSRoom` object   property called `peerCount`.  This property will  updated   background  can  read   `HMSUpdateListener`'s `onRoomUpdate`  called specifically  type `HMSRoomUpdate.ROOM_PEER_COUNT_UPDATED`  The android SDK will update  values whenever  peer joins  leaves.  To receive  values even   peer joins  room, look   webhooks   peer join events.  <Tabs id=\"peer-count\" items={['Kotlin', 'Java']} />  <Tab id='peer-count-0'>  ```kotlin hmsSDK.join(config, object : HMSUpdateListener {         override fun onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom) {           (type) {             HMSRoomUpdate.ROOM_PEER_COUNT_UPDATED -> {                 val count = hmsRoom.peerCount             }         }     } }  ```  </Tab>  <Tab id='peer-count-1'>  ```java hmsSdk.join(config, new HMSUpdateListener() {      @Override     public void onRoomUpdate(@NonNull HMSRoomUpdate type, @NonNull HMSRoom hmsRoom) {         switch (type){             case ROOM_PEER_COUNT_UPDATED:                 hmsRoom.getPeerCount();             break;         }     }  }  ```  </Tab>  ",
        "platformName": "Android",
        "objectID": "/android/v2/features/PeerCount"
    },
    {
        "title": "Pip-Mode.mdx",
        "link": "/android/v2/features/Pip-Mode",
        "keywords": [],
        "headings": ["Minimum Requirements", "How to add PiP support"],
        "content": "--- title: PiP Mode (Picture-in-picture) nav: 10 ---  100ms Android SDK provides support  creating Picture  Picture mode experience  video calls.  ## Minimum Requirements  -   Minimum version required  support PiP  Android 8.0 (API level 26)  ### How  add PiP support  1. You need  update  activity tag   `AndroidManifest.xml`  ```xml         <activity             ....             android:supportsPictureInPicture=\"true\"             android:configChanges=\"screenSize|smallestScreenSize|screenLayout|orientation\"             ... />   ```  2. Pip mode resizes  whole activity   small conatiner. Inorder  show elements  PiP   like  hide  visibility  views   want  show.  ```kotlin     //To launch pip-mode  can call      activity.enterPictureInPictureMode()     //Optionally  can pass  params      particular aspect ratio.  info [https://developer.android.com/develop/ui/views/picture-in-picture]   ```    3. Once  enter pip mode,  recieve  callback. Over   can put   custom logic,  show  custom video tracks   visibile   PiP. To hide videos   PiP  can call `videoTrack.removeSink(surfaceViewRender)`  ```kotlin    override fun onPictureInPictureModeChanged(isInPictureInPictureMode: Boolean) {     ...     //hiding views  pip/non-pip layout !      (isInPictureInPictureMode) {       //add logic   show video tracks    visible         supportActionBar?.hide()     } else {       //add logic   restore video tracks here       supportActionBar?.show()     }   }   ```  You can refer   [PR](https://github.com/100mslive/100ms-android/pull/247/files)   sample app  see  implementation   Pip mode  👀 To see  example Android Picture  Picture implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-android). ",
        "platformName": "Android",
        "objectID": "/android/v2/features/Pip-Mode"
    },
    {
        "title": "preview.mdx",
        "link": "/android/v2/features/preview",
        "keywords": [],
        "headings": ["Network Quality Reports"],
        "content": "--- title: Preview nav: 9 ---  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining. 100ms SDKs provide  easy-to-use API  back  feature. Additionally,  SDK will try  establish  connection  100ms server  verify    network issues    auth credentials  valid    everything   order  subsequent room join  instant.  To invoke  API, call `preview`  `HMSConfig`  `HMSPreviewListener`  params.  ```kotlin hmsSDK.preview(config, hmsPreviewListener) ```  You  need   config object    pass  [join API](join).  `HMSPreviewListener`  three callbacks:  ```kotlin fun onPreview(room: HMSRoom, localTracks: Array<HMSTrack>) ``` Which  called  SDK  passed   pre-flight checks  established  connection  100ms server. This will pass  array  local audio/video tracks   can display   user (see [Render Video](render-video)  [Mute](mute) sections   details).   ```kotlin fun onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom)  ``` This  called  room data  updated,   room-name changed   peer-count changes.  `type` -   contains  type  `HMSRoomUpdate` occurred   ```kotlin fun onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer) ``` This  called  `Peer` information  updated,   `PEER_JOINED`  `PEER_LEFT` etc.  `type` -   contains  type  `HMSPeerUpdate` occurred   ## Network Quality Reports A network quality report can  requested  preview. Additional details [here](network-quality-reports).",
        "platformName": "Android",
        "objectID": "/android/v2/features/preview"
    },
    {
        "title": "remote-mute.mdx",
        "link": "/android/v2/features/remote-mute",
        "keywords": [],
        "headings": [
            "Unmuting",
            "Permissions",
            "Muting/Unmuting",
            "Single Peer or Track",
            "Handling a mute callback",
            "Handling an unmute callback",
            "Multiple Peers or Tracks"
        ],
        "content": "---\r title: Remote Mute\r nav: 11\r ---\r \r You're running  video call room  decide  someone  currently talking   talking.\r \r You'd prefer  stay mute. Or perhaps  want  video turned   well   audio. You're looking   remote mute.\r \r Muting can apply   audio  video.\r \r ##### Unmuting\r \r You may also decide   want  let someone else speak   currently muted. Or may want  ask someone  turn   video.\r \r You can request people  un-mute   well.\r \r ### Permissions\r \r Can't let just anyone mute others. First  need  create  [role](../foundation/templates-and-roles)   permissions  mute others  also  ask   un-mute.\r \r The permission  mute others  within `PermissionsParams` `mute`    check   within  `HMSRole`   peer  see    it.\r \r Similarly  permission  un-mute  peers  within `PermissionsParams` `unmute`.\r \r Here's   check whether  local peer   permission  mute  un-mute others:\r \r <Tabs id=\"muteunmute\" items={['Kotlin', 'Java 8', 'Java 7']} />\r \r <Tab id='muteunmute-0'>\r \r ```kotlin\r \r fun isAllowedToMuteOthers(): Boolean {\r     return hmsSDK.getLocalPeer()!!\r                 .hmsRole.permission?\r                 .mute == true\r }\r \r fun isAllowedToUnMuteOthers(): Boolean {\r     return hmsSDK.getLocalPeer()!!\r                 .hmsRole.permission?\r                 .unmute == true\r }\r \r ```\r \r </Tab>\r \r <Tab id='muteunmute-1'>\r \r ```java\r \r private boolean hasMutePermissions() {\r     return Optional.ofNullable(hmsSdk.getLocalPeer())\r             .map(HMSPeer::getHmsRole)\r             .map(HMSRole::getPermission)\r             .map(PermissionsParams::getMute)\r             .orElse(false);\r }\r \r private boolean hasUnMutePermissions() {\r     return Optional.ofNullable(hmsSdk.getLocalPeer())\r             .map(HMSPeer::getHmsRole)\r             .map(HMSRole::getPermission)\r             .map(PermissionsParams::getUnmute)\r             .orElse(false);\r }\r \r ```\r \r </Tab>\r \r <Tab id='muteunmute-2'>\r \r ```java\r \r private boolean hasMutePermissions() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r      (peer != null) {\r         HMSRole role = peer.getHmsRole();\r          (role != null) {\r             PermissionsParams permissions = role.getPermission();\r              (permissions != null) {\r                 return permissions.getMute();\r             }\r         }\r     }\r     return false;\r }\r \r private boolean hasUnMutePermissions() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r      (peer != null) {\r         HMSRole role = peer.getHmsRole();\r          (role != null) {\r             PermissionsParams permissions = role.getPermission();\r              (permissions != null) {\r                 return permissions.getUnmute();\r             }\r         }\r     }\r     return false;\r }\r \r ```\r \r </Tab>\r \r `hmsSdk.getLocalPeer()` will  return null  long     preview    meeting. Since  likely  need  check  permissions     one    ok.\r \r ### Muting/Unmuting\r \r There  two APIs  muting/unmuting. `changeTrackState`   overloaded function  handles both.\r \r -   One   works   single track (audio/video)   single peer   time. `changeTrackState(forRemoteTrack: HMSTrack, mute: Boolean, hmsActionResultListener: HMSActionResultListener)`\r -   One  can mute multiple tracks  multiple peers. Either   role,  track source  track type   combination   above. `changeTrackState(mute: Boolean, type : HMSTrackType?, source : String?, roles : List<HMSRole>?, hmsActionResultListener: HMSActionResultListener)`\r \r For single peer/track scroll  \"Single Peer  Track\".\r \r For multiple peer/track muting simultaneously scroll  Multiple Peers  Tracks.\r \r #### Single Peer  Track\r \r Once   checked   caller  permissions  mute another peer's audio  video, call    `hmsSdk.changeTrackState`.\r \r To mute audio   single peer  track:\r \r `hmsSdk.changeTrackState` takes three parameters:\r \r hmsTrack: The `HMSTrack`    muted  unmuted. Can  audio  video.\r \r mute: A `Boolean`  true indicates     muted. false indicates     unmuted.\r \r hmsActionResultListener: A `HMSActionResultListener` instance  will receive `onSuccess`   server acknowledges   request  valid. `onError`     exception along   `HMSException`  it.\r \r <Tabs id=\"audiomuteunmutecall\" items={['Kotlin', 'Java 8', 'Java 7']} />\r \r <Tab id='audiomuteunmutecall-0'>\r \r ```kotlin\r \r fun changeAudioState(hmsRemotePeer: HMSRemotePeer, mute : Boolean) {\r     val track = hmsRemotePeer.audioTrack\r     if(track != null) {\r         hmsSdk.changeTrackState(track, mute, object : HMSActionResultListener {\r             override fun onError(error: HMSException) {\r             }\r \r             override fun onSuccess() {\r             }\r \r         })\r     }\r }\r ```\r \r </Tab>\r \r <Tab id='audiomuteunmutecall-1'>\r \r ```java\r \r public void changeAudioState(HMSRemotePeer hmsRemotePeer, Boolean mute) {\r         HMSRemoteAudioTrack track = hmsRemotePeer.getAudioTrack();\r         if(track != null) {\r             hmsSdk.changeTrackState(track, mute, new HMSActionResultListener() {\r                 @Override\r                 public void onSuccess() {\r \r                 }\r \r                 @Override\r                 public void onError(@NonNull HMSException e) {\r \r                 }\r             });\r         }\r     }\r ```\r \r </Tab>\r \r <Tab id='audiomuteunmutecall-2'>\r \r ```java\r \r private boolean hasMutePermissions() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r     if(peer != null) {\r         HMSRole role = peer.getHmsRole();\r         if(role != null) {\r             PermissionsParams permissions = role.getPermission();\r             if(permissions != null) {\r                 return permissions.getMute();\r             }\r         }\r     }\r     return false;\r }\r \r private boolean hasUnMutePermissions() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r     if(peer != null) {\r         HMSRole role = peer.getHmsRole();\r         if(role != null) {\r             PermissionsParams permissions = role.getPermission();\r             if(permissions != null) {\r                 return permissions.getUnmute();\r             }\r         }\r     }\r     return false;\r }\r ```\r \r </Tab>\r \r Similarly  video track can  muted  unmuted.\r \r <Tabs id=\"videomuteunmutecall\" items={['Kotlin', 'Java']} />\r \r <Tab id='videomuteunmutecall-0'>\r \r ```kotlin\r \r fun changeVideoState(hmsRemotePeer: HMSRemotePeer, mute : Boolean) {\r     val track = hmsRemotePeer.videoTrack\r     if(track != null) {\r         hmsSdk.changeTrackState(track, mute, object : HMSActionResultListener {\r             override fun onError(error: HMSException) {\r             }\r \r             override fun onSuccess() {\r             }\r \r         })\r     }\r }\r ```\r \r </Tab>\r \r <Tab id='videomuteunmutecall-1'>\r \r ```java\r \r public void changeVideoState(HMSRemotePeer hmsRemotePeer, Boolean mute) {\r         HMSRemoteVideoTrack track = hmsRemotePeer.getVideoTrack();\r         if(track != null) {\r             hmsSdk.changeTrackState(track, mute, new HMSActionResultListener() {\r                 @Override\r                 public void onSuccess() {\r \r                 }\r \r                 @Override\r                 public void onError(@NonNull HMSException e) {\r \r                 }\r             });\r         }\r     }\r ```\r \r </Tab>\r \r ### Handling  mute callback\r \r Mute callbacks  automatically applied   receiver. No action  required.\r \r However  will still   callback  `onChangeTrackStateRequest`   SDK mutes  user.\r \r If   something   user receives  request,   showing   dialog,  check   type  help avoid showing  unnecessarily:\r \r ```kotlin\r         override fun onChangeTrackStateRequest(details: HMSChangeTrackStateRequest) {\r              (details.track.isMute != details.mute) {\r                // Handle HMSChangeTrackStateRequest\r             }\r         }\r ```\r \r Without which,   mute request  track will  muted   still get  request   caller side  mute.\r \r ### Handling  unmute callback\r \r Unmute callbacks  received   target peer's `HMSUpdateListener.onChangeTrackStateRequest`.\r \r The target peer will receive  object  `HMSChangeTrackStateRequest`.\r \r Here's  structure.\r \r ```kotlin\r data class HMSChangeTrackStateRequest(\r     val track : HMSTrack,\r     val requestedBy : HMSPeer,\r     val mute : Boolean)\r ```\r \r This contains information   track  requested  unmuting. Check  track type  inform  user  appropriate.\r \r <Tabs id=\"trackcheck\" items={['Kotlin', 'Java']} />\r \r <Tab id='trackcheck-0'>\r \r ```kotlin\r fun checkTrack(track : HMSTrack) {\r     if(track.type == HMSTrackType.AUDIO) {\r \r     } else  (track.type == HMSTrackType.VIDEO) {\r \r     }\r }\r ```\r \r </Tab>\r \r <Tab id='trackcheck-1'>\r \r ```java\r public void checkTrack(HMSTrack track) {\r     if( track.getType() == HMSTrackType.AUDIO) {\r \r     } else  (track.getType() == HMSTrackType.VIDEO) {\r \r     }\r }\r ```\r \r </Tab>\r \r Hold onto  information here, show  dialog   user  ask   want  accept  change   apply  settings locally. The     regular user [Mute/Unmute](mute).\r \r #### Multiple Peers  Tracks\r \r Once   checked   caller  permissions  mute another peer's audio  video, call    `hmsSdk.changeTrackState`.\r \r To mute audio   multiple peers  tracks:\r \r `hmsSdk.changeTrackState` takes five parameters:\r \r -   **mute**: _Boolean_ true   track needs   muted, false otherwise\r -   **type** \\*HMSTrackType** optional,  HMSTrackType    affected. If   **source\\*\\*  specified,   considered  AND operation. If null,  track sources  affected.\r -   **source** _Source_ optional,  [HMSTrackSource]    affected. If   [type]  specified,   considered  AND operation. If null,  track sources  affected.\r -   **roles** _`List<HMSRole>`_ optional,  list  roles, may   single item   list, whose tracks   affected. If null,  roles  affected.\r -   **hmsActionResultListener** _HMSActionResultListener_  callback    called  SDK  case   success  failure.\r \r Here's  example     check   caller  allowed  mute peers   call   mute/unmute   peers   chat.\r \r <Tabs id=\"multimute\" items={['Kotlin', 'Java']} />\r \r <Tab id='multimute-0'>\r \r ```kotlin\r \r   fun remoteMute(mute: Boolean, roles: List<String>?) {\r      (isAllowedToMutePeers()) {\r       val selectedRoles =  (roles == null) null else {\r         hmsSdk.getRoles().filter { roles.contains(it.name) }\r       }\r       hmsSdk.changeTrackState(\r           mute,\r           null,\r           null,\r           selectedRoles,\r           object: HMSActionResultListener {\r \r         override fun onSuccess() {\r           // Remote mute suceeded\r         }\r \r         override fun onError(error: HMSException) {\r           // Error\r         }\r \r       })\r     }\r   }\r ```\r \r </Tab>\r \r <Tab id='multimute-1'>\r \r ```java\r private void remoteMute(boolean mute, List<String> hmsRoleNames) {\r         List<HMSRole> selectedRoles = new ArrayList<>();\r         if(hmsRoleNames != null) {\r             selectedRoles = new ArrayList<>();\r             for( HMSRole role : hmsSdk.getRoles()) {\r                 if(hmsRoleNames.contains(role.getName())) {\r                     selectedRoles.add(role);\r                 }\r             }\r         }\r         hmsSdk.changeTrackState(\r                 mute,\r                 null,\r                 null,\r                 selectedRoles,\r                 new HMSActionResultListener() {\r                     @Override\r                     public void onSuccess() {\r                         // Change track state succeeded.\r                     }\r \r                     @Override\r                     public void onError(@NonNull HMSException e) {\r                         // Change track state failed.\r                     }\r                 }\r         );\r     }\r ```\r \r </Tab>\r \r This can   narrowed  specifying   tracks  type Audio like so:\r \r Note  HMSTrackSource.REGULAR   peer's  audio  video  opposed  one provided  screenshare   plugin.\r \r <Tabs id=\"multimuteoptions\" items={['Kotlin', 'Java']} />\r \r <Tab id='multimuteoptions-0'>\r \r ```kotlin\r hmsSdk.changeTrackState(\r             true,\r             HMSTrackType.AUDIO,\r             HMSTrackSource.REGULAR,\r             emptyList(),\r             object : HMSActionResultListener {\r                 override fun onSuccess() {\r \r                 }\r \r                 override fun onError(error: HMSException) {\r \r                 }\r             }\r         )\r ```\r \r </Tab>\r \r <Tab id='multimuteoptions-1'>\r \r ```java\r         hmsSdk.changeTrackState(\r                 true,\r                 HMSTrackType.AUDIO,\r                 HMSTrackSource.REGULAR,\r                 Collections.emptyList(),\r                 new HMSActionResultListener() {\r                     @Override\r                     public void onSuccess() {\r \r                     }\r \r                     @Override\r                     public void onError(@NonNull HMSException e) {\r \r                     }\r                 }\r         );\r ```\r \r </Tab>\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/remote-mute"
    },
    {
        "title": "remove-peer.mdx",
        "link": "/android/v2/features/remove-peer",
        "keywords": [],
        "headings": ["Permissions", "Removing a peer", "Handling the remove peer callback"],
        "content": "---\r title: Remove Peer\r nav: 11\r ---\r \r Someone's overstayed  welcome  now  need  remove  peer   video call room. Just call `hmsSdk.removePeerRequest`.\r \r ### Permissions\r \r Can't let just anyone remove others   video call room. First  need  create  [role](../foundation/templates-and-roles)   permissions  remove others.\r \r In  SDK,  permission  remove others   room  within `PermissionsParams` `removeOthers`    check   within  `HMSRole`   peer  see    it.\r \r Here's   check whether  local peer   permission  end  room:\r \r <Tabs id=\"removepeerperm\" items={['Kotlin', 'Java 8', 'Java 7']} />\r \r <Tab id='removepeerperm-0'>\r \r ```kotlin\r fun isAllowedToRemovePeer(): Boolean {\r     return hmsSDK.getLocalPeer()!!\r                 .hmsRole.permission?\r                 .removeOthers == true\r }\r ```\r \r </Tab>\r \r <Tab id='removepeerperm-1'>\r \r ```java\r private boolean isAllowedToRemovePeer() {\r     return Optional.ofNullable(hmsSdk.getLocalPeer())\r             .map(HMSPeer::getHmsRole)\r             .map(HMSRole::getPermission)\r             .map(PermissionsParams::getRemoveOthers)\r             .orElse(false);\r }\r ```\r \r </Tab>\r \r <Tab id='removepeerperm-2'>\r \r ```java\r private boolean isAllowedToRemovePeer() {\r     HMSLocalPeer peer = hmsSdk.getLocalPeer();\r     if(peer != null) {\r         HMSRole role = peer.getHmsRole();\r         if(role != null) {\r             PermissionsParams permissions = role.getPermission();\r             if(permissions != null) {\r                 return permissions.getRemoveOthers();\r             }\r         }\r     }\r     return false;\r }\r ```\r \r </Tab>\r \r `hmsSdk.getLocalPeer()` will  return null  long     preview    meeting. Since  likely  need  check  permissions     one    ok.\r \r ### Removing  peer\r \r Once  permissions  checked  ensure  caller   permission  remove  peer, remove   calling `hmsSdk.removePeerRequest`.\r \r The parameters are:\r \r peer:   `HMSRemotePeer`   like   removed   video call room.\r \r reason:   string    conveyed     reason   removed.\r \r hmsActionResultListener:   listener  will convey  success  error   server accepting  request.\r \r <Tabs id=\"removepeer\" items={['Kotlin', 'Java']} />\r \r <Tab id='removepeer-0'>\r \r ```kotlin\r fun requestPeerLeave(peer: HMSRemotePeer, reason: String) {\r     hmsSDK.removePeerRequest(peer, reason,\r          object : HMSActionResultListener{\r             override fun onError(error: HMSException) {\r             }\r \r             override fun onSuccess() {\r             }\r     })\r   }\r \r ```\r \r </Tab>\r \r <Tab id='removepeer-1'>\r \r ```java\r public void requestPeerLeave(HMSRemotePeer peer, String reason) {\r     hmsSdk.removePeerRequest(peer, reason, new HMSActionResultListener() {\r         @Override\r         public void onSuccess() {\r \r         }\r \r         @Override\r         public void onError(@NonNull HMSException e) {\r \r         }\r     });\r }\r ```\r \r </Tab>\r \r ### Handling  remove peer callback\r \r The target   `removePeerRequest` will receive  call  `HMSUpdateListener`  `onRemovedFromRoom(notification : HMSRemovedFromRoom)`.\r \r The `HMSRemovedFromRoom` object   passed   callback   structure:\r \r ```kotlin\r data class HMSRemovedFromRoom(\r     val reason : String,\r     val peerWhoRemoved : HMSRemotePeer?,\r     val roomWasEnded : Boolean\r )\r ```\r \r reason: Is  string   caller  `removePeerRequest` sent   reason    removed   room.\r \r peerWhoRemoved: Is  `HMSRemotePeer` instance containing  details   person  called `removePeerRequest`. This can  used  show  name   person  removed them.\r \r roomWasEnded: This will  false   peer  removed. If true,  indicates   peer   removed,   entire room  ended. See [End Room](end-room)  details.\r \r When  callback  received,  UI   cleaned    client side. The video call room   ended   SDK   callback  sent.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/remove-peer"
    },
    {
        "title": "render-video.mdx",
        "link": "/android/v2/features/render-video",
        "keywords": [],
        "headings": [
            "Getting and Preparing a SurfaceView",
            "Adding a video to the SurfaceView",
            "Removing a video from the SurfaceView",
            "Special cases for videos in RecyclerViews",
            "PeerViewHolder",
            "PeerAdapter"
        ],
        "content": "---\r title: Render Video\r nav: 9\r ---\r \r At   least  rendering video  need  instance  `org.WebRTC.SurfaceViewRenderer`   `HMSVideoTrack` instance   peer.\r \r For  `SurfaceViewRenderer`,   `2.0.9`   100ms Android SDK,  adding  SDK  enough  receive WebRTC objects including  SurfaceViewRenderer. In versions prior  this, add  dependency `implementation 'org.WebRTC:google-WebRTC:1.0.32006'`  receive SurfaceViewRenderer.\r \r In XML layouts   look like\r \r ```xml\r     <org.WebRTC.SurfaceViewRenderer\r         android:id=\"@+id/peerVideo\"\r         android:layout_width=\"match_parent\"\r         android:layout_height=\"wrap_content\"\r         />\r ```\r \r The peer's video   `hmsPeer.videoTrack`   ScreenShare video will   instance  `HMSVideoTrack`   list `hmsPeer.auxiliaryTracks`.\r \r You  get  like so:\r \r ```kotlin\r val hmsVideoTrack : HMSVideoTrack? = hmsPeer.videoTrack\r ```\r \r ### Getting  Preparing  SurfaceView\r \r Get  instance   SurfaceView.\r \r ```kotlin\r val surfaceView : SurfaceViewRenderer = findViewById(R.id.surface_view)\r ```\r \r Set  scaling  whatever  prefer. Aspect Fit  recommended  common use cases. See  scale types [here](https://chromium.googlesource.com/external/WebRTC/trunk/talk/+/cdd35e557b600d1f7dbe9c99531a42adf194f973/app/WebRTC/java/android/org/WebRTC/RendererCommon.java#37).\r \r ```kotlin\r surfaceView.setEnableHardwareScaler(true)\r surfaceView.setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT)\r ```\r \r ### Adding  video   SurfaceView\r \r Each time  want  add  video   surfaceview,  needs   initialized again.\r \r ```kotlin\r surfaceView.init(SharedEglContext.context, null)\r \r val hmsVideoTrack : HMSVideotrack = hmsPeer.videoTrack\r hmsVideoTrack?.addSink(surfaceView)\r ```\r \r It's also important  remove   done.\r \r > 💡 Only  SharedEglContext.context can  used. Creating  new context will result   black screen.\r \r ### Removing  video   SurfaceView\r \r It's  important  remove  video   done showing it,    show  different video    SurfaceViewRenderer.\r \r ```kotlin\r hmsVideoTrack.removeSink(this)\r surfaceView.release()\r ```\r \r There   limit   number  `SharedEglContext`'s  can  bound per mobile device. It's normally high enough  easily accomodate   videos  will reasonably fit   screen. If  video's  released however,  becomes  easy  exceed  limit   app will crash.\r \r Until  call `removeSink`  video   streamed   device's data   also important remove sinks.\r \r ### Special cases  videos  RecyclerViews\r \r If  going   using  RecyclerView  display multiple videos   grid   specific places      operations.\r \r Currently  best known way    ViewHolder    method  binding items,  method  start  surfaceview   method  release  surfaceview along  boolean check.\r \r The Adapter calls bind item  usual  also stops  surfaceview   binds. Two additional Adapter methods  overloaded. `onViewAttachedToWindow`  `onViewDetachedFromWindow`  will call SurfaceView binding  releasing respectively   checking  `sinkAdded` property.\r \r `sinkAdded` keeps track  whether  track  rendered   Peer's surface view  not. Since someone might  turned   video  still  speaking    tile might  shown   video.\r \r Complete source code  available [here](https://github.com/100mslive/hello-world-android).\r \r #### PeerViewHolder\r \r `init` Scaler types can  set    need   reset per `bind` call.\r \r `startSurfaceView` will init  `SurfaceViewRenderer`  binding  track  one exists,  also sets  `sinkAdded`  true.\r \r `stopSurfaceView` will release  `SurfaceViewRenderer`     video attached  also remove  video sink.\r \r ```kotlin:PeerViewHolder.kt\r class PeerViewHolder(view: View, private val getItem: (Int) -> TrackPeerMap) :\r     RecyclerView.ViewHolder(view) {\r     private val TAG = PeerViewHolder::class.java.simpleName\r     private var sinkAdded = false\r \r     init {\r         itemView.findViewById<SurfaceViewRenderer>(R.id.videoSurfaceView).apply {\r             setEnableHardwareScaler(true)\r             setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT)\r         }\r     }\r \r     fun startSurfaceView() {\r          (!sinkAdded) {\r             itemView.findViewById<SurfaceViewRenderer>(R.id.videoSurfaceView).apply {\r \r                 getItem(adapterPosition).videoTrack?.let { hmsVideoTrack ->\r                     init(SharedEglContext.context, null)\r                     hmsVideoTrack.addSink(this)\r                     sinkAdded = true\r                 }\r             }\r         }\r     }\r \r     fun stopSurfaceView() {\r         itemView.findViewById<SurfaceViewRenderer>(R.id.videoSurfaceView).apply {\r \r              (sinkAdded && adapterPosition != -1) {\r                 getItem(adapterPosition).videoTrack?.let {\r                     it.removeSink(this)\r                     release()\r                     sinkAdded = false\r                 }\r             }\r         }\r     }\r \r     fun bind(peer: TrackPeerMap) {\r \r          (!sinkAdded) {\r             itemView.findViewById<SurfaceViewRenderer>(R.id.videoSurfaceView).apply {\r                 setEnableHardwareScaler(true)\r                 setScalingType(RendererCommon.ScalingType.SCALE_ASPECT_FIT)\r                 sinkAdded = false\r             }\r         }\r         itemView.findViewById<TextView>(R.id.peerName).text = peer.peer.name\r     }\r \r }\r ```\r \r #### PeerAdapter\r \r The adapter stops  surface every time  binds. Starts    view  attached   window,  stops    view  detached   window. Also  passes   getItem method   PeerViewHolder  `onCreateViewHolder`.\r \r ```kotlin:PeerAdapter.kt\r \r     override fun onBindViewHolder(holder: PeerViewHolder, position: Int) {\r         getItem(position)?.let {\r             holder.stopSurfaceView()\r             holder.bind(it)\r         }\r     }\r \r     override fun onViewAttachedToWindow(holder: PeerViewHolder) {\r         super.onViewAttachedToWindow(holder)\r         holder.startSurfaceView()\r     }\r \r     override fun onViewDetachedFromWindow(holder: PeerViewHolder) {\r         super.onViewDetachedFromWindow(holder)\r         holder.stopSurfaceView()\r     }\r \r     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PeerViewHolder {\r         val view =\r             LayoutInflater.from(parent.context).inflate(R.layout.layout_peer_item, parent, false)\r         return PeerViewHolder(view, ::getItem)\r     }\r \r ```\r ",
        "platformName": "Android",
        "objectID": "/android/v2/features/render-video"
    },
    {
        "title": "rtmp-recording.mdx",
        "link": "/android/v2/features/rtmp-recording",
        "keywords": [],
        "headings": [
            "Starting Streaming / Recording",
            "Stopping Streaming / Recording",
            "Current Room Status",
            "When to check for room status",
            "Code sample"
        ],
        "content": "--- title: RTMP Streaming / Recording nav: 13 ---  Want  preserve  video call  posterity   recording? Or live stream    millions  viewers  Twitch  YouTube  whatever gives   RTMP ingest URL?  Turn  RTMP Streaming  Recording!  In 100ms, recording  streaming  usually achieved    bot join  room  stream   sees  hears   file (recording)    RTMP ingest URL (streaming).  The topics covered   doc are:  1. [How  start streaming / recording.](#starting-streaming-recording) 2. [How  stop streaming / recording.](#stopping-streaming-recording) 3. [How  check  current status  streaming / recording.](#current-room-status) 4. [When  check  current status](#when-to-check-for-room-status)  ## Starting Streaming / Recording  To start recording, streaming  both, create  instance  `HMSRecordingConfig`.  `HMSRecordingConfig` takes  following:  1. **meetingUrl**: _String_. The URL  100ms bot user will open  join  room. It must allow access without  user level interaction. 2. **`rtmpUrls`**: _List<String\\>_. If streaming  required,     one   RTMP ingest Urls   max limit  3 urls   stream  go. If  recording,  can   empty list.      - Format: `rtmp://server.com/app/STREAM_KEY`     - Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`         - \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.         - \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.  3. **record**: _Boolean_. If recording  required, set true. If recording   required, set false. This value   effect  streaming. 4. **resolution**: _HMSRtmpVideoResolution_. An optional value   output resolution   stream. For instance default  landscape  1280x720     set   portrait mode  720x1280. Or smaller values like 480x80.  The `HMSRtmpVideoResolution` takes Width  Height.  -   If  `rtmpUrls`  record = true  provided,  streaming  recording will begin. -   If  `rtmpUrls`  provided,  streaming will begin. -   If  record true  provided,  recording will begin.  If either one  started,     started without first stopping whatever  running. Eg: Only streaming  started. Recording   started unless streaming  stopped first.  If   required,     started together  providing  RTMP ingest Urls  recording = true.  The result   action  sent   callback  `HMSActionResultListener`. An attempt  start streaming/recording   successful  `onSuccess` will  called. On failure  start   error will  sent  `onError(error: HMSException)`.  <Tabs id=\"streamingrecording\" items={['Kotlin', 'Java']} />  <Tab id='streamingrecording-0'>  ```kotlin hmsSdk.startRtmpOrRecording(hmsRecordingConfig, object : HMSActionResultListener {      override fun onSuccess() {         // started successfully     }      override fun onError(error: HMSException) {         //  error occurred     }  } ) ```  </Tab>  <Tab id='streamingrecording-1'>  ```java hmsSdk.startRtmpOrRecording(hmsRecordingConfig, new HMSActionResultListener() {     @Override     public void onSuccess() {         // started successfully     }      @Override     public void onError(@NonNull HMSException e) {         //  error occurred     } }); ```  </Tab>  ## Stopping Streaming / Recording  To stop streaming AND recording. It   currently possible  stop just one, whatever  running will  stopped.  Here's   stop both:  The `stopRtmpAndRecording`  takes  single parameter,  callback  `HMSActionResultListener`. An attempt  stop streaming  recording   successful  `onSuccess` will  called. On failure  stop   error will  sent  `onError(error: HMSException)`.  <Tabs id=\"stopstreamingrecording\" items={['Kotlin', 'Java']} />  <Tab id='stopstreamingrecording-0'>  ```kotlin hmsSdk.stopRtmpAndRecording(object : HMSActionResultListener {      override fun onSuccess() {         // Stop succeeded.     }      override fun onError(error: HMSException) {         // Error  stopping.     }  })  ```  </Tab>  <Tab id='stopstreamingrecording-1'>  ```java hmsSdk.stopRtmpAndRecording(new HMSActionResultListener() {     @Override     public void onSuccess() {         // Stop succeeded.     }      @Override     public void onError(@NonNull HMSException e) {         // Error  stopping.     } }); ```  </Tab>  ## Current Room Status  The current status   room  always reflected   `HMSRoom` object   returned   `HMSUpdateListener`.  Here   relevant properties inside  `HMSRoom` object   can read  get  current recording/streaming status   room namely: `rtmpHMSRtmpStreamingState`, `browserRecordingState`, `serverRecordingState`  `hlsStreamingState`.  Each   (except HLS)  objects  contain  boolean `running`  lets  know   active   room right now  `error`  lets  know  details   error  one occurred,  `startedAt`  contains  [UNIX epoch](https://www.epochconverter.com/) timestamp    stream began.  Apart   RTMP stream   browser recording,   ones  can start  stop,   also  serverRecording,  can  turned    room  archival purposes    currently  stopped  enabled   room   dashboard. HLS streaming can  started  well.  1. **rtmpHMSRtmpStreamingState**  instance  `HMSRtmpStreamingState`,  looks like:  ```kotlin data class HMSRtmpStreamingState(     val running : Boolean,     val error : HMSException?,     val startedAt: Long?,     val stoppedAt: Long? ) ```  This represents  livestream  one   RTMP urls.  `startedAt`   unix epoch timestamp    recording  started.  `stoppedAt`   unix epoch timestamp    recording  ended.  Both may  present   means  recording  started   point  stopped   later date. If  recording   restarted,  possible   `stoppedAt`     `startedAt`.  2. **browserRecordingState**  instance  `HMSBrowserRecordingState`,  looks like:  ```kotlin data class HMSBrowserRecordingState(     val running : Boolean,     val error : HMSException?,     val startedAt: Long?,     val stoppedAt: Long? ) ```  This represents  recording  can  requested  start.  `startedAt`   unix epoch timestamp    recording  started.  `stoppedAt`   unix epoch timestamp    recording  ended.  Both may  present   means  recording  started   point  stopped   later date. If  recording   restarted,  possible   `stoppedAt`     `startedAt`.  3. **serverRecordingState**  instance  `HMSServerRecordingState`,  looks like:  ```kotlin data class HMSServerRecordingState(     val running : Boolean,     val error : HMSException?,     val startedAt: Long? ) ```  This represents   room  set   recorded    created   sessions within  will always  recorded  archival   server.  `startedAt`   unix epoch timestamp    recording  started. However server-side   special case  recording. It  considered started   current room's session  begun. A session  defined   time    room goes  zero peers  it,  one,   time    room contains  peers. (note: beam bots  join  recording will leave   timeout    peers  present.)  Because  server side recording always begins   someone   room  room creation time   recording type's start time will   same. Also     `stoppedAt` since   mean  room  ended.  ## When  check  room status  As  SDK version 2.2.2,  room status can  checked     three events  type `HMSRoomUpdate`  `HMSUpdateListener` appear:  -   `HMSRoomUpdate.SERVER_RECORDING_STATE_UPDATED,` -   `HMSRoomUpdate.RTMP_STREAMING_STATE_UPDATED` -   `HMSRoomUpdate.BROWSER_RECORDING_STATE_UPDATED`  The properties mentioned  will    `HMSRoom` object.  -   The values   streaming  recording will  updated   room object returned  onJoin.     So saving  instance   room received   time  recommended.  ### Code sample  Refer   code example within  [100ms advanced sample app](https://github.com/100mslive/100ms-android/blob/0ebfc6527bafbda7236d5245dedb5fefb262bfcc/app/src/main/java/live/hms/app2/ui/meeting/MeetingViewModel.kt#L295)   information. ",
        "platformName": "Android",
        "objectID": "/android/v2/features/rtmp-recording"
    },
    {
        "title": "screen-share.mdx",
        "link": "/android/v2/features/screen-share",
        "keywords": [],
        "headings": [
            "How to start screenshare from the app (without a custom notification)",
            "How to add a custom notification",
            "How to get Screen Share Status",
            "How to stop the screenshare and dissmiss the foreground notification from the notification.",
            "How to stop screenshare"
        ],
        "content": "--- title: Screen Share nav: 12 ---  Android SDK provides support  sharing  entire screen   device   room.  Please note    peer  share  screen,  role must  screenshare enabled   dashboard. Also select  appropriate resolution   desire  screenshare track   of.  ![ScreenshareDashboard](/docs/v2/screenshare-dashboard.png)  ## How  start screenshare   app (without  custom notification) To start screen share, app needs  call  `startScreenshare` method  `HMSSDK`,  takes  two parameters -     The first one  `HMSActionResultListener`    callback object needed  inform  `success`          `failure`   action     The second one   `Intent`    result data  MediaProjection permission activity;      calling app must validate  result code  `Activity.RESULT_OK` before     calling  method.  Following   snippet    use this:  <Tabs id=\"startscreenshare\" items={['Kotlin']} />  <Tab id='startscreenshare-0'>  ```kotlin // Define  result Launcher   var resultLauncher = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->      (result.resultCode == Activity.RESULT_OK) {       val mediaProjectionPermissionResultData: Intent? = result.data       // Pass  intent  hmsSDK       hmsSDK.startScreenshare(object : HMSActionResultListener {         override fun onError(error: HMSException) {           //  error occurred         }          override fun onSuccess() {           // started successfully         }        } ,mediaProjectionPermissionResultData)     }   }      // Get  MEDIA_PROJECTION_SERVICE  launch  result launcher     val mediaProjectionManager: MediaProjectionManager? = requireContext().getSystemService(                 Context.MEDIA_PROJECTION_SERVICE               )  MediaProjectionManager     resultLauncher.launch(mediaProjectionManager?.createScreenCaptureIntent())  ```   It  important  note  screenshare will  work   `resultCode`  NOT `Activity.RESULT_OK`. SDK will also start  foreground service   notification  screenshare  started,   mandated  Android 10.  ## How  add  custom notification  To take  look     implemented   sample app, click [here](https://github.com/100mslive/100ms-android/blob/3590777bf0a3677cb9b5001034ea9ed7087f9d90/app/src/main/java/live/hms/app2/ui/meeting/MeetingViewModel.kt#L860).  `hmssdk.startScreenShare` also takes  optional third parameter  type notification. See   build  custom notification   android docs [here](https://developer.android.com/training/notify-user/build-notification).  It  look something like this: Since    standard Android notification  full range  customization  available.  ```kotlin    fun startScreenshare(mediaProjectionPermissionResultData: Intent?, actionListener: HMSActionResultListener) {     // Without custom notification     // hmsSDK.startScreenshare(actionListener ,mediaProjectionPermissionResultData)      // With custom notification     val notification = NotificationCompat.Builder(getApplication(), \"ScreenCapture channel\")       .setContentText(\"Screenshare running  roomId: ${hmsRoom?.roomId}\")       .setSmallIcon(R.drawable.arrow_up_float)       .build()      hmsSDK.startScreenshare(actionListener, mediaProjectionPermissionResultData, notification)   }  ```   </Tab>   ## How  get Screen Share Status  Application needs  call  `isScreenShareActive` method  `HMSSDK`.  This method returns  `Boolean`  will  true inscase ScreenShare  currently active   used,  False  inactive state.  <Tabs id=\"screensharestatus\" items={[\"Kotlin\"]} />  <Tab id='screensharestatus-0'>  ```kotlin    hmsSDK.isScreenShareActive()  ```  </Tab>  ## How  stop  screenshare  dissmiss  foreground notification   notification.  To stop  screenshare, create  custom notification  add  following action  it. The image   anything,   action    gotten   HMSScreenCaptureService. This will create  \"STOP SCREENSHARE\" button   intent.  This pending intent   passed anywhere  like, including  tap   notification itself. ```kotlin val notification = NotificationCompat.Builder(getApplication(), \"ScreenCapture channel\")       .addAction(R.drawable.ic_menu_close_clear_cancel, \"Stop Screenshare\", HMSScreenCaptureService.getStopScreenSharePendingIntent(getApplication()))       .build()  ```  ## How  stop screenshare  Application needs  call  `stopScreenshare` method  `HMSSDK`  pass  instance  `HMSActionResultListener`  listen   callbacks. SDK also stops  foreground service  calling  method.  <Tabs id=\"stopscreenshare\" items={['Kotlin']} />  <Tab id='stopscreenshare-0'>  ```kotlin        hmsSDK.stopScreenshare(object : HMSActionResultListener {         override fun onError(error: HMSException) {           //  error occurred         }          override fun onSuccess() {           // stopped successfully         }        } )  ```  </Tab>   >   It  advisable  call `leave` API   `onDestroy()`   `activity`/ `fragment` that     started  screenshare otherwise  foreground service will  running  even user kills the     app   Recents tab.  >   DONOT forget  add  permission  foreground service  ```kotlin      <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" />  ```",
        "platformName": "Android",
        "objectID": "/android/v2/features/screen-share"
    },
    {
        "title": "adaptive-bitrate.mdx",
        "link": "/android/v2/foundation/adaptive-bitrate",
        "keywords": [],
        "headings": [],
        "content": "--- title: Adaptive Bitrate nav: 1.8 ---  Adaptive bitrate (ABR) refers  features  enable dynamic adjustments  video quality—to optimise  end-user experience  diverse network conditions. ABR ensures  every participant  able  consume  highest possible quality video  conferencing  streaming use-cases, based   bandwidth constraints.\r \r In addition  network, ABR can also optimise   right video quality based   size   video element. For example,  video call running  active speaker layout  larger video tiles  require higher quality video track. These adjustments can  made dynamically  adaptive bitrate.\r \r Learn   100ms enables adaptive bitrate in:\r \r * [Conferencing scenarios](#abr-in-conferencing)\r * [Live streaming scenarios](#abr-in-live-streaming)\r \r ## ABR  conferencing\r \r Peers  100ms rooms can publish multiple video quality levels simultaneously. This  called “simulcast”  100ms. Peers  consume  video tracks can upgrade  downgrade video quality.\r \r You can enable simulcast   publishing role's template,  use manual  automatic layer changes   subscriber's side.\r \r ### Publisher-side configuration\r \r Simulcast configuration  opt-in  can  enabled   role's configuration inside  template. The role's publish video quality determines video quality layers  simulcast. For example,  role configured  publish  720p can simulcast 180p, 360p  720p layers.\r \r | Video publish quality  Possible simulcast layers |\r |-----------------------|---------------------------|\r | 1080p                  1080p, 540p, 270p         |\r | 720p                   720p, 360p, 180p          |\r | 480p                   480p, 240p                |\r | 360p                   360p, 180p                |\r | 240p                   240p                      |\r | 180p                   180p                      |\r \r #### Enable via dashboard\r \r Enable \"can publish simulcast\"   template page   particular role. You can also specify  many video quality layers will  simultaneously published  peers   role. The peer will publish  layers assuming network bandwidth permits.\r \r ![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r \r #### Enable via API\r \r Update role configuration using  [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2  3 layers  scale   selected publish layer.\r \r In  example below,  role  configured  publish 720p  3 simulcast layers:\r \r * `f`  full  scale  factor  1 (= 720p)\r * `h`  half  scale  factor  2 (= 360p)\r * `q`  quarter  scale  factor  4 (= 180p)  ```js {     \"publishParams\": {         ...         \"simulcast\": {             \"video\": {                 \"layers\": [                     {                         \"rid\": \"f\",                         \"scaleResolutionDownBy\": 1,                         \"maxBitrate\": 700,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"h\",                         \"scaleResolutionDownBy\": 2,                         \"maxBitrate\": 250,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"q\",                         \"scaleResolutionDownBy\": 4,                         \"maxBitrate\": 100,                         \"maxFramerate\": 30                     }                 ]             },             \"screen\": {}         }     } } ``` \r ### Subscribe-side behavior\r \r <br/>\r \r #### Manual layer selection\r \r The 100ms client-side SDKs provide methods  set  preferred quality layer   remote peer's video track. See docs   preferred platform:\r \r * [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r * [iOS](/docs/ios/v2/advanced-features/simulcast)\r * [Android](/docs/android/v2/advanced-features/simulcast)\r \r #### Automatic layer selection\r \r <br/>\r <video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r     <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r </video>\r <br/>\r \r - Based  video tile size: The SDK automatically ensures appropriate video layer  subscribed to,  demonstrated   video above. For example,   video element  360 px  width, 360p   closest layer will  selected.\r     - **JavaScript**: The `useVideo` hook   100ms React SDK auto-selects  appropriate video quality layer.\r     - **iOS**: `HMSVideoView` can auto-select video quality layer.\r     - **Android**: _Coming soon_.\r - Based  network quality: ABR will work alongside subscribe degradation  auto-downgrade video quality  peers. This  _coming soon_.\r \r ## ABR  live streaming\r \r 100ms uses  HTTP Live Streaming (HLS) protocol  live streaming scenarios. HLS supports adaptive bitrate    box,  HLS video players can automatically  manually pick appropriate video quality levels.\r \r Learn   [how HLS works   blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/adaptive-bitrate"
    },
    {
        "title": "basics.mdx",
        "link": "/android/v2/foundation/basics",
        "keywords": [],
        "headings": ["Quickstart"],
        "content": "---\r title: Basics\r nav: 1.1\r ---\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](/android/v2/guides/quickstart)\r ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/basics"
    },
    {
        "title": "handling-audio-video-edge-cases.mdx",
        "link": "/android/v2/foundation/handling-audio-video-edge-cases",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Handling audio-video edge cases\r nav: 1.4\r ---\r \r ## Introduction  100ms handles  lot  standard audio/video issues internally without  developer needing  handle  explicitly. This page describes  common issues   100ms handles them.  There  3 major issues  issues  can occur   audio/video conference  - Device capture exceptions - Network disconnection/switching network exceptions - Network bandwidth limitation/large room exceptions  ## Device failure  A common issue   failure  capture mic/camera even though  user   devices connected. Common causes include differences  OS/browser implementations  device capture APIs, permission   granted   user,   device   use  another program.  The usual recourse   exceptions   prompt  user action - \"Grant permission\", \"Please close   app using microphone\", \"Switch  Safari\"  100ms' SDKs come   [preview method](../features/preview)  can  called  joining  room. This will test  device failures, network connectivity  throw errors   recommended user action.  ## Network disconnection/Switching networks  Another set  common issues  minor network blips. Common causes    user moves  one room  another,  switches  wifi  data.  100ms will send  notification within 10s  detecting  network disconnection  will automatically retry  connection  available upto 60s. After 60s,  terminal error  thrown   client.  ## Network bandwidth limitation/large rooms  A common occurrence  large rooms,  constrained networks  dropped frames. This results  robotic voices, frozen frames, pixelated screenshare  entire pieces  audio/video   lost.  100ms will automatically prioritize connections  network limits  reached. This prioritization can  controlled  developers using  dashboard  100ms APIs.  eg. A developer can prioritize host's screenshare higher  guests' videos. In low bandwidth constraints, guests' videos will  turned off,  host's screenshare will remain. \r ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/handling-audio-video-edge-cases"
    },
    {
        "title": "live-streaming.mdx",
        "link": "/android/v2/foundation/live-streaming",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming nav: 1.5 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   Android SDK [here](/android/v2/features/hls). ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/live-streaming"
    },
    {
        "title": "recordings.mdx",
        "link": "/android/v2/foundation/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.7 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/recordings"
    },
    {
        "title": "security-and-tokens.mdx",
        "link": "/android/v2/foundation/security-and-tokens",
        "keywords": [],
        "headings": ["Code sample: Generate app token", "Code sample: Generate management token"],
        "content": "---\r title: Authentication  Tokens\r nav: 1.3\r ---\r \r ## Introduction  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](./../features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](/docs/server-side/v2/Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use? You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language. \r \r #### Code sample: Generate app token\r \r <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='client-code-token-0'>\r \r ```javascript\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r var payload = {\r     access_key: app_access_key,\r     room_id: '<room_id>',\r     user_id: '<user_id>',\r     role: '<role>',\r     type: 'app',\r     version: 2,\r     iat: Math.floor(Date.now() / 1000),\r     nbf: Math.floor(Date.now() / 1000)\r };\r \r jwt.sign(\r     payload,\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='client-code-token-1'>\r \r ```python\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r import sys\r \r app_access_key = \"<app_access_key>\"\r app_secret = \"<app_secret>\"\r \r def generate(room_id, user_id, role):\r     expires = expires  24 * 3600\r     now = datetime.datetime.utcnow()\r     exp  = now+ datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r                 \"access_key\": app_access_key,\r                 \"type\":\"app\",\r                 \"version\":2,\r                 \"room_id\": room_id,\r                 \"user_id\": user_id,\r                 \"role\":role,\r                 \"jti\": str(uuid.uuid4()),\r                 \"exp\": exp,\r                 \"iat\": now,\r                 \"nbf\": now,\r                 }, key=app_secret)\r if __name__ == \"__main__\":\r      len(sys.argv) == 3:\r         room_id = sys.argv[0]\r         user_id = sys.argv[1]\r         role = sys.argv[2]\r     print(generate(room_id=room_id, user_id=user_id, role=role))\r ```\r \r </Tab>\r \r <Tab id='client-code-token-2'  >\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateHmsClientToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"room_id\", \"<room_id>\");\r     payload.put(\"user_id\", \"<user_id>\");\r     payload.put(\"role\", \"<role>\");\r     payload.put(\"type\", \"app\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id='client-code-token-3'  >\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r \r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"app_secret\"\r \r def generateAppToken(room_id, user_id, role)\r     now = Time.now\r     exp = now + 86400\r     payload = {\r         access_key: $app_access_key,\r         room_id: room_id,\r         user_id: user_id,\r         role: role,\r         type: \"app\",\r         jti: SecureRandom.uuid,\r         version: 2,\r         iat: now.to_i,\r         nbf: now.to_i,\r         exp: exp.to_i\r     }\r \r     token = JWT.encode(payload, $app_secret, 'HS256')\r end\r \r puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"\r \r ```\r \r </Tab>\r \r <Tab id='client-code-token-4'>\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $issuedAt  = new DateTimeImmutable();\r $expire    = $issuedAt->modify('+24 hours')->getTimestamp();\r $accessKey = \"<app_access_key>\";\r $secret = \"<app_secret>\";\r $version   = 2;\r $type      = \"app\";\r $role      = \"<role>\";\r $roomId    = \"<room_id>\";\r $userId    = \"<user_id>\";\r \r $payload = [\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r     'access_key' => $accessKey,\r     'type' => \"app\",\r     'jti' =>  Uuid::uuid4()->toString()\r     'version' => 2,\r     'role' => $role,\r     'room_id' => $roomId,\r     'user_id' => $userId\r ];\r \r $token = JWT::encode(\r     $payload,\r     $secret,\r     'HS256'\r );\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure.\r \r </Note>\r \r #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](./../guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.   #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.   If  evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics),  can use  public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.\r \r #### Code sample: Generate management token\r \r <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='test-code-0'>\r \r ```js\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r jwt.sign(\r     {\r         access_key: app_access_key,\r         type: 'management',\r         version: 2,\r         iat: Math.floor(Date.now() / 1000),\r         nbf: Math.floor(Date.now() / 1000)\r     },\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='test-code-1'>\r \r ```py\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r \r app_access_key = '<app_access_key>'\r app_secret = '<app_secret>'\r \r \r def generateManagementToken():\r     expires = 24 * 3600\r     now = datetime.datetime.utcnow()\r     exp = now + datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r         'access_key': app_access_key,\r         'type': 'management',\r         'version': 2,\r         'jti': str(uuid.uuid4()),\r         'iat': now,\r         'exp': exp,\r         'nbf': now\r         }, key=app_secret)\r \r if __name__ == '__main__':\r     print(generateManagementToken())\r ```\r \r </Tab>\r \r <Tab id=\"test-code-2\">\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateManagementToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"type\", \"management\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id=\"test-code-3\">\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"<app_secret>\"\r \r def generateManagementToken()\r     now = Time.now\r     exp = now + 86400\r     payload = {\r     access_key: $app_access_key,\r     type: \"management\",\r     version: 2,\r     jti: SecureRandom.uuid,\r     iat: now.to_i,\r     nbf: now.to_i,\r     exp: exp.to_i\r }\r token = JWT.encode(payload, $app_secret, 'HS256')\r return token\r end\r \r puts generateManagementToken\r ```\r \r </Tab>\r \r <Tab id=\"test-code-4\">\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $app_access_key = \"<app_access_key>\";\r $app_secret = \"<app_secret>\";\r \r $issuedAt   = new DateTimeImmutable();\r $expire     = $issuedAt->modify('+24 hours')->getTimestamp();\r \r $payload = [\r     'access_key' => $app_access_key,\r     'type' => 'management',\r     'version' => 2,\r     'jti' =>  Uuid::uuid4()->toString(),\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r ];\r \r $token = JWT::encode($payload, $app_secret, 'HS256');\r ?>\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.\r \r </Note>\r ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/security-and-tokens"
    },
    {
        "title": "size.mdx",
        "link": "/android/v2/foundation/size",
        "keywords": [],
        "headings": [],
        "content": "--- title: SDK Size Impact nav: 1.6 ---   | Increase APK size | |---|---|---| |(armeabi-v7)| **5.8MB**| |(arm64-v8a) **(most common one)**| **6.4MB**| |(x86_64)| **7.1MB**| |(x86)| **7.2MB**|  ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/size"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/android/v2/foundation/templates-and-roles",
        "keywords": [],
        "headings": ["API reference"],
        "content": "--- title: Templates  Roles nav: 1.2 ---  ## Introduction  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              |   ## API reference  Apart   dashboard,  programmatic way  interact  templates  via [API](/server-side/v2/policy/template-object). ",
        "platformName": "Android",
        "objectID": "/android/v2/foundation/templates-and-roles"
    },
    {
        "title": "proguard-config.mdx",
        "link": "/android/v2/guides/proguard-config",
        "keywords": [],
        "headings": [
            "100ms Android SDK 2.1.2 or higher",
            "Prior to Android SDK version 2.1.2",
            "100ms proguard rules"
        ],
        "content": "--- title: Proguard configuration nav: 2.3 ---  ## 100ms Android SDK 2.1.2  higher  If using 100ms Android SDK version 2.1.2  higher proguard configuration  bundled inside it. No additional code  required.  ## Prior  Android SDK version 2.1.2  Prior  Android SDK version 2.1.2,  following configuration  needed  release builds.  Add    `proguard-rules.pro`  ```:proguard-rules.pro section=PriorToAndroidSDKVersion212 sectionIndex=1 # 100ms proguard rules -keep class org.webrtc.** { *; } -keep class live.hms.video.** { *; } ``` ",
        "platformName": "Android",
        "objectID": "/android/v2/guides/proguard-config"
    },
    {
        "title": "quickstart.mdx",
        "link": "/android/v2/guides/quickstart",
        "keywords": [],
        "headings": [
            "Overview",
            "Prerequisites",
            "Supported Android API Levels",
            "Getting the video call joining link",
            "Add SDK dependencies",
            "Login",
            "Request",
            "Response",
            "Permissions",
            "Instantiate HMSSDK",
            "Join a Video Call",
            "How you know when people join or leave",
            "How to render audio and video",
            "Showing Videos",
            "Listening to Updates Effectively",
            "Where to go from here",
            "Glossary"
        ],
        "content": "--- title: 100ms SDK Android Quickstart Guide nav: 2.1 ---  ## Overview  This overview shows  major steps involved  creating  demo project   100ms SDK. Each section links  extra detail.  Here   sample apps demonstrating this.  [Simplest implementaion.](https://github.com/100mslive/hello-world-android/)  [Most full-featured implementation.](https://github.com/100mslive/100ms-android/)  Jump   section  interested   read top   get  overview.  -   [Getting  video call joining link](#getting-the-video-call-joining-link) -   [Add  sdk dependencies](#add-sdk-dependencies). -   [Create  login token  authenticate  user](#login). -   [Add permissions](#permissions) -   [Create  instance   `HMSSDK`](#instantiate-hmssdk).  *   Show  optional   user's audio video   100ms `hmssdk.preview`.  -   [Call `hmssdk.join`   video call link  join  call](#join-a-video-call). -   [Know  people join  leave](#how-you-know-when-people-join-or-leave) -   [How  render audio/video](#how-to-render-audio-and-video) -   [Listening  updates effectively](#listening-to-updates-effectively)     <hr />  ## Prerequisites  Familiarity  Android Studio   [fundamentals](https://developer.android.com/training/basics/firstapp)  android apps.  ## Supported Android API Levels  100ms' Android SDK supports Android API level 21  higher. It  built  armeabi-v7a, arm64-v8a, x86,  x86_64 architectures.  ### Getting  video call joining link  To join  video call  need  authentication token   room id. Or  server  will translate  link  them. The [100ms Dashboard](https://dashboard.100ms.live/register)  one way  generate  auth tokens. In production   server will generate   manage user authentication.  We encourage   setup   server  authenticate users rather  using  100ms dashboard     production.  For  purposes   quickstart  can rely  just  100ms dashboard. Sign    100ms Dashboard [here](https://dashboard.100ms.live/register).  From either  dashboard,    server  implemented,  need  generate  video call link. Video call links generated   100ms Dashboard look like `https://myname.app.100ms.live/meeting/correct-horse-battery`.  > ⚙️ For Production > > With   server  authentication  link generation,  format   link    you.  ### Add SDK dependencies  The latest SDK version is:  [![](https://img.shields.io/badge/dynamic/xml.svg?label=100ms&color=blue&query=%2F%2Fmetadata%2Fversioning%2Flatest&url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Flive%2F100ms%2Fandroid-sdk%2Fmaven-metadata.xml)](https://jitpack.io/#100mslive/android-sdk)   <Tabs id=\"sdk-imports\" items={['Maven Central', 'Jitpack']} />  <Tab id='sdk-imports-0'> ​  ```json{5-8}:settings.gradle section=AddSDKDependencies sectionIndex=1 dependencies {  // See  version   badge above.  // There  separate libraries   sdk, virtual background  hls-player-stats.  //     add just  ones  need.  def hmsVersion = \"x.x.x\"  implementation \"live.100ms:android-sdk:$hmsVersion\"    // Essential  implementation \"live.100ms:virtual-background:$hmsVersion\" // Optional  implementation \"live.100ms:hls-player-stats:$hmsVersion\"   // Optional } ```  </Tab>   <Tab id='sdk-imports-1'>  There  one extra step  use  jitpack libraries.  -   Add  JitPack repository   root `settings.gradle`   end   `respositories` closure:  You can open   Android Studio  double tapping shift  typing `settings.gradle`.  ```json{7}:settings.gradle section=AddSDKDependencies sectionIndex=1 dependencyResolutionManagement {  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)  repositories {  google()  mavenCentral()  jcenter() // Warning:  repository  going  shut  soon  maven { url 'https://jitpack.io' }     } } rootProject.name = \"MyVideoCallApp\" include ':app'  ```  -   Add  100ms sdk dependency   app-level `build.gradle`  ```json{2,4-6}:build.gradle section=AddSDKDependencies sectionIndex=2 dependencies {  def hmsVersion = \"x.x.x\"  // See  version   jitpack badge above.  implementation \"com.github.100mslive.android-sdk:lib:$hmsVersion\"          // Essential  implementation \"com.github.100mslive.android-sdk:virtualBackground:$hmsVersion\" // Optional  implementation \"com.github.100mslive.android-sdk:stats:$hmsVersion\"            // Optional  } ```  </Tab>  ### Login  #### Request  Here's   get  auth token  100ms's demo authentication  1. Sign    dashboard. 2. Get  video call link. It  look like `https://myname.app.100ms.live/meeting/correct-horse-battery` 3. Send  http post request  `https://prod-in.100ms.live/hmsapi/get-token` 4. With  header \"subdomain\" set  `myname.app.100ms.live`   link  `https://myname.app.100ms.live/meeting/correct-horse-battery` 5. For  link   type `https://myname.app.100ms.live/meeting/correct-horse-battery` The body  json   format `{\"code\": \"correct-horse-battery\", \"user_id\":\"your-customer-id\" }`  user_id can   random string  well   can create   `UUID.randomUUID().toString(),`.  > ⚙️ For Production > > Maybe   use links  all. You will need  generate tokens   backend,  rooms  users. Look   [Token Setup Guide](token) here.  #### Response  The 100ms server will respond   auth token like  `{\"token\":\"some-token-string\"}`.  ### Permissions  Camera, Recording Audio  Internet permissions  required. Add    manifest.  ```xml:AndroidManifest.xml section=Permissions sectionIndex=1     <uses-permission android:name=\"android.permission.CAMERA\" />     <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />     <uses-permission android:name=\"android.permission.INTERNET\" /> ```  You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.  ### Instantiate HMSSDK  Instantiate  HMSSDK like this:  <Tabs id=\"instanstiate-hmssdk\" items={['Kotlin', 'Java']} />  <Tab id='instanstiate-hmssdk-0'>  ```kotlin section=InstantiateHMSSDK sectionIndex=1 tab=Kotlin     val hmsSdk = HMSSDK         .Builder(application)         .build() ```  </Tab>  <Tab id='instanstiate-hmssdk-1'>  ```java section=InstantiateHMSSDK sectionIndex=1 tab=Java  HMSSDK hmssdk = new HMSSDK                         .Builder(application)                         .build(); ```  </Tab>  ### Join  Video Call  To join  video call, call  `join` method  `hmssdk`   config  appropriate listeners.  The main ones  know are:  `onJoin` - called   join  successful    entered  room.  > 💡 Audio will  automatically connected, video requires  work   side.  `onPeerUpdate` - called   person joins  leaves  call    audio/video mutes/unmutes.  `onTrackUpdate` - usually   person joins  call,  listener will first call `onPeerUpdate`  notify   join. Subsequently `onTrackUpdate` will  called   actual video track.  > 💡It's essential   callback  listened    may  peers without video.  <Tabs id=\"join-call\" items={['Kotlin', 'Java']} />  <Tab id='join-call-0'>  ```kotlin section=JoinVideoCall sectionIndex=1 tab=Kotlin  val config = HMSConfig(\"user display name\", authToken)  hmsSdk.join(config, MyHmsUpdateListener())  class MyHmsUpdateListener : HMSUpdateListener {     override fun onJoin(room: HMSRoom) {}     override fun onTrackUpdate(type: HMSTrackUpdate, track: HMSTrack, peer: HMSPeer) {}     override fun onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer) {}     override fun onMessageReceived(message: HMSMessage) {}     override fun onRoleChangeRequest(request: HMSRoleChangeRequest) {}     override fun onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom) {}     override fun onError(error: HMSException) {} } ```  </Tab>  <Tab id='join-call-1'>  ```java section=JoinVideoCall sectionIndex=1 tab=Java  HMSConfig config = new HMSConfig(\"user display name\", authToken);  hmsSdk.join(config, new MyHmsUpdateListener());  class MyHmsUpdateListener implements HMSUpdateListener {     @Override public void onJoin(@NonNull HMSRoom hmsRoom) {}     @Override public void onMessageReceived(@NonNull HMSMessage hmsMessage) {}     @Override public void onPeerUpdate(@NonNull HMSPeerUpdate hmsPeerUpdate, @NonNull HMSPeer hmsPeer) {}     @Override public void onReconnected() {}     @Override public void onReconnecting(@NonNull HMSException e) {}     @Override public void onRoleChangeRequest(@NonNull HMSRoleChangeRequest hmsRoleChangeRequest) {}     @Override public void onRoomUpdate(@NonNull HMSRoomUpdate hmsRoomUpdate, @NonNull HMSRoom hmsRoom) {}     @Override public void onTrackUpdate(@NonNull HMSTrackUpdate hmsTrackUpdate, @NonNull HMSTrack hmsTrack, @NonNull HMSPeer hmsPeer) {}     @Override public void onError(@NonNull HMSException e) {} }  ```  </Tab>  ### How  know  people join  leave  The join method takes  interface called `HMSUpdateListener`. It lets  know  peers join  leave  call, mute/unmute  audio  video  lots more.  The `HMSUpdateListener`   callback  notify  people joining  leaving. It  `onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer)`.  > 💡`HMSPeer`  object  represents  person   call.  ### How  render audio  video  The SDK plays  audio  every person  joins  call. Audio will begin playing  join succeeds. To see  person's video  need  create  instance  `org.webrtc.SurfaceViewRenderer`. The correct version  webrtc  exported via  100ms android sdk already,     version `2.0.9`    additional imports  required  use it.  ### Showing Videos  A peer represents one person   video call.  A peer's video track   `hmsPeer.videoTrack`. ScreenShares can  found  `val screenShareVideoTrack = hmsPeer.auxiliaryTracks.find {   HMSVideoTrack }`. i.e  auxiliary tracks   list  tracks, one   can   ScreenShare    chosen  share  screen.  You  want  RecyclerView  participants   video call. The adapter data    list  class     peer   track  display. Call   TrackPeerPair.  Your layout xml   peer video  need    `org.webrtc.SurfaceViewRenderer`  ```xml section=ShowingVideos sectionIndex=1  <org.webrtc.SurfaceViewRenderer  android:id=\"@+id/videoSurfaceView\"  android:layout_width=\"wrap_content\"  android:layout_height=\"wrap_content\"  app:layout_constraintStart_toStartOf=\"parent\"  app:layout_constraintTop_toTopOf=\"parent\" /> ```  Initialize    added   window. Release    removed. Call `hmsPeer.videoTrack?.addSink(surfaceViewRenderer)`  start showing videos.  ### Listening  Updates Effectively  Each time    onJoin, onPeerUpdate,  onTrackUpdate,  can add   peers  `hmsSdk.getPeers()`   adapter. You'd need  map   TrackPeerPair's.  ## Where  go  here  Checkout  [simple version](https://github.com/100mslive/hello-world-android/)   project.  Also  full featured [advanced version](https://github.com/100mslive/100ms-android/).  ## Glossary  -   `Room`: When  join  particular video call,   peers said     video call `room`' -   `Track`: Media. Can   audio track   video track. -   `Peer`: One participant   video call. Local peers  you, remote peers  others. -   `Broadcast`: Chat messages  broadcasts. ",
        "platformName": "Android",
        "objectID": "/android/v2/guides/quickstart"
    },
    {
        "title": "token-endpoint.mdx",
        "link": "/android/v2/guides/token-endpoint",
        "keywords": [],
        "headings": [
            "Overview",
            "Get an app token using token endpoint",
            "Example client-side implementation",
            "Disable 100ms token endpoint",
            "Error Response"
        ],
        "content": "--- title: Auth Token Endpoint Guide nav: 2.3 ---  ## Overview  100ms provides  option  get `App Tokens` without setting   token generation backend service  simplify  integration journey  testing  [sample app](https://github.com/100mslive/100ms-web)  building integration  100ms.  You can find  token endpoint   [developer page](https://dashboard.100ms.live/developer)   100ms dashboard.  ![Token endpoint](/guides/token-endpoint-dashboard.png)  We recommend  move   token generation service   transition  app  production,   token endpoint service will  scale  production.  The \"Sample Apps\" built using 100ms client SDKs require  `App Token`  join  room  initiate  video conferencing  live streaming session. Please check  [Authentication  Tokens guide](./../foundation/security-and-tokens)  Please note    use  token endpoint  create  `Management Token`  server APIs. Refer   [Management Token section](./../foundation/security-and-tokens#management-token)  Authentication  Tokens guide   information.  ## Get  app token using token endpoint  You can use  token endpoint   100ms dashboard  building integration  100ms. This acts   tool enabling front-end developers  complete  integration without depending   backend developers  set   token generation backend service.  **URL format:** `<YOUR_TOKEN_ENDPOINT>api/token`  100ms token endpoint can generate  app token   inputs passed,   room_id, role, & user_id (optional -  internal user identifier   peer's user_id). You can use [jwt.io](https://jwt.io/)  validate whether  app token contains   input values.  <PostRequest title=\"https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"room_id\":\"633fcdd84208780bf665346a\",     \"role\":\"host\",     \"user_id\":\"1234\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOi***************************R3tT-Yk\",     \"msg\": \"token generated successfully\",     \"status\": 200,     \"success\": true,     \"api_version\": \"2.0.192\" } ```  </ResponseBox>  ### Example client-side implementation  You can directly add    client-side implementation, check  [sample app](https://github.com/100mslive/100ms-android/blob/26468836b68c6b2595c10a297187040111ababc7/app/src/main/java/live/hms/app2/model/TokenRequestWithRoomId.kt#L5)  reference.  ### Disable 100ms token endpoint  Due   security concerns,    wish  use  token endpoint  generate app tokens,   can disable    [Developers page](https://dashboard.100ms.live/developer)   dashboard  disabling  option \"Disable &lt;room_id&gt;/&lt;role&gt; link format.\"  ![Disable Token endpoint](/guides/disable-token-endpoint.png)  #### Error Response  Once  disabled    dashboard,  requests  create  app token using  100ms token endpoint will throw   error:  ```json {     \"success\": false,     \"msg\": \"Generating token using  room_id  role  disabled.\",     \"api_version\": \"2.0.192\" } ``` ",
        "platformName": "Android",
        "objectID": "/android/v2/guides/token-endpoint"
    },
    {
        "title": "token.mdx",
        "link": "/android/v2/guides/token",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Auth Token Quickstart Guide\r nav: 2.2\r ---\r \r ## Create  100ms account  - Create  account  [Dashboard  100ms](https://dashboard.100ms.live/)  ![Create Account](/docs/guides/token/create-account.png)  - After   created  account    Confirm  Email , check  promotions tab   Mail Box    find it.  - Login   Dashboard   will see  option  Create  first app. Click  it.  ![Create  first app](/docs/guides/token/starter-kit-initialize-first-step.png)  - Then   see  popup  multiple starter kits, hover  one   starter kits  click `Deploy`. We will choose \"Video Conferencing\"  now.  ![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)  - In  `Choose  deployment` step, select 100ms  enter  subdomain  wish   `Subdomain` field.  ![Domain details](/docs/guides/token/domain-details.png)  - After  App  set click  \"Go  Dashboard\"  [Go Here](https://dashboard.100ms.live/dashboard)  ![Dasboard](/docs/guides/token/go-to-dashboard.png)  ## Create  room  - Go   [Room  Dashboard](https://dashboard.100ms.live/rooms)  click  \"Create Room\" , While creating  room  can specify  name, roles  enable recording.  ![Create Room](/docs/guides/token/create-room.png)  - You will now see \"Room Details\" section     `room_id` created, copy  somewhere.  ![Room Id](/docs/guides/token/room-id.png)  ## Get  temporary token  100ms dashboard  Any client connecting calling 100ms' service needs  authenticate using  auth token. In production      servers generating  tokens (see  [here](/docs/javascript/v2/foundation/security-and-tokens)),    quick start  can use  dashboard  create  token  you. The token will expire  24 hours     hard-coded   production app.  - To get  temporary token click  \"Join room\" button.  ![Join Room](/docs/guides/token/join-room.png)  - In  popup  shows  click  icon   key shape next   role  want  join as.  ![Copy Token](/docs/guides/token/copy-token.png)  The token will  copied   clipboard. Use  along   `room_id`  proceed   quickstart guide.\r ",
        "platformName": "Android",
        "objectID": "/android/v2/guides/token"
    },
    {
        "title": "jitpack-maven-central.mdx",
        "link": "/android/v2/migrations/jitpack-maven-central",
        "keywords": [],
        "headings": [],
        "content": "--- title: Jitpack  Maven Central nav: 14.1 description: Migrating  Jitpack  Maven Central ---  Sometimes Jitpack may  facing availability issues. In  case  can swap   Jitpack imports  Maven Central ones.  The  version numbers, whether  Maven  Jitpack, always refer    SDK.  Here  Jitpack imports   equivalent Maven Central ones.  | Jitpack                                                      Maven Central                              | |-------------------------------------------------------------|--------------------------------------------| | `\"com.github.100mslive.android-sdk:lib:2.5.1\"`  `\"live.100ms:android-sdk:2.5.1\"` | | `\"com.github.100mslive.android-sdk:virtualBackground:2.5.1\"`  `\"live.100ms:virtual-background:2.5.1\"` | | `\"com.github.100mslive.android-sdk:stats:2.5.1\"`  `\"live.100ms:hls-player-stats:2.5.1\"` |  > 💡 Note    previously had: `implementation 'com.github.100mslive.android-sdk:2.5.1` notice  lack  `:lib:`  `android-sdk`,    importing  modules  will need   imports   Maven Central side. ",
        "platformName": "Android",
        "objectID": "/android/v2/migrations/jitpack-maven-central"
    },
    {
        "title": "surfaceview-migration.mdx",
        "link": "/android/v2/migrations/surfaceview-migration",
        "keywords": [],
        "headings": [
            "Why should you migrate?",
            "Adding the HMSVideoView ",
            "Updating the layout ",
            "Initalising and adding video track ",
            "Removing video track "
        ],
        "content": "--- title: SurfaceViewRenderer  HMSVideoView nav: 14.1 description: Migrating  SurfaceViewRenderer --> HMSVideoView ---  ### Why   migrate? - HMSVideoView provides  better abstraction  render live video  handles edge cases like managing release  init state. Can prevent accidentally subscribing  video track   once. - Has in-built support  zoom  pan - Has in-built support  intelligently subscribe  video   correct resolution. (Auto-Simulcast)   - All  new features will  developed  HMSVideoView  SurfaceViewRenderer will  deprecated.  To use HMSVideoView  need  migrate  SurfaceViewRenderer (if   already using   render live video),  downloading  dependency  Maven Central  ### Adding  HMSVideoView   ```json{3,4}:build.gradle dependencies {     implementation 'live.100ms:video-view:2.5.3' } ```  ### Updating  layout   ```xml <o̶r̶g̶.̶W̶e̶b̶R̶T̶C̶.̶S̶u̶r̶f̶a̶c̶e̶V̶i̶e̶w̶R̶e̶n̶d̶e̶r̶e̶r̶  live.hms.videoview.HMSVideoView   android:id=\"@+id/peerVideo\"   android:layout_width=\"match_parent\"   android:layout_height=\"wrap_content\"/> ```  ### Initalising  adding video track   ```kotlin  val hmsVideoTrack : HMSVideotrack = hmsPeer.videoTrack  s̶u̶r̶f̶a̶c̶e̶V̶i̶e̶w̶.̶i̶n̶i̶t̶(̶S̶h̶a̶r̶e̶d̶E̶g̶l̶C̶o̶n̶t̶e̶x̶t̶.̶c̶o̶n̶t̶e̶x̶t̶,̶ ̶n̶u̶l̶l̶)̶ ̶h̶m̶s̶V̶i̶d̶e̶o̶T̶r̶a̶c̶k̶?̶.̶a̶d̶d̶S̶i̶n̶k̶(̶s̶u̶r̶f̶a̶c̶e̶V̶i̶e̶w̶)̶  hmsVideoView.addTrack(hmsVideoTrack) ```  ### Removing video track   ```kotlin h̶m̶s̶V̶i̶d̶e̶o̶T̶r̶a̶c̶k̶.̶r̶e̶m̶o̶v̶e̶S̶i̶n̶k̶(̶s̶u̶r̶f̶a̶c̶e̶V̶i̶e̶w̶)̶ ̶s̶u̶r̶f̶a̶c̶e̶V̶i̶e̶w̶.̶r̶e̶l̶e̶a̶s̶e̶(̶)̶  hmsVideoView.removeTrack() ```",
        "platformName": "Android",
        "objectID": "/android/v2/migrations/surfaceview-migration"
    },
    {
        "title": "virtual-background.mdx",
        "link": "/android/v2/plugins/virtual-background",
        "keywords": [],
        "headings": [
            "Introduction",
            "Supported Devices/Versions/Resolutions",
            "Size Increase Per Architecture",
            "Common Terms",
            "Add dependency",
            "How to Integrate Virtual Background",
            "Instantiate VirtualBackgroundPlugin",
            "Check if plugin is supported",
            "Init(Optional)",
            "Change Background",
            "Tuning pluginFrameRate(Optional)",
            "Add Plugin",
            "Remove Plugin"
        ],
        "content": "--- title: Virtual Background (Beta) nav: 12 ---  ## Introduction  Virtual Background plugin helps  customising one’s background i.e. replacing  background   static image. This guide provides  overview  usage   Virtual Background plugin  100ms.  <div style={{textAlign: 'center'}}>  ![VirtualBackground](/docs/v2/android-vb.gif)  </div>  ## Supported Devices/Versions/Resolutions  -   Minimum Android api level required  support Virtual Background plugin  21,    required  use 100ms SDK -   Minimum 100ms SDK version  can work   `2.2.8` -   Virtual background plugin  built  armeabi-v7a, arm64-v8a, x86  x86_64 architectures -   Maximum supported resolution   feature  480p -   We recommend   use  feature   high performance device  smooth experience  ## Size Increase Per Architecture  -   `x86_64` - 9.2 MB -   `x86` - 9.5 MB -   `arm64-v8a` - 7.6 MB -   `armeabi-v7a` - 5 MB  ## Common Terms  -   `plugin` - We  calling virtual background feature   plugin -   `image background` - The image   plugin  replace  background    user's video. -   `plugin load time` - The time taken   plugin  load  machine learning model   first time. The machine learning model will identify   part   image  background    essential  virtual background working.  ## Add dependency  -   Adding  Virtual Background plugin  SDK dependency   app-level `build.gradle`.  [![](https://img.shields.io/badge/dynamic/xml.svg?label=100ms&color=blue&query=%2F%2Fmetadata%2Fversioning%2Flatest&url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Flive%2F100ms%2Fandroid-sdk%2Fmaven-metadata.xml)](https://jitpack.io/#100mslive/android-sdk)   <Tabs id=\"sdk-imports\" items={['Maven Central', 'Jitpack']} />  <Tab id='sdk-imports-0'>  ```json{5-8}:build.gradle section=AddSDKDependencies sectionIndex=1 dependencies {  // See  version   badge above.  // There  separate libraries   sdk, virtual background  hls-player-stats.  //     add just  ones  need.  def hmsVersion = \"x.x.x\"  implementation \"live.100ms:android-sdk:$hmsVersion\"    // Essential  implementation \"live.100ms:virtual-background:$hmsVersion\" // Optional } ```  </Tab>   <Tab id='sdk-imports-1'>  ```json:build.gradle section=AddSDKDependencies sectionIndex=2 dependencies {  def hmsVersion = \"x.x.x\"  // See  version   jitpack badge above.  implementation \"com.github.100mslive.android-sdk:lib:$hmsVersion\"  implementation \"com.github.100mslive.android-sdk:stats:$hmsVersion\" } ```  </Tab>  ## How  Integrate Virtual Background  ### Instantiate VirtualBackgroundPlugin  Instantiate  100ms Virtual Background plugin like this:  <Tabs id=\"instanstiate-VirtualBackgroundPlugin\" items={['Kotlin', 'Java']} />  <Tab id='instanstiate-VirtualBackgroundPlugin-0'>  ```kotlin val hmsSdk = HMSSDK       .Builder(application)       .build() val virtualBackgroundPlugin = HMSVirtualBackground(hmsSdk, imageBitmap) ```  </Tab>  <Tab id='instanstiate-VirtualBackgroundPlugin-1'>  ```java HMSSDK hmsSdk = new HMSSDK                        .Builder(application)                        .build(); HMSVirtualBackground virtualBackgroundPlugin = new HMSVirtualBackground(hmsSdk, imageBitmap); ```  </Tab>  That's it. You  instantiated Virtual Background plugin successfully. 🥳  Now  take  look   method signature  HMSVirtualBackground.  `HMSVirtualBackground` accepts 2 argument -  -   `hmsSdk`:  `HMSSDK` instance   used  join  room -   `imageBitmap`- Bitmap - The image   background will  replaced with. We  supporting JPG/PNG/JPEG type images.  ### Check  plugin  supported  `HMSVirtualBackground.isSupported` can  used  check   API level/Resolution  device  supported  not. If  input resolution  set   480p    supporting  feature It will return True/False based   parameters.  <Tabs id=\"Check-plugin-support\" items={['Kotlin', 'Java']} />  <Tab id='Check-plugin-support-0'>  ```kotlin if(virtualBackgroundPlugin.isSupported()){     // Device/Resolution  supported }else{     // Device/Resolution   supported, check Supported Devices/Versions/Resolutions section } ```  </Tab>  <Tab id='Check-plugin-support-1'>  ```java if(virtualBackgroundPlugin.isSupported()){     // Device/Resolution  supported }else{    // Device/Resolution   supported, check Supported Devices/Versions/Resolutions section } ```  </Tab>  ### Init(Optional)  Init  used  load  machine learning model  Virtual Background   first time. It takes   average 50-200 ms. Calling init  handled internally  SDK   done  user,   case addPlugin call will take 50-200 ms   first time   less  10ms   subsequent calls. Check [this section](#add-plugin)  addPlugin API usage  <Tabs id=\"Init\" items={['Kotlin', 'Java']} />  <Tab id='Init-0'>  ```kotlin try{    virtualBackgroundPlugin.init() }catch(err){     // failed  init Plugin } ```  </Tab>  <Tab id='Init-1'>  ```java try{    virtualBackgroundPlugin.init(); }catch(err){    // failed  init Plugin } ```  </Tab>  ### Change Background  Call `setBackground`   `HMSVirtualBackground` instance  update  background  later  required. It accepts imageBitmap   parameter  -   `imageBitmap`- Bitmap - The image   background will  replaced with.  Image will  scaled  fit   video. Scaling will maintain image aspect ratio. If  aspect ratio   background image       video,  image will  cropped  fit   background.  <Tabs id=\"Change-Background\" items={['Kotlin', 'Java']} />  <Tab id='Change-Background-0'>  ```kotlin //Use  function  get imageBitmap   JPG/PNG Image fun getBitmapFromAsset(context: Context, filename: String): Bitmap? {   val assetManager = context.assets   val instr: InputStream   var bitmap: Bitmap? = null   try {     instr = assetManager.open(filename)     bitmap = BitmapFactory.decodeStream(istr)   } catch (e: IOException) {     // error reading virtual background image   }   return bitmap } ```  ```kotlin //BACKGROUND_FILE_PATH   background image file location val imageBitmap = getBitmapFromAsset(context, BACKGROUND_FILE_PATH) //To set background  imageBitmap, Use virtualBackgroundPlugin.setBackground(imageBitmap) ```  </Tab>  <Tab id='Change-Background-1'>  ```java //Use  function  get imageBitmap   JPG/PNG Image Bitmap getBitmapFromAsset(context: Context, filename: String) {   AssetManager assetManager = context.assets;   InputStream instr;   Bitmap bitmap;   try {     instr = assetManager.open(filename);     bitmap = BitmapFactory.decodeStream(istr);   } catch (e: IOException) {      // error reading virtual background image   }   return bitmap; } ```  ```java //BACKGROUND_FILE_PATH   background image file location Bitmap imageBitmap = getBitmapFromAsset(context, BACKGROUND_FILE_PATH); //To set background  imageBitmap, Use virtualBackgroundPlugin.setBackground(imageBitmap); ```  </Tab>  ### Tuning pluginFrameRate(Optional)  `pluginFrameRate` - pluginFrameRate helps  controlling  performance  experience  Virtual Background plugin. pluginFrameRate translates   number  frames   background  detected. Higher value will use  resources (CPU/memory/battery),  making  Virtual Background experience smooth. Lower value will  generous  resources, while lowering  Virtual Background smoothness. Recommended value  15. Values higher   will  significantly improve Virtual Background smoothness  will  heavy  resources. For lower end devices value can    range  7-10.  ## Add Plugin  To add Virtual background plugin app needs  call `addPlugin` method  `HMSSDK`  takes  3 parameters -  1. `virtualBackgroundPlugin`: An instance   plugin. 2. `HMSActionResultListener`: A callback  success  failure  adding  virtual background. 3. `pluginFrameRate`: An optional parameter   many frames per second  virtual background image replacement   updated.    `Default=15`   set  user  <Tabs id=\"add-plugin\" items={['Kotlin', 'Java']} />  <Tab id='add-plugin-0'>  ```kotlin // This will apply  Virtual Background effect   local video // pluginFrameRate   optional parameter hmsSdk.addPlugin(virtualBackgroundPlugin, object : HMSActionResultListener {        override fun onError(error: HMSException) {          //  error occurred        }        override fun onSuccess() {          // added successfully        }       },       pluginFrameRate) ```  </Tab>  <Tab id='add-plugin-1'>  ```Java // This will apply  Virtual Background effect   local video // pluginFrameRate   optional parameter hmsSdk.addPlugin(virtualBackgroundPlugin, new HMSActionResultListener {        @Override        public void onError(error: HMSException) {          //  error occurred        }        @Override        public void onSuccess() {          // added successfully        }      },      pluginFrameRate) ```  </Tab>  ## Remove Plugin  To remove  virtual background plugin  app needs  call `removePlugin` method  `HMSSDK`  takes  2 parameters.  1. `virtualBackgroundPlugin`: An instance   plugin. 2. `HMSActionResultListener`: A callback  success  failure  adding  virtual background.  <Tabs id=\"remove-plugin\" items={['Kotlin', 'Java']} />  <Tab id='remove-plugin-0'>  ```kotlin //This will remove  virtual background effect   video hmsSdk.removePlugin(virtualBackgroundPlugin, object : HMSActionResultListener {        override fun onError(error: HMSException) {          //  error occurred        }        override fun onSuccess() {          // added successfully        }       }) ```  </Tab>  <Tab id='remove-plugin-1'>  ```Java //This will remove  virtual background effect   video hmsSdk.removePlugin(virtualBackgroundPlugin, new HMSActionResultListener {        @Override        public void onError(error: HMSException) {          //  error occurred        }        @Override        public void onSuccess() {          // added successfully        }      }     ) ```  </Tab> ",
        "platformName": "Android",
        "objectID": "/android/v2/plugins/virtual-background"
    },
    {
        "title": "HMSAudioSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSAudioSettings",
        "keywords": [],
        "headings": ["Properties", "bitRate", "codec"],
        "content": "--- title: HMSAudioSettings nav: 1 ---  **CLASS**  ```swift @objcMembers public class HMSAudioSettings: Codable ```  ## Properties  ### bitRate  ```swift public let bitRate: Int ```  ### codec  ```swift public let codec: String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSAudioSettings"
    },
    {
        "title": "HMSAudioTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSAudioTrack",
        "keywords": [],
        "headings": [],
        "content": "--- title: HMSAudioTrack nav: 2 ---  **CLASS**  ```swift open class HMSAudioTrack : HMSTrack ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSAudioTrack"
    },
    {
        "title": "HMSAudioTrackSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSAudioTrackSettings",
        "keywords": [],
        "headings": ["Properties", "maxBitrate", "trackDescription", "Methods", "init", "init"],
        "content": "--- title: HMSAudioTrackSettings nav: 3 ---  **CLASS**  ```swift open class HMSAudioTrackSettings : NSObject, NSCopying ```  ## Properties  ### maxBitrate  ```swift open var maxBitrate: Int ```  ### trackDescription  ```swift open var trackDescription: String? ```  ## Methods  ### init  ```swift public init() ```  ### init  ```swift public init(maxBitrate: Int, trackDescription: String?) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSAudioTrackSettings"
    },
    {
        "title": "HMSBrowserRecordingState.mdx",
        "link": "/api-reference/ios/v2/classes/HMSBrowserRecordingState",
        "keywords": [],
        "headings": ["Properties", "running", "error", "Methods", "init()"],
        "content": "--- title: HMSBrowserRecordingState nav: 4 ---  **CLASS**  ```swift @objcMembers public class HMSBrowserRecordingState: NSObject ```  ## Properties  ### running  ```swift public let running: Bool ```  ### error  ```swift public let error: HMSError? ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSBrowserRecordingState"
    },
    {
        "title": "HMSChangeTrackStateRequest.mdx",
        "link": "/api-reference/ios/v2/classes/HMSChangeTrackStateRequest",
        "keywords": [],
        "headings": ["Properties", "track", "mute", "requestedBy", "Methods", "init()"],
        "content": "--- title: HMSChangeTrackStateRequest nav: 5 ---  **CLASS**  ```swift @objcMembers public class HMSChangeTrackStateRequest: NSObject ```  ## Properties  ### track  ```swift public let track: HMSTrack ```  ### mute  ```swift public let mute: Bool ```  ### requestedBy  ```swift public let requestedBy: HMSPeer ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSChangeTrackStateRequest"
    },
    {
        "title": "HMSCommonTrackSource.mdx",
        "link": "/api-reference/ios/v2/classes/HMSCommonTrackSource",
        "keywords": [],
        "headings": [],
        "content": "--- title: HMSCommonTrackSource nav: 6 ---  **CLASS**  ```swift @objcMembers public class HMSCommonTrackSource: NSObject ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSCommonTrackSource"
    },
    {
        "title": "HMSConfig.mdx",
        "link": "/api-reference/ios/v2/classes/HMSConfig",
        "keywords": [],
        "headings": [
            "Properties",
            "userName",
            "userID",
            "roomID",
            "authToken",
            "shouldSkipPIIEvents",
            "metaData",
            "endpoint",
            "Methods",
            "init(userName:userID:roomID:authToken:shouldSkipPIIEvents:metaData:endpoint:)"
        ],
        "content": "--- title: HMSConfig nav: 7 ---  **CLASS**  ```swift @objcMembers public class HMSConfig: NSObject ```  To join  room created, clients need  create  HMSConfig instance  use  instance  call `join` method  HMSSDK  ## Properties  ### userName  ```swift public let userName: String ```  the name   user wants   displayed    room  ### userID  ```swift public let userID: String ```  ### roomID  ```swift public let roomID: String? ```  ### authToken  ```swift public let authToken: String ```  the auth token   used  ### shouldSkipPIIEvents  ```swift public let shouldSkipPIIEvents: Bool ```  ### metaData  ```swift public let metaData: String? ```  any json string  metadata  can  passed  joining  ### endpoint  ```swift public let endpoint: String? ```  to override  default endpoint (advanced)  ## Methods  ### init(userName:userID:roomID:authToken:shouldSkipPIIEvents:metaData:endpoint:)  ```swift public init(userName: String = \"iOS User\",             userID: String = UUID().uuidString,             roomID: String? = nil,             authToken: String,             shouldSkipPIIEvents: Bool = false,             metaData: String? = nil,             endpoint: String? = nil) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSConfig"
    },
    {
        "title": "HMSDataSource.mdx",
        "link": "/api-reference/ios/v2/classes/HMSDataSource",
        "keywords": [],
        "headings": [
            "Properties",
            "hms",
            "sections",
            "allModels",
            "delegate",
            "sortComparator",
            "filter",
            "sectionProducer",
            "Methods",
            "init()",
            "reload()"
        ],
        "content": "--- title: HMSDataSource nav: 8 ---  **CLASS**  ```swift public class HMSDataSource ```  ## Properties  ### hms  ```swift public var hms: HMSSDK? ```  ### sections  ```swift public var sections = [HMSSection]() ```  ### allModels  ```swift public var allModels: [HMSViewModel] ```  ### delegate  ```swift public weak var delegate: HMSDataSourceDelegate? ```  ### sortComparator  ```swift public var sortComparator: ((HMSViewModel, HMSViewModel) -> Bool)? ```  ### filter  ```swift public var filter: ((HMSViewModel) -> Bool)? ```  ### sectionProducer  ```swift public var sectionProducer: ((HMSViewModel) -> HMSSection.SectionIdentifier)? ```  ## Methods  ### init()  ```swift public init() ```  ### reload()  ```swift public func reload() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSDataSource"
    },
    {
        "title": "HMSDevice.mdx",
        "link": "/api-reference/ios/v2/classes/HMSDevice",
        "keywords": [],
        "headings": [],
        "content": "--- title: HMSDevice nav: 9 ---  **CLASS**  ```swift @objcMembers public class HMSDevice: NSObject ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSDevice"
    },
    {
        "title": "HMSError.mdx",
        "link": "/api-reference/ios/v2/classes/HMSError",
        "keywords": [],
        "headings": [
            "Properties",
            "id",
            "code",
            "message",
            "info",
            "action",
            "params",
            "description",
            "localizedDescription",
            "analyticsRepresentation",
            "Methods",
            "init(id:code:message:info:action:params:)"
        ],
        "content": "--- title: HMSError nav: 10 ---  **CLASS**  ```swift @objcMembers public class HMSError: NSObject, Error ```  ## Properties  ### id  ```swift public let id: String ```  ### code  ```swift public let code: HMSErrorCode ```  ### message  ```swift public let message: String ```  ### info  ```swift public let info: String? ```  ### action  ```swift public let action: String? ```  ### params  ```swift public let params: [String: Any]? ```  ### description  ```swift public override var description: String ```  ### localizedDescription  ```swift public var localizedDescription: String ```  ### analyticsRepresentation  ```swift public var analyticsRepresentation: [String: Any] ```  ## Methods  ### init(id:code:message:info:action:params:)  ```swift public init(id: String,             code: HMSErrorCode,             message: String,             info: String? = nil,             action: String? = nil,             params: [String: Any]? = nil) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSError"
    },
    {
        "title": "HMSLocalAudioTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSLocalAudioTrack",
        "keywords": [],
        "headings": ["Properties", "settings", "Methods", "setMute"],
        "content": "--- title: HMSLocalAudioTrack nav: 11 ---  **CLASS**  ```swift open class HMSLocalAudioTrack : HMSAudioTrack ```  ## Properties  ### settings  ```swift @NSCopying open var settings: HMSAudioTrackSettings ```  ## Methods  ### setMute  ```swift open func setMute(_ mute: Bool) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSLocalAudioTrack"
    },
    {
        "title": "HMSLocalPeer.mdx",
        "link": "/api-reference/ios/v2/classes/HMSLocalPeer",
        "keywords": [],
        "headings": ["Methods", "localAudioTrack()", "localVideoTrack()"],
        "content": "--- title: HMSLocalPeer nav: 12 ---  **CLASS**  ```swift @objcMembers public class HMSLocalPeer: HMSPeer ```  ## Methods  ### localAudioTrack()  ```swift public func localAudioTrack() -> HMSLocalAudioTrack? ```  ### localVideoTrack()  ```swift public func localVideoTrack() -> HMSLocalVideoTrack? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSLocalPeer"
    },
    {
        "title": "HMSLocalVideoTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSLocalVideoTrack",
        "keywords": [],
        "headings": [
            "Properties",
            "settings",
            "Methods",
            "setMute",
            "startCapturing",
            "stopCapturing",
            "switchCamera"
        ],
        "content": "--- title: HMSLocalVideoTrack nav: 13 ---  **CLASS**  ```swift open class HMSLocalVideoTrack : HMSVideoTrack ```  ## Properties  ### settings  ```swift open var settings: HMSVideoTrackSettings ```  ## Methods  ### setMute  ```swift open func setMute(_ mute: Bool) ```  ### startCapturing  ```swift open func startCapturing() ```  ### stopCapturing  ```swift open func stopCapturing() ```  ### switchCamera  ```swift open func switchCamera() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSLocalVideoTrack"
    },
    {
        "title": "HMSMessage.mdx",
        "link": "/api-reference/ios/v2/classes/HMSMessage",
        "keywords": [],
        "headings": [
            "Properties",
            "message",
            "type",
            "sender",
            "recipient",
            "time",
            "Methods",
            "init(message:type:)",
            "init(message:type:peerRecipient:)",
            "init(message:type:rolesRecipient:)"
        ],
        "content": "--- title: HMSMessage nav: 14 ---  **CLASS**  ```swift @objcMembers public class HMSMessage: NSObject ```  ## Properties  ### message  ```swift public let message: String ```  ### type  ```swift public let type: String ```  ### sender  ```swift public var sender: HMSPeer? ```  ### recipient  ```swift public var recipient: HMSMessageRecipient ```  ### time  ```swift public let time: Date ```  ## Methods  ### init(message:type:)  ```swift public init(message: String, type: String = \"chat\") ```  ### init(message:type:peerRecipient:)  ```swift public init(message: String, type: String = \"chat\", peerRecipient: HMSPeer) ```  ### init(message:type:rolesRecipient:)  ```swift public init(message: String, type: String = \"chat\", rolesRecipient: [HMSRole]) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSMessage"
    },
    {
        "title": "HMSMessageRecipient.mdx",
        "link": "/api-reference/ios/v2/classes/HMSMessageRecipient",
        "keywords": [],
        "headings": ["Properties", "type", "peerRecipient", "rolesRecipient", "Methods", "init()"],
        "content": "--- title: HMSMessageRecipient nav: 15 ---  **CLASS**  ```swift @objcMembers public class HMSMessageRecipient: NSObject ```  ## Properties  ### type  ```swift public let type: HMSMessageRecipientType ```  ### peerRecipient  ```swift public let peerRecipient: HMSPeer? ```  ### rolesRecipient  ```swift public let rolesRecipient: [HMSRole]? ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSMessageRecipient"
    },
    {
        "title": "HMSNetworkQuality.mdx",
        "link": "/api-reference/ios/v2/classes/HMSNetworkQuality",
        "keywords": [],
        "headings": ["Properties", "peer", "incomingAvailableBitrate", "outgoingAvailableBitrate"],
        "content": "--- title: HMSNetworkQuality nav: 16 ---  **CLASS**  ```swift @objcMembers public class HMSNetworkQuality: NSObject ```  ## Properties  ### peer  ```swift public let peer: HMSPeer ```  ### incomingAvailableBitrate  ```swift public var incomingAvailableBitrate: Int? ```  ### outgoingAvailableBitrate  ```swift public var outgoingAvailableBitrate: Int? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSNetworkQuality"
    },
    {
        "title": "HMSPeer.mdx",
        "link": "/api-reference/ios/v2/classes/HMSPeer",
        "keywords": [],
        "headings": [
            "Properties",
            "peerID",
            "customerUserID",
            "isLocal",
            "name",
            "role",
            "customerDescription",
            "audioTrack",
            "videoTrack",
            "auxiliaryTracks"
        ],
        "content": "--- title: HMSPeer nav: 17 ---  **CLASS**  ```swift @objcMembers public class HMSPeer: NSObject ```  A peer represents  participants connected   room. Peers can  \"local\"  \"remote\"  ## Properties  ### peerID  ```swift public let peerID: String ```  ### customerUserID  ```swift public let customerUserID: String? ```  ### isLocal  ```swift public let isLocal: Bool ```  ### name  ```swift public internal(set) var name: String ```  ### role  ```swift public internal(set) var role: HMSRole? ```  ### customerDescription  ```swift public internal(set) var customerDescription: String? ```  ### audioTrack  ```swift public internal(set) var audioTrack: HMSAudioTrack? ```  ### videoTrack  ```swift public internal(set) var videoTrack: HMSVideoTrack? ```  ### auxiliaryTracks  ```swift public private(set) var auxiliaryTracks: [HMSTrack]? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSPeer"
    },
    {
        "title": "HMSPermissions.mdx",
        "link": "/api-reference/ios/v2/classes/HMSPermissions",
        "keywords": [],
        "headings": [
            "Properties",
            "endRoom",
            "removeOthers",
            "stopPresentation",
            "muteAll",
            "unmute",
            "mute",
            "changeRole"
        ],
        "content": "--- title: HMSPermissions nav: 18 ---  **CLASS**  ```swift @objcMembers public class HMSPermissions: Codable ```  ## Properties  ### endRoom  ```swift public let endRoom: Bool? ```  ### removeOthers  ```swift public let removeOthers: Bool? ```  ### stopPresentation  ```swift public let stopPresentation: Bool? ```  ### muteAll  ```swift public let muteAll: Bool? ```  ### unmute  ```swift public let unmute: Bool? ```  ### mute  ```swift public let mute: Bool? ```  ### changeRole  ```swift public let changeRole: Bool? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSPermissions"
    },
    {
        "title": "HMSPublishSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSPublishSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "audio",
            "video",
            "screen",
            "videoSimulcastLayers",
            "screenSimulcastLayers",
            "allowed"
        ],
        "content": "--- title: HMSPublishSettings nav: 19 ---  **CLASS**  ```swift @objcMembers public class HMSPublishSettings: Codable ```  ## Properties  ### audio  ```swift public let audio: HMSAudioSettings ```  ### video  ```swift public let video: HMSVideoSettings ```  ### screen  ```swift public let screen: HMSVideoSettings ```  ### videoSimulcastLayers  ```swift public let videoSimulcastLayers: HMSSimulcastSettingsPolicy? ```  ### screenSimulcastLayers  ```swift public let screenSimulcastLayers: HMSSimulcastSettingsPolicy? ```  ### allowed  ```swift public let allowed: [String]? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSPublishSettings"
    },
    {
        "title": "HMSRemoteAudioTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRemoteAudioTrack",
        "keywords": [],
        "headings": ["Methods", "isPlaybackAllowed", "setPlaybackAllowed"],
        "content": "--- title: HMSRemoteAudioTrack nav: 22 ---  **CLASS**  ```swift open class HMSRemoteAudioTrack : HMSAudioTrack ```  ## Methods  ### isPlaybackAllowed  ```swift open func isPlaybackAllowed() -> Bool ```  ### setPlaybackAllowed  ```swift open func setPlaybackAllowed(_ playbackAllowed: Bool) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRemoteAudioTrack"
    },
    {
        "title": "HMSRemotePeer.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRemotePeer",
        "keywords": [],
        "headings": ["Methods", "remoteAudioTrack()", "remoteVideoTrack()"],
        "content": "--- title: HMSRemotePeer nav: 23 ---  **CLASS**  ```swift @objcMembers public class HMSRemotePeer: HMSPeer ```  ## Methods  ### remoteAudioTrack()  ```swift public func remoteAudioTrack() -> HMSRemoteAudioTrack? ```  ### remoteVideoTrack()  ```swift public func remoteVideoTrack() -> HMSRemoteVideoTrack? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRemotePeer"
    },
    {
        "title": "HMSRemoteVideoTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRemoteVideoTrack",
        "keywords": [],
        "headings": [
            "Properties",
            "layer",
            "layerDefinitions",
            "Methods",
            "isPlaybackAllowed",
            "setPlaybackAllowed"
        ],
        "content": "--- title: HMSRemoteVideoTrack nav: 24 ---  **CLASS**  ```swift open class HMSRemoteVideoTrack : HMSVideoTrack ```  ## Properties  ### layer  ```swift open var layer: HMSSimulcastLayer ```  ### layerDefinitions  ```swift open var layerDefinitions: [HMSSimulcastLayerDefinition]? ```  ## Methods  ### isPlaybackAllowed  ```swift open func isPlaybackAllowed() -> Bool ```  ### setPlaybackAllowed  ```swift open func setPlaybackAllowed(_ playbackAllowed: Bool) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRemoteVideoTrack"
    },
    {
        "title": "HMSRemovedFromRoomNotification.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRemovedFromRoomNotification",
        "keywords": [],
        "headings": ["Properties", "requestedBy", "reason", "roomEnded", "Methods", "init()"],
        "content": "--- title: HMSRemovedFromRoomNotification nav: 25 ---  **CLASS**  ```swift @objcMembers public class HMSRemovedFromRoomNotification: NSObject ```  ## Properties  ### requestedBy  ```swift public let requestedBy: HMSPeer ```  ### reason  ```swift public let reason: String ```  ### roomEnded  ```swift public let roomEnded: Bool ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRemovedFromRoomNotification"
    },
    {
        "title": "HMSRole.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRole",
        "keywords": [],
        "headings": [
            "Properties",
            "name",
            "publishSettings",
            "subscribeSettings",
            "permissions",
            "priority",
            "generalPermissions",
            "internalPlugins",
            "externalPlugins"
        ],
        "content": "--- title: HMSRole nav: 26 ---  **CLASS**  ```swift @objcMembers public class HMSRole: NSObject, Codable ```  ## Properties  ### name  ```swift public let name: String ```  ### publishSettings  ```swift public let publishSettings: HMSPublishSettings ```  ### subscribeSettings  ```swift public let subscribeSettings: HMSSubscribeSettings ```  ### permissions  ```swift public let permissions: HMSPermissions ```  ### priority  ```swift public let priority: Int ```  ### generalPermissions  ```swift public let generalPermissions: [String: String]? ```  ### internalPlugins  ```swift public let internalPlugins: [String: String]? ```  ### externalPlugins  ```swift public let externalPlugins: [String: String]? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRole"
    },
    {
        "title": "HMSRoleChangeRequest.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRoleChangeRequest",
        "keywords": [],
        "headings": ["Properties", "suggestedRole", "requestedBy", "Methods", "init()"],
        "content": "--- title: HMSRoleChangeRequest nav: 27 ---  **CLASS**  ```swift @objcMembers public class HMSRoleChangeRequest: NSObject ```  ## Properties  ### suggestedRole  ```swift public let suggestedRole: HMSRole ```  ### requestedBy  ```swift public let requestedBy: HMSPeer ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRoleChangeRequest"
    },
    {
        "title": "HMSRoom.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRoom",
        "keywords": [],
        "headings": [
            "Properties",
            "name",
            "roomID",
            "metaData",
            "peers",
            "browserRecordingState",
            "serverRecordingState",
            "rtmpStreamingState"
        ],
        "content": "--- title: HMSRoom nav: 28 ---  **CLASS**  ```swift @objcMembers public class HMSRoom: NSObject ```  A room represents  real-time audio, video session,  basic building block   100ms SDK  ## Properties  ### name  ```swift public internal(set) var name: String? ```  ### roomID  ```swift public internal(set) var roomID: String? ```  ### metaData  ```swift public internal(set) var metaData: String? ```  ### peers  ```swift public internal(set) var peers = [HMSPeer]() ```  ### browserRecordingState  ```swift public internal(set) var browserRecordingState: HMSBrowserRecordingState ```  ### serverRecordingState  ```swift public internal(set) var serverRecordingState: HMSServerRecordingState ```  ### rtmpStreamingState  ```swift public internal(set) var rtmpStreamingState: HMSRTMPStreamingState ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRoom"
    },
    {
        "title": "HMSRTMPConfig.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRTMPConfig",
        "keywords": [],
        "headings": ["Methods", "init()", "init(meetingURL:rtmpURLs:record:)"],
        "content": "--- title: HMSRTMPConfig nav: 20 ---  **CLASS**  ```swift @objcMembers public class HMSRTMPConfig: NSObject ```  A configuration object  recording  RTMP stream  ## Methods  ### init()  ```swift public override init() ```  ### init(meetingURL:rtmpURLs:record:)  ```swift public init(meetingURL: URL?, rtmpURLs: [URL]?, record: Bool) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRTMPConfig"
    },
    {
        "title": "HMSRTMPStreamingState.mdx",
        "link": "/api-reference/ios/v2/classes/HMSRTMPStreamingState",
        "keywords": [],
        "headings": ["Properties", "running", "error", "Methods", "init()"],
        "content": "--- title: HMSRTMPStreamingState nav: 21 ---  **CLASS**  ```swift @objcMembers public class HMSRTMPStreamingState: NSObject ```  ## Properties  ### running  ```swift public let running: Bool ```  ### error  ```swift public let error: HMSError? ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSRTMPStreamingState"
    },
    {
        "title": "HMSSDK.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSDK",
        "keywords": [],
        "headings": [
            "Properties",
            "localPeer",
            "remotePeers",
            "roles",
            "room",
            "trackSettings",
            "analyticsLevel",
            "logger",
            "Methods",
            "build(block:)",
            "Parameters",
            "preview(config:delegate:)",
            "Parameters",
            "preview(role:completion:)",
            "Parameters",
            "cancelPreview()",
            "join(config:delegate:)",
            "Parameters",
            "leave(\\_:)",
            "Parameters",
            "sendBroadcastMessage(type:message:completion:)",
            "Parameters",
            "sendGroupMessage(type:message:roles:completion:)",
            "Parameters",
            "sendDirectMessage(type:message:peer:completion:)",
            "Parameters",
            "changeRole(for:to:force:completion:)",
            "Parameters",
            "changeRolesOfAllPeers(to:limitToRoles:completion:)",
            "Parameters",
            "accept(changeRole:completion:)",
            "Parameters",
            "changeTrackState(for:mute:completion:)",
            "Parameters",
            "changeTrackState(mute:for:source:roles:completion:)",
            "Parameters",
            "removePeer(\\_:reason:completion:)",
            "Parameters",
            "endRoom(lock:reason:completion:)",
            "Parameters",
            "startRTMPOrRecording(config:completion:)",
            "Parameters",
            "stopRTMPAndRecording(completion:)",
            "Parameters",
            "add(delegate:)",
            "Parameters",
            "remove(delegate:)",
            "Parameters",
            "prepareForExternalAudioPlayback()",
            "resumeAfterExternalAudioPlayback()",
            "resumeAfterExternalAudioPlayback()"
        ],
        "content": "--- title: HMSSDK nav: 29 ---  **CLASS**  ```swift @objcMembers public class HMSSDK: NSObject ```  The public interface  100ms SDK. Create  instance  HMSSDK  start using  SDK. **Key Concepts** **Room** - A room represents  real-time audio, video session,  basic building block   100mslive Video SDK **Track** - A track represents either  audio  video  makes   stream **Peer** - A peer represents  participants connected   room. Peers can  \"local\"  \"remote\" **Broadcast** - A local peer can send  message/data   remote peers   room HMSSDK   methods   client app can use  get  info   Room, Peer  Tracks  ## Properties  ### localPeer  ```swift public var localPeer: HMSLocalPeer? ```  Returns  local peer,  contains  local tracks.  ### remotePeers  ```swift public var remotePeers: [HMSRemotePeer]? ```  Returns  remote peers   room.  ### roles  ```swift public var roles: [HMSRole] ```  Returns  roles   room.  ### room  ```swift public var room: HMSRoom? ```  Returns  room   joined.  ### trackSettings  ```swift public var trackSettings: HMSTrackSettings = HMSTrackSettings() ```  Use  override track settings coming  role policy  ### analyticsLevel  ```swift public var analyticsLevel: HMSAnalyticsEventLevel = .error ```  Sets  verbosity  analytics events  ### logger  ```swift public weak var logger: HMSLogger? ```  Sets  logger instance  use  piping logs  ## Methods  ### build(block:)  ```swift public static func build(block: ((HMSSDK) -> Void)? = nil) -> HMSSDK ```  this will instantiate  HMSSDK object  -   Parameter block: pass  block  different settings  required -   Returns:  instance  HMSSDK object  #### Parameters  | Name   Description                                      | | -----  ------------------------------------------------ | | block  pass  block  different settings  required |  ### preview(config:delegate:)  ```swift public func preview(config: HMSConfig, delegate: HMSPreviewListener) ```  Begin  preview    local peer's audio  video can  displayed     join  room.  -   Parameters:     -   config: The config object instance  contains joining information.     -   delegate: The update listener object  will receive  callbacks.  #### Parameters  | Name      Description                                                    | | --------  -------------------------------------------------------------- | | config    The config object instance  contains joining information. | | delegate  The update listener object  will receive  callbacks.   |  ### preview(role:completion:)  ```swift public func preview(role: HMSRole, completion: (([HMSTrack]?, HMSError?) -> Void)) ```  Call  preview API  time  joining  case  need  show  preview   certain role. i.e  doing/accepting  role change request.  -   Parameters:     -   role: The role    used  checking  tracks   required.     -   completion: The completion handler   invoked  tracks  fetched   case   error.  #### Parameters  | Name        Description                                                                          | | ----------  ------------------------------------------------------------------------------------ | | role        The role    used  checking  tracks   required.             | | completion  The completion handler   invoked  tracks  fetched   case   error. |  ### cancelPreview()  ```swift public func cancelPreview() ```  Call  API  case  tracks obtained via preview(role:) API   longer needed. There   need  call   role change happened. Call   user  decided   change role  release camera/mic.  ### join(config:delegate:)  ```swift public func join(config: HMSConfig, delegate: HMSUpdateListener) ```  Join  room.  -   Parameters:     -   config: The config object instance  contains joining information.     -   delegate: The update listener object  will receive  callbacks,  #### Parameters  | Name      Description                                                    | | --------  -------------------------------------------------------------- | | config    The config object instance  contains joining information. | | delegate  The update listener object  will receive  callbacks,   |  ### leave(\\_:)  ```swift public func leave(_ completion: ((Bool, HMSError?) -> Void)? = nil) ```  Call  `leave` method   HMSSDK instance  leave  current room.  -   Parameters:     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                            | | ----------  -------------------------------------------------------------------------------------- | | completion  The completion handler   invoked   request succeeds  fails   error. |  ### sendBroadcastMessage(type:message:completion:)  ```swift public func sendBroadcastMessage(type: String = \"chat\", message: String, completion: ((HMSMessage?, HMSError?) -> Void)? = nil) ```  Sends  message  everyone   room.  -   Parameters:     -   type: The type  message     -   message: Content   message.     -   completion: The completion handler   invoked  message  sent,   error happened  sending  #### Parameters  | Name        Description                                                                                       | | ----------  ------------------------------------------------------------------------------------------------- | | type        The type  message                                                                               | | message     Content   message.                                                                           | | completion  The completion handler   invoked  message  sent,   error happened  sending |  ### sendGroupMessage(type:message:roles:completion:)  ```swift public func sendGroupMessage(type: String = \"chat\", message: String, roles: [HMSRole], completion: ((HMSMessage?, HMSError?) -> Void)? = nil) ```  Sends  message   specified roles defined. All peers  belong   specified roles will receive  message.  -   Parameters:     -   type: The type  message     -   message: Content   message.     -   roles: The list  roles    message  directed.     -   completion: The completion handler   invoked  message  sent,   error happened  sending  #### Parameters  | Name        Description                                                                                       | | ----------  ------------------------------------------------------------------------------------------------- | | type        The type  message                                                                               | | message     Content   message.                                                                           | | roles       The list  roles    message  directed.                                               | | completion  The completion handler   invoked  message  sent,   error happened  sending |  ### sendDirectMessage(type:message:peer:completion:)  ```swift public func sendDirectMessage(type: String = \"chat\", message: String, peer: HMSPeer, completion: ((HMSMessage?, HMSError?) -> Void)? = nil) ```  Sends  direct message   specified peer only.  -   Parameters:     -   type: The type  message.     -   message: Content   message.     -   peer: The peer    message  directed.     -   completion: The completion handler   invoked  message  sent,   error happened  sending  #### Parameters  | Name        Description                                                                                       | | ----------  ------------------------------------------------------------------------------------------------- | | type        The type  message.                                                                              | | message     Content   message.                                                                           | | peer        The peer    message  directed.                                                        | | completion  The completion handler   invoked  message  sent,   error happened  sending |  ### changeRole(for:to:force:completion:)  ```swift public func changeRole(for peer: HMSPeer,  role: HMSRole, force: Bool = false, completion: ((Bool, HMSError?) -> Void)? = nil) ```  Requests  change  role  specified peer.  -   Parameters:     -   peer: The peer whose role   changed.     -   role: The target role.     -   force: False   peer   prompted  accept  new role. true   role   changed without  prompt.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                                                         | | ----------  ------------------------------------------------------------------------------------------------------------------- | | peer        The peer whose role   changed.                                                                              | | role        The target role.                                                                                                    | | force       False   peer   prompted  accept  new role. true   role   changed without  prompt. | | completion  The completion handler   invoked   request succeeds  fails   error.                              |  ### changeRolesOfAllPeers(to:limitToRoles:completion:)  ```swift public func changeRolesOfAllPeers(to role: HMSRole, limitToRoles:[HMSRole]? = nil, completion: ((Bool, HMSError?) -> Void)? = nil) ```  Requests  change  role   peers except   local peer.  -   Parameters:     -   role: The target role.     -   limitToRoles: If specified,  peers currently belonging  roles   array will  changed   new role.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name          Description                                                                                         | | ------------  --------------------------------------------------------------------------------------------------- | | role          The target role.                                                                                    | | limitToRoles  If specified,  peers currently belonging  roles   array will  changed   new role. | | completion    The completion handler   invoked   request succeeds  fails   error.              |  ### accept(changeRole:completion:)  ```swift public func accept(changeRole request: HMSRoleChangeRequest, completion: ((Bool, HMSError?) -> Void)? = nil) ```  Call  accept  role change request sent   current peer. Once  method  called,  peer's role will  changed   requested one.  -   Parameters:     -   request The request   SDK  sent   peer (in HMSUpdateListener.onRoleChangeRequest).     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name                                                                                                Description                                                                            | | --------------------------------------------------------------------------------------------------  -------------------------------------------------------------------------------------- | | request The request   SDK  sent   peer (in HMSUpdateListener.onRoleChangeRequest).                                                                                         | | completion                                                                                          The completion handler   invoked   request succeeds  fails   error. |  ### changeTrackState(for:mute:completion:)  ```swift public func changeTrackState(for remoteTrack: HMSTrack, mute: Bool, completion: ((Bool, HMSError?) -> Void)? = nil) ```  To change  mute status   remote HMSTrack.  -   Parameters:     -   remoteTrack: The HMSTrack whose mute status needs   changed.     -   mute: True   track needs   muted, false otherwise.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name         Description                                                                            | | -----------  -------------------------------------------------------------------------------------- | | remoteTrack  The HMSTrack whose mute status needs   changed.                                    | | mute         True   track needs   muted, false otherwise.                                  | | completion   The completion handler   invoked   request succeeds  fails   error. |  ### changeTrackState(mute:for:source:roles:completion:)  ```swift public func changeTrackState(mute: Bool,  trackKind: HMSTrackKind? = nil, source: String? = nil, roles: [HMSRole]? = nil, completion: ((Bool, HMSError?) -> Void)? = nil) ```  To change  mute status  multiple tracks  specific kinds  every peer   peers  certain roles. Call changeTrackState(mute: true)  mute everybody's audio  video.  -   Parameters:     -   mute: True   track needs   muted, false otherwise.     -   trackKind: Pass  array  HMSTrackKind  change  apply  specific kind  tracks. Passing nil means  track kinds will  changed.     -   source: Pass  HMSTrackSource  change  apply  specific track source. Passing nil means  track sources will  changed.     -   roles: Pass  array  HMSRole  change  apply  specific roles. Passing nil means  roles will  changed.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                                                                      | | ----------  -------------------------------------------------------------------------------------------------------------------------------- | | mute        True   track needs   muted, false otherwise.                                                                            | | trackKind   Pass  array  HMSTrackKind  change  apply  specific kind  tracks. Passing nil means  track kinds will  changed. | | source      Pass  HMSTrackSource  change  apply  specific track source. Passing nil means  track sources will  changed.         | | roles       Pass  array  HMSRole  change  apply  specific roles. Passing nil means  roles will  changed.                     | | completion  The completion handler   invoked   request succeeds  fails   error.                                           |  ### removePeer(\\_:reason:completion:)  ```swift public func removePeer(_ peer: HMSPeer, reason: String, completion: ((Bool, HMSError?) -> Void)? = nil) ```  Removes  specified peer   current room.  -   Parameters:     -   peer: The peer  remove     -   reason: The reason  removing can  passed    peer.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                            | | ----------  -------------------------------------------------------------------------------------- | | peer        The peer  remove                                                                     | | reason      The reason  removing can  passed    peer.                                  | | completion  The completion handler   invoked   request succeeds  fails   error. |  ### endRoom(lock:reason:completion:)  ```swift public func endRoom(lock: Bool, reason: String, completion: ((Bool, HMSError?) -> Void)? = nil) ```  End  room  make  participants leave.  -   Parameters:     -   lock: Whether rejoining  room   disabled till  room  unlocked.     -   reason: The reason  ending  room can  passed    peers.     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                            | | ----------  -------------------------------------------------------------------------------------- | | lock        Whether rejoining  room   disabled till  room  unlocked.               | | reason      The reason  ending  room can  passed    peers.                        | | completion  The completion handler   invoked   request succeeds  fails   error. |  ### startRTMPOrRecording(config:completion:)  ```swift public func startRTMPOrRecording(config: HMSRTMPConfig, completion: ((Bool, HMSError?) -> Void)? = nil) ```  Start RTMP stream and/or room recording.  -   Parameters:     -   config: RTMP/Recording parameters     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                            | | ----------  -------------------------------------------------------------------------------------- | | config      RTMP/Recording parameters                                                              | | completion  The completion handler   invoked   request succeeds  fails   error. |  ### stopRTMPAndRecording(completion:)  ```swift public func stopRTMPAndRecording(completion: ((Bool, HMSError?) -> Void)? = nil) ```  Stop RTMP stream  room recording.  -   Parameters:     -   completion: The completion handler   invoked   request succeeds  fails   error.  #### Parameters  | Name        Description                                                                            | | ----------  -------------------------------------------------------------------------------------- | | completion  The completion handler   invoked   request succeeds  fails   error. |  ### add(delegate:)  ```swift public func add(delegate: HMSUpdateListener) ```  Adds another listener  SDK updates  -   Parameter delegate:  update listener object  will receive  callbacks  #### Parameters  | Name      Description                                                 | | --------  ----------------------------------------------------------- | | delegate   update listener object  will receive  callbacks |  ### remove(delegate:)  ```swift public func remove(delegate: HMSUpdateListener) ```  Removes  listener  SDK updates  -   Parameter delegate:  update listener  remove  #### Parameters  | Name      Description                   | | --------  ----------------------------- | | delegate   update listener  remove |  ### prepareForExternalAudioPlayback()  ```swift public func prepareForExternalAudioPlayback() ```  ### resumeAfterExternalAudioPlayback()  ```swift public func resumeAfterExternalAudioPlayback() ```  # resumeAfterExternalAudioPlayback()  ```swift public func resumeAfterExternalAudioPlayback() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSDK"
    },
    {
        "title": "HMSSection.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSection",
        "keywords": [],
        "headings": ["Properties", "models"],
        "content": "--- title: HMSSection nav: 30 ---  **CLASS**  ```swift public class HMSSection ```  ## Properties  ### models  ```swift public var models: [HMSViewModel] ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSection"
    },
    {
        "title": "HMSServerRecordingState.mdx",
        "link": "/api-reference/ios/v2/classes/HMSServerRecordingState",
        "keywords": [],
        "headings": ["Properties", "running", "error", "Methods", "init()"],
        "content": "--- title: HMSServerRecordingState nav: 31 ---  **CLASS**  ```swift @objcMembers public class HMSServerRecordingState: NSObject ```  ## Properties  ### running  ```swift public let running: Bool ```  ### error  ```swift public let error: HMSError? ```  ## Methods  ### init()  ```swift public override init() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSServerRecordingState"
    },
    {
        "title": "HMSSimulcastLayerDefinition.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSimulcastLayerDefinition",
        "keywords": [],
        "headings": ["Properties", "layer", "resolution", "Methods", "init"],
        "content": "--- title: HMSSimulcastLayerDefinition nav: 32 ---  **CLASS**  ```swift open class HMSSimulcastLayerDefinition : NSObject ```  ## Properties  ### layer  ```swift open var layer: HMSSimulcastLayer ```  ### resolution  ```swift open var resolution: CGSize ```  ## Methods  ### init  ```swift public init(layer: HMSSimulcastLayer, resolution: CGSize) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSimulcastLayerDefinition"
    },
    {
        "title": "HMSSimulcastLayerSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSimulcastLayerSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "maxBitrate",
            "maxFrameRate",
            "scaleResolutionDownBy",
            "rid",
            "Methods",
            "init"
        ],
        "content": "--- title: HMSSimulcastLayerSettings nav: 33 ---  **CLASS**  ```swift open class HMSSimulcastLayerSettings : NSObject, NSCopying ```  ## Properties  ### maxBitrate  ```swift open var maxBitrate: Int ```  ### maxFrameRate  ```swift open var maxFrameRate: Int ```  ### scaleResolutionDownBy  ```swift open var scaleResolutionDownBy: Double ```  ### rid  ```swift open var rid: String ```  ## Methods  ### init  ```swift public init(witRID rid: String, maxBitrate: Int, maxFrameRate: Int, scaleResolutionDownBy: Double) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSimulcastLayerSettings"
    },
    {
        "title": "HMSSimulcastLayerSettingsPolicy.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSimulcastLayerSettingsPolicy",
        "keywords": [],
        "headings": ["Properties", "rid", "scaleResolutionDownBy", "maxBitrate", "maxFramerate"],
        "content": "--- title: HMSSimulcastLayerSettingsPolicy nav: 34 ---  **CLASS**  ```swift @objcMembers public class HMSSimulcastLayerSettingsPolicy: Codable ```  ## Properties  ### rid  ```swift public let rid: String ```  ### scaleResolutionDownBy  ```swift public let scaleResolutionDownBy: Double? ```  ### maxBitrate  ```swift public let maxBitrate, maxFramerate: Int? ```  ### maxFramerate  ```swift public let maxBitrate, maxFramerate: Int? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSimulcastLayerSettingsPolicy"
    },
    {
        "title": "HMSSimulcastSettingsPolicy.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSimulcastSettingsPolicy",
        "keywords": [],
        "headings": ["Properties", "width", "height", "layers"],
        "content": "--- title: HMSSimulcastSettingsPolicy nav: 35 ---  **CLASS**  ```swift @objcMembers public class HMSSimulcastSettingsPolicy: Codable ```  ## Properties  ### width  ```swift public let width, height: Int? ```  ### height  ```swift public let width, height: Int? ```  ### layers  ```swift public let layers: [HMSSimulcastLayerSettingsPolicy]? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSimulcastSettingsPolicy"
    },
    {
        "title": "HMSSpeaker.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSpeaker",
        "keywords": [],
        "headings": ["Properties", "peer", "track", "level", "Methods", "init(peer:track:level:)"],
        "content": "--- title: HMSSpeaker nav: 36 ---  **CLASS**  ```swift @objcMembers public class HMSSpeaker: NSObject ```  ## Properties  ### peer  ```swift public let peer: HMSPeer ```  ### track  ```swift public let track: HMSTrack ```  ### level  ```swift public let level: Int ```  ## Methods  ### init(peer:track:level:)  ```swift public init(peer: HMSPeer, track: HMSTrack, level: Int) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSpeaker"
    },
    {
        "title": "HMSSubscribeDegradationPolicy.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSubscribeDegradationPolicy",
        "keywords": [],
        "headings": [
            "Properties",
            "packetLossThreshold",
            "degradeGracePeriodSeconds",
            "recoverGracePeriodSeconds"
        ],
        "content": "--- title: HMSSubscribeDegradationPolicy nav: 37 ---  **CLASS**  ```swift public class HMSSubscribeDegradationPolicy: Codable ```  ## Properties  ### packetLossThreshold  ```swift public var packetLossThreshold, degradeGracePeriodSeconds, recoverGracePeriodSeconds: Int? ```  ### degradeGracePeriodSeconds  ```swift public var packetLossThreshold, degradeGracePeriodSeconds, recoverGracePeriodSeconds: Int? ```  ### recoverGracePeriodSeconds  ```swift public var packetLossThreshold, degradeGracePeriodSeconds, recoverGracePeriodSeconds: Int? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSubscribeDegradationPolicy"
    },
    {
        "title": "HMSSubscribeSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSSubscribeSettings",
        "keywords": [],
        "headings": ["Properties", "subscribeToRoles", "maxSubsBitRate", "subscribeDegradation"],
        "content": "--- title: HMSSubscribeSettings nav: 38 ---  **CLASS**  ```swift @objcMembers public class HMSSubscribeSettings: Codable ```  ## Properties  ### subscribeToRoles  ```swift public let subscribeToRoles: [String]? ```  ### maxSubsBitRate  ```swift public let maxSubsBitRate: Int ```  ### subscribeDegradation  ```swift public let subscribeDegradation: HMSSubscribeDegradationPolicy? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSSubscribeSettings"
    },
    {
        "title": "HMSTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSTrack",
        "keywords": [],
        "headings": [
            "Properties",
            "trackId",
            "kind",
            "source",
            "trackDescription",
            "Methods",
            "isMute"
        ],
        "content": "--- title: HMSTrack nav: 39 ---  **CLASS**  ```swift open class HMSTrack : NSObject ```  A track represents either  audio  video  makes   stream  ## Properties  ### trackId  ```swift open var trackId: String ```  ### kind  ```swift open var kind: HMSTrackKind ```  ### source  ```swift open var source: String ```  ### trackDescription  ```swift open var trackDescription: String ```  ## Methods  ### isMute  ```swift open func isMute() -> Bool ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSTrack"
    },
    {
        "title": "HMSTrackSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSTrackSettings",
        "keywords": [],
        "headings": ["Properties", "video", "audio", "Methods", "init", "init"],
        "content": "--- title: HMSTrackSettings nav: 40 ---  **CLASS**  ```swift open class HMSTrackSettings : NSObject, NSCopying ```  ## Properties  ### video  ```swift open var video: HMSVideoTrackSettings? ```  ### audio  ```swift open var audio: HMSAudioTrackSettings? ```  ## Methods  ### init  ```swift public init() ```  ### init  ```swift public init(videoSettings: HMSVideoTrackSettings?, audioSettings: HMSAudioTrackSettings?)ckDescription: String?) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSTrackSettings"
    },
    {
        "title": "HMSUtilities.mdx",
        "link": "/api-reference/ios/v2/classes/HMSUtilities",
        "keywords": [],
        "headings": [
            "Methods",
            "getDevices()",
            "getAllVideoTracks(in:)",
            "getAllAudioTracks(in:)",
            "getPeer(for:in:)",
            "getTrack(for:in:)",
            "getAudioTrack(for:in:)",
            "getVideoTrack(for:in:)"
        ],
        "content": "--- title: HMSUtilities nav: 41 ---  **CLASS**  ```swift @objcMembers public class HMSUtilities: NSObject ```  ## Methods  ### getDevices()  ```swift public class func getDevices() -> [HMSDevice] ```  ### getAllVideoTracks(in:)  ```swift public class func getAllVideoTracks(in room: HMSRoom) -> [HMSVideoTrack] ```  ### getAllAudioTracks(in:)  ```swift public class func getAllAudioTracks(in room: HMSRoom) -> [HMSAudioTrack] ```  ### getPeer(for:in:)  ```swift public class func getPeer(for id: String,  room: HMSRoom) -> HMSPeer? ```  ### getTrack(for:in:)  ```swift public class func getTrack(for id: String,  room: HMSRoom) -> HMSTrack? ```  ### getAudioTrack(for:in:)  ```swift public class func getAudioTrack(for id: String,  room: HMSRoom) -> HMSAudioTrack? ```  ### getVideoTrack(for:in:)  ```swift public class func getVideoTrack(for id: String,  room: HMSRoom) -> HMSVideoTrack? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSUtilities"
    },
    {
        "title": "HMSUtility.mdx",
        "link": "/api-reference/ios/v2/classes/HMSUtility",
        "keywords": [],
        "headings": [
            "Methods",
            "codec(from:)",
            "codecString(from:)",
            "source(from:)",
            "sourceString(from:)"
        ],
        "content": "--- title: HMSUtility nav: 42 ---  **CLASS**  ```swift open class HMSUtility : NSObject ```  ## Methods  ### codec(from:)  ```swift open class func codec(from string: String) -> HMSCodec ```  ### codecString(from:)  ```swift open class func codecString(from codec: HMSCodec) -> String ```  ### source(from:)  ```swift open class func source(from string: String) -> HMSTrackSource ```  ### sourceString(from:)  ```swift open class func sourceString(from source: HMSTrackSource) -> String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSUtility"
    },
    {
        "title": "HMSVideoSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSVideoSettings",
        "keywords": [],
        "headings": ["Properties", "bitRate", "codec", "frameRate", "width", "height"],
        "content": "--- title: HMSVideoSettings nav: 43 ---  **CLASS**  ```swift @objcMembers public class HMSVideoSettings: Codable ```  ## Properties  ### bitRate  ```swift public let bitRate: Int? ```  ### codec  ```swift public let codec: String ```  ### frameRate  ```swift public let frameRate: Int ```  ### width  ```swift public let width: Int ```  ### height  ```swift public let height: Int ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSVideoSettings"
    },
    {
        "title": "HMSVideoTrack.mdx",
        "link": "/api-reference/ios/v2/classes/HMSVideoTrack",
        "keywords": [],
        "headings": ["Methods", "addSink", "removeSink", "isDegraded"],
        "content": "--- title: HMSVideoTrack nav: 44 ---  **CLASS**  ```swift open class HMSVideoTrack : HMSTrack ```  ## Methods  ### addSink  ```swift open func addSink(_ sink: Any) ```  ### removeSink  ```swift open func removeSink(_ sink: Any) ```  ### isDegraded  ```swift open func isDegraded() -> Bool ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSVideoTrack"
    },
    {
        "title": "HMSVideoTrackSettings.mdx",
        "link": "/api-reference/ios/v2/classes/HMSVideoTrackSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "codec",
            "resolution",
            "maxBitrate",
            "maxFrameRate",
            "cameraFacing",
            "trackDescription",
            "simulcastSettings",
            "Methods",
            "init",
            "init",
            "init"
        ],
        "content": "--- title: HMSVideoTrackSettings nav: 45 ---  **CLASS**  ```swift open class HMSVideoTrackSettings : NSObject, NSCopying ```  ## Properties  ### codec  ```swift open var codec: HMSCodec ```  ### resolution  ```swift open var resolution: HMSVideoResolution ```  ### maxBitrate  ```swift open var maxBitrate: Int ```  ### maxFrameRate  ```swift open var maxFrameRate: Int ```  ### cameraFacing  ```swift open var cameraFacing: HMSCameraFacing ```  ### trackDescription  ```swift open var trackDescription: String? ```  ### simulcastSettings  ```swift open var simulcastSettings: [HMSSimulcastLayerSettings]? ```  ## Methods  ### init  ```swift public init() ```  ### init  ```swift public init(codec: HMSCodec, resolution: HMSVideoResolution, maxBitrate: Int, maxFrameRate: Int, cameraFacing: HMSCameraFacing, trackDescription: String?) ```  ### init  ```swift public init(codec: HMSCodec, resolution: HMSVideoResolution, maxBitrate: Int, maxFrameRate: Int, cameraFacing: HMSCameraFacing, simulcastSettings: [HMSSimulcastLayerSettings]?, trackDescription: String?) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSVideoTrackSettings"
    },
    {
        "title": "HMSVideoView.mdx",
        "link": "/api-reference/ios/v2/classes/HMSVideoView",
        "keywords": [],
        "headings": [
            "Properties",
            "videoContentMode",
            "disableAutoSimulcastLayerSelect",
            "mirror",
            "Methods",
            "setVideoTrack(\\_:)",
            "videoTrack()"
        ],
        "content": "--- title: HMSVideoView nav: 46 ---  **CLASS**  ```swift open class HMSVideoView : UIView ```  ## Properties  ### videoContentMode  ```swift open var videoContentMode: Int ```  ### disableAutoSimulcastLayerSelect  ```swift open var disableAutoSimulcastLayerSelect: Bool ```  ### mirror  ```swift open var mirror: Bool ```  ## Methods  ### setVideoTrack(\\_:)  ```swift open func setVideoTrack(_ track: HMSVideoTrack) ```  ### videoTrack()  ```swift open func videoTrack() -> HMSVideoTrack ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSVideoView"
    },
    {
        "title": "HMSViewModel.mdx",
        "link": "/api-reference/ios/v2/classes/HMSViewModel",
        "keywords": [],
        "headings": ["Properties", "identifier", "peer", "videoTrack"],
        "content": "--- title: HMSViewModel nav: 47 ---  **CLASS**  ```swift public class HMSViewModel ```  ## Properties  ### identifier  ```swift public var identifier: String ```  ### peer  ```swift public let peer: HMSPeer ```  ### videoTrack  ```swift public var videoTrack: HMSVideoTrack? ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/classes/HMSViewModel"
    },
    {
        "title": "HMSAnalyticsEventLevel.mdx",
        "link": "/api-reference/ios/v2/enums/HMSAnalyticsEventLevel",
        "keywords": [],
        "headings": ["Cases", "off", "error", "info", "verbose"],
        "content": "--- title: HMSAnalyticsEventLevel nav: 48 ---  **ENUM**  ```swift public enum HMSAnalyticsEventLevel : UInt ```  ## Cases  ### off  ```swift case  = 0 ```  ### error  ```swift case error = 1 ```  ### info  ```swift case info = 2 ```  ### verbose  ```swift case verbose = 3 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSAnalyticsEventLevel"
    },
    {
        "title": "HMSCameraFacing.mdx",
        "link": "/api-reference/ios/v2/enums/HMSCameraFacing",
        "keywords": [],
        "headings": ["Cases", "front", "back"],
        "content": "--- title: HMSCameraFacing nav: 49 ---  **ENUM**  ```swift public enum HMSCameraFacing : UInt ```  ## Cases  ### front  ```swift case front = 0 ```  ### back  ```swift case back = 1 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSCameraFacing"
    },
    {
        "title": "HMSCodec.mdx",
        "link": "/api-reference/ios/v2/enums/HMSCodec",
        "keywords": [],
        "headings": ["Cases", "H264", "VP8"],
        "content": "--- title: HMSCodec nav: 50 ---  **ENUM**  ```swift public enum HMSCodec : UInt ```  ## Cases  ### H264  ```swift case H264 = 0 ```  ### VP8  ```swift case VP8 = 1 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSCodec"
    },
    {
        "title": "HMSConnectionRole.mdx",
        "link": "/api-reference/ios/v2/enums/HMSConnectionRole",
        "keywords": [],
        "headings": ["Cases", "pub", "sub"],
        "content": "--- title: HMSConnectionRole nav: 51 ---  **ENUM**  ```swift public enum HMSConnectionRole : UInt ```  ## Cases  ### pub  ```swift case pub = 0 ```  ### sub  ```swift case sub = 1 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSConnectionRole"
    },
    {
        "title": "HMSErrorCode.mdx",
        "link": "/api-reference/ios/v2/enums/HMSErrorCode",
        "keywords": [],
        "headings": [
            "Cases",
            "websocketGenericError",
            "websocketConnectionLost",
            "initServerError",
            "initHTTPConnectionLost",
            "initHTTPErrorBadRequest",
            "initHTTPErrorInvalidEndpointURL",
            "initHTTPErrorEndpointUnreachable",
            "tracksErrorGeneric",
            "tracksErrorCantAccessCaptureDevice",
            "tracksErrorDeviceNotAvailable",
            "tracksErrorDeviceInUse",
            "tracksErrorPeerConnectionFactoryDisposed",
            "tracksErrorNothingToReturn",
            "tracksErrorInvalidVideoSettings",
            "tracksErrorCodecChangeNotPermitted",
            "tracksErrorAudioVideoSubsystemFailure",
            "tracksErrorAudioShouldBeSilenced",
            "tracksErrorMicCaptureFailed",
            "webrtcErrorCreateOfferFailed",
            "webrtcErrorCreateAnswerFailed",
            "webrtcErrorSetLocalDescriptionFailed",
            "webrtcErrorSetRemoteDescriptionFailed",
            "webrtcErrorICEFailure",
            "joinErrorServer",
            "joinErrorAlreadyJoined",
            "genericErrorNotConnected",
            "genericErrorSignalling",
            "genericErrorUnknown",
            "genericErrorNotReady",
            "genericErrorJsonParsingFailed",
            "genericErrorTrackMetadataMissing",
            "genericErrorRTCTrackMissing",
            "genericErrorPeerMetadataMissing"
        ],
        "content": "--- title: HMSErrorCode nav: 52 ---  **ENUM**  ```swift @objc public enum HMSErrorCode: Int ```  ## Cases  ### websocketGenericError  ```swift case websocketGenericError = 1000 ```  ### websocketConnectionLost  ```swift case websocketConnectionLost = 1003 ```  ### initServerError  ```swift case initServerError = 2000 ```  ### initHTTPConnectionLost  ```swift case initHTTPConnectionLost = 2001 ```  ### initHTTPErrorBadRequest  ```swift case initHTTPErrorBadRequest = 2400 ```  ### initHTTPErrorInvalidEndpointURL  ```swift case initHTTPErrorInvalidEndpointURL = 2002 ```  ### initHTTPErrorEndpointUnreachable  ```swift case initHTTPErrorEndpointUnreachable = 2003 ```  ### tracksErrorGeneric  ```swift case tracksErrorGeneric = 3000 ```  ### tracksErrorCantAccessCaptureDevice  ```swift case tracksErrorCantAccessCaptureDevice = 3001 ```  ### tracksErrorDeviceNotAvailable  ```swift case tracksErrorDeviceNotAvailable = 3002 ```  ### tracksErrorDeviceInUse  ```swift case tracksErrorDeviceInUse = 3003 ```  ### tracksErrorPeerConnectionFactoryDisposed  ```swift case tracksErrorPeerConnectionFactoryDisposed = 3004 ```  ### tracksErrorNothingToReturn  ```swift case tracksErrorNothingToReturn = 3005 ```  ### tracksErrorInvalidVideoSettings  ```swift case tracksErrorInvalidVideoSettings = 3006 ```  ### tracksErrorCodecChangeNotPermitted  ```swift case tracksErrorCodecChangeNotPermitted = 3007 ```  ### tracksErrorAudioVideoSubsystemFailure  ```swift case tracksErrorAudioVideoSubsystemFailure = 3008 ```  ### tracksErrorAudioShouldBeSilenced  ```swift case tracksErrorAudioShouldBeSilenced = 3009 ```  ### tracksErrorMicCaptureFailed  ```swift case tracksErrorMicCaptureFailed = 3011 ```  ### webrtcErrorCreateOfferFailed  ```swift case webrtcErrorCreateOfferFailed = 4001 ```  ### webrtcErrorCreateAnswerFailed  ```swift case webrtcErrorCreateAnswerFailed = 4002 ```  ### webrtcErrorSetLocalDescriptionFailed  ```swift case webrtcErrorSetLocalDescriptionFailed = 4003 ```  ### webrtcErrorSetRemoteDescriptionFailed  ```swift case webrtcErrorSetRemoteDescriptionFailed = 4004 ```  ### webrtcErrorICEFailure  ```swift case webrtcErrorICEFailure = 4005 ```  ### joinErrorServer  ```swift case joinErrorServer = 5000 ```  ### joinErrorAlreadyJoined  ```swift case joinErrorAlreadyJoined = 5001 ```  ### genericErrorNotConnected  ```swift case genericErrorNotConnected = 6000 ```  ### genericErrorSignalling  ```swift case genericErrorSignalling = 6001 ```  ### genericErrorUnknown  ```swift case genericErrorUnknown = 6002 ```  ### genericErrorNotReady  ```swift case genericErrorNotReady = 6003 ```  ### genericErrorJsonParsingFailed  ```swift case genericErrorJsonParsingFailed = 6004 ```  ### genericErrorTrackMetadataMissing  ```swift case genericErrorTrackMetadataMissing = 6005 ```  ### genericErrorRTCTrackMissing  ```swift case genericErrorRTCTrackMissing = 6006 ```  ### genericErrorPeerMetadataMissing  ```swift case genericErrorPeerMetadataMissing = 6007 ```  rMetadataMissing = 6007  ```  ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSErrorCode"
    },
    {
        "title": "HMSLogLevel.mdx",
        "link": "/api-reference/ios/v2/enums/HMSLogLevel",
        "keywords": [],
        "headings": ["Cases", "off", "error", "warning", "verbose"],
        "content": "--- title: HMSLogLevel nav: 53 ---  **ENUM**  ```swift @objc public enum HMSLogLevel: Int ```  ## Cases  ### off  ```swift case  = 0 ```  ### error  ```swift case error ```  ### warning  ```swift case warning ```  ### verbose  ```swift case verbose ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSLogLevel"
    },
    {
        "title": "HMSMessageRecipientType.mdx",
        "link": "/api-reference/ios/v2/enums/HMSMessageRecipientType",
        "keywords": [],
        "headings": ["Cases", "broadcast", "peer", "roles"],
        "content": "--- title: HMSMessageRecipientType nav: 54 ---  **ENUM**  ```swift @objc public enum HMSMessageRecipientType: Int ```  ## Cases  ### broadcast  ```swift case broadcast = 0 ```  ### peer  ```swift case peer ```  ### roles  ```swift case roles ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSMessageRecipientType"
    },
    {
        "title": "HMSPeerUpdate.mdx",
        "link": "/api-reference/ios/v2/enums/HMSPeerUpdate",
        "keywords": [],
        "headings": [
            "Cases",
            "peerJoined",
            "peerLeft",
            "roleUpdated",
            "defaultUpdate",
            "Properties",
            "description"
        ],
        "content": "--- title: HMSPeerUpdate nav: 55 ---  **ENUM**  ```swift @objc public enum HMSPeerUpdate: Int, CustomStringConvertible ```  ## Cases  ### peerJoined  ```swift case peerJoined ```  ### peerLeft  ```swift case peerLeft ```  ### roleUpdated  ```swift case roleUpdated ```  ### defaultUpdate  ```swift case defaultUpdate ```  ## Properties  ### description  ```swift public var description: String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSPeerUpdate"
    },
    {
        "title": "HMSRoomUpdate.mdx",
        "link": "/api-reference/ios/v2/enums/HMSRoomUpdate",
        "keywords": [],
        "headings": [
            "Cases",
            "roomTypeChanged",
            "metaDataUpdated",
            "browserRecordingStateUpdated",
            "serverRecordingStateUpdated",
            "rtmpStreamingStateUpdated",
            "Properties",
            "description"
        ],
        "content": "--- title: HMSRoomUpdate nav: 56 ---  **ENUM**  ```swift @objc public enum HMSRoomUpdate: Int, CustomStringConvertible ```  ## Cases  ### roomTypeChanged  ```swift case roomTypeChanged ```  ### metaDataUpdated  ```swift case metaDataUpdated ```  ### browserRecordingStateUpdated  ```swift case browserRecordingStateUpdated ```  ### serverRecordingStateUpdated  ```swift case serverRecordingStateUpdated ```  ### rtmpStreamingStateUpdated  ```swift case rtmpStreamingStateUpdated ```  ## Properties  ### description  ```swift public var description: String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSRoomUpdate"
    },
    {
        "title": "HMSSimulcastLayer.mdx",
        "link": "/api-reference/ios/v2/enums/HMSSimulcastLayer",
        "keywords": [],
        "headings": ["Cases", "high", "mid", "low", "none"],
        "content": "--- title: HMSSimulcastLayer nav: 57 ---  **ENUM**  ```swift public enum HMSSimulcastLayer : UInt ```  ## Cases  ### high  ```swift case high = 0 ```  ### mid  ```swift case mid = 1 ```  ### low  ```swift case low = 2 ```  ### none  ```swift case none = 3 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSSimulcastLayer"
    },
    {
        "title": "HMSTrackKind.mdx",
        "link": "/api-reference/ios/v2/enums/HMSTrackKind",
        "keywords": [],
        "headings": ["Cases", "audio", "video"],
        "content": "--- title: HMSTrackKind nav: 58 ---  **ENUM**  ```swift public enum HMSTrackKind : UInt ```  ## Cases  ### audio  ```swift case audio = 0 ```  ### video  ```swift case video = 1 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSTrackKind"
    },
    {
        "title": "HMSTrackSource.mdx",
        "link": "/api-reference/ios/v2/enums/HMSTrackSource",
        "keywords": [],
        "headings": ["Cases", "regular", "screen", "plugin"],
        "content": "--- title: HMSTrackSource nav: 59 ---  **ENUM**  ```swift public enum HMSTrackSource : UInt ```  ## Cases  ### regular  ```swift case regular = 0 ```  ### screen  ```swift case screen = 1 ```  ### plugin  ```swift case plugin = 2 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSTrackSource"
    },
    {
        "title": "HMSTrackUpdate.mdx",
        "link": "/api-reference/ios/v2/enums/HMSTrackUpdate",
        "keywords": [],
        "headings": [
            "Cases",
            "trackAdded",
            "trackRemoved",
            "trackMuted",
            "trackUnmuted",
            "trackDescriptionChanged",
            "trackDegraded",
            "trackRestored",
            "Properties",
            "description"
        ],
        "content": "--- title: HMSTrackUpdate nav: 60 ---  **ENUM**  ```swift @objc public enum HMSTrackUpdate: Int, CustomStringConvertible ```  ## Cases  ### trackAdded  ```swift case trackAdded ```  ### trackRemoved  ```swift case trackRemoved ```  ### trackMuted  ```swift case trackMuted ```  ### trackUnmuted  ```swift case trackUnmuted ```  ### trackDescriptionChanged  ```swift case trackDescriptionChanged ```  ### trackDegraded  ```swift case trackDegraded ```  ### trackRestored  ```swift case trackRestored ```  ## Properties  ### description  ```swift public var description: String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSTrackUpdate"
    },
    {
        "title": "HMSVideoConnectionState.mdx",
        "link": "/api-reference/ios/v2/enums/HMSVideoConnectionState",
        "keywords": [],
        "headings": ["Cases", "ready", "connecting", "connected", "disconnected", "failed"],
        "content": "--- title: HMSVideoConnectionState nav: 61 ---  **ENUM**  ```swift public enum HMSVideoConnectionState : UInt ```  ## Cases  ### ready  ```swift case ready = 0 ```  ### connecting  ```swift case connecting = 1 ```  ### connected  ```swift case connected = 2 ```  ### disconnected  ```swift case disconnected = 3 ```  ### failed  ```swift case failed = 4 ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/enums/HMSVideoConnectionState"
    },
    {
        "title": "HMSDataSource.mdx",
        "link": "/api-reference/ios/v2/extensions/HMSDataSource",
        "keywords": [],
        "headings": [
            "Methods",
            "on(join:)",
            "Parameters",
            "on(room:update:)",
            "Parameters",
            "on(peer:update:)",
            "Parameters",
            "on(track:update:for:)",
            "Parameters",
            "on(updated:)",
            "Parameters",
            "on(error:)",
            "Parameters",
            "on(message:)",
            "Parameters",
            "onReconnecting()",
            "onReconnected()"
        ],
        "content": "--- title: HMSDataSource nav: 62 ---  **EXTENSION**  ```swift extension HMSDataSource: HMSUpdateListener ```  ## Methods  ### on(join:)  ```swift public func on(join room: HMSRoom) ```  initializes data source  current peers & tracks   room  -   Parameter room:  room   user joined  #### Parameters  | Name  Description                    | | ----  ------------------------------ | | room   room   user joined |  ### on(room:update:)  ```swift public func on(room: HMSRoom, update: HMSRoomUpdate) ```  #### Parameters  | Name    Description                                                               | | ------  ------------------------------------------------------------------------- | | room     room   joined                                                 | | update   triggered update type. Should  used  perform different UI Actions |  ### on(peer:update:)  ```swift public func on(peer: HMSPeer, update: HMSPeerUpdate) ```  #### Parameters  | Name    Description                                                               | | ------  ------------------------------------------------------------------------- | | peer     peer  joined/left   updated                                   | | update   triggered update type. Should  used  perform different UI Actions |  ### on(track:update:for:)  ```swift public func on(track: HMSTrack, update: HMSTrackUpdate,  peer: HMSPeer) ```  #### Parameters  | Name    Description                                            | | ------  ------------------------------------------------------ | | track    track   added, removed  updated          | | update   triggered update type                              | | peer     peer   track  added, removed  updated |  ### on(updated:)  ```swift public func on(updated speakers: [HMSSpeaker]) ```  #### Parameters  | Name      Description          | | --------  -------------------- | | speakers   list  speakers |  ### on(error:)  ```swift public func on(error: HMSError) ```  #### Parameters  | Name   Description            | | -----  ---------------------- | | error   error  occurred |  ### on(message:)  ```swift public func on(message: HMSMessage) ```  #### Parameters  | Name     Description                    | | -------  ------------------------------ | | message   received broadcast message |  ### onReconnecting()  ```swift public func onReconnecting() ```  ### onReconnected()  ```swift public func onReconnected() ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/extensions/HMSDataSource"
    },
    {
        "title": "HMSPeer.mdx",
        "link": "/api-reference/ios/v2/extensions/HMSPeer",
        "keywords": [],
        "headings": ["Methods", "==(_:_:)"],
        "content": "--- title: HMSPeer nav: 63 ---  **EXTENSION**  ```swift extension HMSPeer ```  ## Methods  ### ==(_:_:)  ```swift public static func ==(lhs: HMSPeer, rhs: HMSPeer) -> Bool ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/extensions/HMSPeer"
    },
    {
        "title": "HMSSection.mdx",
        "link": "/api-reference/ios/v2/extensions/HMSSection",
        "keywords": [],
        "headings": ["Methods", "hash(into:)", "Parameters", "==(_:_:)", "Parameters"],
        "content": "--- title: HMSSection nav: 64 ---  **EXTENSION**  ```swift extension HMSSection: Hashable ```  ## Methods  ### hash(into:)  ```swift public func hash(into hasher: inout Hasher) ```  Use `identifier`  find  unique section object  -   Parameter hasher:  hasher object  #### Parameters  | Name    Description       | | ------  ----------------- | | hasher   hasher object |  ### ==(_:_:)  ```swift public static func == (lhs: HMSSection, rhs: HMSSection) -> Bool ```  resolves comparing  2 section objects  differentiating based  unique `identifier`  -   Parameters:     -   lhs:  first section  compare     -   rhs:  second section  compare -   Returns:  Boolean stating whether compared section objects    different  #### Parameters  | Name  Description                   | | ----  ----------------------------- | | lhs    first section  compare  | | rhs    second section  compare | ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/extensions/HMSSection"
    },
    {
        "title": "HMSViewModel.mdx",
        "link": "/api-reference/ios/v2/extensions/HMSViewModel",
        "keywords": [],
        "headings": ["Methods", "hash(into:)", "Parameters", "==(_:_:)", "Parameters"],
        "content": "--- title: HMSViewModel nav: 65 ---  **EXTENSION**  ```swift extension HMSViewModel: Hashable ```  ## Methods  ### hash(into:)  ```swift public func hash(into hasher: inout Hasher) ```  Use `identifier`  find  unique view model object  -   Parameter hasher:  hasher object  #### Parameters  | Name    Description       | | ------  ----------------- | | hasher   hasher object |  ### ==(_:_:)  ```swift public static func == (lhs: HMSViewModel, rhs: HMSViewModel) -> Bool ```  resolves comparing  2 view model objects  differentiating based  unique `identifier`  -   Parameters:     -   lhs:  first view model  compare     -   rhs:  second view model  compare -   Returns:  Boolean stating whether compared view model objects    different  #### Parameters  | Name  Description                      | | ----  -------------------------------- | | lhs    first view model  compare  | | rhs    second view model  compare | ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/extensions/HMSViewModel"
    },
    {
        "title": "content.mdx",
        "link": "/api-reference/ios/v2/home/content",
        "keywords": [],
        "headings": ["Protocols", "Classes", "Enums", "Extensions", "Structs", "Typealiases"],
        "content": "--- title: iOS API reference nav: 1 ---  ## Protocols  -   [HMSDataSourceDelegate](../protocols/HMSDataSourceDelegate) -   [HMSLogger](../protocols/HMSLogger) -   [HMSPreviewListener](../protocols/HMSPreviewListener) -   [HMSUpdateListener](../protocols/HMSUpdateListener)  ## Classes  -   [HMSAudioSettings](../classes/HMSAudioSettings) -   [HMSAudioTrack](../classes/HMSAudioTrack) -   [HMSAudioTrackSettings](../classes/HMSAudioTrackSettings) -   [HMSBrowserRecordingState](../classes/HMSBrowserRecordingState) -   [HMSChangeTrackStateRequest](../classes/HMSChangeTrackStateRequest) -   [HMSCommonTrackSource](../classes/HMSCommonTrackSource) -   [HMSConfig](../classes/HMSConfig) -   [HMSDataSource](../classes/HMSDataSource) -   [HMSDevice](../classes/HMSDevice) -   [HMSError](../classes/HMSError) -   [HMSLocalAudioTrack](../classes/HMSLocalAudioTrack) -   [HMSLocalPeer](../classes/HMSLocalPeer) -   [HMSLocalVideoTrack](../classes/HMSLocalVideoTrack) -   [HMSMessage](../classes/HMSMessage) -   [HMSMessageRecipient](../classes/HMSMessageRecipient) -   [HMSNetworkQuality](../classes/HMSNetworkQuality) -   [HMSPeer](../classes/HMSPeer) -   [HMSPermissions](../classes/HMSPermissions) -   [HMSPublishSettings](../classes/HMSPublishSettings) -   [HMSRemoteAudioTrack](../classes/HMSRemoteAudioTrack) -   [HMSRemotePeer](../classes/HMSRemotePeer) -   [HMSRemoteVideoTrack](../classes/HMSRemoteVideoTrack) -   [HMSRemovedFromRoomNotification](../classes/HMSRemovedFromRoomNotification) -   [HMSRole](../classes/HMSRole) -   [HMSRoleChangeRequest](../classes/HMSRoleChangeRequest) -   [HMSRoom](../classes/HMSRoom) -   [HMSRTMPConfig](../classes/HMSRTMPConfig) -   [HMSRTMPStreamingState](../classes/HMSRTMPStreamingState) -   [HMSSDK](../classes/HMSSDK) -   [HMSSection](../classes/HMSSection) -   [HMSServerRecordingState](../classes/HMSServerRecordingState) -   [HMSSimulcastLayerSettingsPolicy](../classes/HMSSimulcastLayerSettingsPolicy) -   [HMSSimulcastSettingsPolicy](../classes/HMSSimulcastSettingsPolicy) -   [HMSSpeaker](../classes/HMSSpeaker) -   [HMSSubscribeDegradationPolicy](../classes/HMSSubscribeDegradationPolicy) -   [HMSSubscribeSettings](../classes/HMSSubscribeSettings) -   [HMSTrack](../classes/HMSTrack) -   [HMSTrackSettings](../classes/HMSTrackSettings) -   [HMSUtilities](../classes/HMSUtilities) -   [HMSUtility](../classes/HMSUtility) -   [HMSVideoSettings](../classes/HMSVideoSettings) -   [HMSVideoTrack](../classes/HMSVideoTrack) -   [HMSVideoTrackSettings](../classes/HMSVideoTrackSettings) -   [HMSVideoView](../classes/HMSVideoView) -   [HMSViewModel](../classes/HMSViewModel)  ## Enums  -   [HMSAnalyticsEventLevel](../enums/HMSAnalyticsEventLevel) -   [HMSCameraFacing](../enums/HMSCameraFacing) -   [HMSCodec](../enums/HMSCodec) -   [HMSConnectionRole](../enums/HMSConnectionRole) -   [HMSErrorCode](../enums/HMSErrorCode) -   [HMSLogLevel](../enums/HMSLogLevel) -   [HMSMessageRecipientType](../enums/HMSMessageRecipientType) -   [HMSPeerUpdate](../enums/HMSPeerUpdate) -   [HMSRoomUpdate](../enums/HMSRoomUpdate) -   [HMSSimulcastLayer](../enums/HMSSimulcastLayer) -   [HMSTrackKind](../enums/HMSTrackKind) -   [HMSTrackSource](../enums/HMSTrackSource) -   [HMSTrackUpdate](../enums/HMSTrackUpdate) -   [HMSVideoConnectionState](../enums/HMSVideoConnectionState)  ## Extensions  -   [HMSDataSource](../extensions/HMSDataSource) -   [HMSPeer](../extensions/HMSPeer) -   [HMSSection](../extensions/HMSSection) -   [HMSViewModel](../extensions/HMSViewModel)  ## Structs  -   [HMSPerformanceStats](../structs/HMSPerformanceStats)  ## Typealiases  -   [HMSSection.SectionIdentifier](../typealiases/HMSSection.SectionIdentifier) -   [HMSVideoResolution](../typealiases/HMSVideoResolution) ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/home/content"
    },
    {
        "title": "HMSDataSourceDelegate.mdx",
        "link": "/api-reference/ios/v2/protocols/HMSDataSourceDelegate",
        "keywords": [],
        "headings": ["Methods", "didUpdate(\\_:)", "didUpdate(\\_:)"],
        "content": "--- title: HMSDataSourceDelegate nav: 67 ---  **PROTOCOL**  ```swift public protocol HMSDataSourceDelegate: AnyObject ```  ## Methods  ### didUpdate(\\_:)  ```swift func didUpdate(_ model: HMSViewModel?) ```  ### didUpdate(\\_:)  ```swift func didUpdate(_ speakers: [HMSViewModel]) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/protocols/HMSDataSourceDelegate"
    },
    {
        "title": "HMSLogger.mdx",
        "link": "/api-reference/ios/v2/protocols/HMSLogger",
        "keywords": [],
        "headings": ["Methods", "log(_:_:)"],
        "content": "--- title: HMSLogger nav: 68 ---  **PROTOCOL**  ```swift @objc public protocol HMSLogger: AnyObject ```  ## Methods  ### log(_:_:)  ```swift @objc(logMessage:level:) func log(_ message: String, _ level: HMSLogLevel) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/protocols/HMSLogger"
    },
    {
        "title": "HMSPreviewListener.mdx",
        "link": "/api-reference/ios/v2/protocols/HMSPreviewListener",
        "keywords": [],
        "headings": ["Methods", "onPreview(room:localTracks:)", "on(error:)"],
        "content": "--- title: HMSPreviewListener nav: 69 ---  **PROTOCOL**  ```swift @objc public protocol HMSPreviewListener: AnyObject ```  ## Methods  ### onPreview(room:localTracks:)  ```swift @objc(onPreview:localTracks:) func onPreview(room: HMSRoom, localTracks: [HMSTrack]) ```  ### on(error:)  ```swift @objc(onError:) func on(error: HMSError) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/protocols/HMSPreviewListener"
    },
    {
        "title": "HMSUpdateListener.mdx",
        "link": "/api-reference/ios/v2/protocols/HMSUpdateListener",
        "keywords": [],
        "headings": [
            "Methods",
            "on(join:)",
            "Parameters",
            "on(room:update:)",
            "Parameters",
            "on(peer:update:)",
            "Parameters",
            "on(track:update:for:)",
            "Parameters",
            "on(error:)",
            "Parameters",
            "on(message:)",
            "Parameters",
            "on(roleChangeRequest:)",
            "Parameters",
            "on(changeTrackStateRequest:)",
            "Parameters",
            "on(removedFromRoom:)",
            "Parameters",
            "on(updated:)",
            "A HMSSpeaker object contains -",
            "Parameters",
            "onReconnecting()",
            "onReconnected()"
        ],
        "content": "--- title: HMSUpdateListener nav: 70 ---  **PROTOCOL**  ```swift @objc public protocol HMSUpdateListener: AnyObject ```  100ms SDK provides callbacks   client app   change  update happening   room   user  joined  implementing HMSUpdateListener. These updates can  used  render  video  screen   display  info regarding  room.  ## Methods  ### on(join:)  ```swift @objc(onJoin:) func on(join room: HMSRoom) ```  This will  called   successful JOIN   room   user This   point  applications can stop showing  loading state  -   Parameter room:  room   joined  #### Parameters  | Name  Description               | | ----  ------------------------- | | room   room   joined |  ### on(room:update:)  ```swift @objc(onRoom:update:) func on(room: HMSRoom, update: HMSRoomUpdate) ```  This  called     change   property   Room  -   Parameters:     -   room:  room   joined     -   update:  triggered update type. Should  used  perform different UI Actions  #### Parameters  | Name    Description                                                               | | ------  ------------------------------------------------------------------------- | | room     room   joined                                                 | | update   triggered update type. Should  used  perform different UI Actions |  ### on(peer:update:)  ```swift @objc(onPeer:update:) func on(peer: HMSPeer, update: HMSPeerUpdate) ```  This will  called whenever    update   existing peer or  new peer got added/existing peer  removed. This callback can  used  keep  track    peers   room  -   Parameters:     -   peer:  peer  joined/left   updated     -   update:  triggered update type. Should  used  perform different UI Actions  #### Parameters  | Name    Description                                                               | | ------  ------------------------------------------------------------------------- | | peer     peer  joined/left   updated                                   | | update   triggered update type. Should  used  perform different UI Actions |  ### on(track:update:for:)  ```swift @objc(onTrack:update:peer:) func on(track: HMSTrack, update: HMSTrackUpdate,  peer: HMSPeer) ```  This  called    updates   existing track or  new track got added/existing track  removed This callback can  used  render  video  screen whenever  track gets added  -   Parameters:     -   track:  track   added, removed  updated     -   update:  triggered update type     -   peer:  peer   track  added, removed  updated  #### Parameters  | Name    Description                                            | | ------  ------------------------------------------------------ | | track    track   added, removed  updated          | | update   triggered update type                              | | peer     peer   track  added, removed  updated |  ### on(error:)  ```swift @objc(onError:) func on(error: HMSError) ```  This will  called     error   system and SDK  already retried  fix  error  -   Parameter error:  error  occurred  #### Parameters  | Name   Description            | | -----  ---------------------- | | error   error  occurred |  ### on(message:)  ```swift @objc(onMessage:) func on(message: HMSMessage) ```  This  called     new broadcast message    peer   room This can  used  implement chat   room  -   Parameter message:  received broadcast message  #### Parameters  | Name     Description                    | | -------  ------------------------------ | | message   received broadcast message |  ### on(roleChangeRequest:)  ```swift @objc(roleChangeRequest:) optional func on(roleChangeRequest: HMSRoleChangeRequest) ```  This  called   role change request arrives  -   Parameter roleChangeRequest:  request  role change info  #### Parameters  | Name               Description                      | | -----------------  -------------------------------- | | roleChangeRequest   request  role change info |  ### on(changeTrackStateRequest:)  ```swift @objc(changeTrackStateRequest:) optional func on(changeTrackStateRequest: HMSChangeTrackStateRequest) ```  This  called   change track state request arrives  -   Parameter changeTrackStateRequest:  request  changing track state  #### Parameters  | Name                     Description                          | | -----------------------  ------------------------------------ | | changeTrackStateRequest   request  changing track state |  ### on(removedFromRoom:)  ```swift @objc(removedFromRoom:) optional func on(removedFromRoom notification: HMSRemovedFromRoomNotification) ```  This  called  someone removes  local peer   current room  -   Parameter notification:  notification containing reason  removing   initiating peer  #### Parameters  | Name          Description                                                             | | ------------  ----------------------------------------------------------------------- | | notification   notification containing reason  removing   initiating peer |  ### on(updated:)  ```swift @objc(onUpdatedSpeakers:) func on(updated speakers: [HMSSpeaker]) ```  This  called every 1 second  list  active speakers  ## A HMSSpeaker object contains -  -   peer:  peer   speaking -   track:  track   emitting audio -   level:  number within range 1-100 indicating  audio volume     A peer    present   list indicates   peer   speaking     This can  used  highlight currently speaking peers   room -   Parameter speakers:  list  speakers  #### Parameters  | Name      Description          | | --------  -------------------- | | speakers   list  speakers |  ### onReconnecting()  ```swift @objc func onReconnecting() ```  This  called  SDK detects  network issue   trying  recover  ### onReconnected()  ```swift @objc func onReconnected() ```  This  called  SDK successfully recovered   network issue a network issue ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/protocols/HMSUpdateListener"
    },
    {
        "title": "HMSPerformanceStats.mdx",
        "link": "/api-reference/ios/v2/structs/HMSPerformanceStats",
        "keywords": [],
        "headings": ["Properties", "memory", "battery", "Methods", "init", "init"],
        "content": "--- title: HMSPerformanceStats nav: 71 ---  **STRUCT**  ```swift public struct HMSPerformanceStats ```  ## Properties  ### memory  ```swift public var memory: Double ```  ### battery  ```swift public var battery: Double ```  ## Methods  ### init  ```swift public init() ```  ### init  ```swift public init(cpu: Double, memory: Double, battery: Double) ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/structs/HMSPerformanceStats"
    },
    {
        "title": "HMSSection.SectionIdentifier.mdx",
        "link": "/api-reference/ios/v2/typealiases/HMSSection.SectionIdentifier",
        "keywords": [],
        "headings": [],
        "content": "--- title: HMSSection.SectionIdentifier nav: 72 ---  **TYPEALIAS**  ```swift public typealias SectionIdentifier = String ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/typealiases/HMSSection.SectionIdentifier"
    },
    {
        "title": "HMSVideoResolution.mdx",
        "link": "/api-reference/ios/v2/typealiases/HMSVideoResolution",
        "keywords": [],
        "headings": [],
        "content": "--- title: HMSVideoResolution nav: 73 ---  **TYPEALIAS**  ```swift public typealias HMSVideoResolution = CGSize ``` ",
        "platformName": "iOS",
        "objectID": "/api-reference/ios/v2/typealiases/HMSVideoResolution"
    },
    {
        "title": "HMSReactiveStore.mdx",
        "link": "/api-reference/javascript/v2/classes/HMSReactiveStore",
        "keywords": [],
        "headings": [
            "Constructors",
            "constructor",
            "Parameters",
            "Methods",
            "getActions",
            "Returns",
            "getHMSActions",
            "Returns",
            "getNotifications",
            "Returns",
            "getStats",
            "Returns",
            "getStore",
            "Returns",
            "triggerOnSubscribe",
            "Returns"
        ],
        "content": "--- title: HMSReactiveStore ---  ## Constructors  ### constructor  • **new HMSReactiveStore**(`hmsStore?`, `hmsActions?`, `hmsNotifications?`)  #### Parameters  | Name                 Type                                                               | | :------------------  :----------------------------------------------------------------- | | `hmsStore?`          [`IHMSStore`](/api-reference/javascript/v2/interfaces/IHMSStore)   | | `hmsActions?`        [`HMSActions`](/api-reference/javascript/v2/interfaces/HMSActions) | | `hmsNotifications?`  `HMSNotifications`                                                 |  ## Methods  ### getActions  ▸ **getActions**(): [`HMSActions`](/api-reference/javascript/v2/interfaces/HMSActions)  Any action  may modify  store  may need  talk   SDK will happen through  IHMSActions instance returned  this  #### Returns  [`HMSActions`](/api-reference/javascript/v2/interfaces/HMSActions)  ---  ### getHMSActions  ▸ **getHMSActions**(): [`HMSActions`](/api-reference/javascript/v2/interfaces/HMSActions)  Any action  may modify  store  may need  talk   SDK will happen through  IHMSActions instance returned  this  **`Deprecated`**  use getActions  #### Returns  [`HMSActions`](/api-reference/javascript/v2/interfaces/HMSActions)  ---  ### getNotifications  ▸ **getNotifications**(): [`HMSNotifications`](/api-reference/javascript/v2/interfaces/HMSNotifications)  This return notification handler function    can pass  callback to receive notifications like peer joined, peer left, etc.  show   UI  use for analytics  #### Returns  [`HMSNotifications`](/api-reference/javascript/v2/interfaces/HMSNotifications)  ---  ### getStats  ▸ **getStats**(): [`HMSStatsStoreWrapper`](/api-reference/javascript/v2/interfaces/HMSStatsStoreWrapper)  #### Returns  [`HMSStatsStoreWrapper`](/api-reference/javascript/v2/interfaces/HMSStatsStoreWrapper)  ---  ### getStore  ▸ **getStore**(): [`HMSStoreWrapper`](/api-reference/javascript/v2/interfaces/HMSStoreWrapper)  A reactive store    subscribe method  can use  combination  selectors to subscribe   subset   store. The store serves   single source  truth for all data related   corresponding HMS Room.  #### Returns  [`HMSStoreWrapper`](/api-reference/javascript/v2/interfaces/HMSStoreWrapper)  ---  ### triggerOnSubscribe  ▸ **triggerOnSubscribe**(): `void`  By default store.subscribe   call  handler   current state  time  subscription, this behaviour can  modified  calling  function. What  means   instead  calling the handler   changes  happen post subscription  also call  exactly    time of subscription   current state. This behaviour  similar    BehaviourSubject  rxjs. This will   irreversible change  Note:   need    using  react hooks,  takes care   requirement.  #### Returns  `void` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/classes/HMSReactiveStore"
    },
    {
        "title": "HMSAudioPluginType.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSAudioPluginType",
        "keywords": [],
        "headings": ["Enumeration Members", "ANALYZE", "TRANSFORM"],
        "content": "--- title: HMSAudioPluginType ---  Specifies  type   plugin  transforming plugin will get  output audio node  give  resulting transformation. While  analyzing plugin will   passed  input node. For analyse plugins,  can return  source node passed  plugin.processTrack   modify anything  ## Enumeration Members  ### ANALYZE  • **ANALYZE** = `\"ANALYZE\"`  ---  ### TRANSFORM  • **TRANSFORM** = `\"TRANSFORM\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSAudioPluginType"
    },
    {
        "title": "HMSLogLevel.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSLogLevel",
        "keywords": [],
        "headings": [
            "Enumeration Members",
            "DEBUG",
            "ERROR",
            "INFO",
            "NONE",
            "TIME",
            "TIMEEND",
            "VERBOSE",
            "WARN"
        ],
        "content": "--- title: HMSLogLevel ---  ## Enumeration Members  ### DEBUG  • **DEBUG** = `1`  ---  ### ERROR  • **ERROR** = `6`  ---  ### INFO  • **INFO** = `2`  ---  ### NONE  • **NONE** = `7`  ---  ### TIME  • **TIME** = `4`  ---  ### TIMEEND  • **TIMEEND** = `5`  ---  ### VERBOSE  • **VERBOSE** = `0`  ---  ### WARN  • **WARN** = `3` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSLogLevel"
    },
    {
        "title": "HMSNotificationSeverity.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSNotificationSeverity",
        "keywords": [],
        "headings": ["Enumeration Members", "ERROR", "INFO"],
        "content": "--- title: HMSNotificationSeverity ---  ## Enumeration Members  ### ERROR  • **ERROR** = `\"error\"`  ---  ### INFO  • **INFO** = `\"info\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSNotificationSeverity"
    },
    {
        "title": "HMSNotificationTypes.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSNotificationTypes",
        "keywords": [],
        "headings": [
            "Enumeration Members",
            "CHANGE_MULTI_TRACK_STATE_REQUEST",
            "CHANGE_TRACK_STATE_REQUEST",
            "DEVICE_CHANGE_UPDATE",
            "ERROR",
            "METADATA_UPDATED",
            "NAME_UPDATED",
            "NEW_MESSAGE",
            "PEER_JOINED",
            "PEER_LEFT",
            "PEER_LIST",
            "PLAYLIST_TRACK_ENDED",
            "RECONNECTED",
            "RECONNECTING",
            "REMOVED_FROM_ROOM",
            "ROLE_UPDATED",
            "ROOM_ENDED",
            "TRACK_ADDED",
            "TRACK_DEGRADED",
            "TRACK_DESCRIPTION_CHANGED",
            "TRACK_MUTED",
            "TRACK_REMOVED",
            "TRACK_RESTORED",
            "TRACK_UNMUTED"
        ],
        "content": "--- title: HMSNotificationTypes ---  ## Enumeration Members  ### CHANGE_MULTI_TRACK_STATE_REQUEST  • **CHANGE_MULTI_TRACK_STATE_REQUEST** = `\"CHANGE_MULTI_TRACK_STATE_REQUEST\"`  ---  ### CHANGE_TRACK_STATE_REQUEST  • **CHANGE_TRACK_STATE_REQUEST** = `\"CHANGE_TRACK_STATE_REQUEST\"`  ---  ### DEVICE_CHANGE_UPDATE  • **DEVICE_CHANGE_UPDATE** = `\"DEVICE_CHANGE_UPDATE\"`  ---  ### ERROR  • **ERROR** = `\"ERROR\"`  ---  ### METADATA_UPDATED  • **METADATA_UPDATED** = `\"METADATA_UPDATED\"`  ---  ### NAME_UPDATED  • **NAME_UPDATED** = `\"NAME_UPDATED\"`  ---  ### NEW_MESSAGE  • **NEW_MESSAGE** = `\"NEW_MESSAGE\"`  ---  ### PEER_JOINED  • **PEER_JOINED** = `\"PEER_JOINED\"`  ---  ### PEER_LEFT  • **PEER_LEFT** = `\"PEER_LEFT\"`  ---  ### PEER_LIST  • **PEER_LIST** = `\"PEER_LIST\"`  ---  ### PLAYLIST_TRACK_ENDED  • **PLAYLIST_TRACK_ENDED** = `\"PLAYLIST_TRACK_ENDED\"`  ---  ### RECONNECTED  • **RECONNECTED** = `\"RECONNECTED\"`  ---  ### RECONNECTING  • **RECONNECTING** = `\"RECONNECTING\"`  ---  ### REMOVED_FROM_ROOM  • **REMOVED_FROM_ROOM** = `\"REMOVED_FROM_ROOM\"`  ---  ### ROLE_UPDATED  • **ROLE_UPDATED** = `\"ROLE_UPDATED\"`  ---  ### ROOM_ENDED  • **ROOM_ENDED** = `\"ROOM_ENDED\"`  ---  ### TRACK_ADDED  • **TRACK_ADDED** = `\"TRACK_ADDED\"`  ---  ### TRACK_DEGRADED  • **TRACK_DEGRADED** = `\"TRACK_DEGRADED\"`  ---  ### TRACK_DESCRIPTION_CHANGED  • **TRACK_DESCRIPTION_CHANGED** = `\"TRACK_DESCRIPTION_CHANGED\"`  ---  ### TRACK_MUTED  • **TRACK_MUTED** = `\"TRACK_MUTED\"`  ---  ### TRACK_REMOVED  • **TRACK_REMOVED** = `\"TRACK_REMOVED\"`  ---  ### TRACK_RESTORED  • **TRACK_RESTORED** = `\"TRACK_RESTORED\"`  ---  ### TRACK_UNMUTED  • **TRACK_UNMUTED** = `\"TRACK_UNMUTED\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSNotificationTypes"
    },
    {
        "title": "HMSPlaylistType.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSPlaylistType",
        "keywords": [],
        "headings": ["Enumeration Members", "audio", "video"],
        "content": "--- title: HMSPlaylistType ---  ## Enumeration Members  ### audio  • **audio** = `\"audio\"`  ---  ### video  • **video** = `\"video\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSPlaylistType"
    },
    {
        "title": "HMSRoomState.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSRoomState",
        "keywords": [],
        "headings": [
            "Enumeration Members",
            "Connected",
            "Connecting",
            "Disconnected",
            "Disconnecting",
            "Failed",
            "Preview",
            "Reconnecting"
        ],
        "content": "--- title: HMSRoomState ---  Check  internal-docs/RoomStateFlow.tldr  flow  room state View  by  - Installing tldraw  VSCode(https://marketplace.visualstudio.com/items?itemName=tldraw-org.tldraw-vscode), or - Open  file  https://www.tldraw.com/  ## Enumeration Members  ### Connected  • **Connected** = `\"Connected\"`  ---  ### Connecting  • **Connecting** = `\"Connecting\"`  ---  ### Disconnected  • **Disconnected** = `\"Disconnected\"`  ---  ### Disconnecting  • **Disconnecting** = `\"Disconnecting\"`  ---  ### Failed  • **Failed** = `\"Failed\"`  ---  ### Preview  • **Preview** = `\"Preview\"`  ---  ### Reconnecting  • **Reconnecting** = `\"Reconnecting\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSRoomState"
    },
    {
        "title": "HMSSimulcastLayer.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSSimulcastLayer",
        "keywords": [],
        "headings": ["Enumeration Members", "HIGH", "LOW", "MEDIUM", "NONE"],
        "content": "--- title: HMSSimulcastLayer ---  ## Enumeration Members  ### HIGH  • **HIGH** = `\"high\"`  ---  ### LOW  • **LOW** = `\"low\"`  ---  ### MEDIUM  • **MEDIUM** = `\"medium\"`  ---  ### NONE  • **NONE** = `\"none\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSSimulcastLayer"
    },
    {
        "title": "HMSVideoPluginCanvasContextType.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSVideoPluginCanvasContextType",
        "keywords": [],
        "headings": ["Enumeration Members", "2D", "WEBGL", "WEBGL2"],
        "content": "--- title: HMSVideoPluginCanvasContextType ---  ## Enumeration Members  ### 2D  • **2D** = `\"2d\"`  ---  ### WEBGL  • **WEBGL** = `\"webgl\"`  ---  ### WEBGL2  • **WEBGL2** = `\"webgl2\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSVideoPluginCanvasContextType"
    },
    {
        "title": "HMSVideoPluginType.mdx",
        "link": "/api-reference/javascript/v2/enums/HMSVideoPluginType",
        "keywords": [],
        "headings": ["Enumeration Members", "ANALYZE", "TRANSFORM"],
        "content": "--- title: HMSVideoPluginType ---  Specifies  type   plugin  transforming plugin will get  output canvas  give  resulting transformation. While  analyzing plugin will   passed  input canvas.  ## Enumeration Members  ### ANALYZE  • **ANALYZE** = `\"ANALYZE\"`  ---  ### TRANSFORM  • **TRANSFORM** = `\"TRANSFORM\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/enums/HMSVideoPluginType"
    },
    {
        "title": "content.mdx",
        "link": "/api-reference/javascript/v2/home/content",
        "keywords": [],
        "headings": [
            "Enumerations",
            "Classes",
            "Core Interfaces",
            "Other Interfaces",
            "References",
            "IHMSNotifications",
            "Type Aliases",
            "HMSMessageID",
            "HMSNotification",
            "HMSNotificationCallback",
            "Type parameters",
            "Type declaration",
            "Parameters",
            "Returns",
            "HMSNotificationInCallback",
            "Type parameters",
            "HMSNotificationMapping",
            "Type parameters",
            "HMSNotificationTypeParam",
            "HMSPeerID",
            "HMSPreferredSimulcastLayer",
            "HMSRoleName",
            "HMSRoomID",
            "HMSTrack",
            "HMSTrackDisplaySurface",
            "HMSTrackFacingMode",
            "HMSTrackID",
            "HMSTrackSource",
            "HMSTrackType",
            "Variables",
            "parsedUserAgent",
            "selectAudioPlaylist",
            "selectHMSStats",
            "Type declaration",
            "selectVideoPlaylist",
            "simulcastMapping",
            "Type declaration",
            "Functions",
            "createDefaultStatsStore",
            "Returns",
            "selectAppData",
            "Parameters",
            "Returns",
            "selectAppDataByPath",
            "Parameters",
            "Returns",
            "selectAudioPlaylistTrackByPeerID",
            "Parameters",
            "Returns",
            "selectAudioTrackByID",
            "Parameters",
            "Returns",
            "selectAudioTrackByPeerID",
            "Parameters",
            "Returns",
            "selectAudioTrackVolume",
            "Parameters",
            "Returns",
            "selectAudioVolumeByPeerID",
            "Parameters",
            "Returns",
            "selectAuxiliaryAudioByPeerID",
            "Parameters",
            "Returns",
            "selectAuxiliaryTracksByPeerID",
            "Parameters",
            "Returns",
            "selectAvailableRoleNames",
            "Parameters",
            "Returns",
            "selectBroadcastMessages",
            "Parameters",
            "Returns",
            "selectBroadcastMessagesUnreadCount",
            "Parameters",
            "Returns",
            "selectCameraStreamByPeerID",
            "Parameters",
            "Returns",
            "selectConnectionQualities",
            "Parameters",
            "Returns",
            "selectConnectionQualityByPeerID",
            "Parameters",
            "Returns",
            "selectDegradedTracks",
            "Parameters",
            "Returns",
            "selectDevices",
            "Parameters",
            "Returns",
            "selectDidIJoinWithin",
            "Parameters",
            "Returns",
            "selectDominantSpeaker",
            "Parameters",
            "Returns",
            "selectHLSState",
            "Parameters",
            "Returns",
            "selectHMSMessages",
            "Parameters",
            "Returns",
            "selectHMSMessagesCount",
            "Parameters",
            "Returns",
            "selectIsAllowedToPublish",
            "Parameters",
            "Returns",
            "selectIsAllowedToSubscribe",
            "Parameters",
            "Returns",
            "selectIsAudioLocallyMuted",
            "Parameters",
            "Returns",
            "selectIsConnectedToRoom",
            "Parameters",
            "Returns",
            "selectIsInPreview",
            "Parameters",
            "Returns",
            "selectIsLocalAudioEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalAudioPluginPresent",
            "Parameters",
            "Returns",
            "selectIsLocalScreenShared",
            "Parameters",
            "Returns",
            "selectIsLocalVideoDisplayEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalVideoEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalVideoPluginPresent",
            "Parameters",
            "Returns",
            "selectIsLocallyMutedByPeerID",
            "Parameters",
            "Returns",
            "selectIsPeerAudioEnabled",
            "Parameters",
            "Returns",
            "selectIsPeerVideoEnabled",
            "Parameters",
            "Returns",
            "selectIsScreenShareLocallyMutedByPeerID",
            "Parameters",
            "Returns",
            "selectIsSomeoneScreenSharing",
            "Parameters",
            "Returns",
            "selectLocalAudioTrackID",
            "Parameters",
            "Returns",
            "selectLocalMediaSettings",
            "Parameters",
            "Returns",
            "selectLocalPeer",
            "Parameters",
            "Returns",
            "selectLocalPeerID",
            "Parameters",
            "Returns",
            "selectLocalPeerName",
            "Parameters",
            "Returns",
            "selectLocalPeerRole",
            "Parameters",
            "Returns",
            "selectLocalPeerRoleName",
            "Parameters",
            "Returns",
            "selectLocalTrackIDs",
            "Parameters",
            "Returns",
            "selectLocalVideoTrackID",
            "Parameters",
            "Returns",
            "selectMessageIDsInOrder",
            "Parameters",
            "Returns",
            "selectMessagesByPeerID",
            "Parameters",
            "Returns",
            "selectMessagesByRole",
            "Parameters",
            "Returns",
            "selectMessagesUnreadCountByPeerID",
            "Parameters",
            "Returns",
            "selectMessagesUnreadCountByRole",
            "Parameters",
            "Returns",
            "selectPeerAudioByID",
            "Parameters",
            "Returns",
            "selectPeerByCondition",
            "Parameters",
            "Returns",
            "selectPeerByID",
            "Parameters",
            "Returns",
            "selectPeerCount",
            "Parameters",
            "Returns",
            "selectPeerMetadata",
            "Parameters",
            "Returns",
            "selectPeerName",
            "Parameters",
            "Returns",
            "selectPeerNameByID",
            "Parameters",
            "Returns",
            "selectPeerScreenSharing",
            "Parameters",
            "Returns",
            "selectPeerSharingAudio",
            "Parameters",
            "Returns",
            "selectPeerSharingAudioPlaylist",
            "Parameters",
            "Returns",
            "selectPeerSharingVideoPlaylist",
            "Parameters",
            "Returns",
            "selectPeers",
            "Parameters",
            "Returns",
            "selectPeersByCondition",
            "Parameters",
            "Returns",
            "selectPeersByRole",
            "Parameters",
            "Returns",
            "selectPeersScreenSharing",
            "Parameters",
            "Returns",
            "selectPeersWithAudioStatus",
            "Parameters",
            "Returns",
            "selectPermissions",
            "Parameters",
            "Returns",
            "selectRTMPState",
            "Parameters",
            "Returns",
            "selectRecordingState",
            "Parameters",
            "Returns",
            "selectRemotePeers",
            "Parameters",
            "Returns",
            "selectRoleByRoleName",
            "Parameters",
            "Returns",
            "selectRoleChangeRequest",
            "Parameters",
            "Returns",
            "selectRolesMap",
            "Parameters",
            "Returns",
            "selectRoom",
            "Parameters",
            "Returns",
            "selectRoomID",
            "Parameters",
            "Returns",
            "selectRoomStartTime",
            "Parameters",
            "Returns",
            "selectRoomStarted",
            "Parameters",
            "Returns",
            "selectRoomState",
            "Parameters",
            "Returns",
            "selectScreenAudioTrackByID",
            "Parameters",
            "Returns",
            "selectScreenShareAudioByPeerID",
            "Parameters",
            "Returns",
            "selectScreenShareByPeerID",
            "Parameters",
            "Returns",
            "selectScreenSharesByPeerId",
            "Parameters",
            "Returns",
            "selectScreenVideoTrackByID",
            "Parameters",
            "Returns",
            "selectScreenshareAudioVolumeByPeerID",
            "Parameters",
            "Returns",
            "selectSessionId",
            "Parameters",
            "Returns",
            "selectSessionMetadata",
            "Parameters",
            "Returns",
            "selectSimulcastLayerByTrack",
            "Parameters",
            "Returns",
            "selectSpeakers",
            "Parameters",
            "Returns",
            "selectTrackAudioByID",
            "Parameters",
            "Returns",
            "selectTrackByID",
            "Parameters",
            "Returns",
            "selectUnreadHMSMessagesCount",
            "Parameters",
            "Returns",
            "selectVideoPlaylistAudioTrackByPeerID",
            "Parameters",
            "Returns",
            "selectVideoPlaylistVideoTrackByPeerID",
            "Parameters",
            "Returns",
            "selectVideoTrackByID",
            "Parameters",
            "Returns",
            "selectVideoTrackByPeerID",
            "Parameters",
            "Returns"
        ],
        "content": "--- title: Web SDK API Reference ---  ## Enumerations  - [HMSAudioPluginType](/api-reference/javascript/v2/enums/HMSAudioPluginType) - [HMSLogLevel](/api-reference/javascript/v2/enums/HMSLogLevel) - [HMSNotificationSeverity](/api-reference/javascript/v2/enums/HMSNotificationSeverity) - [HMSNotificationTypes](/api-reference/javascript/v2/enums/HMSNotificationTypes) - [HMSPlaylistType](/api-reference/javascript/v2/enums/HMSPlaylistType) - [HMSRoomState](/api-reference/javascript/v2/enums/HMSRoomState) - [HMSSimulcastLayer](/api-reference/javascript/v2/enums/HMSSimulcastLayer) - [HMSVideoPluginCanvasContextType](/api-reference/javascript/v2/enums/HMSVideoPluginCanvasContextType) - [HMSVideoPluginType](/api-reference/javascript/v2/enums/HMSVideoPluginType)  ## Classes  - [HMSReactiveStore](/api-reference/javascript/v2/classes/HMSReactiveStore)  ## Core Interfaces  - [HMSActions](/api-reference/javascript/v2/interfaces/HMSActions) - [HMSNotifications](/api-reference/javascript/v2/interfaces/HMSNotifications) - [HMSStoreWrapper](/api-reference/javascript/v2/interfaces/HMSStoreWrapper)  ## Other Interfaces  - [DeviceMap](/api-reference/javascript/v2/interfaces/DeviceMap) - [HLSConfig](/api-reference/javascript/v2/interfaces/HLSConfig) - [HLSMeetingURLVariant](/api-reference/javascript/v2/interfaces/HLSMeetingURLVariant) - [HLSVariant](/api-reference/javascript/v2/interfaces/HLSVariant) - [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack) - [HMSAudioTrackSettings](/api-reference/javascript/v2/interfaces/HMSAudioTrackSettings) - [HMSChangeMultiTrackStateParams](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateParams) - [HMSChangeMultiTrackStateRequest](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequest) - [HMSChangeMultiTrackStateRequestNotification](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequestNotification) - [HMSChangeTrackStateRequest](/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequest) - [HMSChangeTrackStateRequestNotification](/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequestNotification) - [HMSConfig](/api-reference/javascript/v2/interfaces/HMSConfig) - [HMSConfigInitialSettings](/api-reference/javascript/v2/interfaces/HMSConfigInitialSettings) - [HMSDeviceChangeEvent](/api-reference/javascript/v2/interfaces/HMSDeviceChangeEvent) - [HMSDeviceChangeEventNotification](/api-reference/javascript/v2/interfaces/HMSDeviceChangeEventNotification) - [HMSException](/api-reference/javascript/v2/interfaces/HMSException) - [HMSExceptionNotification](/api-reference/javascript/v2/interfaces/HMSExceptionNotification) - [HMSHLS](/api-reference/javascript/v2/interfaces/HMSHLS) - [HMSLeaveRoomRequest](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest) - [HMSLeaveRoomRequestNotification](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification) - [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats) - [HMSMediaSettings](/api-reference/javascript/v2/interfaces/HMSMediaSettings) - [HMSMessage](/api-reference/javascript/v2/interfaces/HMSMessage) - [HMSMessageNotification](/api-reference/javascript/v2/interfaces/HMSMessageNotification) - [HMSPeer](/api-reference/javascript/v2/interfaces/HMSPeer) - [HMSPeerListNotification](/api-reference/javascript/v2/interfaces/HMSPeerListNotification) - [HMSPeerNotification](/api-reference/javascript/v2/interfaces/HMSPeerNotification) - [HMSPeerStats](/api-reference/javascript/v2/interfaces/HMSPeerStats) - [HMSPeerWithMuteStatus](/api-reference/javascript/v2/interfaces/HMSPeerWithMuteStatus) - [HMSPlaylist](/api-reference/javascript/v2/interfaces/HMSPlaylist) - [HMSPlaylistItem](/api-reference/javascript/v2/interfaces/HMSPlaylistItem) - [HMSPlaylistItemNotification](/api-reference/javascript/v2/interfaces/HMSPlaylistItemNotification) - [HMSPlaylistSelection](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection) - [HMSPlaylistSelector](/api-reference/javascript/v2/interfaces/HMSPlaylistSelector) - [HMSPublishAllowed](/api-reference/javascript/v2/interfaces/HMSPublishAllowed) - [HMSRTMP](/api-reference/javascript/v2/interfaces/HMSRTMP) - [HMSReconnectionNotification](/api-reference/javascript/v2/interfaces/HMSReconnectionNotification) - [HMSRecording](/api-reference/javascript/v2/interfaces/HMSRecording) - [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats) - [HMSRole](/api-reference/javascript/v2/interfaces/HMSRole) - [HMSRoleChangeRequest](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest) - [HMSRoleChangeStoreRequest](/api-reference/javascript/v2/interfaces/HMSRoleChangeStoreRequest) - [HMSRoom](/api-reference/javascript/v2/interfaces/HMSRoom) - [HMSScreenAudioTrack](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) - [HMSScreenShareConfig](/api-reference/javascript/v2/interfaces/HMSScreenShareConfig) - [HMSScreenVideoTrack](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) - [HMSSimulcastLayerDefinition](/api-reference/javascript/v2/interfaces/HMSSimulcastLayerDefinition) - [HMSSpeaker](/api-reference/javascript/v2/interfaces/HMSSpeaker) - [HMSStatsStore](/api-reference/javascript/v2/interfaces/HMSStatsStore) - [HMSStatsStoreWrapper](/api-reference/javascript/v2/interfaces/HMSStatsStoreWrapper) - [HMSStore](/api-reference/javascript/v2/interfaces/HMSStore) - [HMSTrackNotification](/api-reference/javascript/v2/interfaces/HMSTrackNotification) - [HMSTrackStats](/api-reference/javascript/v2/interfaces/HMSTrackStats) - [HMSVideoTrack](/api-reference/javascript/v2/interfaces/HMSVideoTrack) - [HMSVideoTrackSettings](/api-reference/javascript/v2/interfaces/HMSVideoTrackSettings) - [IHMSPlaylistActions](/api-reference/javascript/v2/interfaces/IHMSPlaylistActions) - [IHMSStatsStore](/api-reference/javascript/v2/interfaces/IHMSStatsStore) - [IHMSStore](/api-reference/javascript/v2/interfaces/IHMSStore) - [RTMPRecordingConfig](/api-reference/javascript/v2/interfaces/RTMPRecordingConfig) - [ScreenCaptureHandle](/api-reference/javascript/v2/interfaces/ScreenCaptureHandle)  ## References  ### IHMSNotifications  Renames  re-exports [HMSNotifications](/api-reference/javascript/v2/interfaces/HMSNotifications)  ## Type Aliases  ### HMSMessageID  Ƭ **HMSMessageID**: `string`  ---  ### HMSNotification  Ƭ **HMSNotification**: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) \\| [`HMSPeerListNotification`](/api-reference/javascript/v2/interfaces/HMSPeerListNotification) \\| [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) \\| [`HMSMessageNotification`](/api-reference/javascript/v2/interfaces/HMSMessageNotification) \\| [`HMSExceptionNotification`](/api-reference/javascript/v2/interfaces/HMSExceptionNotification) \\| [`HMSChangeTrackStateRequestNotification`](/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequestNotification) \\| [`HMSChangeMultiTrackStateRequestNotification`](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequestNotification) \\| [`HMSLeaveRoomRequestNotification`](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification) \\| [`HMSDeviceChangeEventNotification`](/api-reference/javascript/v2/interfaces/HMSDeviceChangeEventNotification) \\| [`HMSReconnectionNotification`](/api-reference/javascript/v2/interfaces/HMSReconnectionNotification) \\| [`HMSPlaylistItemNotification`](/api-reference/javascript/v2/interfaces/HMSPlaylistItemNotification)<`any`\\>  ---  ### HMSNotificationCallback  Ƭ **HMSNotificationCallback**<`T`\\>: (`notification`: [`HMSNotificationInCallback`](/api-reference/javascript/v2/home/content#hmsnotificationincallback)<`T`\\>) => `void`  #### Type parameters  | Name  Type                                                                                                | | :---  :-------------------------------------------------------------------------------------------------- | | `T`   extends [`HMSNotificationTypeParam`](/api-reference/javascript/v2/modules#hmsnotificationtypeparam) |  #### Type declaration  ▸ (`notification`): `void`  ##### Parameters  | Name            Type                                                                                                | | :-------------  :-------------------------------------------------------------------------------------------------- | | `notification`  [`HMSNotificationInCallback`](/api-reference/javascript/v2/modules#hmsnotificationincallback)<`T`\\> |  ##### Returns  `void`  ---  ### HMSNotificationInCallback  Ƭ **HMSNotificationInCallback**<`T`\\>: `T` extends [`HMSNotificationTypes`](/api-reference/javascript/v2/enums/HMSNotificationTypes)[] ? `MappedNotifications`<`T`\\>[`number`] : `T` extends [`HMSNotificationTypes`](/api-reference/javascript/v2/enums/HMSNotificationTypes) ? [`HMSNotificationMapping`](/api-reference/javascript/v2/modules#hmsnotificationmapping)<`T`\\> : [`HMSNotification`](/api-reference/javascript/v2/modules#hmsnotification)  #### Type parameters  | Name  Type                                                                                                | | :---  :-------------------------------------------------------------------------------------------------- | | `T`   extends [`HMSNotificationTypeParam`](/api-reference/javascript/v2/modules#hmsnotificationtypeparam) |  ---  ### HMSNotificationMapping  Ƭ **HMSNotificationMapping**<`T`, `C`\\>: { `CHANGE_MULTI_TRACK_STATE_REQUEST`: [`HMSChangeMultiTrackStateRequestNotification`](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequestNotification) ; `CHANGE_TRACK_STATE_REQUEST`: [`HMSChangeTrackStateRequestNotification`](/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequestNotification) ; `DEVICE_CHANGE_UPDATE`: [`HMSDeviceChangeEventNotification`](/api-reference/javascript/v2/interfaces/HMSDeviceChangeEventNotification) ; `ERROR`: [`HMSExceptionNotification`](/api-reference/javascript/v2/interfaces/HMSExceptionNotification) ; `METADATA_UPDATED`: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) ; `NAME_UPDATED`: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) ; `NEW_MESSAGE`: [`HMSMessageNotification`](/api-reference/javascript/v2/interfaces/HMSMessageNotification) ; `PEER_JOINED`: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) ; `PEER_LEFT`: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) ; `PEER_LIST`: [`HMSPeerListNotification`](/api-reference/javascript/v2/interfaces/HMSPeerListNotification) ; `PLAYLIST_TRACK_ENDED`: [`HMSPlaylistItemNotification`](/api-reference/javascript/v2/interfaces/HMSPlaylistItemNotification)<`C`\\> ; `RECONNECTED`: [`HMSReconnectionNotification`](/api-reference/javascript/v2/interfaces/HMSReconnectionNotification) ; `RECONNECTING`: [`HMSReconnectionNotification`](/api-reference/javascript/v2/interfaces/HMSReconnectionNotification) ; `REMOVED_FROM_ROOM`: [`HMSLeaveRoomRequestNotification`](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification) ; `ROLE_UPDATED`: [`HMSPeerNotification`](/api-reference/javascript/v2/interfaces/HMSPeerNotification) ; `ROOM_ENDED`: [`HMSLeaveRoomRequestNotification`](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification) ; `TRACK_ADDED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_DEGRADED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_DESCRIPTION_CHANGED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_MUTED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_REMOVED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_RESTORED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) ; `TRACK_UNMUTED`: [`HMSTrackNotification`](/api-reference/javascript/v2/interfaces/HMSTrackNotification) }[`T`]  #### Type parameters  | Name  Type                                                                                      | | :---  :---------------------------------------------------------------------------------------- | | `T`   extends [`HMSNotificationTypes`](/api-reference/javascript/v2/enums/HMSNotificationTypes) | | `C`   `any`                                                                                     |  ---  ### HMSNotificationTypeParam  Ƭ **HMSNotificationTypeParam**: [`HMSNotificationTypes`](/api-reference/javascript/v2/enums/HMSNotificationTypes) \\| [`HMSNotificationTypes`](/api-reference/javascript/v2/enums/HMSNotificationTypes)[] \\| `undefined`  ---  ### HMSPeerID  Ƭ **HMSPeerID**: `string`  ---  ### HMSPreferredSimulcastLayer  Ƭ **HMSPreferredSimulcastLayer**: `Exclude`<[`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer), [`NONE`](/api-reference/javascript/v2/enums/HMSSimulcastLayer#none)\\>  ---  ### HMSRoleName  Ƭ **HMSRoleName**: `string`  ---  ### HMSRoomID  Ƭ **HMSRoomID**: `string`  ---  ### HMSTrack  Ƭ **HMSTrack**: [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack) \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack) \\| [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) \\| [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack)  ---  ### HMSTrackDisplaySurface  Ƭ **HMSTrackDisplaySurface**: `\"application\"` \\| `\"browser\"` \\| `\"selfBrowser\"` \\| `\"monitor\"` \\| `\"window\"`  Use   identify    screenshared,   browsers will support everything.  application -  windows   application  shared window -  particular window   shared monitor - full screen share   monitor display browser -  browser tab  shared selfBrowser -  current browser tab   shared  ---  ### HMSTrackFacingMode  Ƭ **HMSTrackFacingMode**: `\"user\"` \\| `\"environment\"` \\| `\"left\"` \\| `\"right\"`  ---  ### HMSTrackID  Ƭ **HMSTrackID**: `string`  ---  ### HMSTrackSource  Ƭ **HMSTrackSource**: `\"regular\"` \\| `\"screen\"` \\| `\"plugin\"` \\| `\"audioplaylist\"` \\| `\"videoplaylist\"` \\| `string`  ---  ### HMSTrackType  Ƭ **HMSTrackType**: `\"audio\"` \\| `\"video\"`  ## Variables  ### parsedUserAgent  • `Const` **parsedUserAgent**: `UAParserInstance`  ---  ### selectAudioPlaylist  • `Const` **selectAudioPlaylist**: [`HMSPlaylistSelector`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelector)  ---  ### selectHMSStats  • `Const` **selectHMSStats**: `Object`  #### Type declaration  | Name                           Type                                                                                                                                                                                                                                                                                                                                                                                                                                       | | :----------------------------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `availablePublishBitrate`      `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `availableSubscribeBitrate`    `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `jitter`                       `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `localAudioTrackStats`         `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats), (`res1`: `Record`<`string`, `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)[]\\>, `res2`: `undefined` \\| `string`) => `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\> | | `localAudioTrackStatsByID`     (`id?`: `string`) => `StoreSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\>                                                                                                                                                                                                                                   | | `localPeerStats`               `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats), (`res1`: `Record`<`string`, `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)\\>, `res2`: `string`) => `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)\\>                        | | `localVideoTrackStats`         `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats), (`res1`: `Record`<`string`, `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)[]\\>, `res2`: `undefined` \\| `string`) => `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\> | | `localVideoTrackStatsByID`     (`id?`: `string`) => `StoreSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)[]\\>                                                                                                                                                                                                                                 | | `localVideoTrackStatsByLayer`  (`layer?`: [`HMSPreferredSimulcastLayer`](/api-reference/javascript/v2/modules#hmspreferredsimulcastlayer)) => (`id?`: `string`) => `StoreSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\>                                                                                                                    | | `packetsLost`                  `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `peerStatsByID`                (`id?`: `string`) => `StoreSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)\\>                                                                                                                                                                                                                                     | | `publishBitrate`               `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `subscribeBitrate`             `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `totalBytesReceived`           `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `totalBytesSent`               `OutputSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| `number`, (`res`: `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)) => `undefined` \\| `number`\\>                                                                                                                                                                                            | | `trackStatsByID`               (`id?`: `string`) => `StoreSelector`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore), `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\>                                                                                                                                                                                                                                   |  ---  ### selectVideoPlaylist  • `Const` **selectVideoPlaylist**: [`HMSPlaylistSelector`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelector)  ---  ### simulcastMapping  • `Const` **simulcastMapping**: `Object`  #### Type declaration  | Name  Type                                                                        | | :---  :-------------------------------------------------------------------------- | | `f`   [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer) | | `h`   [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer) | | `q`   [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer) |  ## Functions  ### createDefaultStatsStore  ▸ **createDefaultStatsStore**(): [`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)  #### Returns  [`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)  ---  ### selectAppData  ▸ **selectAppData**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `any`\\>  Select  particular key  ui app data  passed  key. if key   passed, full data  returned.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `any`\\>  ---  ### selectAppDataByPath  ▸ **selectAppDataByPath**(...`keys`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `Record`<`string`, `any`\\>, (`res`: `undefined` \\| `Record`<`string`, `any`\\>) => `undefined` \\| `Record`<`string`, `any`\\>\\>  #### Parameters  | Name       Type       | | :--------  :--------- | | `...keys`  `string`[] |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `Record`<`string`, `any`\\>, (`res`: `undefined` \\| `Record`<`string`, `any`\\>) => `undefined` \\| `Record`<`string`, `any`\\>\\>  ---  ### selectAudioPlaylistTrackByPeerID  ▸ **selectAudioPlaylistTrackByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectAudioTrackByID  ▸ **selectAudioTrackByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  Select  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack) object given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectAudioTrackByPeerID  ▸ **selectAudioTrackByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  Select  primary audio track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectAudioTrackVolume  ▸ **selectAudioTrackVolume**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  Select  local audio volume   audio track given  track ID.  NOTE: **Volume**   track  different  **Audio Level**   track,  - Audio Level measures  audio   track   comes  100ms's servers. - Volume   loud  hear  audio   track,   controlled     client side.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  ---  ### selectAudioVolumeByPeerID  ▸ **selectAudioVolumeByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  Select  local audio volume   primary audio track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  ---  ### selectAuxiliaryAudioByPeerID  ▸ **selectAuxiliaryAudioByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  Select  first auxiliary audio track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectAuxiliaryTracksByPeerID  ▸ **selectAuxiliaryTracksByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSTrack`](/api-reference/javascript/v2/modules#hmstrack)[]\\>  Select  array  auxiliary tracks   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSTrack`](/api-reference/javascript/v2/modules#hmstrack)[]\\>  ---  ### selectAvailableRoleNames  ▸ **selectAvailableRoleNames**(`state`): `string`[]  Select  array  names  available roles   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`[]  ---  ### selectBroadcastMessages  ▸ **selectBroadcastMessages**(`state`): [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]  ---  ### selectBroadcastMessagesUnreadCount  ▸ **selectBroadcastMessagesUnreadCount**(`state`): `number`  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `number`  ---  ### selectCameraStreamByPeerID  ▸ **selectCameraStreamByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  Select  camera stream   peer given  peer ID. This   primary video track   peer.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  ---  ### selectConnectionQualities  ▸ **selectConnectionQualities**(`store`): `Record`<`string`, `HMSConnectionQuality`\\>  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `Record`<`string`, `HMSConnectionQuality`\\>  ---  ### selectConnectionQualityByPeerID  ▸ **selectConnectionQualityByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `HMSConnectionQuality`\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `HMSConnectionQuality`\\>  ---  ### selectDegradedTracks  ▸ **selectDegradedTracks**(`state`): [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)[]  Select  array  tracks    degraded(receiving lower video quality/no video) due  bad network locally.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)[]  ---  ### selectDevices  ▸ **selectDevices**(`store`): [`DeviceMap`](/api-reference/javascript/v2/interfaces/DeviceMap)  Select  available audio input, audio output  video input devices   machine.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`DeviceMap`](/api-reference/javascript/v2/interfaces/DeviceMap)  An object  array  available audio input, audio output  video input devices.  ``` type DeviceMap = {   audioInput: InputDeviceInfo[];   audioOutput: MediaDeviceInfo[];   videoInput: InputDeviceInfo[]; } ```  ---  ### selectDidIJoinWithin  ▸ **selectDidIJoinWithin**(`timeMs`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`, (`res`: [`HMSRoom`](/api-reference/javascript/v2/interfaces/HMSRoom)) => `undefined` \\| `boolean`\\>  Returns  boolean  indicate   local peer joined within  past `timeMs` milliseconds.  Ex:  know   local peer joined within  last one second  ```js const joinedWithinASecond = useHMSStore(selectDidIJoinWithin(1000)); ```  #### Parameters  | Name      Type     | | :-------  :------- | | `timeMs`  `number` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`, (`res`: [`HMSRoom`](/api-reference/javascript/v2/interfaces/HMSRoom)) => `undefined` \\| `boolean`\\>  ---  ### selectDominantSpeaker  ▸ **selectDominantSpeaker**(`state`): `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  Select  peer  speaking  loudest   moment  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectHLSState  ▸ **selectHLSState**(`state`): [`HMSHLS`](/api-reference/javascript/v2/interfaces/HMSHLS)  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSHLS`](/api-reference/javascript/v2/interfaces/HMSHLS)  ---  ### selectHMSMessages  ▸ **selectHMSMessages**(`state`): [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]  Select  array  messages   room(sent  received).  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]  ---  ### selectHMSMessagesCount  ▸ **selectHMSMessagesCount**(`state`): `number`  Select  number  messages(sent  received).  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `number`  ---  ### selectIsAllowedToPublish  ▸ **selectIsAllowedToPublish**(`state`): [`HMSPublishAllowed`](/api-reference/javascript/v2/interfaces/HMSPublishAllowed)  Select  streams   local peer allowed  publish  video, audio  screenshare.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPublishAllowed`](/api-reference/javascript/v2/interfaces/HMSPublishAllowed)  ---  ### selectIsAllowedToSubscribe  ▸ **selectIsAllowedToSubscribe**(`state`): `boolean`  Select  boolean denoting whether   local peer  allowed  subscribe    role.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectIsAudioLocallyMuted  ▸ **selectIsAudioLocallyMuted**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  Select  boolean denoting whether  muted  audio track locally(only  you) given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  ---  ### selectIsConnectedToRoom  ▸ **selectIsConnectedToRoom**(`state`): `undefined` \\| `boolean`  Select  boolean flag denoting whether  joined  room. NOTE: Returns true   join, returns false  preview.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `boolean`  ---  ### selectIsInPreview  ▸ **selectIsInPreview**(`state`): `boolean`  Select  boolean denoting whether  room   Preview state.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectIsLocalAudioEnabled  ▸ **selectIsLocalAudioEnabled**(`store`): `boolean`  Select  boolean denoting whether  local audio  unmuted and  audio   microphone  shared  remote peers  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectIsLocalAudioPluginPresent  ▸ **selectIsLocalAudioPluginPresent**(`pluginName`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`, (`res`: `string`[]) => `boolean`\\>  #### Parameters  | Name          Type     | | :-----------  :------- | | `pluginName`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore),",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/home/content-left"
    },
    {
        "title": "content.mdx",
        "link": "/api-reference/javascript/v2/home/content",
        "keywords": [],
        "headings": [
            "Enumerations",
            "Classes",
            "Core Interfaces",
            "Other Interfaces",
            "References",
            "IHMSNotifications",
            "Type Aliases",
            "HMSMessageID",
            "HMSNotification",
            "HMSNotificationCallback",
            "Type parameters",
            "Type declaration",
            "Parameters",
            "Returns",
            "HMSNotificationInCallback",
            "Type parameters",
            "HMSNotificationMapping",
            "Type parameters",
            "HMSNotificationTypeParam",
            "HMSPeerID",
            "HMSPreferredSimulcastLayer",
            "HMSRoleName",
            "HMSRoomID",
            "HMSTrack",
            "HMSTrackDisplaySurface",
            "HMSTrackFacingMode",
            "HMSTrackID",
            "HMSTrackSource",
            "HMSTrackType",
            "Variables",
            "parsedUserAgent",
            "selectAudioPlaylist",
            "selectHMSStats",
            "Type declaration",
            "selectVideoPlaylist",
            "simulcastMapping",
            "Type declaration",
            "Functions",
            "createDefaultStatsStore",
            "Returns",
            "selectAppData",
            "Parameters",
            "Returns",
            "selectAppDataByPath",
            "Parameters",
            "Returns",
            "selectAudioPlaylistTrackByPeerID",
            "Parameters",
            "Returns",
            "selectAudioTrackByID",
            "Parameters",
            "Returns",
            "selectAudioTrackByPeerID",
            "Parameters",
            "Returns",
            "selectAudioTrackVolume",
            "Parameters",
            "Returns",
            "selectAudioVolumeByPeerID",
            "Parameters",
            "Returns",
            "selectAuxiliaryAudioByPeerID",
            "Parameters",
            "Returns",
            "selectAuxiliaryTracksByPeerID",
            "Parameters",
            "Returns",
            "selectAvailableRoleNames",
            "Parameters",
            "Returns",
            "selectBroadcastMessages",
            "Parameters",
            "Returns",
            "selectBroadcastMessagesUnreadCount",
            "Parameters",
            "Returns",
            "selectCameraStreamByPeerID",
            "Parameters",
            "Returns",
            "selectConnectionQualities",
            "Parameters",
            "Returns",
            "selectConnectionQualityByPeerID",
            "Parameters",
            "Returns",
            "selectDegradedTracks",
            "Parameters",
            "Returns",
            "selectDevices",
            "Parameters",
            "Returns",
            "selectDidIJoinWithin",
            "Parameters",
            "Returns",
            "selectDominantSpeaker",
            "Parameters",
            "Returns",
            "selectHLSState",
            "Parameters",
            "Returns",
            "selectHMSMessages",
            "Parameters",
            "Returns",
            "selectHMSMessagesCount",
            "Parameters",
            "Returns",
            "selectIsAllowedToPublish",
            "Parameters",
            "Returns",
            "selectIsAllowedToSubscribe",
            "Parameters",
            "Returns",
            "selectIsAudioLocallyMuted",
            "Parameters",
            "Returns",
            "selectIsConnectedToRoom",
            "Parameters",
            "Returns",
            "selectIsInPreview",
            "Parameters",
            "Returns",
            "selectIsLocalAudioEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalAudioPluginPresent",
            "Parameters",
            "Returns",
            "selectIsLocalScreenShared",
            "Parameters",
            "Returns",
            "selectIsLocalVideoDisplayEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalVideoEnabled",
            "Parameters",
            "Returns",
            "selectIsLocalVideoPluginPresent",
            "Parameters",
            "Returns",
            "selectIsLocallyMutedByPeerID",
            "Parameters",
            "Returns",
            "selectIsPeerAudioEnabled",
            "Parameters",
            "Returns",
            "selectIsPeerVideoEnabled",
            "Parameters",
            "Returns",
            "selectIsScreenShareLocallyMutedByPeerID",
            "Parameters",
            "Returns",
            "selectIsSomeoneScreenSharing",
            "Parameters",
            "Returns",
            "selectLocalAudioTrackID",
            "Parameters",
            "Returns",
            "selectLocalMediaSettings",
            "Parameters",
            "Returns",
            "selectLocalPeer",
            "Parameters",
            "Returns",
            "selectLocalPeerID",
            "Parameters",
            "Returns",
            "selectLocalPeerName",
            "Parameters",
            "Returns",
            "selectLocalPeerRole",
            "Parameters",
            "Returns",
            "selectLocalPeerRoleName",
            "Parameters",
            "Returns",
            "selectLocalTrackIDs",
            "Parameters",
            "Returns",
            "selectLocalVideoTrackID",
            "Parameters",
            "Returns",
            "selectMessageIDsInOrder",
            "Parameters",
            "Returns",
            "selectMessagesByPeerID",
            "Parameters",
            "Returns",
            "selectMessagesByRole",
            "Parameters",
            "Returns",
            "selectMessagesUnreadCountByPeerID",
            "Parameters",
            "Returns",
            "selectMessagesUnreadCountByRole",
            "Parameters",
            "Returns",
            "selectPeerAudioByID",
            "Parameters",
            "Returns",
            "selectPeerByCondition",
            "Parameters",
            "Returns",
            "selectPeerByID",
            "Parameters",
            "Returns",
            "selectPeerCount",
            "Parameters",
            "Returns",
            "selectPeerMetadata",
            "Parameters",
            "Returns",
            "selectPeerName",
            "Parameters",
            "Returns",
            "selectPeerNameByID",
            "Parameters",
            "Returns",
            "selectPeerScreenSharing",
            "Parameters",
            "Returns",
            "selectPeerSharingAudio",
            "Parameters",
            "Returns",
            "selectPeerSharingAudioPlaylist",
            "Parameters",
            "Returns",
            "selectPeerSharingVideoPlaylist",
            "Parameters",
            "Returns",
            "selectPeers",
            "Parameters",
            "Returns",
            "selectPeersByCondition",
            "Parameters",
            "Returns",
            "selectPeersByRole",
            "Parameters",
            "Returns",
            "selectPeersScreenSharing",
            "Parameters",
            "Returns",
            "selectPeersWithAudioStatus",
            "Parameters",
            "Returns",
            "selectPermissions",
            "Parameters",
            "Returns",
            "selectRTMPState",
            "Parameters",
            "Returns",
            "selectRecordingState",
            "Parameters",
            "Returns",
            "selectRemotePeers",
            "Parameters",
            "Returns",
            "selectRoleByRoleName",
            "Parameters",
            "Returns",
            "selectRoleChangeRequest",
            "Parameters",
            "Returns",
            "selectRolesMap",
            "Parameters",
            "Returns",
            "selectRoom",
            "Parameters",
            "Returns",
            "selectRoomID",
            "Parameters",
            "Returns",
            "selectRoomStartTime",
            "Parameters",
            "Returns",
            "selectRoomStarted",
            "Parameters",
            "Returns",
            "selectRoomState",
            "Parameters",
            "Returns",
            "selectScreenAudioTrackByID",
            "Parameters",
            "Returns",
            "selectScreenShareAudioByPeerID",
            "Parameters",
            "Returns",
            "selectScreenShareByPeerID",
            "Parameters",
            "Returns",
            "selectScreenSharesByPeerId",
            "Parameters",
            "Returns",
            "selectScreenVideoTrackByID",
            "Parameters",
            "Returns",
            "selectScreenshareAudioVolumeByPeerID",
            "Parameters",
            "Returns",
            "selectSessionId",
            "Parameters",
            "Returns",
            "selectSessionMetadata",
            "Parameters",
            "Returns",
            "selectSimulcastLayerByTrack",
            "Parameters",
            "Returns",
            "selectSpeakers",
            "Parameters",
            "Returns",
            "selectTrackAudioByID",
            "Parameters",
            "Returns",
            "selectTrackByID",
            "Parameters",
            "Returns",
            "selectUnreadHMSMessagesCount",
            "Parameters",
            "Returns",
            "selectVideoPlaylistAudioTrackByPeerID",
            "Parameters",
            "Returns",
            "selectVideoPlaylistVideoTrackByPeerID",
            "Parameters",
            "Returns",
            "selectVideoTrackByID",
            "Parameters",
            "Returns",
            "selectVideoTrackByPeerID",
            "Parameters",
            "Returns"
        ],
        "content": " `boolean`, (`res`: `string`[]) => `boolean`\\>  ---  ### selectIsLocalScreenShared  ▸ **selectIsLocalScreenShared**(`state`): `boolean`  Select  boolean denoting whether  screen  shared  remote peers   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectIsLocalVideoDisplayEnabled  ▸ **selectIsLocalVideoDisplayEnabled**(`store`): `undefined` \\| `boolean`  Select  boolean denoting whether  chosen  unmute  share  local video.  NOTE: Once  call `hmsActions.setLocalVideoEnabled(true)`to unmute  local video, it takes  time  fetch  video   video source. This displayEnabled property gives immediate feedback    interactive UI, without waiting   video source  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `boolean`  ---  ### selectIsLocalVideoEnabled  ▸ **selectIsLocalVideoEnabled**(`store`): `boolean`  Select  boolean denoting whether  local video  unmuted and  video   camera  shared  remote peers  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectIsLocalVideoPluginPresent  ▸ **selectIsLocalVideoPluginPresent**(`pluginName`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`, (`res`: `string`[]) => `boolean`\\>  #### Parameters  | Name          Type     | | :-----------  :------- | | `pluginName`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`, (`res`: `string`[]) => `boolean`\\>  ---  ### selectIsLocallyMutedByPeerID  ▸ **selectIsLocallyMutedByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  Select  boolean denoting whether  muted  primary audio track   peer locally(only  you) given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  ---  ### selectIsPeerAudioEnabled  ▸ **selectIsPeerAudioEnabled**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`\\>  Select  boolean denoting whether  peer  unmuted audio  sharing    peers.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`\\>  ---  ### selectIsPeerVideoEnabled  ▸ **selectIsPeerVideoEnabled**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`\\>  Select  boolean denoting whether  peer  unmuted video  sharing    peers.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `boolean`\\>  ---  ### selectIsScreenShareLocallyMutedByPeerID  ▸ **selectIsScreenShareLocallyMutedByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  Select  boolean denoting whether  muted  screen share audio track   peer locally(only  you) given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `boolean`\\>  ---  ### selectIsSomeoneScreenSharing  ▸ **selectIsSomeoneScreenSharing**(`state`): `boolean`  Select  boolean denoting whether someone  sharing screen   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectLocalAudioTrackID  ▸ **selectLocalAudioTrackID**(`state`): `undefined` \\| `string`  Select  track ID   local peer's primary audio track  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `string`  ---  ### selectLocalMediaSettings  ▸ **selectLocalMediaSettings**(`store`): [`HMSMediaSettings`](/api-reference/javascript/v2/interfaces/HMSMediaSettings)  Select  media settings i.e., choosen audio input device, audio output device  video input device.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSMediaSettings`](/api-reference/javascript/v2/interfaces/HMSMediaSettings)  ---  ### selectLocalPeer  ▸ **selectLocalPeer**(`state`): [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  Select  local peer object object assigned  you.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectLocalPeerID  ▸ **selectLocalPeerID**(`state`): `string`  Select  peer ID   local peer.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`  ---  ### selectLocalPeerName  ▸ **selectLocalPeerName**(`state`): `string`  Select  peer name   local peer.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`  ---  ### selectLocalPeerRole  ▸ **selectLocalPeerRole**(`state`): `null` \\| [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)  Select  [HMSRole](/api-reference/javascript/v2/interfaces/HMSRole) object   local peer.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `null` \\| [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)  ---  ### selectLocalPeerRoleName  ▸ **selectLocalPeerRoleName**(`state`): `undefined` \\| `string`  Select  role name   local peer.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `string`  ---  ### selectLocalTrackIDs  ▸ **selectLocalTrackIDs**(`state`): `string`[]  Select  array  track IDs    local peer's tracks  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`[]  ---  ### selectLocalVideoTrackID  ▸ **selectLocalVideoTrackID**(`state`): `undefined` \\| `string`  Select  track ID   local peer's primary video track  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `string`  ---  ### selectMessageIDsInOrder  ▸ **selectMessageIDsInOrder**(`store`): `string`[]  Select IDs  messages  sent  received sorted chronologically.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`[]  ---  ### selectMessagesByPeerID  ▸ **selectMessagesByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]\\>  ---  ### selectMessagesByRole  ▸ **selectMessagesByRole**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)[]\\>  ---  ### selectMessagesUnreadCountByPeerID  ▸ **selectMessagesUnreadCountByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  ---  ### selectMessagesUnreadCountByRole  ▸ **selectMessagesUnreadCountByRole**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  ---  ### selectPeerAudioByID  ▸ **selectPeerAudioByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  Select audio level  audioTrack   peer given  peer IDß.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  ---  ### selectPeerByCondition  ▸ **selectPeerByCondition**(`predicate`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer), (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)\\>  Selects  first peer passing  condition given   argument predicate function  Ex:  select  peer whose metadata  spotlight set  true(assuming peer.metadata   valid json string), use  ```js const spotlightPeer = useHMSStore(selectPeerByCondition(peer => JSON.parse(peer.metadata).spotlight)); ```  #### Parameters  | Name         Type                                                                                | | :----------  :---------------------------------------------------------------------------------- | | `predicate`  (`peer`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `boolean` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer), (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)\\>  ---  ### selectPeerByID  ▸ **selectPeerByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)\\>  Select  [HMSPeer](/api-reference/javascript/v2/interfaces/HMSPeer) object given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)\\>  ---  ### selectPeerCount  ▸ **selectPeerCount**(`state`): `number`  selectPeerCount gives  number  peers Inside  room. This  count  local peer if they're still  preview   yet joined  room. Note   will  necessarily equal the number  peers received  selectPeers,  possible  know total number  people   room without  details  everyone depending  dashboard settings.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `number`  ---  ### selectPeerMetadata  ▸ **selectPeerMetadata**(`peerId`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `any`, (`res`: `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `any`\\>  Selects  peer metadata   passed  peer  returns   JSON. If metadata   present or conversion  JSON gives  error,  empty object  returned. Please directly use peer.metadata  case  metadata   JSON  design.  #### Parameters  | Name      Type     | | :-------  :------- | | `peerId`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `any`, (`res`: `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `any`\\>  ---  ### selectPeerName  ▸ **selectPeerName**(`peerId`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `string`, (`res`: `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `undefined` \\| `string`\\>  #### Parameters  | Name      Type     | | :-------  :------- | | `peerId`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `string`, (`res`: `null` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `undefined` \\| `string`\\>  ---  ### selectPeerNameByID  ▸ **selectPeerNameByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `string`\\>  Select  name   [HMSPeer](/api-reference/javascript/v2/interfaces/HMSPeer) given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `string`\\>  ---  ### selectPeerScreenSharing  ▸ **selectPeerScreenSharing**(`state`): `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  Select  first peer   currently sharing  screen.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectPeerSharingAudio  ▸ **selectPeerSharingAudio**(`state`): `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  Select  first peer   currently sharing  audio  screen  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectPeerSharingAudioPlaylist  ▸ **selectPeerSharingAudioPlaylist**(`state`): `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectPeerSharingVideoPlaylist  ▸ **selectPeerSharingVideoPlaylist**(`state`): `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### selectPeers  ▸ **selectPeers**(`state`): [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  Select  array  peers(remote peers   local peer) present   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  ---  ### selectPeersByCondition  ▸ **selectPeersByCondition**(`predicate`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[], (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]\\>  Selects  peers passing  condition given   argument predicate function  Ex:  select peers  isHandRaised set  true   metadata(assuming peer.metadata   valid json string), use  ```js const handRaisedPeers = useHMSStore(selectPeersByCondition(peer => JSON.parse(peer.metadata).isHandRaised)); ```  #### Parameters  | Name         Type                                                                                | | :----------  :---------------------------------------------------------------------------------- | | `predicate`  (`peer`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)) => `boolean` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[], (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]\\>  ---  ### selectPeersByRole  ▸ **selectPeersByRole**(`role`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[], (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]\\>  Select  array  peers   particular role  #### Parameters  | Name    Type      Description | | :-----  :-------  :---------- | | `role`  `string`  HMSRoleName |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[], (`res`: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]) => [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]\\>  HMSPeer[]  ---  ### selectPeersScreenSharing  ▸ **selectPeersScreenSharing**(`state`): [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  Select  array  peers   currently sharing  screen.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  ---  ### selectPeersWithAudioStatus  ▸ **selectPeersWithAudioStatus**(`state`): [`HMSPeerWithMuteStatus`](/api-reference/javascript/v2/interfaces/HMSPeerWithMuteStatus)[]  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPeerWithMuteStatus`](/api-reference/javascript/v2/interfaces/HMSPeerWithMuteStatus)[]  ---  ### selectPermissions  ▸ **selectPermissions**(`state`): `undefined` \\| { `browserRecording`: `boolean` ; `changeRole`: `boolean` ; `endRoom`: `boolean` ; `hlsStreaming`: `boolean` ; `mute`: `boolean` ; `removeOthers`: `boolean` ; `rtmpStreaming`: `boolean` ; `unmute`: `boolean` }  Select  permissions  determine  actions  local peer can do.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| { `browserRecording`: `boolean` ; `changeRole`: `boolean` ; `endRoom`: `boolean` ; `hlsStreaming`: `boolean` ; `mute`: `boolean` ; `removeOthers`: `boolean` ; `rtmpStreaming`: `boolean` ; `unmute`: `boolean` }  ---  ### selectRTMPState  ▸ **selectRTMPState**(`state`): [`HMSRTMP`](/api-reference/javascript/v2/interfaces/HMSRTMP)  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSRTMP`](/api-reference/javascript/v2/interfaces/HMSRTMP)  ---  ### selectRecordingState  ▸ **selectRecordingState**(`state`): [`HMSRecording`](/api-reference/javascript/v2/interfaces/HMSRecording)  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSRecording`](/api-reference/javascript/v2/interfaces/HMSRecording)  ---  ### selectRemotePeers  ▸ **selectRemotePeers**(`state`): [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  Select remote peers(other users  connected  via  internet) present   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  ---  ### selectRoleByRoleName  ▸ **selectRoleByRoleName**(`roleName`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole), (`res`: `Record`<`string`, [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>) => [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>  #### Parameters  | Name        Type     | | :---------  :------- | | `roleName`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole), (`res`: `Record`<`string`, [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>) => [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>  ---  ### selectRoleChangeRequest  ▸ **selectRoleChangeRequest**(`state`): `null` \\| [`HMSRoleChangeRequest`](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest)  Select  role change request received   local peer.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `null` \\| [`HMSRoleChangeRequest`](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest)  ---  ### selectRolesMap  ▸ **selectRolesMap**(`store`): `Record`<`string`, [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>  Select available roles   room   map   role name  [HMSRole](/api-reference/javascript/v2/interfaces/HMSRole) object.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `Record`<`string`, [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>  ---  ### selectRoom  ▸ **selectRoom**(`store`): [`HMSRoom`](/api-reference/javascript/v2/interfaces/HMSRoom)  Select  current [HMSRoom](/api-reference/javascript/v2/interfaces/HMSRoom) object     connected.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSRoom`](/api-reference/javascript/v2/interfaces/HMSRoom)  ---  ### selectRoomID  ▸ **selectRoomID**(`state`): `string`  Select  ID   current room     connected.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`  ---  ### selectRoomStartTime  ▸ **selectRoomStartTime**(`state`): `undefined` \\| `Date`  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `undefined` \\| `Date`  ---  ### selectRoomStarted  ▸ **selectRoomStarted**(`state`): `boolean`  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `boolean`  ---  ### selectRoomState  ▸ **selectRoomState**(`state`): [`HMSRoomState`](/api-reference/javascript/v2/enums/HMSRoomState)  Select  current state   room.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  [`HMSRoomState`](/api-reference/javascript/v2/enums/HMSRoomState)  ---  ### selectScreenAudioTrackByID  ▸ **selectScreenAudioTrackByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  Select  [HMSScreenAudioTrack](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) object given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectScreenShareAudioByPeerID  ▸ **selectScreenShareAudioByPeerID**(`id?`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack), (`res`: { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }) => [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack)\\>  Select  screen share audio track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack), (`res`: { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }) => [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack)\\>  ---  ### selectScreenShareByPeerID  ▸ **selectScreenShareByPeerID**(`id?`): `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack), (`res`: { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }) => [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  Select  screen share video track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `OutputSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack), (`res`: { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }) => [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  ---  ### selectScreenSharesByPeerId  ▸ **selectScreenSharesByPeerId**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), { `audio`: [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack) ; `video`: [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) }\\>  ---  ### selectScreenVideoTrackByID  ▸ **selectScreenVideoTrackByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  Select  [HMSScreenVideoTrack](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack) object given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  ---  ### selectScreenshareAudioVolumeByPeerID  ▸ **selectScreenshareAudioVolumeByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  Select  local audio volume   screen share   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| `number`\\>  ---  ### selectSessionId  ▸ **selectSessionId**(`state`): `string`  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `string`  ---  ### selectSessionMetadata  ▸ **selectSessionMetadata**(`store`): `any`  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `any`  ---  ### selectSimulcastLayerByTrack  ▸ **selectSimulcastLayerByTrack**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer)\\>  Select  current simulcast layer   track given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer)\\>  ---  ### selectSpeakers  ▸ **selectSpeakers**(`store`): `Record`<`string`, [`HMSSpeaker`](/api-reference/javascript/v2/interfaces/HMSSpeaker)\\>  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `Record`<`string`, [`HMSSpeaker`](/api-reference/javascript/v2/interfaces/HMSSpeaker)\\>  ---  ### selectTrackAudioByID  ▸ **selectTrackAudioByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  Select  audio level   track given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `number`\\>  ---  ### selectTrackByID  ▸ **selectTrackByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack) \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack) \\| [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  Select  [HMSTrack](/api-reference/javascript/v2/modules#hmstrack) object given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack) \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack) \\| [`HMSScreenVideoTrack`](/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack)\\>  ---  ### selectUnreadHMSMessagesCount  ▸ **selectUnreadHMSMessagesCount**(`state`): `number`  Select  number  unread messages.  #### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `state`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  #### Returns  `number`  ---  ### selectVideoPlaylistAudioTrackByPeerID  ▸ **selectVideoPlaylistAudioTrackByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)\\>  ---  ### selectVideoPlaylistVideoTrackByPeerID  ▸ **selectVideoPlaylistVideoTrackByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  takes   normal selector   store  id  input  curries   make  easier  use. Before: store.getState((store) => normalSelector(store, peerID)) After: store.getState(curriedSelector(peerID))  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  ---  ### selectVideoTrackByID  ▸ **selectVideoTrackByID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  Select  [HMSVideoTrack](/api-reference/javascript/v2/interfaces/HMSVideoTrack) object given  track ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `null` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  ---  ### selectVideoTrackByPeerID  ▸ **selectVideoTrackByPeerID**(`id?`): `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\>  Select  primary video track   peer given  peer ID.  #### Parameters  | Name   Type     | | :----  :------- | | `id?`  `string` |  #### Returns  `StoreSelector`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore), `undefined` \\| [`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack)\\> ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/home/content-right"
    },
    {
        "title": "DeviceMap.mdx",
        "link": "/api-reference/javascript/v2/interfaces/DeviceMap",
        "keywords": [],
        "headings": ["Properties", "audioInput", "audioOutput", "videoInput"],
        "content": "--- title: DeviceMap ---  ## Properties  ### audioInput  • **audioInput**: `MediaDeviceInfo`[]  ---  ### audioOutput  • **audioOutput**: `MediaDeviceInfo`[]  ---  ### videoInput  • **videoInput**: `MediaDeviceInfo`[] ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/DeviceMap"
    },
    {
        "title": "HLSConfig.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HLSConfig",
        "keywords": [],
        "headings": ["Properties", "recording", "Type declaration", "variants"],
        "content": "--- title: HLSConfig ---  ## Properties  ### recording  • `Optional` **recording**: `Object`  pass   field  recording needs   turned   well  #### Type declaration  | Name                   Type       Description                                                                     | | :--------------------  :--------  :------------------------------------------------------------------------------ | | `hlsVod?`              `boolean`    desired end result   zip  m3u8    chunks, false  default | | `singleFilePerLayer?`  `boolean`    desired end result   mp4 file per HLS layer, false  default         |  ---  ### variants  • `Optional` **variants**: [`HLSMeetingURLVariant`](/api-reference/javascript/v2/interfaces/HLSMeetingURLVariant)[]  A list  meeting url  needs   streamed  HLS feed,  one url  currently supported,  entries except  first one will  ignored. ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HLSConfig"
    },
    {
        "title": "HLSMeetingURLVariant.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HLSMeetingURLVariant",
        "keywords": [],
        "headings": ["Properties", "meetingURL", "metadata"],
        "content": "--- title: HLSMeetingURLVariant ---  ## Properties  ### meetingURL  • **meetingURL**: `string`  This meeting url  opened   headless chrome instance  generating  HLS feed. Make sure  url leads  joiner straight   room without  preview screen  requiring additional clicks.  ---  ### metadata  • `Optional` **metadata**: `string`  additional metadata   url  e.g. - landscape/portrait,  field   currently supported ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HLSMeetingURLVariant"
    },
    {
        "title": "HLSVariant.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HLSVariant",
        "keywords": [],
        "headings": ["Properties", "meetingURL", "metadata", "startedAt", "url"],
        "content": "--- title: HLSVariant ---  ## Properties  ### meetingURL  • `Optional` **meetingURL**: `string`  ---  ### metadata  • `Optional` **metadata**: `string`  ---  ### startedAt  • `Optional` **startedAt**: `Date`  ---  ### url  • **url**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HLSVariant"
    },
    {
        "title": "HMSActions.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSActions",
        "keywords": [],
        "headings": [
            "Properties",
            "audioPlaylist",
            "endRoom",
            "Type declaration",
            "Parameters",
            "Returns",
            "unblockAudio",
            "Type declaration",
            "Returns",
            "videoPlaylist",
            "Methods",
            "acceptChangeRole",
            "Parameters",
            "Returns",
            "addPluginToAudioTrack",
            "Parameters",
            "Returns",
            "addPluginToVideoTrack",
            "Parameters",
            "Returns",
            "addTrack",
            "Parameters",
            "Returns",
            "attachVideo",
            "Parameters",
            "Returns",
            "changeMetadata",
            "Parameters",
            "Returns",
            "changeName",
            "Parameters",
            "Returns",
            "changeRole",
            "Parameters",
            "Returns",
            "detachVideo",
            "Parameters",
            "Returns",
            "ignoreMessageTypes",
            "Parameters",
            "Returns",
            "initAppData",
            "Parameters",
            "Returns",
            "join",
            "Parameters",
            "Returns",
            "leave",
            "Returns",
            "populateSessionMetadata",
            "Returns",
            "preview",
            "Parameters",
            "Returns",
            "refreshDevices",
            "Returns",
            "rejectChangeRole",
            "Parameters",
            "Returns",
            "removePeer",
            "Parameters",
            "Returns",
            "removePluginFromAudioTrack",
            "Parameters",
            "Returns",
            "removePluginFromVideoTrack",
            "Parameters",
            "Returns",
            "removeTrack",
            "Parameters",
            "Returns",
            "sendBroadcastMessage",
            "Parameters",
            "Returns",
            "sendDirectMessage",
            "Parameters",
            "Returns",
            "sendGroupMessage",
            "Parameters",
            "Returns",
            "sendHLSTimedMetadata",
            "Parameters",
            "Returns",
            "sendMessage",
            "Parameters",
            "Returns",
            "setAppData",
            "Parameters",
            "Returns",
            "Parameters",
            "Returns",
            "setAudioOutputDevice",
            "Parameters",
            "Returns",
            "setAudioSettings",
            "Parameters",
            "Returns",
            "setEnabledTrack",
            "Parameters",
            "Returns",
            "setLocalAudioEnabled",
            "Parameters",
            "Returns",
            "setLocalVideoEnabled",
            "Parameters",
            "Returns",
            "setLogLevel",
            "Parameters",
            "Returns",
            "setMessageRead",
            "Parameters",
            "Returns",
            "setPreferredLayer",
            "Parameters",
            "Returns",
            "setRemoteTrackEnabled",
            "Parameters",
            "Returns",
            "setRemoteTracksEnabled",
            "Parameters",
            "Returns",
            "setScreenShareEnabled",
            "Parameters",
            "Returns",
            "setSessionMetadata",
            "Parameters",
            "Returns",
            "setVideoSettings",
            "Parameters",
            "Returns",
            "setVolume",
            "Parameters",
            "Returns",
            "startHLSStreaming",
            "Parameters",
            "Returns",
            "startRTMPOrRecording",
            "Parameters",
            "Returns",
            "stopHLSStreaming",
            "Parameters",
            "Returns",
            "stopRTMPAndRecording",
            "Returns",
            "validateAudioPluginSupport",
            "Parameters",
            "Returns",
            "validateVideoPluginSupport",
            "Parameters",
            "Returns"
        ],
        "content": "--- title: HMSActions ---  The  interface defines  SDK API Surface  taking room related actions. It talks   100ms backend  handles error reconnections, state managements and lots   things     to. You can use  gateway  any sort  UI  make connecting   backend easier. In case  use react,  also provide  HMSProvider class   powerful hooks and   box components   can use  setup  website  minutes. Our components   built integration   interface      worry about passing props   use them.  **`Remarks`**  There   one  one mapping   instance   class   100ms room, in case  creating multiple rooms please create new instance per room.  ## Properties  ### audioPlaylist  • **audioPlaylist**: [`IHMSPlaylistActions`](/api-reference/javascript/v2/interfaces/IHMSPlaylistActions)  audio Playlist contains  actions  can  performed   audio playlist This will  available  joining  room  ---  ### endRoom  • **endRoom**: (`lock`: `boolean`, `reason`: `string`) => `Promise`<`void`\\>  #### Type declaration  ▸ (`lock`, `reason`): `Promise`<`void`\\>  If    **endRoom** permission,  can end  room. That means everyone will  kicked out. If lock  passed  true,  room   used further.  ##### Parameters  | Name      Type      | | :-------  :-------- | | `lock`    `boolean` | | `reason`  `string`  |  ##### Returns  `Promise`<`void`\\>  ---  ### unblockAudio  • **unblockAudio**: () => `Promise`<`void`\\>  #### Type declaration  ▸ (): `Promise`<`void`\\>  Method   called   UI interaction  autoplay error  received Most browsers  limitations   audio can   played     user interaction. SDK throws  autoplay error   case,  method can  called   UI interaction to resolve  autoplay error  ##### Returns  `Promise`<`void`\\>  ---  ### videoPlaylist  • **videoPlaylist**: [`IHMSPlaylistActions`](/api-reference/javascript/v2/interfaces/IHMSPlaylistActions)  video Playlist contains  actions  can  performed   video playlist This will  available  joining  room  ## Methods  ### acceptChangeRole  ▸ **acceptChangeRole**(`request`): `Promise`<`void`\\>  Accept  role change request received  #### Parameters  | Name       Type                                                                                    Description                            | | :--------  :-------------------------------------------------------------------------------------  :------------------------------------- | | `request`  [`HMSRoleChangeRequest`](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest)  The original request   received |  #### Returns  `Promise`<`void`\\>  ---  ### addPluginToAudioTrack  ▸ **addPluginToAudioTrack**(`plugin`): `Promise`<`void`\\>  Add  remove  audio plugin from/to  local peer audio track. Eg. gain filter, noise suppression etc. Audio plugins can  added/removed   time   audio track  available  **`See`**  HMSAudioPlugin  #### Parameters  | Name      Type              Description    | | :-------  :---------------  :------------- | | `plugin`  `HMSAudioPlugin`  HMSAudioPlugin |  #### Returns  `Promise`<`void`\\>  ---  ### addPluginToVideoTrack  ▸ **addPluginToVideoTrack**(`plugin`, `pluginFrameRate?`): `Promise`<`void`\\>  Add  remove  video plugin from/to  local peer video track. Eg. Virtual Background, Face Filters etc. Video plugins can  added/removed   time   video track  available. pluginFrameRate   rate    output plugin will  processing  **`See`**  HMSVideoPlugin  #### Parameters  | Name                Type              Description    | | :-----------------  :---------------  :------------- | | `plugin`            `HMSVideoPlugin`  HMSVideoPlugin | | `pluginFrameRate?`  `number`          number         |  #### Returns  `Promise`<`void`\\>  ---  ### addTrack  ▸ **addTrack**(`track`, `type`): `Promise`<`void`\\>  You can use  addTrack method  add  auxiliary track(canvas capture, electron screen-share, etc...) This method adds  track   local peer's list  auxiliary tracks  publishes   make  available  remote peers.  #### Parameters  | Name     Type                Description                                                                               | | :------  :-----------------  :---------------------------------------------------------------------------------------- | | `track`  `MediaStreamTrack`  MediaStreamTrack - Track   added                                                      | | `type`   `string`            HMSTrackSource - 'regular' \\| 'screen' \\| 'plugin' - Source  track - default: 'regular' |  #### Returns  `Promise`<`void`\\>  ---  ### attachVideo  ▸ **attachVideo**(`localTrackID`, `videoElement`): `Promise`<`void`\\>  You can use  attach  detach video function to add/remove video   element   track ID. The benefit  using this instead  removing  video    it'll also auto unsubscribe to the stream coming  server saving significant bandwidth   user.  #### Parameters  | Name            Type                Description                                         | | :-------------  :-----------------  :-------------------------------------------------- | | `localTrackID`  `string`            trackID  stored   store   peer         | | `videoElement`  `HTMLVideoElement`  HTML native element   video    shown |  #### Returns  `Promise`<`void`\\>  ---  ### changeMetadata  ▸ **changeMetadata**(`metadata`): `Promise`<`void`\\>  If  want  update  metadata  local peer. If  object  passed,    serializable using JSON.stringify.  #### Parameters  | Name        Type  | | :---------  :---- | | `metadata`  `any` |  #### Returns  `Promise`<`void`\\>  ---  ### changeName  ▸ **changeName**(`name`): `Promise`<`void`\\>  If  want  update  name  peer.  #### Parameters  | Name    Type     | | :-----  :------- | | `name`  `string` |  #### Returns  `Promise`<`void`\\>  ---  ### changeRole  ▸ **changeRole**(`forPeerId`, `toRole`, `force?`): `Promise`<`void`\\>  Request   role change   remote peer. Can  forced.  #### Parameters  | Name         Type       Description                                                                    | | :----------  :--------  :----------------------------------------------------------------------------- | | `forPeerId`  `string`   The remote peer id whose role needs   changed                              | | `toRole`     `string`   The name   new role.                                                      | | `force?`     `boolean`    true  mean  user  get  request  accept role change |  #### Returns  `Promise`<`void`\\>  ---  ### detachVideo  ▸ **detachVideo**(`localTrackID`, `videoElement`): `Promise`<`void`\\>  **`See`**  attachVideo  #### Parameters  | Name            Type               | | :-------------  :----------------- | | `localTrackID`  `string`           | | `videoElement`  `HTMLVideoElement` |  #### Returns  `Promise`<`void`\\>  ---  ### ignoreMessageTypes  ▸ **ignoreMessageTypes**(`msgTypes`, `replace?`): `void`  ignore messages   type  storing  store. You can use     clear segregation between chat messages(you  want  persist   duration   call)  one  custom events(emoji reactions, stop screenshare, moderator messages, etc.). You can also use   store messages    side   additional processing  required(the default type  \"chat\"). Notifications   ignored messages will still  sent, it'll    put   store.  #### Parameters  | Name        Type        Description                                                                                                                                                                                 | | :---------  :---------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | `msgTypes`  `string`[]  list  messages types  ignore  storing                                                                                                                                                | | `replace?`  `boolean`   (default  false) whether  replace  list  ignored messages. Types  appended   existing list  default   can call  method  different places   will hold. |  #### Returns  `void`  ---  ### initAppData  ▸ **initAppData**(`data`): `void`  #### Parameters  | Name    Type                        Description                                                                                                                                                                                                                                                                                                                                                  | | :-----  :-------------------------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `data`  `Record`<`string`, `any`\\>  full app data object. use   initialise app data  store. App Data   small space   store  UI  keep   non updating global state fields  easy reference across UI. Note    fields  updating  high frequency     many  them,  recommended   another UI side store  avoid performance issues. |  #### Returns  `void`  ---  ### join  ▸ **join**(`config`): `Promise`<`void`\\>  join function can  used  join  room,   room join  successful, current details  participants  track details  populated   store.  **`Remarks`**  If join  called   earlier join   progress   room id, it is ignored  #### Parameters  | Name      Type                                                              Description                                             | | :-------  :---------------------------------------------------------------  :------------------------------------------------------ | | `config`  [`HMSConfig`](/api-reference/javascript/v2/interfaces/HMSConfig)  join config  room id, required  joining  room |  #### Returns  `Promise`<`void`\\>  ---  ### leave  ▸ **leave**(): `Promise`<`void`\\>  This function can  used  leave  room,   call  repeated  ignored.  #### Returns  `Promise`<`void`\\>  ---  ### populateSessionMetadata  ▸ **populateSessionMetadata**(): `Promise`<`void`\\>  Fetch  current room metadata   server  populate   store  -  API   stable  might  breaking changes later  #### Returns  `Promise`<`void`\\>  ---  ### preview  ▸ **preview**(`config`): `Promise`<`void`\\>  #### Parameters  | Name      Type                                                             | | :-------  :--------------------------------------------------------------- | | `config`  [`HMSConfig`](/api-reference/javascript/v2/interfaces/HMSConfig) |  #### Returns  `Promise`<`void`\\>  ---  ### refreshDevices  ▸ **refreshDevices**(): `Promise`<`void`\\>  #### Returns  `Promise`<`void`\\>  ---  ### rejectChangeRole  ▸ **rejectChangeRole**(`request`): `void`  Reject pending role change request  #### Parameters  | Name       Type                                                                                    Description                            | | :--------  :-------------------------------------------------------------------------------------  :------------------------------------- | | `request`  [`HMSRoleChangeRequest`](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest)  The original request   received |  #### Returns  `void`  ---  ### removePeer  ▸ **removePeer**(`peerID`, `reason`): `Promise`<`void`\\>  If   **removeOthers** permission,  can remove  peer   room.  #### Parameters  | Name      Type      Description                                                                                                                                                                                     | | :-------  :-------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `peerID`  `string`  peerID   peer   removed   room                                                                                                                                                  | | `reason`  `string`   string explaining   peer  removed   room. This string   used  notify  user   removed   room using  `REMOVED_FROM_ROOM` type  notification |  #### Returns  `Promise`<`void`\\>  ---  ### removePluginFromAudioTrack  ▸ **removePluginFromAudioTrack**(`plugin`): `Promise`<`void`\\>  **`See`**  addPluginToAudioTrack  #### Parameters  | Name      Type             | | :-------  :--------------- | | `plugin`  `HMSAudioPlugin` |  #### Returns  `Promise`<`void`\\>  ---  ### removePluginFromVideoTrack  ▸ **removePluginFromVideoTrack**(`plugin`): `Promise`<`void`\\>  **`See`**  addPluginToVideoTrack  #### Parameters  | Name      Type             | | :-------  :--------------- | | `plugin`  `HMSVideoPlugin` |  #### Returns  `Promise`<`void`\\>  ---  ### removeTrack  ▸ **removeTrack**(`trackId`): `Promise`<`void`\\>  You can use  removeTrack method  remove  auxiliary track. This method removes  track   local peer's list  auxiliary tracks  unpublishes it.  #### Parameters  | Name       Type      Description                            | | :--------  :-------  :------------------------------------- | | `trackId`  `string`  string - ID   track   removed |  #### Returns  `Promise`<`void`\\>  ---  ### sendBroadcastMessage  ▸ **sendBroadcastMessage**(`message`, `type?`): `Promise`<`void`\\>  Send  plain text message     participants   room.  #### Parameters  | Name       Type      Description                                                       | | :--------  :-------  :---------------------------------------------------------------- | | `message`  `string`  string message  broadcast                                       | | `type?`    `string`  type  message eg: image, video etc. - optional defaults  chat |  #### Returns  `Promise`<`void`\\>  ---  ### sendDirectMessage  ▸ **sendDirectMessage**(`message`, `peerID`, `type?`): `Promise`<`void`\\>  #### Parameters  | Name       Type      Description                                                       | | :--------  :-------  :---------------------------------------------------------------- | | `message`  `string`                                                                    | | `peerID`   `string`  id   peer   message    sent                    | | `type?`    `string`  type  message eg: image, video etc. - optional defaults  chat |  #### Returns  `Promise`<`void`\\>  ---  ### sendGroupMessage  ▸ **sendGroupMessage**(`message`, `roles`, `type?`): `Promise`<`void`\\>  #### Parameters  | Name       Type        Description                                                       | | :--------  :---------  :---------------------------------------------------------------- | | `message`  `string`    string message  send                                            | | `roles`    `string`[]  roles    send  message                                | | `type?`    `string`    type  message eg: image, video etc. - optional defaults  chat |  #### Returns  `Promise`<`void`\\>  ---  ### sendHLSTimedMetadata  ▸ **sendHLSTimedMetadata**(`metadataList`): `Promise`<`void`\\>  Used  define date range metadata   media playlist. This api adds EXT-X-DATERANGE tags   media playlist. It  useful  defining timed metadata  interstitial regions   advertisements, but can  used  define  timed metadata needed   stream. usage (e.g) const metadataList = [{ payload: \"some string 1\", duration: 2 }, { payload: \"some string 2\", duration: 3 }] sendHLSTimedMetadata(metadataList);  #### Parameters  | Name            Type                 | | :-------------  :------------------- | | `metadataList`  `HLSTimedMetadata`[] |  #### Returns  `Promise`<`void`\\>  ---  ### sendMessage  ▸ **sendMessage**(`message`): `void`  **`Deprecated`**  The method    used  **`See`**  sendBroadcastMessage Send  plain text message     participants   room.  #### Parameters  | Name       Type      Description                 | | :--------  :-------  :-------------------------- | | `message`  `string`  string message  broadcast |  #### Returns  `void`  ---  ### setAppData  ▸ **setAppData**(`key`, `value`, `merge?`): `void`  use   updating  particular property   appdata  **`Example`**  ```ts assume appdata  initially  {     mySettings: {       setting1: 'val1',       setting2: 'val2',     },     mySettings2: 43,     mySettings3: false,   };  after calling, setAppData(\"mySettings\", {setting1:'val1-edit', setting3:'val3'}, true); it becomes  {     mySettings: {       setting1: 'val1-edit',       setting2: 'val2',       setting3: 'val3',     },     mySettings2: 43,     mySettings3: false,   };  Note: This   suitable  keeping large data  data  updates at  high frequency,   recommended  use app side store  those cases. ```  #### Parameters  | Name      Type                                    Description                                                                                                                                                                                                                                                                                        | | :-------  :-------------------------------------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | `key`     `string`                                 string. Does  check  existence. If  key  already   property   appData,   added.                                                                                                                                                                                          | | `value`   `Record`<`string` \\| `number`, `any`\\>  value  set   key.                                                                                                                                                                                                                                                                          | | `merge?`  `boolean`                               set   true   want  merge  appdata. - Always replaces  value   given key   parameter   explicitly set  true. - Always replaces   value  anything    plain object (i.e) JSON.parse()able. - If set  true  non-plain objects,   ignored. |  #### Returns  `void`  ▸ **setAppData**(`key`, `value`): `void`  #### Parameters  | Name     Type     | | :------  :------- | | `key`    `string` | | `value`  `any`    |  #### Returns  `void`  ---  ### setAudioOutputDevice  ▸ **setAudioOutputDevice**(`deviceId`): `Promise`<`void`\\>  Set  audio output(speaker) device  #### Parameters  | Name        Type      Description                                | | :---------  :-------  :----------------------------------------- | | `deviceId`  `string`  string deviceId   audio output device |  #### Returns  `Promise`<`void`\\>  ---  ### setAudioSettings  ▸ **setAudioSettings**(`settings`): `Promise`<`void`\\>  Change settings   local peer's audio track  #### Parameters  | Name        Type                                                                                                  Description                                                               | | :---------  :---------------------------------------------------------------------------------------------------  :------------------------------------------------------------------------ | | `settings`  `Partial`<[`HMSAudioTrackSettings`](/api-reference/javascript/v2/interfaces/HMSAudioTrackSettings)\\>  HMSAudioTrackSettings ({ volume, codec, maxBitrate, deviceId, advanced }) |  #### Returns  `Promise`<`void`\\>  ---  ### setEnabledTrack  ▸ **setEnabledTrack**(`trackId`, `enabled`): `Promise`<`void`\\>  #### Parameters  | Name       Type       Description                                                                         | | :--------  :--------  :---------------------------------------------------------------------------------- | | `trackId`  `string`   string - ID   track whose mute status needs   set                          | | `enabled`  `boolean`  boolean - true   want  unmute  track  false   want  unmute  |  #### Returns  `Promise`<`void`\\>  ---  ### setLocalAudioEnabled  ▸ **setLocalAudioEnabled**(`enabled`): `Promise`<`void`\\>  This function can  used  enable/disable(unmute/mute) local audio track  #### Parameters  | Name       Type       Description                             | | :--------  :--------  :-------------------------------------- | | `enabled`  `boolean`  boolean - true  unmute, false  mute |  #### Returns  `Promise`<`void`\\>  ---  ### setLocalVideoEnabled  ▸ **setLocalVideoEnabled**(`enabled`): `Promise`<`void`\\>  This function can  used  enable/disable(unmute/mute) local video track  #### Parameters  | Name       Type       Description                             | | :--------  :--------  :-------------------------------------- | | `enabled`  `boolean`  boolean - true  unmute, false  mute |  #### Returns  `Promise`<`void`\\>  ---  ### setLogLevel  ▸ **setLogLevel**(`level`): `void`  Set  type  logs   SDK  want   logged   browser console.  Note  HMSLogLevel  decremental meaning,  - HMSLogLevel.VERBOSE(0) - will log every message  SDK. - HMSLogLevel.DEBUG(1) - will log messages   helpful  debugging, important info, warnings  errors. - HMSLogLevel.INFO(2) - will log important info, warnings  errors. - HMSLogLevel.WARN(3) - will log warnings  errors. - HMSLogLevel.ERROR(4) - will log  errors. - HMSLogLevel.NONE(5) -  log anything(Not recommended).  Usage: `hmsActions.setLogLevel(4)`  `hmsActions.setLogLevel(HMSlogLevel.ERROR)`.  #### Parameters  | Name     Type                                                            | | :------  :-------------------------------------------------------------- | | `level`  [`HMSLogLevel`](/api-reference/javascript/v2/enums/HMSLogLevel) |  #### Returns  `void`  ---  ### setMessageRead  ▸ **setMessageRead**(`readStatus`, `messageId?`): `void`  If just readStatus argument  passed,  function will set read flag  every message as  readStatus argument passed. If  readStatus  messageId argument  passed,  just read flag  message with passed messageId will  set  readStatus argument.  message  passed messageId  not found  store,  change  store will take place.  #### Parameters  | Name          Type       Description                                                            | | :-----------  :--------  :--------------------------------------------------------------------- | | `readStatus`  `boolean`  boolean value   want  set  read flag  message/messages. | | `messageId?`  `string`   message id whose read falg  want  set.                            |  #### Returns  `void`  ---  ### setPreferredLayer  ▸ **setPreferredLayer**(`trackId`, `layer`): `Promise`<`void`\\>  set  quality   selected videoTrack  simulcast.  #### Parameters  | Name       Type                                                                                                 | | :--------  :--------------------------------------------------------------------------------------------------- | | `trackId`  `string`                                                                                             | | `layer`    [`HMSPreferredSimulcastLayer`](/api-reference/javascript/v2/home/content#hmspreferredsimulcastlayer) |  #### Returns  `Promise`<`void`\\>  ---  ### setRemoteTrackEnabled  ▸ **setRemoteTrackEnabled**(`forRemoteTrackID`, `enabled`): `Promise`<`void`\\>  Change track state  remote peer's track This can  used  mute/unmute  remote peer's track  #### Parameters  | Name                Type                    Description                                                                                                                                  | | :-----------------  :---------------------  :------------------------------------------------------------------------------------------------------------------------------------------- | | `forRemoteTrackID`  `string` \\| `string`[]  The track ID  array  track IDs    want  change  state                                                                    | | `enabled`           `boolean`               `true`   wish  enable(unmute permission  required)  track, `false`   wish  disable(mute permission  required)  track |  #### Returns  `Promise`<`void`\\>  ---  ### setRemoteTracksEnabled  ▸ **setRemoteTracksEnabled**(`params`): `Promise`<`void`\\>  Use   mute/unmute multipe tracks  source, role  type  #### Parameters  | Name      Type                                                                                                       | | :-------  :--------------------------------------------------------------------------------------------------------- | | `params`  [`HMSChangeMultiTrackStateParams`](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateParams) |  #### Returns  `Promise`<`void`\\>  ---  ### setScreenShareEnabled  ▸ **setScreenShareEnabled**(`enabled`, `config?`): `Promise`<`void`\\>  If  want  enable screenshare   local peer  class can  called. The store will  populated   incoming track,   subscriber(or react component   hook  used) will  notified/rerendered  #### Parameters  | Name       Type                                                                                    Description                                          | | :--------  :-------------------------------------------------------------------------------------  :--------------------------------------------------- | | `enabled`  `boolean`                                                                               boolean                                              | | `config?`  [`HMSScreenShareConfig`](/api-reference/javascript/v2/interfaces/HMSScreenShareConfig)  check  config object  details   fields |  #### Returns  `Promise`<`void`\\>  ---  ### setSessionMetadata  ▸ **setSessionMetadata**(`metadata`): `Promise`<`void`\\>  If  want  update  metadata   session. If  object  passed,    serializable using JSON.stringify.  Session metadata  available  every peer   room   persisted throughout  session till  last peer leaves  room  -  API   stable  might  breaking changes later  #### Parameters  | Name        Type  | | :---------  :---- | | `metadata`  `any` |  #### Returns  `Promise`<`void`\\>  ---  ### setVideoSettings  ▸ **setVideoSettings**(`settings`): `Promise`<`void`\\>  Change settings   local peer's video track  #### Parameters  | Name        Type                                                                                                  Description                                                                                    | | :---------  :---------------------------------------------------------------------------------------------------  :--------------------------------------------------------------------------------------------- | | `settings`  `Partial`<[`HMSVideoTrackSettings`](/api-reference/javascript/v2/interfaces/HMSVideoTrackSettings)\\>  HMSVideoTrackSettings ({ width, height, codec, maxFramerate, maxBitrate, deviceId, advanced }) |  #### Returns  `Promise`<`void`\\>  ---  ### setVolume  ▸ **setVolume**(`value`, `trackId?`): `Promise`<`void`\\>  Set  output volume  audio tracks(overall/particular audio track)  #### Parameters  | Name        Type      Description                                                                                                                        | | :---------  :-------  :--------------------------------------------------------------------------------------------------------------------------------- | | `value`     `number`  number  0-100                                                                                                               | | `trackId?`  `string`  string If undefined sets  overall volume(of every audio track   room); If valid - set  volume  particular audio track |  #### Returns  `Promise`<`void`\\>  ---  ### startHLSStreaming  ▸ **startHLSStreaming**(`params?`): `Promise`<`void`\\>  If   configured HLS streaming  dashboard,  params  required. otherwise  #### Parameters  | Name       Type                                                             | | :--------  :--------------------------------------------------------------- | | `params?`  [`HLSConfig`](/api-reference/javascript/v2/interfaces/HLSConfig) |  #### Returns  `Promise`<`void`\\>  ---  ### startRTMPOrRecording  ▸ **startRTMPOrRecording**(`params`): `Promise`<`void`\\>  If  want  start RTMP streaming  recording.  #### Parameters  | Name      Type                                                                                 | | :-------  :----------------------------------------------------------------------------------- | | `params`  [`RTMPRecordingConfig`](/api-reference/javascript/v2/interfaces/RTMPRecordingConfig) |  #### Returns  `Promise`<`void`\\>  ---  ### stopHLSStreaming  ▸ **stopHLSStreaming**(`params?`): `Promise`<`void`\\>  If  want  stop HLS streaming. The passed  arguments   considered   moment,  everything related  HLS  stopped.  #### Parameters  | Name       Type                                                             | | :--------  :--------------------------------------------------------------- | | `params?`  [`HLSConfig`](/api-reference/javascript/v2/interfaces/HLSConfig) |  #### Returns  `Promise`<`void`\\>  ---  ### stopRTMPAndRecording  ▸ **stopRTMPAndRecording**(): `Promise`<`void`\\>  If  want  stop  RTMP streaming  recording.  #### Returns  `Promise`<`void`\\>  ---  ### validateAudioPluginSupport  ▸ **validateAudioPluginSupport**(`plugin`): `HMSPluginSupportResult`  To check  support   plugin, based  browser, os  audio devices  **`See`**  HMSPluginSupportResult  #### Parameters  | Name      Type              Description    | | :-------  :---------------  :------------- | | `plugin`  `HMSAudioPlugin`  HMSAudioPlugin |  #### Returns  `HMSPluginSupportResult`  ---  ### validateVideoPluginSupport  ▸ **validateVideoPluginSupport**(`plugin`): `HMSPluginSupportResult`  To check  support   plugin, based  browser, os  audio devices  **`See`**  HMSPluginSupportResult  #### Parameters  | Name      Type              Description    | | :-------  :---------------  :------------- | | `plugin`  `HMSVideoPlugin`  HMSVideoPlugin |  #### Returns  `HMSPluginSupportResult` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSActions"
    },
    {
        "title": "HMSAudioTrack.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSAudioTrack",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "deviceID",
            "Inherited from",
            "displayEnabled",
            "Inherited from",
            "enabled",
            "Inherited from",
            "id",
            "Inherited from",
            "peerId",
            "Inherited from",
            "plugins",
            "Inherited from",
            "source",
            "Overrides",
            "type",
            "Overrides",
            "volume"
        ],
        "content": "--- title: HMSAudioTrack ---  ## Hierarchy  - `BaseTrack`    ↳ **`HMSAudioTrack`**    ↳↳ [`HMSScreenAudioTrack`](/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack)  ## Properties  ### deviceID  • `Optional` **deviceID**: `string`  #### Inherited from  BaseTrack.deviceID  ---  ### displayEnabled  • `Optional` **displayEnabled**: `boolean`  #### Inherited from  BaseTrack.displayEnabled  ---  ### enabled  • **enabled**: `boolean`  #### Inherited from  BaseTrack.enabled  ---  ### id  • **id**: `string`  #### Inherited from  BaseTrack.id  ---  ### peerId  • `Optional` **peerId**: `string`  #### Inherited from  BaseTrack.peerId  ---  ### plugins  • `Optional` **plugins**: `string`[]  #### Inherited from  BaseTrack.plugins  ---  ### source  • **source**: `string`  #### Overrides  BaseTrack.source  ---  ### type  • **type**: `\"audio\"`  #### Overrides  BaseTrack.type  ---  ### volume  • `Optional` **volume**: `number` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSAudioTrack"
    },
    {
        "title": "HMSAudioTrackSettings.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSAudioTrackSettings",
        "keywords": [],
        "headings": ["Properties", "advanced", "codec", "deviceId", "maxBitrate", "volume"],
        "content": "--- title: HMSAudioTrackSettings ---  ## Properties  ### advanced  • `Optional` **advanced**: `MediaTrackConstraintSet`[]  ---  ### codec  • `Optional` **codec**: `OPUS`  ---  ### deviceId  • `Optional` **deviceId**: `string`  ---  ### maxBitrate  • `Optional` **maxBitrate**: `number`  ---  ### volume  • `Optional` **volume**: `number` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSAudioTrackSettings"
    },
    {
        "title": "HMSChangeMultiTrackStateParams.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateParams",
        "keywords": [],
        "headings": ["Properties", "enabled", "roles", "source", "type"],
        "content": "--- title: HMSChangeMultiTrackStateParams ---  ## Properties  ### enabled  • **enabled**: `boolean`  ---  ### roles  • `Optional` **roles**: `string`[]  ---  ### source  • `Optional` **source**: `string`  ---  ### type  • `Optional` **type**: `\"audio\"` \\| `\"video\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateParams"
    },
    {
        "title": "HMSChangeMultiTrackStateRequest.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequest",
        "keywords": [],
        "headings": ["Properties", "enabled", "requestedBy", "source", "tracks", "type"],
        "content": "--- title: HMSChangeMultiTrackStateRequest ---  ## Properties  ### enabled  • **enabled**: `boolean`  ---  ### requestedBy  • `Optional` **requestedBy**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### source  • `Optional` **source**: `string`  ---  ### tracks  • **tracks**: [`HMSTrack`](/api-reference/javascript/v2/home/content#hmstrack)[]  ---  ### type  • `Optional` **type**: `\"audio\"` \\| `\"video\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequest"
    },
    {
        "title": "HMSChangeMultiTrackStateRequestNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequestNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSChangeMultiTrackStateRequestNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSChangeMultiTrackStateRequestNotification`**  ## Properties  ### data  • **data**: [`HMSChangeMultiTrackStateRequest`](/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequest)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`CHANGE_MULTI_TRACK_STATE_REQUEST`](/api-reference/javascript/v2/enums/HMSNotificationTypes#change_multi_track_state_request)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSChangeMultiTrackStateRequestNotification"
    },
    {
        "title": "HMSChangeTrackStateRequest.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequest",
        "keywords": [],
        "headings": ["Properties", "enabled", "requestedBy", "track"],
        "content": "--- title: HMSChangeTrackStateRequest ---  ## Properties  ### enabled  • **enabled**: `boolean`  ---  ### requestedBy  • `Optional` **requestedBy**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### track  • **track**: [`HMSTrack`](/api-reference/javascript/v2/home/content#hmstrack) ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequest"
    },
    {
        "title": "HMSChangeTrackStateRequestNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequestNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSChangeTrackStateRequestNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSChangeTrackStateRequestNotification`**  ## Properties  ### data  • **data**: [`HMSChangeTrackStateRequest`](/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequest)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`CHANGE_TRACK_STATE_REQUEST`](/api-reference/javascript/v2/enums/HMSNotificationTypes#change_track_state_request)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequestNotification"
    },
    {
        "title": "HMSConfig.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSConfig",
        "keywords": [],
        "headings": [
            "Properties",
            "alwaysRequestPermissions",
            "audioSinkElementId",
            "authToken",
            "autoVideoSubscribe",
            "captureNetworkQualityInPreview",
            "initEndpoint",
            "metaData",
            "rememberDeviceSelection",
            "settings",
            "userName"
        ],
        "content": "--- title: HMSConfig ---  the config object tells  sdk options  want  join with  **`Link`**  https://docs.100ms.live/javascript/v2/features/preview  **`Link`**  https://docs.100ms.live/javascript/v2/features/join  ## Properties  ### alwaysRequestPermissions  • `Optional` **alwaysRequestPermissions**: `boolean`  Request Camera/Mic permissions irrespective  role  avoid delay  getting device list  ---  ### audioSinkElementId  • `Optional` **audioSinkElementId**: `string`  ---  ### authToken  • **authToken**: `string`  client token  encodes room id  role  join with  **`Link`**  https://docs.100ms.live/javascript/v2/foundation/security-and-tokens  ---  ### autoVideoSubscribe  • `Optional` **autoVideoSubscribe**: `boolean`  ---  ### captureNetworkQualityInPreview  • `Optional` **captureNetworkQualityInPreview**: `boolean`  Enable  get  network quality score   preview. The score ranges  -1  5. -1     able  connect  100ms servers within  expected time limit 0     timeout/failure  measuring  quality 1-5 ranges  poor  good quality.  ---  ### initEndpoint  • `Optional` **initEndpoint**: `string`  ---  ### metaData  • `Optional` **metaData**: `string`  optional metadata  can  attached   peer. This can also  changed mid call.  **`Link`**  https://docs.100ms.live/javascript/v2/advanced-features/peer-metadata  ---  ### rememberDeviceSelection  • `Optional` **rememberDeviceSelection**: `boolean`  highly recommended  pass   true,  will make sdk use  local storage to remember  manual device selection  future joins.  ---  ### settings  • `Optional` **settings**: [`HMSConfigInitialSettings`](/api-reference/javascript/v2/interfaces/HMSConfigInitialSettings)  initial settings  audio/video  device   used. Please  pass this field  joining   using preview,  state changes  preview will  remembered across  join.  ---  ### userName  • **userName**: `string`  the name   peer, can  later accessed via peer.name  can also  changed mid call.  **`Link`**  https://docs.100ms.live/javascript/v2/features/peer-name ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSConfig"
    },
    {
        "title": "HMSConfigInitialSettings.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSConfigInitialSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "audioInputDeviceId",
            "audioOutputDeviceId",
            "isAudioMuted",
            "isVideoMuted",
            "speakerAutoSelectionBlacklist",
            "videoDeviceId"
        ],
        "content": "--- title: HMSConfigInitialSettings ---  ## Properties  ### audioInputDeviceId  • `Optional` **audioInputDeviceId**: `string`  ---  ### audioOutputDeviceId  • `Optional` **audioOutputDeviceId**: `string`  ---  ### isAudioMuted  • `Optional` **isAudioMuted**: `boolean`  ---  ### isVideoMuted  • `Optional` **isVideoMuted**: `boolean`  ---  ### speakerAutoSelectionBlacklist  • `Optional` **speakerAutoSelectionBlacklist**: `string`[] \\| `\"all\"`  When  peer joins  room   first time    device change happens, after selecting  mic  audio input,  try  find  matching output device for selecting  speaker(on browsers  speaker selection  possible).  For e.g.   headset mic  selected,  headset speaker will also  selected, if  laptop default mix  selected,  corresponding laptop speaker will  selected.  This  useful    non-matching pair  selected,  might lead   echo   room.  This field can  used  override   behavior, and always go   default device selection  given   browser.  There  two ways  use this,  can pass  'all'  will disable   behaviour   devices. Or  can pass   array  labels  will  string matched  disable  behavior  specific devices.  For e.g. [\"Yeti Stereo Microphone\"],  Yeti shows  often  audio output even   device  plugged   headphone jack.  ---  ### videoDeviceId  • `Optional` **videoDeviceId**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSConfigInitialSettings"
    },
    {
        "title": "HMSDeviceChangeEvent.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSDeviceChangeEvent",
        "keywords": [],
        "headings": ["Properties", "devices", "error", "selection", "type"],
        "content": "--- title: HMSDeviceChangeEvent ---  Test fails  adding InputDeviceInfo[error TS2304: Cannot find name 'InputDeviceInfo'.] InputDeviceInfo extends MediaDeviceInfo. See https://w3c.github.io/mediacapture-main/#input-specific-device-info So, `selection?: MediaDeviceInfo` instead  `selection?: InputDeviceInfo  MediaDeviceInfo`  valid  ## Properties  ### devices  • **devices**: [`DeviceMap`](/api-reference/javascript/v2/interfaces/DeviceMap)  ---  ### error  • `Optional` **error**: [`HMSException`](/api-reference/javascript/v2/interfaces/HMSException)  ---  ### selection  • `Optional` **selection**: `MediaDeviceInfo`  ---  ### type  • **type**: `\"video\"` \\| `\"audioOutput\"` \\| `\"audioInput\"` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSDeviceChangeEvent"
    },
    {
        "title": "HMSDeviceChangeEventNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSDeviceChangeEventNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSDeviceChangeEventNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSDeviceChangeEventNotification`**  ## Properties  ### data  • `Optional` **data**: [`HMSDeviceChangeEvent`](/api-reference/javascript/v2/interfaces/HMSDeviceChangeEvent)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`DEVICE_CHANGE_UPDATE`](/api-reference/javascript/v2/enums/HMSNotificationTypes#device_change_update)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSDeviceChangeEventNotification"
    },
    {
        "title": "HMSException.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSException",
        "keywords": [],
        "headings": [
            "Properties",
            "action",
            "code",
            "description",
            "isTerminal",
            "message",
            "name",
            "nativeError",
            "timestamp"
        ],
        "content": "--- title: HMSException ---  any mid call error notification will    format  ## Properties  ### action  • **action**: `string`  ---  ### code  • **code**: `number`  ---  ### description  • **description**: `string`  ---  ### isTerminal  • **isTerminal**: `boolean`  ---  ### message  • **message**: `string`  ---  ### name  • **name**: `string`  ---  ### nativeError  • `Optional` **nativeError**: `Error`  ---  ### timestamp  • **timestamp**: `Date` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSException"
    },
    {
        "title": "HMSExceptionNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSExceptionNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSExceptionNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSExceptionNotification`**  ## Properties  ### data  • **data**: [`HMSException`](/api-reference/javascript/v2/interfaces/HMSException)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`ERROR`](/api-reference/javascript/v2/enums/HMSNotificationTypes#error)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSExceptionNotification"
    },
    {
        "title": "HMSHLS.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSHLS",
        "keywords": [],
        "headings": ["Properties", "error", "running", "variants"],
        "content": "--- title: HMSHLS ---  ## Properties  ### error  • `Optional` **error**: `HMSException`  ---  ### running  • **running**: `boolean`  ---  ### variants  • **variants**: [`HLSVariant`](/api-reference/javascript/v2/interfaces/HLSVariant)[] ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSHLS"
    },
    {
        "title": "HMSLeaveRoomRequest.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest",
        "keywords": [],
        "headings": ["Properties", "reason", "requestedBy", "roomEnded"],
        "content": "--- title: HMSLeaveRoomRequest ---  ## Properties  ### reason  • **reason**: `string`  ---  ### requestedBy  • `Optional` **requestedBy**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### roomEnded  • **roomEnded**: `boolean` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest"
    },
    {
        "title": "HMSLeaveRoomRequestNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSLeaveRoomRequestNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSLeaveRoomRequestNotification`**  ## Properties  ### data  • **data**: [`HMSLeaveRoomRequest`](/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`ROOM_ENDED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#room_ended) \\| [`REMOVED_FROM_ROOM`](/api-reference/javascript/v2/enums/HMSNotificationTypes#removed_from_room)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSLeaveRoomRequestNotification"
    },
    {
        "title": "HMSLocalTrackStats.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSLocalTrackStats",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "bitrate",
            "Inherited from",
            "bytesSent",
            "Inherited from",
            "codec",
            "Inherited from",
            "codecId",
            "Inherited from",
            "firCount",
            "Inherited from",
            "frameHeight",
            "Inherited from",
            "frameWidth",
            "Inherited from",
            "framesEncoded",
            "Inherited from",
            "framesPerSecond",
            "Inherited from",
            "id",
            "Inherited from",
            "kind",
            "Inherited from",
            "nackCount",
            "Inherited from",
            "packetsSent",
            "Inherited from",
            "peerID",
            "Inherited from",
            "peerName",
            "Inherited from",
            "pliCount",
            "Inherited from",
            "qpSum",
            "Inherited from",
            "qualityLimitationReason",
            "Inherited from",
            "remote",
            "remoteId",
            "Inherited from",
            "rid",
            "Inherited from",
            "roundTripTime",
            "Inherited from",
            "ssrc",
            "Inherited from",
            "timestamp",
            "Inherited from",
            "totalRoundTripTime",
            "Inherited from",
            "transportId",
            "Inherited from",
            "type",
            "Inherited from"
        ],
        "content": "--- title: HMSLocalTrackStats ---  Extends RTCOutboundRtpStreamStats Ref: https://www.w3.org/TR/webrtc-stats/#dom-rtcoutboundrtpstreamstats  ## Hierarchy  - `BaseTrackStats`  - `MissingOutboundStats`    ↳ **`HMSLocalTrackStats`**    ↳↳ [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)  ## Properties  ### bitrate  • **bitrate**: `number`  #### Inherited from  BaseTrackStats.bitrate  ---  ### bytesSent  • `Optional` **bytesSent**: `number`  #### Inherited from  MissingOutboundStats.bytesSent  ---  ### codec  • `Optional` **codec**: `string`  #### Inherited from  BaseTrackStats.codec  ---  ### codecId  • `Optional` **codecId**: `string`  #### Inherited from  BaseTrackStats.codecId  ---  ### firCount  • `Optional` **firCount**: `number`  #### Inherited from  MissingOutboundStats.firCount  ---  ### frameHeight  • `Optional` **frameHeight**: `number`  #### Inherited from  MissingOutboundStats.frameHeight  ---  ### frameWidth  • `Optional` **frameWidth**: `number`  #### Inherited from  MissingOutboundStats.frameWidth  ---  ### framesEncoded  • `Optional` **framesEncoded**: `number`  #### Inherited from  MissingOutboundStats.framesEncoded  ---  ### framesPerSecond  • `Optional` **framesPerSecond**: `number`  #### Inherited from  MissingOutboundStats.framesPerSecond  ---  ### id  • **id**: `string`  #### Inherited from  BaseTrackStats.id  ---  ### kind  • **kind**: `string`  #### Inherited from  BaseTrackStats.kind  ---  ### nackCount  • `Optional` **nackCount**: `number`  #### Inherited from  MissingOutboundStats.nackCount  ---  ### packetsSent  • `Optional` **packetsSent**: `number`  #### Inherited from  MissingOutboundStats.packetsSent  ---  ### peerID  • `Optional` **peerID**: `string`  #### Inherited from  BaseTrackStats.peerID  ---  ### peerName  • `Optional` **peerName**: `string`  #### Inherited from  BaseTrackStats.peerName  ---  ### pliCount  • `Optional` **pliCount**: `number`  #### Inherited from  MissingOutboundStats.pliCount  ---  ### qpSum  • `Optional` **qpSum**: `number`  #### Inherited from  MissingOutboundStats.qpSum  ---  ### qualityLimitationReason  • `Optional` **qualityLimitationReason**: `string`  #### Inherited from  MissingOutboundStats.qualityLimitationReason  ---  ### remote  • `Optional` **remote**: `RTCRemoteInboundRtpStreamStats` & { `packetsLostRate?`: `number` }  Stats perceived   server(SFU)  receiving  local track sent   peer Ref: https://www.w3.org/TR/webrtc-stats/#dom-rtcstatstype-remote-inbound-rtp https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats  ---  ### remoteId  • `Optional` **remoteId**: `string`  #### Inherited from  MissingOutboundStats.remoteId  ---  ### rid  • `Optional` **rid**: `RID`  #### Inherited from  MissingOutboundStats.rid  ---  ### roundTripTime  • `Optional` **roundTripTime**: `number`  #### Inherited from  MissingOutboundStats.roundTripTime  ---  ### ssrc  • **ssrc**: `number`  #### Inherited from  BaseTrackStats.ssrc  ---  ### timestamp  • **timestamp**: `number`  #### Inherited from  BaseTrackStats.timestamp  ---  ### totalRoundTripTime  • `Optional` **totalRoundTripTime**: `number`  #### Inherited from  MissingOutboundStats.totalRoundTripTime  ---  ### transportId  • `Optional` **transportId**: `string`  #### Inherited from  BaseTrackStats.transportId  ---  ### type  • **type**: `RTCStatsType`  #### Inherited from  BaseTrackStats.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSLocalTrackStats"
    },
    {
        "title": "HMSMediaSettings.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSMediaSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "audioInputDeviceId",
            "audioOutputDeviceId",
            "videoInputDeviceId"
        ],
        "content": "--- title: HMSMediaSettings ---  ## Properties  ### audioInputDeviceId  • **audioInputDeviceId**: `string`  ---  ### audioOutputDeviceId  • `Optional` **audioOutputDeviceId**: `string`  ---  ### videoInputDeviceId  • **videoInputDeviceId**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSMediaSettings"
    },
    {
        "title": "HMSMessage.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSMessage",
        "keywords": [],
        "headings": [
            "Properties",
            "id",
            "ignored",
            "message",
            "read",
            "recipientPeer",
            "recipientRoles",
            "sender",
            "senderName",
            "senderRole",
            "senderUserId",
            "time",
            "type"
        ],
        "content": "--- title: HMSMessage ---  ## Properties  ### id  • **id**: `string`  ---  ### ignored  • **ignored**: `boolean`  true  message will   put   store     ignored  ---  ### message  • **message**: `any`  ---  ### read  • **read**: `boolean`  ---  ### recipientPeer  • `Optional` **recipientPeer**: `string`  ---  ### recipientRoles  • `Optional` **recipientRoles**: `string`[]  ---  ### sender  • `Optional` **sender**: `string`  ---  ### senderName  • `Optional` **senderName**: `string`  ---  ### senderRole  • `Optional` **senderRole**: `string`  ---  ### senderUserId  • `Optional` **senderUserId**: `string`  ---  ### time  • **time**: `Date`  ---  ### type  • **type**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSMessage"
    },
    {
        "title": "HMSMessageNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSMessageNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSMessageNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSMessageNotification`**  ## Properties  ### data  • **data**: [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`NEW_MESSAGE`](/api-reference/javascript/v2/enums/HMSNotificationTypes#new_message)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSMessageNotification"
    },
    {
        "title": "HMSNotifications.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSNotifications",
        "keywords": [],
        "headings": [
            "Methods",
            "onNotification",
            "Type parameters",
            "Parameters",
            "Returns",
            "Returns"
        ],
        "content": "--- title: HMSNotifications ---  ## Methods  ### onNotification  ▸ **onNotification**<`T`\\>(`cb`, `types?`): () => `void`  you can subscribe  notifications  new message, peer add etc. using  function. note     meant  maintain  state   side,   reactive store already does that. The intent   function  mainly  display toast notifications  send analytics. We'll provide  display message  can  displayed     common cases.  #### Type parameters  | Name  Type                                                                                                     | | :---  :------------------------------------------------------------------------------------------------------- | | `T`   extends [`HMSNotificationTypeParam`](/api-reference/javascript/v2/home/content#hmsnotificationtypeparam) |  #### Parameters  | Name      Type                                                                                            | | :-------  :---------------------------------------------------------------------------------------------- | | `cb`      [`HMSNotificationCallback`](/api-reference/javascript/v2/modules#hmsnotificationcallback)<`T`\\> | | `types?`  `T`                                                                                             |  #### Returns  `fn`  ▸ (): `void`  you can subscribe  notifications  new message, peer add etc. using  function. note     meant  maintain  state   side,   reactive store already does that. The intent   function  mainly  display toast notifications  send analytics. We'll provide  display message  can  displayed     common cases.  ##### Returns  `void` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSNotifications"
    },
    {
        "title": "HMSPeer.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPeer",
        "keywords": [],
        "headings": [
            "Properties",
            "audioTrack",
            "auxiliaryTracks",
            "customerUserId",
            "id",
            "isLocal",
            "isStarred",
            "joinedAt",
            "metadata",
            "name",
            "roleName",
            "videoTrack"
        ],
        "content": "--- title: HMSPeer ---  HMSPeer stores  details  individual participants   room  ## Properties  ### audioTrack  • `Optional` **audioTrack**: `string`  ---  ### auxiliaryTracks  • **auxiliaryTracks**: `string`[]  ---  ### customerUserId  • `Optional` **customerUserId**: `string`  ---  ### id  • **id**: `string`  ---  ### isLocal  • **isLocal**: `boolean`  ---  ### isStarred  • `Optional` **isStarred**: `boolean`  ---  ### joinedAt  • `Optional` **joinedAt**: `Date`  ---  ### metadata  • `Optional` **metadata**: `string`  ---  ### name  • **name**: `string`  ---  ### roleName  • `Optional` **roleName**: `string`  ---  ### videoTrack  • `Optional` **videoTrack**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPeer"
    },
    {
        "title": "HMSPeerListNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPeerListNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSPeerListNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSPeerListNotification`**  ## Properties  ### data  • **data**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)[]  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`PEER_LIST`](/api-reference/javascript/v2/enums/HMSNotificationTypes#peer_list)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPeerListNotification"
    },
    {
        "title": "HMSPeerNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPeerNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSPeerNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSPeerNotification`**  ## Properties  ### data  • **data**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`PEER_JOINED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#peer_joined) \\| [`PEER_LEFT`](/api-reference/javascript/v2/enums/HMSNotificationTypes#peer_left) \\| [`ROLE_UPDATED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#role_updated) \\| [`NAME_UPDATED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#name_updated) \\| [`METADATA_UPDATED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#metadata_updated)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPeerNotification"
    },
    {
        "title": "HMSPeerStats.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPeerStats",
        "keywords": [],
        "headings": ["Properties", "publish", "subscribe"],
        "content": "--- title: HMSPeerStats ---  ## Properties  ### publish  • `Optional` **publish**: `RTCIceCandidatePairStats` & { `bitrate`: `number` }  ---  ### subscribe  • `Optional` **subscribe**: `RTCIceCandidatePairStats` & { `bitrate`: `number` ; `jitter`: `number` ; `packetsLost`: `number` ; `packetsLostRate`: `number` } ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPeerStats"
    },
    {
        "title": "HMSPeerWithMuteStatus.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPeerWithMuteStatus",
        "keywords": [],
        "headings": ["Properties", "isAudioEnabled", "peer"],
        "content": "--- title: HMSPeerWithMuteStatus ---  ## Properties  ### isAudioEnabled  • `Optional` **isAudioEnabled**: `boolean`  ---  ### peer  • **peer**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer) ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPeerWithMuteStatus"
    },
    {
        "title": "HMSPlaylist.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPlaylist",
        "keywords": [],
        "headings": [
            "Type parameters",
            "Properties",
            "audio",
            "Type declaration",
            "video",
            "Type declaration"
        ],
        "content": "--- title: HMSPlaylist<T\\> ---  ## Type parameters  | Name | | :--- | | `T`  |  ## Properties  ### audio  • **audio**: `Object`  #### Type declaration  | Name            Type                                                                                                    | | :-------------  :------------------------------------------------------------------------------------------------------ | | `currentTime`   `number`                                                                                                | | `list`          `Record`<`string`, [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>\\> | | `playbackRate`  `number`                                                                                                | | `progress`      `number`                                                                                                | | `selection`     [`HMSPlaylistSelection`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection)                  | | `volume`        `number`                                                                                                |  ---  ### video  • **video**: `Object`  #### Type declaration  | Name            Type                                                                                                    | | :-------------  :------------------------------------------------------------------------------------------------------ | | `currentTime`   `number`                                                                                                | | `list`          `Record`<`string`, [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>\\> | | `playbackRate`  `number`                                                                                                | | `progress`      `number`                                                                                                | | `selection`     [`HMSPlaylistSelection`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection)                  | | `volume`        `number`                                                                                                | ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPlaylist"
    },
    {
        "title": "HMSPlaylistItem.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPlaylistItem",
        "keywords": [],
        "headings": [
            "Type parameters",
            "Properties",
            "duration",
            "id",
            "metadata",
            "name",
            "playing",
            "selected",
            "type",
            "url"
        ],
        "content": "--- title: HMSPlaylistItem<T\\> ---  ## Type parameters  | Name | | :--- | | `T`  |  ## Properties  ### duration  • `Optional` **duration**: `number`  ---  ### id  • **id**: `string`  ---  ### metadata  • `Optional` **metadata**: `T`  ---  ### name  • **name**: `string`  ---  ### playing  • **playing**: `boolean`  ---  ### selected  • **selected**: `boolean`  ---  ### type  • **type**: [`HMSPlaylistType`](/api-reference/javascript/v2/enums/HMSPlaylistType)  ---  ### url  • **url**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPlaylistItem"
    },
    {
        "title": "HMSPlaylistItemNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPlaylistItemNotification",
        "keywords": [],
        "headings": [
            "Type parameters",
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSPlaylistItemNotification<T\\> ---  ## Type parameters  | Name | | :--- | | `T`  |  ## Hierarchy  - `BaseNotification`    ↳ **`HMSPlaylistItemNotification`**  ## Properties  ### data  • **data**: [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`PLAYLIST_TRACK_ENDED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#playlist_track_ended)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPlaylistItemNotification"
    },
    {
        "title": "HMSPlaylistSelection.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPlaylistSelection",
        "keywords": [],
        "headings": ["Properties", "hasNext", "hasPrevious", "id"],
        "content": "--- title: HMSPlaylistSelection ---  ## Properties  ### hasNext  • **hasNext**: `boolean`  ---  ### hasPrevious  • **hasPrevious**: `boolean`  ---  ### id  • **id**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPlaylistSelection"
    },
    {
        "title": "HMSPlaylistSelector.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPlaylistSelector",
        "keywords": [],
        "headings": [
            "Properties",
            "currentTime",
            "Type declaration",
            "Parameters",
            "Returns",
            "list",
            "Type declaration",
            "Type parameters",
            "Parameters",
            "Returns",
            "playbackRate",
            "Type declaration",
            "Parameters",
            "Returns",
            "progress",
            "Type declaration",
            "Parameters",
            "Returns",
            "selectedItem",
            "Type declaration",
            "Type parameters",
            "Parameters",
            "Returns",
            "selection",
            "Type declaration",
            "Parameters",
            "Returns",
            "volume",
            "Type declaration",
            "Parameters",
            "Returns"
        ],
        "content": "--- title: HMSPlaylistSelector ---  Helpful selectors  audio  video playlist  ## Properties  ### currentTime  • **currentTime**: (`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => `number`  #### Type declaration  ▸ (`store`): `number`  returns  current time   playlist  seconds  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  `number`  ---  ### list  • **list**: <T\\>(`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>[]  #### Type declaration  ▸ <`T`\\>(`store`): [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>[]  returns  playlist items list  set initially  ##### Type parameters  | Name | | :--- | | `T`  |  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>[]  ---  ### playbackRate  • **playbackRate**: (`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => `number`  #### Type declaration  ▸ (`store`): `number`  returns  playback rate,  number  0.25-2.0.  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  `number`  ---  ### progress  • **progress**: (`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => `number`  #### Type declaration  ▸ (`store`): `number`  returns  current progress percentage,  number  0-100  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  `number`  ---  ### selectedItem  • **selectedItem**: <T\\>(`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>  #### Type declaration  ▸ <`T`\\>(`store`): [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>  This returns playlist item  corresponding Id  selection  ##### Type parameters  | Name | | :--- | | `T`  |  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>  ---  ### selection  • **selection**: (`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => [`HMSPlaylistSelection`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection)  #### Type declaration  ▸ (`store`): [`HMSPlaylistSelection`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection)  This returns playlist selection  {id, hasNext, hasPrev}  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  [`HMSPlaylistSelection`](/api-reference/javascript/v2/interfaces/HMSPlaylistSelection)  ---  ### volume  • **volume**: (`store`: [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)) => `number`  #### Type declaration  ▸ (`store`): `number`  returns  current volume  playlist  playing at,  number  0-100  ##### Parameters  | Name     Type                                                           | | :------  :------------------------------------------------------------- | | `store`  [`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore) |  ##### Returns  `number` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPlaylistSelector"
    },
    {
        "title": "HMSPublishAllowed.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSPublishAllowed",
        "keywords": [],
        "headings": ["Properties", "audio", "screen", "video"],
        "content": "--- title: HMSPublishAllowed ---  ## Properties  ### audio  • **audio**: `boolean`  ---  ### screen  • **screen**: `boolean`  ---  ### video  • **video**: `boolean` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSPublishAllowed"
    },
    {
        "title": "HMSReconnectionNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSReconnectionNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSReconnectionNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSReconnectionNotification`**  ## Properties  ### data  • **data**: `null`  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`RECONNECTING`](/api-reference/javascript/v2/enums/HMSNotificationTypes#reconnecting) \\| [`RECONNECTED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#reconnected)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSReconnectionNotification"
    },
    {
        "title": "HMSRecording.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRecording",
        "keywords": [],
        "headings": [
            "Properties",
            "browser",
            "Type declaration",
            "hls",
            "server",
            "Type declaration"
        ],
        "content": "--- title: HMSRecording ---  ## Properties  ### browser  • **browser**: `Object`  #### Type declaration  | Name          Type           | | :-----------  :------------- | | `error?`      `HMSException` | | `running`     `boolean`      | | `startedAt?`  `Date`         |  ---  ### hls  • **hls**: `HMSHLSRecording`  ---  ### server  • **server**: `Object`  #### Type declaration  | Name          Type           | | :-----------  :------------- | | `error?`      `HMSException` | | `running`     `boolean`      | | `startedAt?`  `Date`         | ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRecording"
    },
    {
        "title": "HMSRemoteTrackStats.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "bitrate",
            "Inherited from",
            "bytesReceived",
            "Inherited from",
            "codec",
            "Inherited from",
            "codecId",
            "Inherited from",
            "firCount",
            "Inherited from",
            "frameHeight",
            "Inherited from",
            "frameWidth",
            "Inherited from",
            "framesDecoded",
            "Inherited from",
            "framesDropped",
            "Inherited from",
            "framesPerSecond",
            "Inherited from",
            "id",
            "Inherited from",
            "jitter",
            "Inherited from",
            "kind",
            "Inherited from",
            "nackCount",
            "Inherited from",
            "packetsDiscarded",
            "Inherited from",
            "packetsLost",
            "Inherited from",
            "packetsLostRate",
            "Inherited from",
            "packetsReceived",
            "Inherited from",
            "peerID",
            "Inherited from",
            "peerName",
            "Inherited from",
            "pliCount",
            "Inherited from",
            "qpSum",
            "Inherited from",
            "remoteId",
            "Inherited from",
            "ssrc",
            "Inherited from",
            "timestamp",
            "Inherited from",
            "transportId",
            "Inherited from",
            "type",
            "Inherited from"
        ],
        "content": "--- title: HMSRemoteTrackStats ---  Extends RTCInboundRtpStreamStats Ref: https://www.w3.org/TR/webrtc-stats/#dom-rtcinboundrtpstreamstats  ## Hierarchy  - `BaseTrackStats`  - `MissingInboundStats`    ↳ **`HMSRemoteTrackStats`**    ↳↳ [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)  ## Properties  ### bitrate  • **bitrate**: `number`  #### Inherited from  BaseTrackStats.bitrate  ---  ### bytesReceived  • `Optional` **bytesReceived**: `number`  #### Inherited from  MissingInboundStats.bytesReceived  ---  ### codec  • `Optional` **codec**: `string`  #### Inherited from  BaseTrackStats.codec  ---  ### codecId  • `Optional` **codecId**: `string`  #### Inherited from  BaseTrackStats.codecId  ---  ### firCount  • `Optional` **firCount**: `number`  #### Inherited from  MissingInboundStats.firCount  ---  ### frameHeight  • `Optional` **frameHeight**: `number`  #### Inherited from  MissingInboundStats.frameHeight  ---  ### frameWidth  • `Optional` **frameWidth**: `number`  #### Inherited from  MissingInboundStats.frameWidth  ---  ### framesDecoded  • `Optional` **framesDecoded**: `number`  #### Inherited from  MissingInboundStats.framesDecoded  ---  ### framesDropped  • `Optional` **framesDropped**: `number`  #### Inherited from  MissingInboundStats.framesDropped  ---  ### framesPerSecond  • `Optional` **framesPerSecond**: `number`  #### Inherited from  MissingInboundStats.framesPerSecond  ---  ### id  • **id**: `string`  #### Inherited from  BaseTrackStats.id  ---  ### jitter  • `Optional` **jitter**: `number`  #### Inherited from  MissingInboundStats.jitter  ---  ### kind  • **kind**: `string`  #### Inherited from  BaseTrackStats.kind  ---  ### nackCount  • `Optional` **nackCount**: `number`  #### Inherited from  MissingInboundStats.nackCount  ---  ### packetsDiscarded  • `Optional` **packetsDiscarded**: `number`  #### Inherited from  MissingInboundStats.packetsDiscarded  ---  ### packetsLost  • `Optional` **packetsLost**: `number`  #### Inherited from  MissingInboundStats.packetsLost  ---  ### packetsLostRate  • `Optional` **packetsLostRate**: `number`  #### Inherited from  MissingInboundStats.packetsLostRate  ---  ### packetsReceived  • `Optional` **packetsReceived**: `number`  #### Inherited from  MissingInboundStats.packetsReceived  ---  ### peerID  • `Optional` **peerID**: `string`  #### Inherited from  BaseTrackStats.peerID  ---  ### peerName  • `Optional` **peerName**: `string`  #### Inherited from  BaseTrackStats.peerName  ---  ### pliCount  • `Optional` **pliCount**: `number`  #### Inherited from  MissingInboundStats.pliCount  ---  ### qpSum  • `Optional` **qpSum**: `number`  #### Inherited from  MissingInboundStats.qpSum  ---  ### remoteId  • `Optional` **remoteId**: `string`  #### Inherited from  MissingInboundStats.remoteId  ---  ### ssrc  • **ssrc**: `number`  #### Inherited from  BaseTrackStats.ssrc  ---  ### timestamp  • **timestamp**: `number`  #### Inherited from  BaseTrackStats.timestamp  ---  ### transportId  • `Optional` **transportId**: `string`  #### Inherited from  BaseTrackStats.transportId  ---  ### type  • **type**: `RTCStatsType`  #### Inherited from  BaseTrackStats.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats"
    },
    {
        "title": "HMSRole.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRole",
        "keywords": [],
        "headings": [
            "Properties",
            "name",
            "permissions",
            "Type declaration",
            "priority",
            "publishParams",
            "subscribeParams",
            "Type declaration"
        ],
        "content": "--- title: HMSRole ---  ## Properties  ### name  • **name**: `string`  ---  ### permissions  • **permissions**: `Object`  #### Type declaration  | Name                Type      | | :-----------------  :-------- | | `browserRecording`  `boolean` | | `changeRole`        `boolean` | | `endRoom`           `boolean` | | `hlsStreaming`      `boolean` | | `mute`              `boolean` | | `removeOthers`      `boolean` | | `rtmpStreaming`     `boolean` | | `unmute`            `boolean` |  ---  ### priority  • **priority**: `number`  ---  ### publishParams  • **publishParams**: `PublishParams`  ---  ### subscribeParams  • **subscribeParams**: `Object`  #### Type declaration  | Name                     Type                         | | :----------------------  :--------------------------- | | `maxSubsBitRate`         `number`                     | | `subscribeDegradation?`  `SubscribeDegradationParams` | | `subscribeToRoles`       `string`[]                   | ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRole"
    },
    {
        "title": "HMSRoleChangeRequest.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest",
        "keywords": [],
        "headings": ["Properties", "requestedBy", "role", "token"],
        "content": "--- title: HMSRoleChangeRequest ---  ## Properties  ### requestedBy  • `Optional` **requestedBy**: [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)  ---  ### role  • **role**: [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)  ---  ### token  • **token**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest"
    },
    {
        "title": "HMSRoleChangeStoreRequest.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRoleChangeStoreRequest",
        "keywords": [],
        "headings": ["Properties", "requestedBy", "roleName", "token"],
        "content": "--- title: HMSRoleChangeStoreRequest ---  ## Properties  ### requestedBy  • `Optional` **requestedBy**: `string`  ---  ### roleName  • **roleName**: `string`  ---  ### token  • **token**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRoleChangeStoreRequest"
    },
    {
        "title": "HMSRoom.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRoom",
        "keywords": [],
        "headings": [
            "Properties",
            "hls",
            "id",
            "isConnected",
            "joinedAt",
            "localPeer",
            "name",
            "peerCount",
            "peers",
            "recording",
            "roomState",
            "rtmp",
            "sessionId",
            "startedAt"
        ],
        "content": "--- title: HMSRoom ---  ## Properties  ### hls  • **hls**: [`HMSHLS`](/api-reference/javascript/v2/interfaces/HMSHLS)  ---  ### id  • **id**: `string`  ---  ### isConnected  • `Optional` **isConnected**: `boolean`  ---  ### joinedAt  • `Optional` **joinedAt**: `Date`  ---  ### localPeer  • **localPeer**: `string`  ---  ### name  • **name**: `string`  ---  ### peerCount  • `Optional` **peerCount**: `number`  if  number  available room.peers   guaranteed     peers.  ---  ### peers  • **peers**: `string`[]  ---  ### recording  • **recording**: [`HMSRecording`](/api-reference/javascript/v2/interfaces/HMSRecording)  ---  ### roomState  • **roomState**: [`HMSRoomState`](/api-reference/javascript/v2/enums/HMSRoomState)  ---  ### rtmp  • **rtmp**: [`HMSRTMP`](/api-reference/javascript/v2/interfaces/HMSRTMP)  ---  ### sessionId  • **sessionId**: `string`  ---  ### startedAt  • `Optional` **startedAt**: `Date` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRoom"
    },
    {
        "title": "HMSRTMP.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSRTMP",
        "keywords": [],
        "headings": ["Properties", "error", "running", "startedAt"],
        "content": "--- title: HMSRTMP ---  ## Properties  ### error  • `Optional` **error**: `HMSException`  ---  ### running  • **running**: `boolean`  ---  ### startedAt  • `Optional` **startedAt**: `Date` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSRTMP"
    },
    {
        "title": "HMSScreenAudioTrack.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "deviceID",
            "Inherited from",
            "displayEnabled",
            "Inherited from",
            "enabled",
            "Inherited from",
            "id",
            "Inherited from",
            "peerId",
            "Inherited from",
            "plugins",
            "Inherited from",
            "source",
            "Overrides",
            "type",
            "Overrides",
            "volume",
            "Inherited from"
        ],
        "content": "--- title: HMSScreenAudioTrack ---  ## Hierarchy  - [`HMSAudioTrack`](/api-reference/javascript/v2/interfaces/HMSAudioTrack)    ↳ **`HMSScreenAudioTrack`**  ## Properties  ### deviceID  • `Optional` **deviceID**: `string`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[deviceID](/api-reference/javascript/v2/interfaces/HMSAudioTrack#deviceid)  ---  ### displayEnabled  • `Optional` **displayEnabled**: `boolean`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[displayEnabled](/api-reference/javascript/v2/interfaces/HMSAudioTrack#displayenabled)  ---  ### enabled  • **enabled**: `boolean`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[enabled](/api-reference/javascript/v2/interfaces/HMSAudioTrack#enabled)  ---  ### id  • **id**: `string`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[id](/api-reference/javascript/v2/interfaces/HMSAudioTrack#id)  ---  ### peerId  • `Optional` **peerId**: `string`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[peerId](/api-reference/javascript/v2/interfaces/HMSAudioTrack#peerid)  ---  ### plugins  • `Optional` **plugins**: `string`[]  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[plugins](/api-reference/javascript/v2/interfaces/HMSAudioTrack#plugins)  ---  ### source  • **source**: `\"screen\"`  #### Overrides  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[source](/api-reference/javascript/v2/interfaces/HMSAudioTrack#source)  ---  ### type  • **type**: `\"audio\"`  #### Overrides  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[type](/api-reference/javascript/v2/interfaces/HMSAudioTrack#type)  ---  ### volume  • `Optional` **volume**: `number`  #### Inherited from  [HMSAudioTrack](/api-reference/javascript/v2/interfaces/HMSAudioTrack).[volume](/api-reference/javascript/v2/interfaces/HMSAudioTrack#volume) ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSScreenAudioTrack"
    },
    {
        "title": "HMSScreenShareConfig.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSScreenShareConfig",
        "keywords": [],
        "headings": [
            "Properties",
            "audioOnly",
            "cropElement",
            "cropTarget",
            "displaySurface",
            "forceCurrentTab",
            "preferCurrentTab",
            "selfBrowserSurface",
            "surfaceSwitching",
            "systemAudio",
            "videoOnly"
        ],
        "content": "--- title: HMSScreenShareConfig ---  Config   control  screenshare  captured. Note that not  fields  supported   browsers. Even   supported the fields acts  hints   browser can override them.  ## Properties  ### audioOnly  • `Optional` **audioOnly**: `boolean`  discard  video   share audio track  others, useful for sharing music.  **`Default`**  false  ---  ### cropElement  • `Optional` **cropElement**: `HTMLDivElement`  used  region capture  screenshare,   current tab   screenshared the screenshare video track will  cropped    element. Will throw error   element   present  DOM.  ---  ### cropTarget  • `Optional` **cropTarget**: `object`  used  region capture  screenshare,  screenshare video track will be cropped    passed  cropTarget. This cropTarget must come from the tab    shared  ---  ### displaySurface  • `Optional` **displaySurface**: `\"browser\"` \\| `\"monitor\"` \\| `\"window\"`  preselect  relevant tab  screenshare menu browser -  preferring  browser tab window -  application window monitor -  full screen  **`Default`**  monitor  ---  ### forceCurrentTab  • `Optional` **forceCurrentTab**: `boolean`  show  current tab first  supported browser, throws error  user  select current tab  sharing.  **`Default`**  false  ---  ### preferCurrentTab  • `Optional` **preferCurrentTab**: `boolean`  show  current tab first  supported browser,   throw error if user selects something else.  **`Default`**  false  ---  ### selfBrowserSurface  • `Optional` **selfBrowserSurface**: `\"include\"` \\| `\"exclude\"`  whether  show  option  sharing  current tab   screen share prompt. Screen sharing current tab might lead  hall  mirrors effect. Default  exclude,  either  forceCurrentTab  preferCurrentTab  true, this  set  include.  **`Default`**  exclude  ---  ### surfaceSwitching  • `Optional` **surfaceSwitching**: `\"include\"` \\| `\"exclude\"`  whether  hint browser  show  \"share  tab instead\" option when tab  shared. Default  include, set  exclude  forceCurrentTab  true  **`Default`**  include  ---  ### systemAudio  • `Optional` **systemAudio**: `\"include\"` \\| `\"exclude\"`  whether  show option  sharing system level audio  full screen is  shared. Not applicable  isVideoOnly  true. Note  sharing system audio will cause echo  mic  on.  **`Default`**  exclude  ---  ### videoOnly  • `Optional` **videoOnly**: `boolean`  do  give  option  share audio  screen sharing.  **`Default`**  false ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSScreenShareConfig"
    },
    {
        "title": "HMSScreenVideoTrack.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "captureHandle",
            "degraded",
            "Inherited from",
            "deviceID",
            "Inherited from",
            "displayEnabled",
            "Inherited from",
            "displaySurface",
            "enabled",
            "Inherited from",
            "height",
            "Inherited from",
            "id",
            "Inherited from",
            "layer",
            "Inherited from",
            "layerDefinitions",
            "Inherited from",
            "peerId",
            "Inherited from",
            "plugins",
            "Inherited from",
            "preferredLayer",
            "Inherited from",
            "source",
            "Overrides",
            "type",
            "Inherited from",
            "width",
            "Inherited from"
        ],
        "content": "--- title: HMSScreenVideoTrack ---  ## Hierarchy  - `Omit`<[`HMSVideoTrack`](/api-reference/javascript/v2/interfaces/HMSVideoTrack), `\"facingMode\"`\\>    ↳ **`HMSScreenVideoTrack`**  ## Properties  ### captureHandle  • `Optional` **captureHandle**: [`ScreenCaptureHandle`](/api-reference/javascript/v2/interfaces/ScreenCaptureHandle)  this can  used  identify  shared tab, if the shared tab  set  captureHandle   end  well  communicate with  tab  e.g. using broadcast channel.  ---  ### degraded  • `Optional` **degraded**: `boolean`  #### Inherited from  Omit.degraded  ---  ### deviceID  • `Optional` **deviceID**: `string`  #### Inherited from  Omit.deviceID  ---  ### displayEnabled  • `Optional` **displayEnabled**: `boolean`  #### Inherited from  Omit.displayEnabled  ---  ### displaySurface  • `Optional` **displaySurface**: [`HMSTrackDisplaySurface`](/api-reference/javascript/v2/home/content#hmstrackdisplaysurface)  ---  ### enabled  • **enabled**: `boolean`  #### Inherited from  Omit.enabled  ---  ### height  • `Optional` **height**: `number`  #### Inherited from  Omit.height  ---  ### id  • **id**: `string`  #### Inherited from  Omit.id  ---  ### layer  • `Optional` **layer**: [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer)  #### Inherited from  Omit.layer  ---  ### layerDefinitions  • `Optional` **layerDefinitions**: [`HMSSimulcastLayerDefinition`](/api-reference/javascript/v2/interfaces/HMSSimulcastLayerDefinition)[]  #### Inherited from  Omit.layerDefinitions  ---  ### peerId  • `Optional` **peerId**: `string`  #### Inherited from  Omit.peerId  ---  ### plugins  • `Optional` **plugins**: `string`[]  #### Inherited from  Omit.plugins  ---  ### preferredLayer  • `Optional` **preferredLayer**: [`HMSPreferredSimulcastLayer`](/api-reference/javascript/v2/modules#hmspreferredsimulcastlayer)  #### Inherited from  Omit.preferredLayer  ---  ### source  • **source**: `\"screen\"`  #### Overrides  Omit.source  ---  ### type  • **type**: `\"video\"`  #### Inherited from  Omit.type  ---  ### width  • `Optional` **width**: `number`  #### Inherited from  Omit.width ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSScreenVideoTrack"
    },
    {
        "title": "HMSSimulcastLayerDefinition.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSSimulcastLayerDefinition",
        "keywords": [],
        "headings": ["Properties", "layer", "resolution"],
        "content": "--- title: HMSSimulcastLayerDefinition ---  ## Properties  ### layer  • **layer**: [`HMSPreferredSimulcastLayer`](/api-reference/javascript/v2/home/content#hmspreferredsimulcastlayer)  ---  ### resolution  • **resolution**: `SimulcastResolution` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSSimulcastLayerDefinition"
    },
    {
        "title": "HMSSpeaker.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSSpeaker",
        "keywords": [],
        "headings": ["Properties", "audioLevel", "peerID", "trackID"],
        "content": "--- title: HMSSpeaker ---  HMS Speaker stores  details  peers speaking   point  time along with their audio levels. This can  used  current speakers  highlight videotiles.  ## Properties  ### audioLevel  • **audioLevel**: `number`  ---  ### peerID  • **peerID**: `string`  ---  ### trackID  • **trackID**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSSpeaker"
    },
    {
        "title": "HMSStatsStore.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSStatsStore",
        "keywords": [],
        "headings": [
            "Properties",
            "localPeer",
            "Type declaration",
            "localTrackStats",
            "peerStats",
            "remoteTrackStats"
        ],
        "content": "--- title: HMSStatsStore ---  ## Properties  ### localPeer  • **localPeer**: `Object`  #### Type declaration  | Name           Type     | | :------------  :------- | | `audioTrack?`  `string` | | `id`           `string` | | `videoTrack?`  `string` |  ---  ### localTrackStats  • **localTrackStats**: `Record`<`string`, `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)[]\\>  ---  ### peerStats  • **peerStats**: `Record`<`string`, `undefined` \\| [`HMSPeerStats`](/api-reference/javascript/v2/interfaces/HMSPeerStats)\\>  ---  ### remoteTrackStats  • **remoteTrackStats**: `Record`<`string`, `undefined` \\| [`HMSTrackStats`](/api-reference/javascript/v2/interfaces/HMSTrackStats)\\> ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSStatsStore"
    },
    {
        "title": "HMSStatsStoreWrapper.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSStatsStoreWrapper",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "getState",
            "Inherited from",
            "subscribe",
            "Inherited from"
        ],
        "content": "--- title: HMSStatsStoreWrapper ---  ## Hierarchy  - `IStoreReadOnly`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>    ↳ **`HMSStatsStoreWrapper`**  ## Properties  ### getState  • **getState**: `GetState`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>  Get  part  store using  selector   true   current point  time.  Usage: `store.getState(selectDominantSpeaker);`  #### Inherited from  IStoreReadOnly.getState  ---  ### subscribe  • **subscribe**: `Subscribe`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>  Subscribe   part  store using selectors, whenever  subscribed part changes,  callback is called    latest  previous value   changed part.  Usage:  ``` const onSpeakerUpdate = (speaker, prevSpeaker) => {  console.log(\"speaker changed  - \", prevSpeaker, \",  - \", speaker); } store.subscribe(onSpeakerUpdate, selectDominantSpeaker); ```  #### Inherited from  IStoreReadOnly.subscribe ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSStatsStoreWrapper"
    },
    {
        "title": "HMSStore.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSStore",
        "keywords": [],
        "headings": [
            "Properties",
            "appData",
            "connectionQualities",
            "devices",
            "errors",
            "messages",
            "Type declaration",
            "peers",
            "playlist",
            "roleChangeRequests",
            "roles",
            "room",
            "sessionMetadata",
            "settings",
            "speakers",
            "tracks"
        ],
        "content": "--- title: HMSStore ---  ## Properties  ### appData  • `Optional` **appData**: `Record`<`string`, `any`\\>  ---  ### connectionQualities  • **connectionQualities**: `Record`<`string`, `HMSConnectionQuality`\\>  ---  ### devices  • **devices**: [`DeviceMap`](/api-reference/javascript/v2/interfaces/DeviceMap)  ---  ### errors  • **errors**: [`HMSException`](/api-reference/javascript/v2/interfaces/HMSException)[]  ---  ### messages  • **messages**: `Object`  #### Type declaration  | Name      Type                                                                                    | | :-------  :-------------------------------------------------------------------------------------- | | `allIDs`  `string`[]                                                                              | | `byID`    `Record`<`string`, [`HMSMessage`](/api-reference/javascript/v2/interfaces/HMSMessage)\\> |  ---  ### peers  • **peers**: `Record`<`string`, [`HMSPeer`](/api-reference/javascript/v2/interfaces/HMSPeer)\\>  ---  ### playlist  • **playlist**: [`HMSPlaylist`](/api-reference/javascript/v2/interfaces/HMSPlaylist)<`any`\\>  ---  ### roleChangeRequests  • **roleChangeRequests**: [`HMSRoleChangeStoreRequest`](/api-reference/javascript/v2/interfaces/HMSRoleChangeStoreRequest)[]  ---  ### roles  • **roles**: `Record`<`string`, [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole)\\>  ---  ### room  • **room**: [`HMSRoom`](/api-reference/javascript/v2/interfaces/HMSRoom)  ---  ### sessionMetadata  • `Optional` **sessionMetadata**: `any`  ---  ### settings  • **settings**: [`HMSMediaSettings`](/api-reference/javascript/v2/interfaces/HMSMediaSettings)  ---  ### speakers  • **speakers**: `Record`<`string`, [`HMSSpeaker`](/api-reference/javascript/v2/interfaces/HMSSpeaker)\\>  ---  ### tracks  • **tracks**: `Record`<`string`, [`HMSTrack`](/api-reference/javascript/v2/home/content#hmstrack)\\> ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSStore"
    },
    {
        "title": "HMSStoreWrapper.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSStoreWrapper",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "getState",
            "Inherited from",
            "subscribe",
            "Inherited from"
        ],
        "content": "--- title: HMSStoreWrapper ---  HMS store can  used to:  - Get  part   current store  state(getState) - Subscribe  different parts   store using selectors  execute  callback   value changes.  Both getState  subscribe use selectors  query  part  store.  Selectors  functions  HMSStore   argument  returns  part   store.  **StoreSelector**   type alias   type  function.  ## Hierarchy  - `IStoreReadOnly`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>    ↳ **`HMSStoreWrapper`**  ## Properties  ### getState  • **getState**: `GetState`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>  Get  part  store using  selector   true   current point  time.  Usage: `store.getState(selectDominantSpeaker);`  #### Inherited from  IStoreReadOnly.getState  ---  ### subscribe  • **subscribe**: `Subscribe`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>  Subscribe   part  store using selectors, whenever  subscribed part changes,  callback is called    latest  previous value   changed part.  Usage:  ``` const onSpeakerUpdate = (speaker, prevSpeaker) => {  console.log(\"speaker changed  - \", prevSpeaker, \",  - \", speaker); } store.subscribe(onSpeakerUpdate, selectDominantSpeaker); ```  #### Inherited from  IStoreReadOnly.subscribe ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSStoreWrapper"
    },
    {
        "title": "HMSTrackNotification.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSTrackNotification",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "data",
            "id",
            "Inherited from",
            "message",
            "Inherited from",
            "severity",
            "Inherited from",
            "type",
            "Overrides"
        ],
        "content": "--- title: HMSTrackNotification ---  ## Hierarchy  - `BaseNotification`    ↳ **`HMSTrackNotification`**  ## Properties  ### data  • **data**: [`HMSTrack`](/api-reference/javascript/v2/home/content#hmstrack)  ---  ### id  • **id**: `number`  #### Inherited from  BaseNotification.id  ---  ### message  • **message**: `string`  #### Inherited from  BaseNotification.message  ---  ### severity  • `Optional` **severity**: [`HMSNotificationSeverity`](/api-reference/javascript/v2/enums/HMSNotificationSeverity)  #### Inherited from  BaseNotification.severity  ---  ### type  • **type**: [`TRACK_ADDED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_added) \\| [`TRACK_REMOVED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_removed) \\| [`TRACK_MUTED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_muted) \\| [`TRACK_UNMUTED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_unmuted) \\| [`TRACK_DEGRADED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_degraded) \\| [`TRACK_RESTORED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_restored) \\| [`TRACK_DESCRIPTION_CHANGED`](/api-reference/javascript/v2/enums/HMSNotificationTypes#track_description_changed)  #### Overrides  BaseNotification.type ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSTrackNotification"
    },
    {
        "title": "HMSTrackStats.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSTrackStats",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "bitrate",
            "Inherited from",
            "bytesReceived",
            "Inherited from",
            "bytesSent",
            "Inherited from",
            "codec",
            "Inherited from",
            "codecId",
            "Inherited from",
            "firCount",
            "Inherited from",
            "frameHeight",
            "Inherited from",
            "frameWidth",
            "Inherited from",
            "framesDecoded",
            "Inherited from",
            "framesDropped",
            "Inherited from",
            "framesEncoded",
            "Inherited from",
            "framesPerSecond",
            "Inherited from",
            "id",
            "Inherited from",
            "jitter",
            "Inherited from",
            "kind",
            "Inherited from",
            "nackCount",
            "Inherited from",
            "packetsDiscarded",
            "Inherited from",
            "packetsLost",
            "Inherited from",
            "packetsLostRate",
            "Inherited from",
            "packetsReceived",
            "Inherited from",
            "packetsSent",
            "Inherited from",
            "peerID",
            "Inherited from",
            "peerName",
            "Inherited from",
            "pliCount",
            "Inherited from",
            "qpSum",
            "Inherited from",
            "qualityLimitationReason",
            "Inherited from",
            "remote",
            "Inherited from",
            "remoteId",
            "Inherited from",
            "rid",
            "Inherited from",
            "roundTripTime",
            "Inherited from",
            "ssrc",
            "Inherited from",
            "timestamp",
            "Inherited from",
            "totalRoundTripTime",
            "Inherited from",
            "transportId",
            "Inherited from",
            "type",
            "Inherited from"
        ],
        "content": "--- title: HMSTrackStats ---  Extends RTCOutboundRtpStreamStats Ref: https://www.w3.org/TR/webrtc-stats/#dom-rtcoutboundrtpstreamstats  ## Hierarchy  - [`HMSLocalTrackStats`](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats)  - [`HMSRemoteTrackStats`](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats)    ↳ **`HMSTrackStats`**  ## Properties  ### bitrate  • **bitrate**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[bitrate](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#bitrate)  ---  ### bytesReceived  • `Optional` **bytesReceived**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[bytesReceived](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#bytesreceived)  ---  ### bytesSent  • `Optional` **bytesSent**: `number`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[bytesSent](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#bytessent)  ---  ### codec  • `Optional` **codec**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[codec](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#codec)  ---  ### codecId  • `Optional` **codecId**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[codecId](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#codecid)  ---  ### firCount  • `Optional` **firCount**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[firCount](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#fircount)  ---  ### frameHeight  • `Optional` **frameHeight**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[frameHeight](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#frameheight)  ---  ### frameWidth  • `Optional` **frameWidth**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[frameWidth](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#framewidth)  ---  ### framesDecoded  • `Optional` **framesDecoded**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[framesDecoded](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#framesdecoded)  ---  ### framesDropped  • `Optional` **framesDropped**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[framesDropped](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#framesdropped)  ---  ### framesEncoded  • `Optional` **framesEncoded**: `number`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[framesEncoded](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#framesencoded)  ---  ### framesPerSecond  • `Optional` **framesPerSecond**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[framesPerSecond](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#framespersecond)  ---  ### id  • **id**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[id](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#id)  ---  ### jitter  • `Optional` **jitter**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[jitter](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#jitter)  ---  ### kind  • **kind**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[kind](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#kind)  ---  ### nackCount  • `Optional` **nackCount**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[nackCount](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#nackcount)  ---  ### packetsDiscarded  • `Optional` **packetsDiscarded**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[packetsDiscarded](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#packetsdiscarded)  ---  ### packetsLost  • `Optional` **packetsLost**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[packetsLost](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#packetslost)  ---  ### packetsLostRate  • `Optional` **packetsLostRate**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[packetsLostRate](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#packetslostrate)  ---  ### packetsReceived  • `Optional` **packetsReceived**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[packetsReceived](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#packetsreceived)  ---  ### packetsSent  • `Optional` **packetsSent**: `number`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[packetsSent](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#packetssent)  ---  ### peerID  • `Optional` **peerID**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[peerID](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#peerid)  ---  ### peerName  • `Optional` **peerName**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[peerName](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#peername)  ---  ### pliCount  • `Optional` **pliCount**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[pliCount](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#plicount)  ---  ### qpSum  • `Optional` **qpSum**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[qpSum](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#qpsum)  ---  ### qualityLimitationReason  • `Optional` **qualityLimitationReason**: `string`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[qualityLimitationReason](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#qualitylimitationreason)  ---  ### remote  • `Optional` **remote**: `RTCRemoteInboundRtpStreamStats` & { `packetsLostRate?`: `number` }  Stats perceived   server(SFU)  receiving  local track sent   peer Ref: https://www.w3.org/TR/webrtc-stats/#dom-rtcstatstype-remote-inbound-rtp https://www.w3.org/TR/webrtc-stats/#dom-rtcremoteinboundrtpstreamstats  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[remote](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#remote)  ---  ### remoteId  • `Optional` **remoteId**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[remoteId](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#remoteid)  ---  ### rid  • `Optional` **rid**: `RID`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[rid](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#rid)  ---  ### roundTripTime  • `Optional` **roundTripTime**: `number`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[roundTripTime](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#roundtriptime)  ---  ### ssrc  • **ssrc**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[ssrc](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#ssrc)  ---  ### timestamp  • **timestamp**: `number`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[timestamp](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#timestamp)  ---  ### totalRoundTripTime  • `Optional` **totalRoundTripTime**: `number`  #### Inherited from  [HMSLocalTrackStats](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats).[totalRoundTripTime](/api-reference/javascript/v2/interfaces/HMSLocalTrackStats#totalroundtriptime)  ---  ### transportId  • `Optional` **transportId**: `string`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[transportId](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#transportid)  ---  ### type  • **type**: `RTCStatsType`  #### Inherited from  [HMSRemoteTrackStats](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats).[type](/api-reference/javascript/v2/interfaces/HMSRemoteTrackStats#type) ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSTrackStats"
    },
    {
        "title": "HMSVideoTrack.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSVideoTrack",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "degraded",
            "deviceID",
            "Inherited from",
            "displayEnabled",
            "Inherited from",
            "enabled",
            "Inherited from",
            "facingMode",
            "height",
            "id",
            "Inherited from",
            "layer",
            "layerDefinitions",
            "peerId",
            "Inherited from",
            "plugins",
            "Inherited from",
            "preferredLayer",
            "source",
            "Overrides",
            "type",
            "Overrides",
            "width"
        ],
        "content": "--- title: HMSVideoTrack ---  ## Hierarchy  - `BaseTrack`    ↳ **`HMSVideoTrack`**  ## Properties  ### degraded  • `Optional` **degraded**: `boolean`  ---  ### deviceID  • `Optional` **deviceID**: `string`  #### Inherited from  BaseTrack.deviceID  ---  ### displayEnabled  • `Optional` **displayEnabled**: `boolean`  #### Inherited from  BaseTrack.displayEnabled  ---  ### enabled  • **enabled**: `boolean`  #### Inherited from  BaseTrack.enabled  ---  ### facingMode  • `Optional` **facingMode**: [`HMSTrackFacingMode`](/api-reference/javascript/v2/home/content#hmstrackfacingmode)  ---  ### height  • `Optional` **height**: `number`  ---  ### id  • **id**: `string`  #### Inherited from  BaseTrack.id  ---  ### layer  • `Optional` **layer**: [`HMSSimulcastLayer`](/api-reference/javascript/v2/enums/HMSSimulcastLayer)  ---  ### layerDefinitions  • `Optional` **layerDefinitions**: [`HMSSimulcastLayerDefinition`](/api-reference/javascript/v2/interfaces/HMSSimulcastLayerDefinition)[]  ---  ### peerId  • `Optional` **peerId**: `string`  #### Inherited from  BaseTrack.peerId  ---  ### plugins  • `Optional` **plugins**: `string`[]  #### Inherited from  BaseTrack.plugins  ---  ### preferredLayer  • `Optional` **preferredLayer**: [`HMSPreferredSimulcastLayer`](/api-reference/javascript/v2/modules#hmspreferredsimulcastlayer)  ---  ### source  • **source**: `string`  #### Overrides  BaseTrack.source  ---  ### type  • **type**: `\"video\"`  #### Overrides  BaseTrack.type  ---  ### width  • `Optional` **width**: `number` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSVideoTrack"
    },
    {
        "title": "HMSVideoTrackSettings.mdx",
        "link": "/api-reference/javascript/v2/interfaces/HMSVideoTrackSettings",
        "keywords": [],
        "headings": [
            "Properties",
            "advanced",
            "codec",
            "deviceId",
            "height",
            "maxBitrate",
            "maxFramerate",
            "width"
        ],
        "content": "--- title: HMSVideoTrackSettings ---  ## Properties  ### advanced  • `Optional` **advanced**: `MediaTrackConstraintSet`[]  ---  ### codec  • `Optional` **codec**: `HMSVideoCodec`  ---  ### deviceId  • `Optional` **deviceId**: `string`  ---  ### height  • `Optional` **height**: `number`  ---  ### maxBitrate  • `Optional` **maxBitrate**: `number`  ---  ### maxFramerate  • `Optional` **maxFramerate**: `number`  ---  ### width  • `Optional` **width**: `number` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/HMSVideoTrackSettings"
    },
    {
        "title": "IHMSPlaylistActions.mdx",
        "link": "/api-reference/javascript/v2/interfaces/IHMSPlaylistActions",
        "keywords": [],
        "headings": [
            "Methods",
            "clearList",
            "Returns",
            "pause",
            "Returns",
            "play",
            "Parameters",
            "Returns",
            "playNext",
            "Returns",
            "playPrevious",
            "Returns",
            "removeItem",
            "Parameters",
            "Returns",
            "seek",
            "Parameters",
            "Returns",
            "seekTo",
            "Parameters",
            "Returns",
            "setIsAutoplayOn",
            "Parameters",
            "Returns",
            "setList",
            "Type parameters",
            "Parameters",
            "Returns",
            "setPlaybackRate",
            "Parameters",
            "Returns",
            "setVolume",
            "Parameters",
            "Returns",
            "stop",
            "Returns"
        ],
        "content": "--- title: IHMSPlaylistActions ---  ## Methods  ### clearList  ▸ **clearList**(): `Promise`<`void`\\>  #### Returns  `Promise`<`void`\\>  ---  ### pause  ▸ **pause**(): `Promise`<`void`\\>  Pauses current playing item  #### Returns  `Promise`<`void`\\>  ---  ### play  ▸ **play**(`id`): `Promise`<`void`\\>  Pass  id   item   played  #### Parameters  | Name  Type      Description         | | :---  :-------  :------------------ | | `id`  `string`  id  playlist item |  #### Returns  `Promise`<`void`\\>  ---  ### playNext  ▸ **playNext**(): `Promise`<`void`\\>  PlayNext  #### Returns  `Promise`<`void`\\>  ---  ### playPrevious  ▸ **playPrevious**(): `Promise`<`void`\\>  PlayPrevious  #### Returns  `Promise`<`void`\\>  ---  ### removeItem  ▸ **removeItem**(`id`): `Promise`<`boolean`\\>  #### Parameters  | Name  Type     | | :---  :------- | | `id`  `string` |  #### Returns  `Promise`<`boolean`\\>  ---  ### seek  ▸ **seek**(`seekValue`): `void`  seek passing seekValue -   relative  current position  #### Parameters  | Name         Type      Description                                                                | | :----------  :-------  :------------------------------------------------------------------------- | | `seekValue`  `number`  number  seconds  move forwards(pass negative values  move backwards) |  #### Returns  `void`  ---  ### seekTo  ▸ **seekTo**(`seekValue`): `void`  seek passing seekValue - seekValue will  absolute  #### Parameters  | Name         Type      Description                                                         | | :----------  :-------  :------------------------------------------------------------------ | | `seekValue`  `number`  value  seconds  absolute position   playlist item duration |  #### Returns  `void`  ---  ### setIsAutoplayOn  ▸ **setIsAutoplayOn**(`autoplay`): `void`  set whether  autoplay next item  playlist   current one ends  #### Parameters  | Name        Type      | | :---------  :-------- | | `autoplay`  `boolean` |  #### Returns  `void`  ---  ### setList  ▸ **setList**<`T`\\>(`list`): `void`  pass list  set playlist  #### Type parameters  | Name | | :--- | | `T`  |  #### Parameters  | Name    Type                                                                                  Description       | | :-----  :-----------------------------------------------------------------------------------  :---------------- | | `list`  [`HMSPlaylistItem`](/api-reference/javascript/v2/interfaces/HMSPlaylistItem)<`T`\\>[]   playlist items |  #### Returns  `void`  ---  ### setPlaybackRate  ▸ **setPlaybackRate**(`playbackRate`): `void`  Control  playback speed - 1.0  normal, less  1.0 will play  slowly and   1.0 will play  faster.  #### Parameters  | Name            Type      Description             | | :-------------  :-------  :---------------------- | | `playbackRate`  `number`  value  0.25  2.0 |  #### Returns  `void`  ---  ### setVolume  ▸ **setVolume**(`volume`): `void`  set volume passing volume  #### Parameters  | Name      Type      Description          | | :-------  :-------  :------------------- | | `volume`  `number`  number  0-100 |  #### Returns  `void`  ---  ### stop  ▸ **stop**(): `Promise`<`void`\\>  Stop  current playback  remove  tracks  #### Returns  `Promise`<`void`\\> ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/IHMSPlaylistActions"
    },
    {
        "title": "IHMSStatsStore.mdx",
        "link": "/api-reference/javascript/v2/interfaces/IHMSStatsStore",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "destroy",
            "Inherited from",
            "getState",
            "Inherited from",
            "setState",
            "Inherited from",
            "subscribe",
            "Inherited from"
        ],
        "content": "--- title: IHMSStatsStore ---  ## Hierarchy  - `IStore`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>    ↳ **`IHMSStatsStore`**  ## Properties  ### destroy  • **destroy**: `Destroy`  #### Inherited from  IStore.destroy  ---  ### getState  • **getState**: `GetState`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>  Get  part  store using  selector   true   current point  time.  Usage: `store.getState(selectDominantSpeaker);`  #### Inherited from  IStore.getState  ---  ### setState  • **setState**: `SetState`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>  #### Inherited from  IStore.setState  ---  ### subscribe  • **subscribe**: `Subscribe`<[`HMSStatsStore`](/api-reference/javascript/v2/interfaces/HMSStatsStore)\\>  Subscribe   part  store using selectors, whenever  subscribed part changes,  callback is called    latest  previous value   changed part.  Usage:  ``` const onSpeakerUpdate = (speaker, prevSpeaker) => {  console.log(\"speaker changed  - \", prevSpeaker, \",  - \", speaker); } store.subscribe(onSpeakerUpdate, selectDominantSpeaker); ```  #### Inherited from  IStore.subscribe ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/IHMSStatsStore"
    },
    {
        "title": "IHMSStore.mdx",
        "link": "/api-reference/javascript/v2/interfaces/IHMSStore",
        "keywords": [],
        "headings": [
            "Hierarchy",
            "Properties",
            "destroy",
            "Inherited from",
            "getState",
            "Inherited from",
            "setState",
            "Inherited from",
            "subscribe",
            "Inherited from"
        ],
        "content": "--- title: IHMSStore ---  HMS Reactive store can  used  subscribe  different parts   store using selectors and get  callback   value changes.  ## Hierarchy  - `IStore`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>    ↳ **`IHMSStore`**  ## Properties  ### destroy  • **destroy**: `Destroy`  #### Inherited from  IStore.destroy  ---  ### getState  • **getState**: `GetState`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>  Get  part  store using  selector   true   current point  time.  Usage: `store.getState(selectDominantSpeaker);`  #### Inherited from  IStore.getState  ---  ### setState  • **setState**: `SetState`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>  #### Inherited from  IStore.setState  ---  ### subscribe  • **subscribe**: `Subscribe`<[`HMSStore`](/api-reference/javascript/v2/interfaces/HMSStore)\\>  Subscribe   part  store using selectors, whenever  subscribed part changes,  callback is called    latest  previous value   changed part.  Usage:  ``` const onSpeakerUpdate = (speaker, prevSpeaker) => {  console.log(\"speaker changed  - \", prevSpeaker, \",  - \", speaker); } store.subscribe(onSpeakerUpdate, selectDominantSpeaker); ```  #### Inherited from  IStore.subscribe ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/IHMSStore"
    },
    {
        "title": "RTMPRecordingConfig.mdx",
        "link": "/api-reference/javascript/v2/interfaces/RTMPRecordingConfig",
        "keywords": [],
        "headings": ["Properties", "meetingURL", "record", "resolution", "rtmpURLs"],
        "content": "--- title: RTMPRecordingConfig ---  ## Properties  ### meetingURL  • **meetingURL**: `string`  ---  ### record  • **record**: `boolean`  ---  ### resolution  • `Optional` **resolution**: `RTMPRecordingResolution`  ---  ### rtmpURLs  • `Optional` **rtmpURLs**: `string`[] ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/RTMPRecordingConfig"
    },
    {
        "title": "ScreenCaptureHandle.mdx",
        "link": "/api-reference/javascript/v2/interfaces/ScreenCaptureHandle",
        "keywords": [],
        "headings": ["Properties", "exposeOrigin", "handle"],
        "content": "--- title: ScreenCaptureHandle ---  ## Properties  ### exposeOrigin  • **exposeOrigin**: `boolean`  ---  ### handle  • **handle**: `string` ",
        "platformName": "JavaScript",
        "objectID": "/api-reference/javascript/v2/interfaces/ScreenCaptureHandle"
    },
    {
        "title": "echo-cancellation.mdx",
        "link": "/flutter/v2/advanced-features/echo-cancellation",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Echo Cancellation\r nav: 4.4\r ---\r \r The 100ms Flutter SDK automatically applies  best known settings  cancel echos  devices. However  android devices  issues   hardware echo cancellation  benefit  relying   software  it.\r \r While  continually update  SDK   latest known devices    issue,  may run  one   tested  yet.\r \r If  find   certain device echos   joins  meeting despite this, turning   hardware echo cancellation may solve  problem. This    hardware echo cancellation  supported   device,  SDK prefers hardware  software.\r \r Echo cancellation settings can   applied   meeting  joined. The 100ms Flutter SDK provides  way  turn     builder function.\r \r > 💡 Note  option must selectively  turned   devices based   [models](https://developer.android.com/reference/android/os/Build) disabling hardware echo cancellation   devices will result   devices echoing   before.\r \r \r ```dart\r  HMSAudioTrackSetting audioTrackSetting = HMSAudioTrackSetting(useHardwareAcousticEchoCanceler:true);\r \r  HMSTrackSetting hmsTrackSetting = HMSTrackSetting(audioTrackSetting: audioTrackSetting);\r  \r  hmsSDK.build(hmsTrackSetting: hmsTrackSetting);\r ```\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/echo-cancellation"
    },
    {
        "title": "get-methods.mdx",
        "link": "/flutter/v2/advanced-features/get-methods",
        "keywords": [],
        "headings": [
            "getRoom",
            "getSessionMetadata",
            "getTrackSettings",
            "getRoles",
            "getLocalPeer",
            "getRemotePeers",
            "getPeers",
            "getAudioDevicesList",
            "getCurrentAudioDevice"
        ],
        "content": "--- title: Getter Methods nav: 4.7 ---  HMSSDK provides multiple Getter methods  read  get  data   class fields  can  used  refresh data, update  stale state, re-render UI, etc  Let's look   methods one  one :  ### getRoom  This  used  get info   room    currently using. It returns `HMSRoom?` object as:  ```dart Future<HMSRoom?> getRoom() async {     //returns null       room     return await hmsSDK.getRoom(); } ```  ### getSessionMetadata  This  used  get  currently set session metadata. This can  used  get  info attached   session. This returns  `String?` as:  ```dart Future<String?> getSessionMetadata() {     //returns null   metadata  set     return hmsSDK.getSessionMetadata(); }  ```  To set  session metadata `setSessionMetadata` method can  used.  ### getTrackSettings  This  used  get  current track setting   room. This returns  object  `HMSTrackSetting` as:  ```dart Future<HMSTrackSetting> getTrackSettings() async {     return await hmsSDK.getTrackSettings(); } ```  ### getRoles  This  used  get   roles available   current room. It returns  list  `HMSRole` objects as:  ```dart  Future<List<HMSRole>> getRoles() async {     return await hmsSDK.getRoles(); } ```  ### getLocalPeer  This method helps  getting  local peer. It returns  object  `HMSLocalPeer?` object as:  ```dart Future<HMSLocalPeer?> getLocalPeer() async {     //returns null    joined  room     return await hmsSDK.getLocalPeer(); }  ```  ### getRemotePeers  This method helps  getting  list  remote peers. It returns  list  `HMSPeer` objects as:  ```dart Future<List<HMSPeer>?> getRemotePeers() async {     //returns null    joined  room     return await hmsSDK.getRemotePeers(); }  ```  ### getPeers  This method returns   peers   room.  ```dart Future<List<HMSPeer>?> getPeers() async {     //returns null    joined  room     return await hmsSDK.getPeers(); }  ```  ### getAudioDevicesList  This  used  get  list  available audio devices. This returns  list  `HMSAudioDevice` as:  ```dart Future<List<HMSAudioDevice>> getAudioDevicesList() async {     return await hmsSDK.getAudioDevicesList(); } ```   ### getCurrentAudioDevice  This  used  get  currently selected audio device. This returns  object  `HMSAudioDevice` as:  ```dart Future<HMSAudioDevice> getCurrentAudioDevice() async {     return await hmsSDK.getCurrentAudioDevice(); } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/get-methods"
    },
    {
        "title": "network-quality-reports.mdx",
        "link": "/flutter/v2/advanced-features/network-quality-reports",
        "keywords": [],
        "headings": [
            "Requesting/Reading a Network Quality Update in Preview",
            "In Preview",
            "In Room",
            "Interpreting the Values"
        ],
        "content": "---\r title: Network Quality Reports\r nav: 4.3\r ---\r \r ![Network Icons](https://www.100ms.live/docs/docs/v2/network-icons.png)\r \r Video/Audio conferencing   nature  data intensive operation. The 100ms SDK attempts  stabilize connections especially  subscribe degradation  turned    template   possible  really bad connections  users will still  problems.\r \r It can  helpful  measure  user's connection speed  joining  room  order  set expectations  decide    join  video  etc.\r \r The 100ms SDK provides  way  measure  user's downlink speed   preview screen.\r \r > ⚠️ The downlink speed  measured    user download  file (1mb    writing)   websocket connection  established   preview.\r \r The download will  continued     fixed number  seconds (eg: 10 seconds)   speed   interval  calculated. The entire file may   downloaded   exceeds  timeout.\r \r DNS time   counted  this,  throughput  measured.\r \r ## Requesting/Reading  Network Quality Update  Preview\r When creating  `HMSConfig` object  request  preview, set  `captureNetworkQualityInPreview`  `true`  measure  user's downlink network quality.\r \r When available,  information will  returned  `onPeerUpdate`   `HMSPreviewListener`  `HMSUpdateListener`   update type `HMSPeerUpdate.networkQualityUpdated`. It can  retrieved    `HMSPeer` object's `networkQuality` property.\r \r \r ```dart\r \r void requestPreviewWithNetworkQuality(String authToken,String metadata,HMSPreviewListener previewListener) {\r \r     bool requestNetworkQuality = true;\r     hmsSDK = HMSSDK();\r     HMSConfig config = HMSConfig(\r             \"Name\",\r             authToken,\r             metadata,\r             requestNetworkQuality\r     );\r \r     hmsSDK.preview(config);\r     hmsSDK.addPreviewListener(previewListener);\r }\r ```\r \r \r \r Here's  class definition  `HMSNetworkQuality`,    property   `HMSPeer`.\r \r ```dart\r class HMSNetworkQuality(\r     int quality;\r )\r ```\r \r ## In Preview\r \r you can find  updates  onPeerUpdate callback  `HMSPreviewListener`\r \r ```dart\r \r @override\r void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update}) {\r      (update == HMSPeerUpdate.networkQualityUpdated) {\r       print(\"Network Quality  Preview ${peer.networkQuality?.quality}\");\r     }\r   }\r \r ```\r \r ## In Room\r \r you can find  updates  onPeerUpdate callback  `HMSUpdateListener`\r \r ```dart\r \r @override\r void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update}) {\r      (update == HMSPeerUpdate.networkQualityUpdated) {\r       print(\"Network Quality  Room  ${peer.networkQuality?.quality}\");\r     }\r   }\r \r ```\r \r \r \r \r ## Interpreting  Values\r `peer.networkQuality?.quality` will   value  -1  5.\r - -1 -> Test timeout.\r - 0 -> Very bad network  network check failure.\r - 1 -> Poor network.\r - 2 -> Bad network.\r - 3 -> Average.\r - 4 -> Good.\r - 5 -> Best.\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/network-quality-reports"
    },
    {
        "title": "peer-metadata-update.mdx",
        "link": "/flutter/v2/advanced-features/peer-metadata-update",
        "keywords": [],
        "headings": ["Reading metadata", "Responding to updates", "Updating Metadata"],
        "content": "---\r title: Peer Metadata Update\r nav: 4.2\r ---\r \r Looking  persistent state  can  set   peer  updated anytime,  everyone   room? Peer metadata  it.\r \r Metadata can  set initially   `HMSConfig` object  passed   join method.\r \r This section will show   to:\r 1. [Read Peer Metadata](#reading-metadata).\r 2. [Respond    remote peer changes  metadata](#responding-to-updates).\r 3. [How  set  peer's metadata](#updating-metadata).\r \r The `HMSPeer` object prior  2.2.1 contained `customerDescription`  read-only string whose value  change throughout  call. This   replaced  `metadata`. The value  initially assigned    now can  changed   peer  owns it.\r \r Any peer can change  metadata  themselves. Currently one peer  change another peer's metadata.\r \r To change   metadata value  peer  call `changeMetadata`   `HMSSDK` instance.\r \r The data may   arbitrary string though    changed  null.\r \r ## Reading metadata\r \r To read metadata, read  `metadata` value   `HMSPeer` instance.\r \r ## Responding  updates\r \r Whenever  remote peer's metadata  updated  callback will  received  `onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update})`  `HMSUpdateListener`   `update` value will   type `HMSPeerUpdate.metadataChanged`.\r \r When  callback  received  UI   peer   updated  well.\r \r ## Updating Metadata\r \r Here    peer can set   metadata   random string. In  case  string  stringified json.\r \r \r ```dart\r // String newMetadata = \"{\\\"ms\\\": 100 }\"\r void changeMetadata(\r       {required String metadata,\r       required HMSActionResultListener hmsActionResultListener}) {\r     hmsSDK.changeMetadata(\r         metadata: metadata, hmsActionResultListener: hmsActionResultListener);\r   }\r ```\r \r \r \r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/peer-metadata-update"
    },
    {
        "title": "pip-mode.mdx",
        "link": "/flutter/v2/advanced-features/pip-mode",
        "keywords": [],
        "headings": ["Minimum Requirements", "How to add PiP support", "Checkout PIP in Action"],
        "content": "--- title: PIP Mode nav: 4.9 ---  100ms Flutter SDK provides support  creating Picture  Picture mode experience  video calls.  PIP Mode lets  user watch  room video   small window pinned   corner   screen  navigating  apps  browsing content   main screen.  Currently  functionality   available  Android.  ## Minimum Requirements  - Minimum version required  support PiP  Android 8.0 (API level 26) - Minimum `hmssdk_flutter` SDK version required  1.0.0 - To know   PIP features minimum version requirements please check [Picture-in-picture (PiP) support](https://developer.android.com/develop/ui/views/picture-in-picture)  ### How  add PiP support  1. You need  update  activity tag   `AndroidManifest.xml`  ```xml <activity     ....     android:supportsPictureInPicture=\"true\"     android:configChanges=\"screenSize|smallestScreenSize|screenLayout|orientation\"     ... /> ```  2. PIP mode  works  Android API Level 26(Android 8.0)   check whether  current device supports PIP mode   `isPipAvailable` method can  used:  ```dart hmsSDK.isPipAvailable(); ```  3. To show PIP mode   application:  ```dart // enterPipMode   Future<bool> function  true indicates   application  entered pip mode successfully. hmsSDK.enterPipMode(autoEnterPip: true/false, aspectRatio: [16, 9]); ``` 4. To check whether PIP mode  currently active use `isPipActive` method as:  ```dart hmsSDK.isPipActive(); ```  > To display UI according  PIP use  `isPipActive`  set  state  PIP mode  render  UI accordingly.  ### Checkout PIP  Action  How PIP mode  implemented   example app. Checkout here:   <video controls>   <source src=\"https://user-images.githubusercontent.com/93931528/205587304-772a5dd6-ed64-4d9e-8bb5-4fc3eed83bea.mp4 \" type=\"video/mp4\" />   Your browser   support  video tag. </video>   You can checkout  100ms Flutter SDK Github repository  also contains  PIP implementation. [Example app implementation here](https://github.com/100mslive/100ms-flutter/tree/main/example).   ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/pip-mode"
    },
    {
        "title": "set-track-settings.mdx",
        "link": "/flutter/v2/advanced-features/set-track-settings",
        "keywords": [],
        "headings": [
            "For the Audio track we can set the following properties :",
            "For the Video track we can set the following properties : ",
            "How to add track settings while initializing HMSSDK "
        ],
        "content": "--- title: Set Track Settings nav: 4.01 ---  Sometimes   required  customize local peer's Audio & Video track settings  creating instances  100ms SDK.  These settings  optional parameters   meant   passed   `HMSSDK` function   `hmsTrackSetting` parameter    `HMSTrackSettings` object.  ### For  Audio track  can set  following properties :  - `useHardwareAcousticEchoCanceler` - Property  enable Hardware echo cancellation. By default,  set  `true`   device supports it.   Please note    devices  hardware wrongly reports  HW echo canceler   present whereas    work   In  cases,  application needs  set   `false`,   SW echo canceler  picked up - `audioSource` - Property  configure audio nodes mainly used  iOS  audio sharing. - `trackInitialState` - Property  set  initial state   audio track i.e Mute/Unmute.More info   can  found [here](../features/join-with-muted-audio-video)  ## For  Video track  can set  following properties :   - `cameraFacing` - Property specifies  camera  open  joining. It can  toggled later on. The default value  `HMSCameraFacing.FRONT`.  ```dart HMSCameraFacing.FRONT HMSCameraFacing.BACK ```  - `disableAutoResize` - Property  disable auto-resizing. - `trackInitialState` - Property  set  initial state   video track i.e Mute/Unmute.More info   can  found [here](../features/join-with-muted-audio-video) - `forceSoftwareDecoder` - Property  use software decoder. By default  set  `false`.(Android Only)  ## How  add track settings  initializing HMSSDK   Here's  sample implementation  adding track settings  initializing 100ms SDK -  ```dart   HMSAudioTrackSetting audioTrackSetting = HMSAudioTrackSetting(     useHardwareAcousticEchoCanceler: false,     trackInitialState: HMSTrackInitState.UNMUTED   );     HMSVideoTrackSetting videoTrackSetting = HMSVideoTrackSetting(                                    cameraFacing: HMSCameraFacing.FRONT,     trackInitialState: HMSTrackInitState.UNMUTED   );    HMSTrackSettings trackSettings = HMSTrackSetting(       audioTrackSetting: audioTrackSetting,       videoTrackSetting: videoTrackSetting     );  HMSSDK hmsSDK = HMSSDK(hmsTrackSetting: trackSettings); ```  You can fetch  track Settings using  method   build method  called  follows -  ```dart HMSTrackSettings trackSettings = hmsSDK.getTrackSettings(); ```  ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/set-track-settings"
    },
    {
        "title": "set-volume.mdx",
        "link": "/flutter/v2/advanced-features/set-volume",
        "keywords": [],
        "headings": ["Ways to set volume on audio tracks"],
        "content": "--- title: Set Volume nav: 4.6 ---  Sometime  calls  need  deafen  turn   particular peer's volume,thus set volume comes  rescue. It allows   vary  volume level   remote peer's audio track. The change  volume level   effective locally,remote peers remain unaffected.  It can   called  remote audio tracks.  >Volume can vary  0(min)  10(max). The default value  volume   1.0.  ```dart     HMSRemoteAudioTrack remoteAudioTrack;     remoteAudioTrack.setVolume(double volume); ```  ## Ways  set volume  audio tracks  1. Set volume  track  added   ```dart   @override   void onTrackUpdate(       {required HMSTrack track,       required HMSTrackUpdate trackUpdate,       required HMSPeer peer}) {          if(trackUpdate === HMSTrackUpdate.TRACK_ADDED && track.kind == HMSTrackKind.kHMSTrackKindAudio && peer.isLocal === false){             track.setVolume(\"set  required volume\");         } } ```  2. Set volume  particular peer  > On UI  can  rendered   slider  set  volume  0-10  passing    `setVolume` method  `HMSRemoteAudioTrack`.   ```dart void setVolume(HMSRemoteAudioTrack track,double volume){     track.setVolume(volume) } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/set-volume"
    },
    {
        "title": "show-audio-level.mdx",
        "link": "/flutter/v2/advanced-features/show-audio-level",
        "keywords": [],
        "headings": [
            "Getting Audio Levels for all speaking peers",
            "Active Speaker Views",
            "Dominant Speaker - the loudest speaker."
        ],
        "content": "---\r title: Show Audio Levels\r nav: 4.1\r ---\r \r ## Getting Audio Levels   speaking peers\r \r ```dart\r import 'package:hmssdk_flutter/hmssdk_flutter.dart';\r \r void onUpdateSpeakers({required List<HMSSpeaker> updateSpeakers}){\r   // This  called every 1 second  list  active speakers\r }\r \r ```\r \r Here   properties   HMSSpeaker class:\r \r 1. audioLevel : int -> The level   audio. It may vary  0-100. A higher value indicates  higher speaking volume.\r 2. track : HMSTrack -> The audio track corresponding   speaker. It may  null   speaker   speaking loudly, leaves.\r 3. peer : HMSPeer -> The peer   speaking. This may  null   peer  left   update information  reached   person.\r \r \r \r ## Active Speaker Views\r To maintain  active speaker view,    default view   open source advanced sample app,  need  keep track    active\r speakers   time. We'll  using  input  `onUpdateSpeakers` listener update  mentioned    building something  attempts  show all\r the active speakers  minimizing re-ordering  list.\r \r \r \r ## Dominant Speaker -  loudest speaker.\r The dominant speaker   speaker   loudest   given moment. There's  callback     onPeerUpdate callback  HMSUpdateListener.\r \r \r Here's  method signature  onPeerUpdate: `void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update})`\r \r \r When  dominant speaker  changed,  will  updates   type:\r \r `HMSPeerUpdate.becameDominantSpeaker` When  new person becomes  dominant speaker.\r \r `HMSPeerUpdate.noDominantSpeaker` When  current dominant speaker stops talking    one  replace them.\r \r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/show-audio-level"
    },
    {
        "title": "strict-privacy-applications.mdx",
        "link": "/flutter/v2/advanced-features/strict-privacy-applications",
        "keywords": [],
        "headings": ["Steps to create a strict privacy application:"],
        "content": "--- title: Strict Privacy Applications nav: 4.5 ---  Strict Privacy Applications   applications  ask  permissions  &  required thus following something similar  principle  least privilege.  ## Steps  create  strict privacy application:  1. Join   role without video permissions.  Create three roles  permissions as:  - Host   ![host](/docs/v2/flutter-host.png)  - Guest  ![guest](/docs/v2/flutter-guest.png)  - Viewer  ![viewer](/docs/v2/flutter-viewer.png)  > These roles  just  examples. User can create   roles based  use cases.  2. If role  user  changed   role   audio-video publishing permission  ask  permissions as:  ```dart @override void onRoleChangeRequest({required HMSRoleChangeRequest roleChangeRequest}) {     if(roleChangeRequest.suggestedRole.publishSettings?.allowed.contains(\"video\")??false){         //if video permissions   available         await Permission.camera.request();     }     if(roleChangeRequest.suggestedRole.publishSettings?.allowed.contains(\"audio\")??false){         //if audio permissions   available         await Permission.microphone.request();         //if bluetooth permissions   available         await Permission.bluetoothConnect.request();     }      //if  application  required permissions     hmsSDK.acceptChangeRole(roleChangeRequest); } ```  > This  applicable   user asks  permission  changing role. In case  force role change >  application  required   permissions   role change. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/advanced-features/strict-privacy-applications"
    },
    {
        "title": "release-notes.mdx",
        "link": "/flutter/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "1.1.0 - 2022-12-17",
            "Added",
            "Deprecated",
            "Fixed",
            "1.0.0 - 2022-12-09",
            "Added",
            "Fixed",
            "0.7.8 - 2022-10-31",
            "0.7.7 - 2022-10-20",
            "0.7.6 - 2022-09-23",
            "0.7.5 - 2022-08-18",
            "0.7.4 - 2022-07-29",
            "Added",
            "Fixed",
            "Changed ",
            "0.7.3 - 2022-06-23",
            "0.7.2 - 2022-06-02",
            "0.7.1 - 2022-05-20",
            "0.7.0 - 2022-04-19",
            "Added",
            "Fixed",
            "0.6.0 - 2022-01-25",
            "Breaking Change ",
            "Added",
            "Changed",
            "0.5.0 - 2022-01-15",
            "Breaking Change ",
            "Added ",
            "Changed",
            "Fixed ",
            "0.4.1 - 2021-12-03",
            "0.4.0 - 2021-10-22",
            "0.3.0 - 2021-10-14",
            "0.2.0 - 2021-10-07",
            "0.1.0 - 2021-08-17"
        ],
        "content": "--- title: Release Notes nav: 99 ---  ## 1.1.0 - 2022-12-17  ### Added  - Added support  Bulk Role Change     Bulk Role Change  used   want  convert  Roles   list  Roles,  another Role.    For example,  peers join  room   _Waiting_ Role  now  want  change   peers  _Viewer_ Role  use  `changeRoleOfPeersWithRoles` API.    ```dart   // fetch  available Roles   room   List<HMSRole> roles = await hmsSDK.getRoles();    // get  Host Role object   HMSRole toHostRole = roles.firstWhere((element) => element.name == \"host\");    // get list  Roles   updated -   case \"Waiting\"  \"Guest\" Roles   roles.retainWhere((element) => ((element.name == \"waiting\") || (element.name == \"guest\")));    // now perform Role Change   peers  \"Waiting\"  \"Guest\" Roles   \"Host\" Role   hmsSDK.changeRoleOfPeersWithRoles(       toRole: toHostRole,       ofRoles: roles,       hmsActionResultListener: hmsActionResultListener);   ```    For More Information, refer: https://www.100ms.live/docs/flutter/v2/features/change-role  - Added Switch Audio Output APIs  iOS    Audio Output Routing  helpful  users want  switch output   connected device    default one.     ```dart   hmsSDK.switchAudioOutput(audioDevice: HMSAudioDevice.SPEAKER_PHONE);   ```   For More Information, refer: https://www.100ms.live/docs/flutter/v2/features/audio-output-routing   ### Deprecated  - Deprecated `changeRole` API  favour  `changeRoleOfPeer`    No change  functionality  method signature.   ### Fixed  - Microphone  getting captured  Role Change   non-publishing  publishing Role  iOS - Corrected  issue   iOS  default Audio Mixer  getting created  Track Settings  passed  building  HMSSDK instance   Updated  Native Android SDK 2.5.4 & Native iOS SDK 0.5.3  Full Changelog: [1.0.0...1.1.0](https://github.com/100mslive/100ms-flutter/compare/1.0.0...1.1.0)   ## 1.0.0 - 2022-12-09  ### Added  - Added support  Picture  Picture mode  Android      PIP Mode lets  user watch  room video   small window pinned   corner   screen  navigating  apps  browsing content   main screen.      Example implementation  checking device support & enabling PIP mode:     ```dart     //  start PIP mode invoke  `enterPipMode` function,  parameters passed    optional     hmsSDK.enterPipMode(aspectRatio: [16, 9], autoEnterPip: true);      // method  check whether PIP mode  available  current device     bool isPipAvailable = await hmsSDK.isPipAvailable();      // method  check whether PIP mode  active currently     bool isPipActive = await hmsSDK.isPipActive();     ```  - Added `roomPeerCountUpdated` type  `HMSRoomUpdate`  - Added `isPlaybackAllowed`  Remote Audio & Video Tracks  check   track  allowed   played locally  - Added convenience APIs  Mute / Unmute Audio  Video   entire room locally   ### Fixed  - Corrected parsing  `HMSMessage` objects sent Server-side APIs - Session Metadata can now  reset   null value - Importing Native Android SDK dependency  Maven Central instead  Jitpack - HMSTrackSettings  now nullable  building  HMSSDK object - Corrected usage  Native Util functions  fetch Audio & Video tracks  - Corrected default local audio track settings  iOS devices - Corrected sending  peer count  `HMSRoom` instance  iOS  Updated  Native Android SDK 2.5.1 & Native iOS SDK 0.4.7  Full Changelog: [0.7.8...1.0.0](https://github.com/100mslive/100ms-flutter/compare/0.7.8...1.0.0)    ## 0.7.8 - 2022-10-31  - Added support  Joining  Muted Audio & Video  iOS devices - Added Maven Central repository  look  Android dependencies - Added support  receiving Server-side `HMSMessage` - Added `HMSLogSettings`  configure Native Android SDK logs - Corrected setters  local audio/video track settings  building  `HMSSDK` object - Updated  Native Android SDK 2.5.1 & Native iOS SDK 0.4.6  Full Changelog: [0.7.7...0.7.8](https://github.com/100mslive/100ms-flutter/compare/0.7.7...0.7.8)    ## 0.7.7 - 2022-10-20  - Added ability  set & get session metadata - Added ability  join  muted audio & video using Initial states (Muted / Unmuted) `HMSVideoTrackSettings` & `HMSAudioTrackSettings`   builder  HMSSDK - Added better Telemetrics  analytics - Added option  use Software Decoder  Video rendering  Android devices - Added action result listener  `switchCamera` function  local video track - Fixed LetterBoxing (Black borders  top  bottom) observed  sharing  screen  landscape mode  Android - Fixed incorrect sending  Speaker Updates  peer  left  room - Removed unused setters  Local Audio & Video Track Settings - Updated  Native Android SDK 2.5.0 & Native iOS SDK 0.4.5  Full Changelog: [0.7.6...0.7.7](https://github.com/100mslive/100ms-flutter/compare/0.7.6...0.7.7)    ## 0.7.6 - 2022-09-23  - Added audio output change listener callback   Preview  Android - Added API  show Native Audio Output Picker  iOS - Corrected  issue  audio  always coming   Earpiece instead  Built-In Speaker  iOS - Fixed  issue  audio gets distorted  headset  used  sharing audio playing  iOS - Updated `HMSException` class. Added `canRetry` attribute   Full Changelog: [0.7.6...0.7.5](https://github.com/100mslive/100ms-flutter/compare/0.7.5...0.7.6)   ## 0.7.5 - 2022-08-18  - Added support  iOS  sharing audio  local files   device &   audio playing apps - Added ability  apply local peer track settings  initializing HMSSDK - Added APIs  fetch local peer track settings - Fixed  issue  exiting  Preview without joining room   releasing camera access - Added `destroy` API  cleanup Native HMSSDK instance correctly - Disabled Hardware Scaler  Android  correct intermittent Video tile flickering  - Updated  Native Android SDK 2.4.8 & Native iOS SDK 0.3.3   ## 0.7.4 - 2022-07-29  #### Added - Added APIs  stream device audio  different modes - Added  APIs  view  change  output speaker selected   SDK  playout - setAudioMode API  change  Audio  mode manually  in-call volume  media volume   #### Fixed - Calling `switchCamera` API leads  triggering  onSuccess callback twice - onRoomUpdate  type `HMSRoomUpdate.ROOM_PEER_COUNT_UPDATED`  getting called  peer count changes   room - Peer  able  publish tracks  updated  WebRTC  HLS  rejoins   reconnection  WebRTC Mode  #### Changed  - `HMSHLSConfig`  now  optional parameter  calling startHLSStreaming  stopHLSStreaming - The `meetingUrl` parameter  optional  creating  `HMSHLSMeetingURLVariant` instance  HMSHLSConfig. If nothing  provided HMS system will take  default meetingUrl  starting HLS stream - changeRoleForce permission  HMSRole  now removed   longer used - recording permission  HMSRole  now broken  - `browserRecording`  `rtmpStreaming` - streaming permission  HMSRole  now `hlsStreaming`   ## 0.7.3 - 2022-06-23  - Added support  iOS Screen-share - Added HMSHLSRecordingConfig  perform recording  HLS Streaming - Updated error callback  HMSUpdateListener  onHMSError - Updated  Native Android SDK 2.4.2 & Native iOS SDK 0.3.1   ## 0.7.2 - 2022-06-02  - Segregated RTC Stats update notifications  `HMSUpdateListener`  `HMSStatsListener` - Removed `room_peer_count_updated`  `HMSRoomUpdate` enum - Added `sessionId`   `HMSRoom` class - Updated  Native Android SDK 2.3.9 & Native iOS SDK 0.3.1  ## 0.7.1 - 2022-05-20  - Added RTC Stats Listener  provides info  local & remote peer's audio/video quality - Improved video rendering performance  Android devices - Correct RTMP Streaming & Recording configuration settings - Added support  Server-side Subscribe Degradation - Updated  Native Android SDK 2.3.9 & Native iOS SDK 0.2.13   ## 0.7.0 - 2022-04-19  #### Added  - Network Quality  preview. Network quality reports can now  requested   preview screen. Use  returned value  determine    suggest people's internet   slow  join  video etc.  - Network Quality  calls. Peer Network Quality updates  now received   call. Use   show  strong  peer's internet    call.  - Added HLS Recording  initial PeerList  - `onPeerUpdate`  `onRoomUpdate` callbacks  'HMSPreviewListener'  get info   room  Preview screen  - Added `startedAt`  `stoppedAt` field  Browser  SFU recording  #### Fixed  - Error Analytics events   sent  - Leave  finishing  SDK   reconnection state. Hence  join calls    getting queued   called    HMSSDK instance  - Improved subscribe degradation   new add sinks  handled properly  SDK  already  degraded state  - Crash fix  starting/stopping HLS  HlsStartRecording  null  - HLS recording status  always updated  stopped  - Rare crash  cameras  unavailable   seemed   app like none exist  - Updated  Native Android SDK 2.3.4 & Native iOS SDK 0.2.9   ## 0.6.0 - 2022-01-25 #### Breaking Change  - Updated Change Role APIs argument types - Changed Messaging APIs argument types - Updated argument types  `changeTrackState`, `changeRole`, `acceptRoleChange`, `changeTrackStateForRoles` APIs  #### Added - Added HLS Support. Now  can Start/Stop HLS Streaming  Flutter SDK - Added support   ScreenShare  Android device  #### Changed - Updated callbacks  Permission based action APIs  ## 0.5.0 - 2022-01-15 #### Breaking Change  - Renamed SDK Public interface  `HMSSDK` class - Updated HMSConfig object   used  join  room  #### Added  - Added APIs  change remote track status - Added APIs  start/stop Recording - Added APIs  change metadata  local peer  can  used  implement raise hand functionality - Added API  change name  local peer - Added API  get current room status - Added API  get peer audio/video status - Added new Group & Direct Peer Messaging APIs - Added volume setter & getter APIs  audio tracks - Added Action Result Listeners  notify success  failure  API invocations  #### Changed - Updated `HMSException` object  `isTerminal`  - Changed `sendMessage` API  `sendBroadcastMessage`  send  message   peers  room - Changed `HMSMessageResultListener`  `HMSActionResultListener`  Messaging APIs - Video Rendering flow  Android & iOS video tracks - Preview API implementation  #### Fixed  - Reconnection issues wherein even  network recovered, peer   rejoin  room  - Cleaning  config object whenever room  joined/left  ## 0.4.1 - 2021-12-03 - Added matchParent boolean  video view   ## 0.4.0 - 2021-10-22 - Updated Messaging APIs - Added audio level, peer & track object  HMSSpeaker - Updated track source type  string - Updated sample app   ## 0.3.0 - 2021-10-14 - Corrected crash  using getLocalPeer - Updated sample app   ## 0.2.0 - 2021-10-07  This version  100ms Flutter SDK comes loaded  bunch  features & improvements like -  - Improved low network performance - Added Active Speaker listener - Resolved build conflicts  iOS - Added APIs  Change Role   Peer - Added APIs  Mute Audio/Video   Remote Peer - Added APIs  End  Room - Updated Chat Messaging APIs  enable Broadcast, Group & Personal - Improved Reconnection  network switch/loss - Improved Interruption Handling   Meeting  ongoing  ## 0.1.0 - 2021-08-17  The first version  100ms Flutter SDK comes power-packed  support  multiple features like -  - Join/Leave Rooms - Mute / Unmute Audio / Video - Switch Camera - Chat - Preview Screen - Change Role - Network Switch Support - Subscribe Degradation  bad network scenarios - Error Handling  much more.  Take    spin! 🥳 ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/changelog/release-notes"
    },
    {
        "title": "faq.mdx",
        "link": "/flutter/v2/debugging/faq",
        "keywords": [],
        "headings": [
            "Flutter version compatibility",
            "Not getting event updates after hot reload/restart",
            "Issues while using `hmssdk_flutter` with flutter 3.0.x",
            "Is there any limit to the number of HMSVideoView on-screen at a time ",
            "Do you have any implementation with popular State Management libraries -",
            "Not able to get room updates after joining the room",
            "Join room with muted audio/video ",
            "Get `onPeerUpdate` in preview",
            "Getting updates multiple times in the room",
            "Can I create a room using API?",
            "Screenshare not working in the background on iOS?",
            "Receiving too many logs from SDK ",
            "I want to suggest a new feature."
        ],
        "content": "--- title: Frequently Asked Questions nav: 5.1 ---  This page lists  frequently asked questions. If  want  add  new question  edit  older one, feel free to [send us  PR](https://github.com/100mslive/100ms-docs/blob/main/docs/flutter/v2/debugging/faq.mdx).  ## Flutter version compatibility HMSSDK works  flutter 2.10.x  above.  ## Not getting event updates  hot reload/restart This  caused   platform channel needs   reinitialized again, hence   intended behaviour. The solution     re-run  app.  Practices  faster development :  * Perform  intended changes. * Leave  room. * Perform hot reload/restart  rejoin  room. * Verify  changes.  The permanent solution     pipeline,  will update   done.  ## Issues  using `hmssdk_flutter`  flutter 3.0.x Flutter versions 3.0.0  3.0.5  issues related  Platform View.  Refer: [Android Platform View issue](https://github.com/flutter/flutter/issues/107313) & [Flutter Platform View bug](https://github.com/flutter/flutter/issues/103630)  These  resolved  Flutter versions 3.3.0 & above. Please update  Flutter version  3.3.0  above.   ## Is   limit   number  HMSVideoView on-screen   time   `HMSVideoView` internally uses `SurfaceView`  android  `UiKitView`  iOS. It  recommended  render   3  4 videos   Single page/screen   app  rest   paginated  optimum performance.  ## Do    implementation  popular State Management libraries - Please find  implementations below: * [Provider](https://github.com/100mslive/100ms-flutter/tree/main/example) * [Bloc](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/bloc) * [Getx](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/getx) * [Mobx](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/mobx) * [Riverpod](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/riverpod)  ## Not able  get room updates  joining  room To listen   room updates please attach `HMSUpdateListener` as: ```dart hmsSDK.addUpdateListener(updateListener); ``` You can find  details  HMSUpdateListener [here](../features/update-listeners)  ## Join room  muted audio/video  User can join  room  muted audio/video  default.Please find  docs [here](../features/join-with-muted-audio-video)  ## Get `onPeerUpdate`  preview User can get `onPeerUpdate`  preview  docs can  found [here](../features/preview#get-on-peer-update-and-room-state-in-preview)  ## Getting updates multiple times   room Please ensure removing  `HMSUpdateListener`  leaving  room. ```dart hmsSDK.removeUpdateListener(updateListener); ``` You can find  details  HMSUpdateListener [here](../features/update-listeners)  ## Can I create  room using API? Yes,please find  link [here](/server-side/v2/Rooms/create-via-api)  ## Screenshare  working   background  iOS? On iOS 16,   start Screenshare   iPhone/iPad running iOS 16 version,    app   foreground  Screenshare will work fine. But   start Screenshare & background  app,  Screenshare pauses   SDK  unable  send video frames using IPC. This results   peers  room seeing stuck frame. We  actively working  resolve  issue. On iOS 15  below,  issue   exists.   Note  viewing Screenshare  iOS 16 devices  unaffected   & works fine.  ## Receiving  many logs  SDK  Logs can  turned OFF using  `hmsLogSettings` parameter  `HMSSDK`.More info   can  found [here](../features/error-handling#setting-log-levels-in-sdk)   ## I want  suggest  new feature. Awesome,  always looking   new ideas  features. Please reach   us  [discord](https://100ms.live/discord)  ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/debugging/faq"
    },
    {
        "title": "action-result-listeners.mdx",
        "link": "/flutter/v2/features/action-result-listeners",
        "keywords": [],
        "headings": ["HMSActionResultListenerMethod"],
        "content": "--- title: Action Result Listeners nav: 3.24 ---  Whenever  instance  `HMSActionResultListener`  passed   method   status i.e whether  succeeded  failed  can  listened using HMSActionResultListener's `onSuccess` & `onException` callbacks respectively.   > `HMSActionResultListener`   implemented   class  HMSActionResultListener methods  called.  ```dart abstract class HMSActionResultListener {   void onSuccess(       {HMSActionResultListenerMethod methodType,       Map<String, dynamic>? arguments});    void onException(       {HMSActionResultListenerMethod methodType,       Map<String, dynamic>? arguments,       required HMSException hmsException}); } ```  > 💡 `HMSActionResultListener` : A class conforming  HMSActionResultListener interface. The methods  HMSActionResultListener  invoked  notify  status   api's whether  failed  succedded.  ## HMSActionResultListenerMethod  `HMSActionResultListenerMethod`   enum  can  used  segregate  `HMSActionResultListener` method type.  ```dart enum HMSActionResultListenerMethod {   leave,   changeTrackState,   changeMetadata,   endRoom,   removePeer,   acceptChangeRole,   changeRole,   changeTrackStateForRole,   startRtmpOrRecording,   stopRtmpAndRecording,   changeName,   sendBroadcastMessage,   sendGroupMessage,   sendDirectMessage,   hlsStreamingStarted,   hlsStreamingStopped,   startScreenShare,   stopScreenShare,   startAudioShare,   stopAudioShare,     //default case   unknown } ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/action-result-listeners"
    },
    {
        "title": "audio-output-routing.mdx",
        "link": "/flutter/v2/features/audio-output-routing",
        "keywords": [],
        "headings": [
            "Fetch Available Audio Device",
            "Android",
            "iOS",
            "Switch Audio Focus to Another Device",
            "Adding Audio Device Change Event Listener (Android Only)",
            "Get Current Focussed Device (Android Only)"
        ],
        "content": "---\r title: Audio Output Routing\r nav: 3.21\r ---\r \r Audio Output Routing  helpful  users wants  switch output   connected device    default one.\r \r For example,  can implement  in-call speaker button  toggles audio output  speaker, earpiece    connected earphones - wired  wireless, etc.\r \r ## Fetch Available Audio Device\r \r Invoke  `getAudioDevicesList` method  fetch  available audio device list. The method return  list  `HMSAudioDevice` enum.\r \r ```dart\r List<HMSAudioDevice> availableDevices = await hmsSDK.getAudioDevicesList();\r \r \r enum HMSAudioDevice {\r   SPEAKER_PHONE,\r   EARPIECE,\r   WIRED_HEADSET, // Android only\r   BLUETOOTH, // Android only\r   AUTOMATIC, // Android only\r   UNKNOWN\r }\r ```\r \r The `getAudioDevicesList` API returns different values based  Android & iOS platform. Following `HMSAudioDevice` values  can get  `getAudioDevicesList()`:\r \r ### Android\r * SPEAKER_PHONE   - route audio  device speaker\r * EARPIECE  - route audio  device earpiece\r * WIRED_HEADSET     - route audio  connected wired device\r * BLUETOOTH - route audio  connected bluetooth device\r * AUTOMATIC - automatic routing\r \r ### iOS\r * SPEAKER_PHONE   - route audio  device speaker\r * EARPIECE  - route audio  device earpiece\r \r \r ## Switch Audio Focus  Another Device\r \r Invoke  `switchAudioOutput` method  appropriate `HMSAudioDevice` value fetched  `getAudioDevicesList`  switch  audio output   device.\r \r \r The `audioDevice`   required [HMSAudioDevice] parameter   audio output   routed.\r \r ```dart\r hmsSDK.switchAudioOutput(audioDevice: audioDevice);\r ```\r \r ## Adding Audio Device Change Event Listener (Android Only)\r \r Implementing  `onAudioDeviceChanged` listener allows   get event updates   new audio device gets connected   device   Bluetooth, Wired Headset etc. \r This method needs   overriden   class  `HMSUpdateListener`  implemented.\r \r Note   event  available   Android platform.\r \r \r ```dart\r @override\r void onAudioDeviceChanged(\r   {HMSAudioDevice? currentAudioDevice,\r   List<HMSAudioDevice>? availableAudioDevice}) {\r   \r     // currentAudioDevice : audio device   audio  curently  routed to\r     // availableAudioDevice :   available audio devices\r }\r ```\r \r ## Get Current Focussed Device (Android Only)\r \r The `getCurrentAudioDevice` method allows   get  device   audio output  currently  routed to.\r \r \r Note   event  available   Android platform.\r \r ```dart\r HMSAudioDevice currentAudioDevice = await hmsSDK.getCurrentAudioDevice();\r ```\r \r \r \r \r > Note: `onAudioDeviceChanged` listener  `getCurrentAudioDevice` methods  available   Android platform.\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/audio-output-routing"
    },
    {
        "title": "audio_sharing.mdx",
        "link": "/flutter/v2/features/audio_sharing",
        "keywords": [],
        "headings": [
            "Android Setup",
            "How does audio share work in android",
            "How to stream device audio from the app",
            "How to change mode",
            "How to stop audio sharing",
            "iOS Setup",
            "How audio sharing works in iOS",
            "How to use hmssdk to share audio from a file",
            "How to change mix volume of different nodes",
            "How to schedule multiple audio files for back-to-back playback",
            "How to play multiple files concurrently",
            "How to pause, resume, stop playback and more",
            "How to share audio that's playing on your iPhone"
        ],
        "content": "--- title: Audio Share (Beta) nav: 3.19 ---  >    This feature  still  Beta. To know   report  issues, feel free  reach   us >     [Discord](https://discord.com/invite/kGdmszyzq2).   This feature   analog  screen capture,   audio. There may  cases   application needs  stream music   either stored   device locally     app present   device   room   peer  joined.  Examples   use cases can   FM like application   host  want  stream music  also interacting  others   room   host   gaming app   want  stream music   device   room along   regular audio track.  ## Android Setup  -  The Audio share option currently available  Android 10  above.  ## How  audio share work  android 100ms SDK uses  [MediaProjection](https://developer.android.com/guide/topics/media/av-capture#capture_audio_playback) APIs  Android  capture  device audio  stream  along   user's regular audio track. To achieve  SDK starts  foreground service and starts capturing  device audio  muxes  bytes   data collected  mic,    stream contains  system music  mic data.  This API gives apps  ability  copy  audio  played   apps   set  usage to  USAGE_MEDIA, USAGE_GAME,  USAGE_UNKNOWN. (Audio  apps like youtube etc can  captured)  Following   snippet    use this:  You also need  pass  intent  android native side  HMSSDK   following way :  In  app's `MainActivity` add -  ```kotlin import live.hms.hmssdk_flutter.HmssdkFlutterPlugin import android.app.Activity import android.content.Intent import live.hms.hmssdk_flutter.Constants  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) { super.onActivityResult(requestCode, resultCode, data)       (requestCode == Constants.AUDIO_SHARE_INTENT_REQUEST_CODE && resultCode == Activity.RESULT_OK){         HmssdkFlutterPlugin.hmssdkFlutterPlugin?.requestAudioShare(data)     }  }  ``` > DO NOT forget  add  permission  foreground service  AndroidManifest.xml  ```kotlin <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /> ```  ## How  stream device audio   app To start streaming device audio , app needs  call  `startAudioShare` method  `HMSSDK`,  takes  three parameters -     The first one  `HMSActionResultListener`    callback object needed  inform  `success`          `failure`   action     The second one  one   modes  type `HMSAudioMixingMode`    user wants  stream. This can  one    three available types -     TALK_ONLY :  data captured  mic will  streamed   room     TALK_AND_MUSIC: data captured  mic  well  playback audio  captured  device will  streamed   room     MUSIC_ONLY:   playback audio  captured  device will  streamed   room  Following   snippet    use this:  ```dart hmsSDK.startAudioShare(hmsActionResultListener: hmsActionResultListener,audioMixingMode: HMSAudioMixingMode.TALK_AND_MUSIC); ```  ## How  change mode To change  mode  user  streaming audio, call  `setAudioMixingMode` API  pass one   modes  of     `TALK_ONLY`  `TALK_AND_MUSIC`  `MUSIC_ONLY`  ```dart hmsSDK.setAudioMixingMode(audioMixingMode:HMSAudioMixingMode.MUSIC_ONLY); ```     Note  `TALK_ONLY` mode  equivalent  regular mode,   without starting  API  ## How  stop audio sharing To stop capturing device audio  streaming   room, call  `stopAudioShare` API  provide  `HMSActionResultListener` to listen   success  error callbacks.  ```dart hmsSDK.stopAudioShare(hmsActionResultListener: hmsActionResultListener); ```  ## iOS Setup  -  Minimum iOS version required  support Audio Share  iOS 13  ## How audio sharing works  iOS  The audio   share goes   peers   mic channel. To  able  share audio  need  setup  sdk  use  custom audio source instead  default mic. To    pass  instance  custom audio source  HMSAudioTrackSettings   hmssdk instance.  ### How  use hmssdk  share audio   file  1. You create  instance  HMSAudioFilePlayerNode   instance  HMSMicNode like below:     HMSAudioFilePlayerNode required  parameter type `String`  will  use  control music player  room.      ```dart HMSAudioFilePlayerNode audioFilePlayerNode = HMSAudioFilePlayerNode(\"nodeName\"); HMSMicNode micNode = HMSMicNode(); ```  2. Next,  create  instance  HMSAudioMixerSource, passing  array  nodes   created   step  like below:  ```dart HMSAudioMixerSource audioMixerSource = HMSAudioMixerSource(nodes: [audioFilePlayerNode, micNode]); ```    3. Next,  pass  custom audio source   'audioSource' parameter  HMSAudioTrackSetting   set  hmssdk instance like so:  ```dart HMSAudioTrackSetting audioSettings = HMSAudioTrackSetting(..., audioSource: audioMixerSource); HMSTrackSetting = HMSTrackSetting(..., audioTrackSetting: audioSettings); HMSSDK hmsSDK = HMSSDK(hmsTrackSetting: trackSetting); hmsSDK.build(); ```  That's   need  setup  sdk  use  custom audio source.  4. You call play function  audioFilePlayerNode  play  file  local device  meeting room   file url like below:  ```dart     HMSAudioFilePlayerNode audioFilePlayerNode = HMSAudioFilePlayerNode(\"nodeName\");     audioFilePlayerNode.play(fileUrl: ...);   ``` Note  parameter value  `HMSAudioFilePlayerNode` must    define  time  initializing `HMSSDK`.    ### How  change mix volume  different nodes  You can use volume property  nodes  control  volume.  ```dart audioFilePlayerNode.setVolume(0.5); micNode.setVolume(0.9); ```  Note volume value range  0.0  1.0  ### How  schedule multiple audio files  back-to-back playback  You can set 'interrupts' parameter  false  tell audioFilePlayerNode   interrupt  current file playback,  schedule  file   current file  finished. Like below:  ```dart audioFilePlayerNode.play(fileUrl: url  file 1) audioFilePlayerNode.play(fileUrl: url  file 2, interrupts: false) audioFilePlayerNode.play(fileUrl: url  file 3, interrupts: false) ... ```  ### How  play multiple files concurrently  You can pass multiple instances  audioFilePlayerNode  pass   nodes  creating audioMixerSource like so:  ```dart HMSAudioFilePlayerNode backgroundMusicNode = HMSAudioFilePlayerNode(\"backgroundMusicNode\") backgroundMusicNode.setVolume(0.2) HMSAudioFilePlayerNode audioFilePlaybackNode = HMSAudioFilePlayerNode(\"audioFilePlaybackNode\") audioFilePlaybackNode.setVolume(0.5) HMSMicNode micNode = HMSMicNode()  HMSAudioMixerSource audioMixerSource = HMSAudioMixerSource(nodes: [backgroundMusicNode, audioFilePlaybackNode, micNode]) ```  Now,  can play  looping background music  low volume   audio file    time:  ```dart backgroundMusicNode.play(fileUrl: ..., loops: true) audioFilePlayerNode.play(fileUrl: ...)   ```    ### How  pause, resume, stop playback  more  You can use following interfaces  HMSAudioFilePlayerNode  pause, resume  stop playback  more:  ```dart audioFilePlayerNode.pause() audioFilePlayerNode.resume() audioFilePlayerNode.stop()  bool isPlaying = await audioFilePlayerNode.isPlaying() double currentPlaybackTime = audioFilePlayerNode.currentDuration() double totalPlaybackDuration = audioFilePlayerNode.duration()   ```      ### How  share audio  playing   iPhone  Note: iOS allows  get access  audio playing  iOS device (for example,  another app like spotify)   broadcating  entire iPhone screen. So    work   implement screen sharing   app. You can follow along   set   [Screen Share](./../features/screen-share)  Now    implemented  screen share feature  above. You can follow  steps  enable system audio broadcasting  sharing  screen:  1. You get  instance  HMSScreenBroadcastAudioNode  add    mixer.  ```dart HMSScreenBroadcastAudioReceiverNode screenAudioNode = HMSScreenBroadcastAudioReceiverNode() HMSAudioMixerSource audioMixerSource = HMSAudioMixerSource(nodes: [audioFilePlaybackNode, micNode, screenAudioNode])   ```   Note:  can pass   single instance  HMSMicNode  HMSScreenBroadcastAudioNode  HMSAudioMixerSource, else  will receive  error.  Now  mixer source  set  receive audio   broadcast extension.  2. Next,  need  setup broadcast extension  send audio   main app.  Broadcast extension receives audio  playing   iOS device  processSampleBuffer function   RPBroadcastSampleHandler class. To send audio  broadcast extension  main app,  call process(audioSampleBuffer) function  HMSScreenRenderer:  ```swift override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {     ...         case RPSampleBufferType.audioApp:         _ = self.screenRenderer.process(audioSampleBuffer: sampleBuffer)         break     ... } ```    Now  broadcast extension  set   send audio   main app.  And  it. Now  custom mixer source   main app can receive  audio  broadcast extension  well. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/audio_sharing"
    },
    {
        "title": "auto-video-degrade-restore.mdx",
        "link": "/flutter/v2/features/auto-video-degrade-restore",
        "keywords": [],
        "headings": ["Responding in the app", "Video Track Update"],
        "content": "---\r title: Auto Video Degrade/Restore\r nav: 3.15\r ---\r \r Sometimes people  bad internet connections  everyone deserves  good meeting.\r \r When  network   slow  support audio  video conversations together,  100ms SDK can automatically turn  downloading  peer's videos,  may improve  audio quality  avoid disconnections.\r \r If  network quality improves,  videos will  restored automatically  well.\r \r To turn  subscribe degradation   room, open  [templates](https://dashboard.100ms.live/templates)   dashboard  enable   roles there. Here's  information  [templates](/flutter/v2/foundation/templates-and-roles).\r \r \r ## Responding   app\r \r All `videoTrack`, within  `HMSPeer`'s   variable called `isDegraded`.\r \r If `isDegraded`  true, treat     video  turned off. If  UI   changed,  video tile will appear black.\r \r ## Video Track Update\r \r We can listen   track update  `trackDegraded`  `trackRestored`  `HMSTrackUpdate`  update  UI whenever someone's track gets changed due  degradation.\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/auto-video-degrade-restore"
    },
    {
        "title": "call-stats.mdx",
        "link": "/flutter/v2/features/call-stats",
        "keywords": [],
        "headings": [
            "HMSRTCStatsReport",
            "HMSLocalAudioStats",
            "HMSLocalVideoStats",
            "HMSRemoteAudioStats",
            "HMSRemoteVideoStats"
        ],
        "content": "---\r title: Call Stats\r nav: 3.20\r ---\r \r Sometimes  need  way  capture certain metrics related   call. This may  helpful   want  tailor  experience   users  debug issues. Typical metrics  interest  audio/video bitrate, round trip time, total consumed bandwidth  packet loss. 100ms SDK provides  data via dedicated delegate callbacks found  `HMSUpdateListener`. These will  called   fixed interval  one second   room   joined. You can get stats   per track basis ( `onRemoteAudioStats`)    overall summary (`onRTCStats`) \r \r Here   full list  callbacks:\r \r ```dart\r /// This callback provides stats   local audio track.\r void onLocalAudioStats({required HMSLocalAudioStats hmsLocalAudioStats, required HMSLocalAudioTrack track, required HMSPeer peer})\r \r /// This callback provides stats   local video track.\r void onLocalVideoStats({required HMSLocalVideoStats hmsLocalVideoStats, required HMSLocalVideoTrack track, required HMSPeer peer})\r \r /// This callback provides stats   remote audio track.\r  void onRemoteAudioStats({required HMSRemoteAudioStats hmsRemoteAudioStats, required HMSRemoteAudioTrack track, required HMSPeer peer})\r \r /// This callback provides stats   remote video track.\r   void onRemoteVideoStats({required HMSRemoteVideoStats hmsRemoteVideoStats, required HMSRemoteVideoTrack track, required HMSPeer peer})\r \r /// This callback provides combined stats   session.\r void onRTCStats({required HMSRTCStatsReport hmsrtcStatsReport})\r ```\r \r ## HMSRTCStatsReport\r \r This class will contain  combined stats   room.\r \r ```dart\r class HMSRTCStats {\r   // Total bytes sent   current session.\r   int bytesSent;\r   // Total bytes received   current session.\r   int bytesReceived;\r   // Total packets received   current session.\r   int packetsReceived;\r   // Total packets lost   current session.\r   int packetsLost;\r   // Total outgoing bitrate observed since previous report.\r   double bitrateSent;\r   // Total incoming bitrate observed since previous report  Kb/s.\r   double bitrateReceived;\r   // Average round trip time observed since previous report  Kb/s.\r   double roundTripTime;\r }\r \r class HMSRTCStatsReport {\r   // Combined audio + video values\r   HMSRTCStats combined;\r   // Summary   audio tracks\r   HMSRTCStats audio;\r   // Summary   video tracks\r   HMSRTCStats video;\r }\r ```\r \r ## HMSLocalAudioStats\r \r This class contains stats related  local audio track.\r \r ```dart\r class HMSLocalAudioStats {\r \t// Round trip time observed since previous report.\r \tdouble roundTripTime;\r \t// Total bytes sent   track   current session.\r \tint bytesSent;\r \t// Outgoing bitrate   track observed since previous report  Kb/s.\r   double bitrate;\r }\r ```\r \r ## HMSLocalVideoStats\r \r This class contains stats related  local video track.\r \r ```dart\r class HMSLocalVideoStats {\r \t// Round trip time observed since previous report.\r   double roundTripTime;\r \t// Total bytes sent   track   current session.\r \tint bytesSent;\r \t// Outgoing bitrate   track observed since previous report  Kb/s.\r   double bitrate;\r \t// Resolution  video frames  sent.\r \tdouble frameRate;\r \t// Frame rate  video frames  sent (FPS).\r   HMSVideoResolution resolution;\r }\r ```\r \r ## HMSRemoteAudioStats\r \r This class contains stats related  remote audio track.\r \r ```dart\r class HMSRemoteAudioStats {\r \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.\r   double jitter;\r \t// Total bytes received   track   current session.\r   int bytesReceived;\r \t// Incoming bitrate   track observed since previous report  Kb/s.\r   double bitrate;\r \t// Total packets received   track   current session.\r   int packetsReceived;\r \t// Total packets lost   track   current session.\r \tint packetsLost;\r }\r ```\r \r ## HMSRemoteVideoStats\r \r This class contains stats related  remote video track.\r \r ```dart\r class HMSRemoteVideoStats {\r \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.\r   double jitter;\r \t// Total bytes received   track   current session.\r   int bytesReceived;\r \t// Incoming bitrate   track observed since previous report  Kb/s.\r \tdouble bitrate;\r \t// Total packets received   track   current session.\r   int packetsReceived;\r \t// Total packets lost   track   current session.\r \tint packetsLost;\r \t// Resolution  video frames  received.\r \tHMSVideoResolution resolution;\r \t// Frame rate  video frames  received (FPS).\r \tdouble frameRate;\r }\r ```\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/call-stats"
    },
    {
        "title": "change-role.mdx",
        "link": "/flutter/v2/features/change-role",
        "keywords": [],
        "headings": ["Single Peer Role Change", "Bulk Role Change"],
        "content": "--- title: Change Role nav: 3.12 ---  `Role`   powerful concept  takes  lot  complexity away  handling permissions  supporting features like breakout rooms.   Each `HMSPeer` instance   `role` property  returns  `HMSRole` instance. You can use  property    following:  1. Check   Role  allowed  publish i.e. can  publish  video (and   resolution)? Can  publish audio? Can  share  screen? Who can  role subscribe to?       For example,  Student Role can  see  Teacher's video. This  can  discovered  checking `publishSettings`  `subscribeSettings` properties.   2. Check  actions  Role can perform. i.e can  change someone else's current Role, End  Meeting,  remove someone   room. This  can  discovered  checking  `permissions` property.   In certain scenarios,  may want  change someone's role.  Imagine  audio room  2 roles `speaker`  `listener`. Only someone   `speaker` role can publish audio   room   `listener` can  subscribe.  Now   point,  `speaker` may decide  nominate  `listener`  become  `speaker`.   This   Change Role capabilities come  play.   You may choose   either:  1. [Single Peer Role Change](#single-peer-role-change): Change  role   single peer   specified one using  `changeRoleOfPeer` API   2. [Bulk Role Change](#bulk-role-change): Change  role   peers   certain role,   specified one using  `changeRoleOfPeersWithRoles` API   ## Single Peer Role Change  To invoke  API  will need 4 parameters.  -   `forPeer`: An instance  `HMSPeer`   peer  role  want  change.  -   `toRole`: The `HMSRole` instance   target role.  -   `force`: Whether  want  change  role without asking   give   chance  accept/reject.  -   `hmsActionResultListener`: The `HMSActionResultListener`  will get  success  failure callback depending   result   request.  Note: success  mean   role  changed, just   server accepted  request  valid.    All  peers     current room  accessible via  `peers` property   `HMSRoom` instance.    A list   available roles   current room can  accessed via  `getRoles` method  `HMSSDK`.   Now    parameters  can invoke  `changeRoleOfPeer` API:  ```dart  hmsSDK.changeRoleOfPeer(  forPeer: forPeer,  toRole: toRole,  force: force,  hmsActionResultListener: hmsActionResultListener) ```  If  changing role succeeds  will get  update   `HMSUpdateListener`  `ROLE_CHANGED` update type:  ```dart void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update}); ```  With   peer,  passed  targetPeer   `HMSPeerUpdate.roleUpdated` update type.  The `force` parameter  `changeRole`,  false,   polite request: \"Would  like  change  role  listener  speaker?\" Which can  ignored   peer. The way  works    peer will first receive  `onRoleChangeRequest` callback  `HMSUpdateListener`:   ```dart void onRoleChangeRequest({required HMSRoleChangeRequest roleChangeRequest}); ```  At  point,  app  show  prompt   user asking  permission  accept  deny role change.    If  user wants  accept  request,  app  invoke `acceptRoleChangeRequest`  `HMSSDK` instance:  ```dart hmsSDK.acceptRoleChangeRequest(); ```   Now,  peers   room will receive  `HMSPeerUpdate.roleUpdated` callback    can   necessary UI updates. Now  user becomes  speaker   audio publishing will start automatically.  Now  imagine  newly nominated speaker   behaving nicely   want  move  back   listener without  prompt. This    `force` parameter comes in.   When   set  true   party will  receive  confirmation `roleChangeRequest`  instead will straight away receive  new set  updated permissions  stop publishing.    `HMSPeerUpdate.roleUpdated` callback will still  fired    app can update  user's UI state.     ## Bulk Role Change   Bulk Role Change  used   want  convert  Roles   list  Roles,  another Role.   For example,  peers join  room   `waiting` Role  now  want  change   peers  `viewer` Role  use  `changeRoleOfPeersWithRoles` API.  It takes fewer parameters    single peer. Here   method signature.  ```dart void changeRoleOfPeersWithRoles(       {required HMSRole toRole,       required List<HMSRole> ofRoles,       HMSActionResultListener? hmsActionResultListener}) ```  1. `toRole`   `HMSRole`    changed to. 2. `ofRoles`   list  `HMSRole` whose role   changed. 3. `hmsActionResultListener`  onSuccess  onError callbacks   result   operation.  Note    empty list  sent  `ofRoles`,  roles will  changed. This   avoid accidentally changing roles  may   intended    bots  provide recording  streaming   roles `beam`.  Also, Bulk Role Changes  always forced i.e.  option will  given   peer  accept it,  will just  changed immediately.   Here's   method   called  change  `waiting`  `guest` roles  `host`:  ```dart // fetch  available Roles   room List<HMSRole> roles = await hmsSDK.getRoles();  // get  Host Role object HMSRole toHostRole = roles.firstWhere((element) => element.name == \"host\");  // get list  Roles   updated -   case \"Waiting\"  \"Guest\" Roles roles.retainWhere((element) => ((element.name == \"waiting\") || (element.name == \"guest\")));  // now perform Role Change   peers  \"Waiting\"  \"Guest\" Roles   \"Host\" Role hmsSDK.changeRoleOfPeersWithRoles(     toRole: toHostRole,     ofRoles: roles,     hmsActionResultListener: hmsActionResultListener); ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/change-role"
    },
    {
        "title": "change-user-name.mdx",
        "link": "/flutter/v2/features/change-user-name",
        "keywords": [],
        "headings": ["Responding to name changes", "Changing the name"],
        "content": "---\r title: Change User Name\r nav: 3.19\r ---\r \r Any peer can change   name    joining  room. Before joining,  name     specified  `HMSConfig`   passed   join method. This document shows   name can  changed  joining.\r \r ## Responding  name changes\r \r Whenever  remote peer's name  changed  callback will  received  `onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update})`  `HMSUpdateListener`   `update` will   type `HMSPeerUpdate.nameChanged`.\r \r When  callback  received  UI   peer   updated  well.\r \r ## Changing  name\r \r The peer  wants  change  name  call  following method   `HMSSDK` instance.\r \r \r ```dart\r void changeName(\r       {required String name,\r       required HMSActionResultListener hmsActionResultListener}) {\r     hmsSDK.changeName(\r         name: name, hmsActionResultListener: hmsActionResultListener);\r       }\r ```\r \r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/change-user-name"
    },
    {
        "title": "chat.mdx",
        "link": "/flutter/v2/features/chat",
        "keywords": [],
        "headings": [
            "Addressing messages",
            "Sending Chat Messages",
            "Sending Broadcast Messages",
            "Sending Direct Messages",
            "Sending Group Messages",
            "Receiving Chat Messages",
            "Putting together a list of chat messages.",
            "Identifying who the message was for",
            "Store Chat Messages",
            "Filter Chat Messages",
            "Advanced Use-Cases"
        ],
        "content": "--- title: Chat nav: 3.05 ---  What's  video call without  able  send messages    too? 100ms supports chat  every video/audio room  create.  You can see  example  every type  message (of  types below)  sent  displayed   advanced [sample app](https://github.com/100mslive/100ms-android/).  ### Addressing messages  * [Broadcast messages](#sending-broadcast-messages)  sent  Everyone   chat `hmsSDK.sendBroadcastMessage`.  * [Direct messages](#sending-direct-messages)  sent   specific person `hmsSDK.sendDirectMessage`.  * [Group messages](#sending-group-messages)  sent  everyone   particular `HMSRole`. Such   `hosts`   `teachers`   `students` `hmsSDK.sendGroupMessage`.     * Learn   [roles](../foundation/templates-and-roles)    create    backend.  ## Sending Chat Messages   ### Sending Broadcast Messages  Want  let everyone   chat know something? Call `sendBroadcastMessage`   instance  `HMSSDK`  send  broadcast.  The parameters are:  1. *message*: The text   message.   > 💡 Note   callback  lets  know   server  received  request   message      error. > >It   convey whether  message  delivered   read   recipient. > >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.   ```dart hmsSDK.sendBroadcastMessage(message: \"Hi\", hmsActionResultListener: hmsActionResultListener); ```  ### Sending Direct Messages  Got secrets  share? Send  message directly   single person   chat   direct message. Call `sendDirectMessage`   instance  `HMSSDK`.  The parameters are:  1. *message*: The text   message. 2. *peerTo*: The `HMSPeer` instance   receive  message.   > 💡 Note   callback  lets  know   server  received  request   message      error. > >It   convey whether  message  delivered   read   recipient. > >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.    ```dart hmsSDK.sendDirectMessage(         message: \"Hi\",         peerTo: peerTo,         hmsActionResultListener: hmsActionResultListener); ```   ### Sending Group Messages  Need  call attention    hosts? All  teachers? All  developers? Call `sendGroupMessage`   instance  `HMSSDK`.  The parameters are:  1. *message*: The text   message. 2. *hmsRolesTo*: The list  `HMSRole` i.e  roles    message needs   sent.   > 💡 Note   callback  lets  know   server  received  request   message      error. > >It   convey whether  message  delivered   read   recipient. > >Also  important  make  new callback per message   will  contain  results   particular call  sending  message.  ```dart hmsSDK.sendGroupMessage(message: \"Hi\",         hmsRolesTo: hmsRolesTo,         hmsActionResultListener: hmsActionResultListener); ```  ### Receiving Chat Messages  When  called `hmsSDK.join(config)`  join  room,  `HMSUpdateListener` implementation   passed    callback `void onMessage({required HMSMessage message});`.  This    receive new messages  `HMSMessage`   call. It contains:  ```dart class HMSMessage(    final HMSPeer? sender;   final String message;   final String type;   final DateTime time;   HMSMessageRecipient? hmsMessageRecipient;    HMSMessage({     required this.sender,     required this.message,     required this.type,     required this.time,     this.hmsMessageRecipient   }); ) ```  * *message*: Content   text message   text description   raw message. * *type*: Type  message sent. The default value  `chat`. * *hmsMessageRecipient*: The intended recipient(s)   message   `HMSMessageRecipient`. * *time*: DateTime    messaging server receives  message. Update  time    messages   comes back   server  `HMSUpdateListener.onMessageReceived`  accurate ordering    messages. * *sender*: The `HMSPeer`   sending  message.  `Identifying Senders`:  The sender   message  always contained   `sender` field  HMSMessage. This lets  get  name  peer id   message sender.  `Message Body`:  The body   message   `message`   String.  `Time`:  The time  message  sent  contained  `time`   DateTime datatype.  ### Putting together  list  chat messages. The UI  completely     decide! You'll also need  hold onto   received messages   want  display history.  #### Identifying   message  for  The HMSMessageRecipient contained   `hmsMessageRecipient` field  `HMSMessage` lets  know   message  for.  The `HMSMessageRecipient` contains:  ```dart class HMSMessageRecipient{     HMSPeer? recipientPeer;     List<HMSRole>? recipientRoles;     HMSMessageRecipientType hmsMessageRecipientType; } ```  `recipientPeer`: Only contains  peer   specific single peer   direct messaged.  `recipientRoles`: Only contains values   group message   sent  many roles.  `hmsMessageRecipientType`: Can contain enum value `BROADCAST`, `PEER`  `ROLES`.  - `HMSMessageRecipientType.BROADCAST`   message  sent  everyone. If   true,   two fields will  null  empty respectively.  - `HMSMessageRecipientType.PEER` will  set    direct message.  - `HMSMessageRecipientType.ROLES` will  set    message  one  many roles.  ### Store Chat Messages  You can store chat message  creating  list  `HMSMessage`  append new messages   callback `onMessage({required HMSMessage message})`  follow:  ```dart List<HMSMessage> messages = [];  @override void onMessage({required HMSMessage message}) {   messages.add(message); } ```  ### Filter Chat Messages  You can filter chat messages  creating  separate list  `HMSMessage`.  ```dart List<HMSMessage> broadcastList = []; List<HMSMessage> rolesList = []; List<HMSMessage> peerList = [];  List<HMSMessage> messageFilter(List<HMSMessage> messages, HMSMessageRecipientType type) {   filterList = [];   for(HMSMessage message  messages) {     // Filter list   basis  Broadcast chat.     if(message.hmsMessageRecipient.hmsMessageRecipientType == HMSMessageRecipientType.BROADCAST) {       broadcastList.add(message);     }      // Filter list   basis  Roles chat.     if(message.hmsMessageRecipient.hmsMessageRecipientType == HMSMessageRecipientType.ROLES) {       rolesList.add(message);     }      // Filter list   basis  Peer chat.     if(message.hmsMessageRecipient.hmsMessageRecipientType == HMSMessageRecipientType.PEER) {       peerList.add(message);     }   } } ```  ### Advanced Use-Cases  Sometimes  app requires  show messages  different styles. Something similar  this:  ![Chat](/docs/v2/flutter-chat.gif)  HMSSDK provides  `type` parameter   `HMSMessage` object  take care   use cases.  You can send messages as:  ```dart hmsSDK.sendBroadcastMessage(message: \"😁\", type: \"emoji\", hmsActionResultListener: hmsActionResultListener); ```  Filter   messages based   `type` parameter  handle  UI accordingly.  ```dart //Example  show emoticons   message type  set  `emoji` @override void onMessage({required HMSMessage message}) {   if(message.type==\"emoji\"){       //Show  emoticons  UI   }   else{     //Handle  cases   } } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/chat"
    },
    {
        "title": "end-room.mdx",
        "link": "/flutter/v2/features/end-room",
        "keywords": [],
        "headings": [
            "Permissions",
            "Ending the Room",
            "How to handle an end room callback for receivers"
        ],
        "content": "--- title: End Room nav: 3.11 ---  Done  talking   time  end  video call room  everyone  just yourself? You may  looking  end  room.  ### Permissions  Can't let just anyone end  video call room. First  need  create  [role](../foundation/templates-and-roles)   permissions  end  room.  The permission  end  room  called `PermissionsParams.endRoom`    check   within  `HMSRole`   peer  see    it.  Here's   check whether  local peer   permission  end  room:  ```dart Future<bool> isAllowedToEndRoom() async{     return (await hmsSDK.getLocalPeer()).role.permission?.endRoom; } ```  `hmsSdk.getLocalPeer()` will  return null  long     preview    room. Since  likely  need  check  permissions     one    ok.  ### Ending  Room  Once  sure  peer   permissions  end  room,  can end   calling `hmsSDK.endRoom(reason: \"Some reason  end room\", lock: false)`.  ```dart void endRoom(       {required bool lock,       required String reason,       HMSActionResultListener? hmsActionResultListener}) async {} ```  `endRoom` takes  following parameters -  _lock_: A Boolean  whether  want  prevent anyone  rejoining  room. If false,  will  allowed  enter  room    client called `join`. If   true,  will NOT able  join  room again. _reason_: reason String   text   passed describing   room   ended. _hmsActionResultListener_: It's  callback    called  SDK  case   success  failure  `endRoom` operation  > 💡 After calling endRoom  video calling UI   disposed   well since    peers will get  `onPeerRemoved` callback. The caller   rely   `onSuccess` callback  `endRoom`  decide   terminate  meeting room UI locally.  ### How  handle  end room callback  receivers  Once  peer  adequate permissions calls `endRoom`,   peers   room will receive  callback  `HMSUpdateListener.onRemovedFromRoom`.  The `onRemovedFromRoom` callback   single parameter called `HMSRemovedFromRoom`   following structure.  ```dart class HMSPeerRemovedFromPeer {   String reason;   bool roomWasEnded;   HMSPeer? peerWhoRemoved; } ```  > 💡 This    callback  will  triggered   peer  [removed   room](/flutter/v2/features/remove-peer)  well. Except  `roomEnded` will  true   entire room  ended.  -   _reason_: The string message detailing   room  ended. -   _peerWhoRemoved_: The details   peer  called `endRoom`. -   _roomWasEnded_: True   entire room  ended. False    receiving peer  removed.  Clients  read  callback  show  appropriate UI. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/end-room"
    },
    {
        "title": "error-handling.mdx",
        "link": "/flutter/v2/features/error-handling",
        "keywords": [],
        "headings": ["HMSException", "Terminal Errors ", "Setting log levels in SDK"],
        "content": "--- title: Error Handling nav: 3.08 ---  When  make  API call  access  HMS SDK,  SDK may return error codes. Error codes  returned   problem    recovered without app intervention  occurred.  These  returned  `HMSException`   `onHMSError` callback   `HMSUpdateListener`.  Following   different error codes   returned   SDK. Before returning  error code, SDK retries  errors\\(whichever  possible\\).  | **Error Code**  **Cause   error**                                  **Action   taken**                                                                                     | | :-------------  :-----------------------------------------------------  :--------------------------------------------------------------------------------------------------------- | | **1003**        Websocket disconnected - Happens due  network issues  Mention user  check  network connection  try    time.                                | | **2002**        Invalid Endpoint URL                                    Check  endpoint provided  calling `join`  `HMSSDK`.                                               | | **2003**        Endpoint   reachable                               Mention user  check  network connection  try    time.                                | | **2004**        Token    proper JWT format                       The token passed  calling `join`     correct format. Retry getting  new token.                  | | **3001**        Cant Access Capture Device                              Ask  user  check permission granted  audio/video capture devices.                                        | | **3002**        Capture Device   Available                         Ask  user  check   audio/video capture device  connected  not.                                    | | **3003**        Capture device   use    application.     Show notification  user mentioning   capturing device  used    application currently. | | **3012**        [BLUETOOTH_CONNECT](https://developer.android.com/reference/android/Manifest.permission#BLUETOOTH_CONNECT) permission   given.| Add  BLUETOOTH_CONNECT permission   app  request   runtime since   dangerous level permission.| | **3013**        [BLUETOOTH](https://developer.android.com/reference/android/Manifest.permission#BLUETOOTH) permission   given.                      Add  BLUETOOTH permission   app.| | **4001**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                     | | **4002**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                     | | **4003**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                     | | **4004**        WebRTC error                                            Some webRTC error  occurred. Need  logs  debug.                                                     | | **4005**        ICE Connection Failed due  network issue              Mention  user  check  network connection  try    time.                                | | **5001**        Trying  join  room   already joined           Trying  join  already joined room.                                                                     | | **6002**        webRTC Error: Error  renegotiating                 Please try again.                                                                                           | | **40101**       Token Error: Invalid Access Key                         Access Key provided   token  wrong.                                                                  | | **40102**       Token Error: Invalid Room Id                            RoomID provided   token  wrong.                                                                      | | **40103**       Token Error: Invalid Auth Id                            AuthID provided   token  wrong.                                                                      | | **40104**       Token Error: Invalid App Id                             App ID provided   token  wrong.                                                                      | | **40105**       Token Error: Invalid Customer Id                        Customer Id provided   token  wrong.                                                                 | | **40107**       Token Error: Invalid User Id                            User ID provided   token  wrong.                                                                     | | **40108**       Token Error: Invalid Role                               The role provided   token  wrong.                                                                    | | **40109**       Token Error: Bad JWT Token                              Bad JWT Token.                                                                                              | | **40100**       Generic Error                                           Need  debug   logs.                                                                            | | **40001**       Invalid Room                                            Room ID provided  fetching  token  invalid.                                               | | **40002**       Room Mismatched  Token                              Room ID provided  fetching  token   match.                                                   | | **40004**       Peer already joined                                     Peer   trying  join  already joined  room.                                                     | | **41001**       Peer  gone                                            The peer    present   room.                                                                    | | **7001**        Platform Not Supported                                  The platform   supported  plugin                                                                    | | **7002**        Plugin Init Failed                                      Plugin initialization  failed                                                                            | | **7003**        Plugin Processing Failed                                Plugin processing failed                                                                                    | | **7004**        Plugin Add Already Going                              Plugin add  already  progress      ## HMSException  The SDK returns  error   object  `HMSException`  `onHMSError` method.  ```dart @override void onHMSError({required HMSException error}){     //Handle Error } ``` Let's   look   `HMSException` object  ```dart class HMSException {   final String? id;     //HMSException code   final HMSExceptionCode? code;    //Error message   final String message;    //Error description   String description;     //Action   SDK failed   String action;      //Extra params sent   error   Map? params;    //Whether  error   terminal error  not   bool isTerminal; } ```  ## Terminal Errors   Terminal errors  raised  SDK  cleaned   connection due   error. `isTerminal` property  HMSException object can  used  check whether  error  terminal.  > 💡 Note: `isTerminal` denotes   SDK  cleaned   connection due   error  not. If   [true]  denotes   error  removed  user   room    else  denotes   user  still   room even   error.   Hence `isTerminal` property can  used  handle  UI   `isTerminal:true`  can navigate  user back   home screen  show   popup. While  another case  error can  handled accordingly.  Terminal error example:  ![Terminal Error](/docs/v2/flutter-errorCode-1003.png)  The  error(`errorCode:1003`) occurs   reconnection fails. The SDK returns  error  trying  reconnect  60 seconds. In  cases,  `isTerminal` property can  used  handle  UI updates.  > 🔑  More info  reconnection handling can  found [here](./reconnection-handling)  ## Setting log levels  SDK  `HMSSDK` sends   logs  SDK  default. This makes debugging difficult.`HMSSDK` provides log levels   receive logs  which  relevant.Log levels can  set as:  ```dart //To turn  logs set HMSLogLevel  OFF HMSLogSettings hmsLogSettings = HMSLogSettings(         maxDirSizeInBytes: 1000000,         isLogStorageEnabled: true,         level: HMSLogLevel.OFF);  hmsSDK = HMSSDK(     appGroup: appGroup,     preferredExtension: preferredExtension,     hmsLogSettings: hmsLogSettings,//Pass  settings  creating HMSSDK instance     hmsTrackSetting: trackSetting); ```  `HMSLogLevel`   enum  values:  ```dart enum HMSLogLevel {    //To receive   logs   VERBOSE,    //To receive warnings   WARN,    //To receive errors   ERROR,    //To turn OFF logs  SDK   OFF,    Unknown } ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/error-handling"
    },
    {
        "title": "hls.mdx",
        "link": "/flutter/v2/features/hls",
        "keywords": [],
        "headings": [
            "Starting HLS",
            "Default View",
            "Custom View",
            "Optional HLS Recording",
            "Stopping HLS",
            "Current Room Status",
            "Display HLS Stream ",
            "Tips"
        ],
        "content": "--- title: HLS Streaming nav: 3.17 ---  HLS Streaming allows  scaling  millions  viewers  near real time. You can give  link  your web-app  will  converted   HLS feed   server  can  played across devices  consumption.  Behind  scenes,  will  achieved    bot join  room  stream   sees  hears. Once  feed  ready,  server will give  URL  can  played using  HLS Player.  > Note   media server serving  content   case  owned  100ms. If  looking   way  stream on YouTube, Twitch etc., please   look   RTMP streaming docs [here](./recording).  ## Starting HLS  HLS can  started  two ways depending   level  customization  need.  1. Default View: The simplest view  just begin  stream  default UI  parameters.  2. Custom Views: To use   UI  HLS streaming,  need  provide   web-app URL   bot  join  stream.   ### Default View  Begins  stream  default parameters.  To start HLS  Default View, call `hmsSDK.startHlsStreaming` method.  ```dart hmsSDK.startHlsStreaming(hmsActionResultListener: hmsActionResultListener); ```  ### Custom View To use   browser UI  HLS,  need  pass   meeting URL. The 100ms bot will open  URL  join  room,   must allow access without  user level interaction.   For  purpose  API supports taking   array, although currently   first element   array will  used. To distinguish  multiple URLs  additional field `metadata` can  optionally passed. The `meetingURL`  `metadata`  clubbed together  form   call  `variant`.  You can call hmsSDK.startHLSStreaming   `HMSHLSConfig`   array   variants. `HMSHlsRecordingConfig`  optional.  ```dart //    HLS config class class HMSHLSConfig {   List<HMSHLSMeetingURLVariant>? meetingURLVariant;   HMSHLSRecordingConfig? hmsHLSRecordingConfig; }   // example usage  HLS Config  start HLS Streaming HMSHLSConfig hmshlsConfig = HMSHLSConfig(meetingURLVariant: HMSHLSMeetingURLVariant(meetingUrl: meetingUrl, metadata: \"tag  reference\"));  hmsSDK.startHlsStreaming(         hmshlsConfig: hmshlsConfig,         hmsActionResultListener: hmsActionResultListener); ```  ### Optional HLS Recording  Optionally  record  HLS stream  may specify  `HMSHLSRecordingConfig` within  `HMSHLSConfig`.  Here's   `HMSHlsRecordingConfig` class looks like -  ```dart class HMSHLSRecordingConfig {   bool singleFilePerLayer;   bool videoOnDemand; } ```  1. `singleFilePerLayer`: If  desired end result   mp4 file per HLS layer, false  default.  2. `enableVOD`: If  desired end result   zip  m3u8    chunks, false  default.   Here's  example    create  recording config & start HLS Streaming  Recording -  ```dart HMSHLSMeetingURLVariant variant = HMSHLSMeetingURLVariant(meetingUrl: meetingUrl, metadata: \"tag  reference\");  HMSHLSRecordingConfig recordingConfig = HMSHLSRecordingConfig(singleFilePerLayer: false, videoOnDemand: true);          HMSHLSConfig hmshlsConfig = HMSHLSConfig(             meetingURLVariant: [variant],             hmsHLSRecordingConfig: recordingConfig);   hmsSDK.startHlsStreaming(     hmshlsConfig: hmshlsConfig,     hmsActionResultListener: hmsActionResultListener); ```  ## Stopping HLS  You can call hmsSDK.stopHLSStreaming  stop HLS Streaming  will stop   variants.  ```dart hmsSDK.stopHlsStreaming(hmsActionResultListener: hmsActionResultListener); ```  ## Current Room Status  The current status   room  always reflected   `HMSRoom` object.  Here   relevant properties inside  `HMSRoom` object   can read  get  current hls streaming status   room namely: `hlsStreamingState`.  The object contains  boolean `running`  lets  know   active   room right now  well  list  active variants.   1. **hlsStreamingState**  instance  `HMSHLSStreamingState`,  looks like:  ```dart class HMSHLSStreamingState(   bool running;   List<HMSHLSVariant?> variants; ) ```  This represents  livestream  one   HLS URLs   container  `HMSHLSVariant`. Which looks like: ```dart class HMSHLSVariant(   String? hlsStreamUrl;   String? meetingUrl;   String? metadata;   DateTime? startedAt; ) ```  The room status   checked  following two places -  1. In  `onJoin(room: HMSRoom)` callback  `HMSUpdateListener`     The properties mentioned  will    `HMSRoom` object. 2. In  `onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom)` callback  `HMSUpdateListener`.     The `HMSRoomUpdate` type will  `HMSRoomUpdate.HLS_STREAMING_STATE_UPDATED`.  ## Display HLS Stream   To display HLS Stream  will need  get  stream URL. We can get  stream URL  `HMSRoom` object  `onRoomUpdate(type: HMSRoomUpdate, hmsRoom: HMSRoom)` callback. Stream URL can  fetched   HMSHLSStreamingState's `variants` property as:   ```dart //If HLS Stream  running //variants : List  HMSHLSVariant String streamUrl = room.hmshlsStreamingState?.variants[0]?.hlsStreamUrl ```  This URL can  passed   video player  display HLS Stream.  ## Tips  * If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up. * If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users  used  reloading  page   scenarios   difficult  achieve   automated case. * Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page  join  happen within  time interval. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/hls"
    },
    {
        "title": "integration.mdx",
        "link": "/flutter/v2/features/integration",
        "keywords": [],
        "headings": [
            "Installing our libraries",
            "Setting up the library",
            "Update Version",
            "Device Permissions",
            "Android ",
            "Update target Android version",
            "Proguard configuration",
            "100ms proguard rules",
            "iOS",
            "Update target iOS version",
            "Flutter",
            "Debugging Tools",
            "100ms Flutter app",
            "Github Repo "
        ],
        "content": "--- title: 100ms Flutter SDK Integration Guide nav: 3.01 ---  ## Installing  libraries  Add  `hmssdk_flutter` plugin  dependencies  pubspec.yaml  ```dart #pubspec.yaml  dependencies:   flutter:     sdk: flutter    hmssdk_flutter: ``` > HMSSDK  supported  flutter 2.10.x   versions.  > There  2 ways  adding plugin  pubspec.yaml file   without version locking. > Without version locking flutter will fetch  latest compatible package   project. > Lock version will load  specific version written  pubspec.yaml file.  ## Setting   library  Run following  command  terminal.  ```bash flutter pub get flutter build apk flutter build ios flutter run ``` ## Update Version  2 ways  upgrade version  1. Find  latest version  `hmssdk_flutter`  [here](https://pub.dev/packages/hmssdk_flutter)  update pubspec.yaml file. 2. Using  following command  terminal:  ```bash flutter pub upgrade ```  ## Device Permissions  ### Android   Camera, Recording Audio  Internet permissions  required. Add    AndroidManifest.xml.  ```xml <uses-feature android:name=\"android.hardware.camera\"/>  <uses-feature android:name=\"android.hardware.camera.autofocus\"/>  <uses-permission android:name=\"android.permission.CAMERA\"/>  <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/>  <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/>  <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/>  <uses-permission android:name=\"android.permission.BLUETOOTH\"/>  <uses-permission android:name=\"android.permission.INTERNET\"/>  <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> ```  You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.  ### Update target Android version  Update  Android SDK version  21  later  navigating   directory  updating  android/app/build.gradle file  ```xml defaultConfig{   minSdkVersion 21   … } ```  ## Proguard configuration  Add    proguard-rules.pro  ```kotlin # 100ms proguard rules -keep class org.webrtc.** { *; } -keep class live.hms.video.** { *; } ```  ### iOS  Add  entitlements  video, audio  network access   Info.plist  ```xml <key>NSCameraUsageDescription</key> <string>Allow access  Camera  enable video calling.</string> <key>NSLocalNetworkUsageDescription</key> <string>Allow access  Camera  network  enable video calling.</string> <key>NSMicrophoneUsageDescription</key> <string>Allow access  Camera  mic  enable video calling.</string> ```  ### Update target iOS version  Update  iOS version  12  later  navigating   directory  updating  ios/Podfile file.  ``` platform :ios, '12.0' ```  ### Flutter  You will need  request Camera  Record Audio permissions  runtime   join  call  display  preview  follows:  1. Add `permission_handler` plugin  pubspec.yaml file  dependencies.  ```yaml permission_handler: ```  2. Before navigating   preview  meeting screen ask permission using  following code:  > If android version  greater  android 12  bluetoothConnect permission  also required.  ```dart Future<bool> getPermissions() async {    (Platform.isIOS) return true;   await Permission.camera.request();   await Permission.microphone.request();   await Permission.bluetoothConnect.request();     ((await Permission.camera.isDenied)) {     await Permission.camera.request();   }    ((await Permission.microphone.isDenied)) {     await Permission.microphone.request();   }    ((await Permission.bluetoothConnect.isDenied)) {     await Permission.bluetoothConnect.request();   }   return true; } ```  ## Debugging Tools  You can use [Android Studio](https://developer.android.com/studio), [VS Code](https://code.visualstudio.com/) & [Xcode](https://developer.apple.com/xcode/)  develop application  100ms.   ### 100ms Flutter app  You can download & check   100ms Flutter app -   🤖 The Flutter Android app  [Google Play Store here](https://play.google.com/store/apps/details?id=live.hms.flutter)  📱 Flutter iOS app  [Apple App Store here](https://apps.apple.com/app/100ms-live/id1576541989)   ### Github Repo  You can checkout  100ms Flutter SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/100ms-flutter/) ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/integration"
    },
    {
        "title": "join.mdx",
        "link": "/flutter/v2/features/join",
        "keywords": [],
        "headings": [
            "A HMSSpeaker object contains -",
            "Setting video and mic off while Joining",
            "Let's take an example to understand the implementation: ",
            "Get Room "
        ],
        "content": "--- title: Join Room nav: 3.02 ---  Joining  room  one    basic functionalities    100ms  built  easy, developer friendly API  get  started.  A user can interact  participants   room   joining  room.  When user indicates   want  join  room,  app   -  1. User Name:  name    displayed   peers   room 2. User ID:  unique identifier   user (Usually  UUID string). 3. Room ID:  unique room identifier     generated & passed   app   backend. 4. Authentication Token:  client side authentication token generated   Token Service.   Now    aforementioned data,  can proceed  join  room.  1. First, generate  auth token using  Http request package    available  [pub.dev](https://pub.dev/)   using [Http](https://pub.dev/packages/http) package.     ```dart    Future<String> getToken({required String user, required String room}) async {          http.Response response = await http.post(Uri.parse  (Constant.getTokenURL),             body: {'room_id': room, 'user_id': user, 'role': Constant.defaultRole});           var body = json.decode(response.body);          return body['token'];    }    ```     need   POST request   endpoint generated   present   dashboard.    You need three parameters  make POST request.     `room_id`: room id. `user_id`: name  want.    `role`: role  want.   2. Next, create  object  HMSConfig class using  available  joining configurations     ```dart    HMSConfig config = HMSConfig(authToken: token, userName: user);    ```  3. You'll want  handle  callbacks  joining  room  making  ViewModel, Presenter  whatever  using  handle business logic implement  HMSUpdateListener interface  overriding  methods.  4. Now,   primed  join  room. All      pass  config object  `join` present  `HMSSDK` class.To join room  audio/video muted    please follow  docs [here](../features/join-with-muted-audio-video)     Create instance  HMSSDK -    ```dart    HMSSDK hmsSDK = HMSSDK();    ```       Build HMSSDK -    ```dart    hmsSDK.build();    ```     Now join  passing config object created  previous step.    ```dart    hmsSDK.join(config);    ```  That's it. You  joined  room successfully. 🥳  Now,  take  look   listener class    implement.  ```dart  /// 100ms SDK provides callbacks   client app   change  update happening   room   user  joined  implementing HMSUpdateListener. /// These updates can  used  render  video  screen   display  info regarding  room. abstract class HMSUpdateListener {    /// This will  called   successful JOIN   room   user   ///   /// This   point  applications can stop showing  loading state   /// [room]:  room   joined    void onJoin({required HMSRoom room});    /// This  called     change   property   Room   ///   ///  [room]:  room   joined   ///  [update]:  triggered update type. Should  used  perform different UI Actions    void onRoomUpdate({required HMSRoom room, required HMSRoomUpdate update});    /// This will  called whenever    update   existing peer   ///   new peer got added/existing peer  removed.   ///   /// This callback can  used  keep  track    peers   room   /// [peer]:  peer  joined/left   updated   /// [update]:  triggered update type. Should  used  perform different UI Actions    void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update});    /// This  called    updates   existing track   ///   new track got added/existing track  removed   ///   /// This callback can  used  render  video  screen whenever  track gets added   ///  [track]:  track   added, removed  updated   ///  [trackUpdate]:  triggered update type   ///  [peer]:  peer   track  added, removed  updated    void onTrackUpdate({required HMSTrack track, required HMSTrackUpdate trackUpdate, required HMSPeer peer});    /// This will  called     error   system   ///  SDK  already retried  fix  error   /// [error]:  error  occurred    void onHMSError({required HMSException error});    /// This  called     new broadcast message    peer   room   ///   /// This can  used  implement chat   room   /// [message]:  received broadcast message    void onMessage({required HMSMessage message});    /// This  called  someone asks  change  role   ///   ///  eg. admin can ask  peer  become host  guest.   ///  triggers  call  peer's app    void onRoleChangeRequest({required HMSRoleChangeRequest roleChangeRequest});    /// This  called every 1 second  list  active speakers   ///   /// ## A HMSSpeaker object contains -   ///    - peerId:  peer identifier  HMSPeer   speaking   ///    - trackId:  track identifier  HMSTrack   emitting audio   ///    - audioLevel:  number within range 1-100 indicating  audio volume   ///   /// A peer    present   list indicates   peer   speaking   ///   /// This can  used  highlight currently speaking peers   room   /// [speakers]  list  speakers    void onUpdateSpeakers({required List<HMSSpeaker> updateSpeakers});    ///when network    error happens  will  called    void onReconnecting();    ///when   back   room  reconnection    void onReconnected();    ///when someone requests  track change     video  audio  will  triggered   /// [hmsTrackChangeRequest] request instance consisting    required info  track change    void onChangeTrackStateRequest({required HMSTrackChangeRequest hmsTrackChangeRequest});    ///when someone kicks     someone ends  room   time   triggered   /// [hmsPeerRemovedFromPeer]  consists info   removed   why.    void onRemovedFromRoom({required HMSPeerRemovedFromPeer hmsPeerRemovedFromPeer});    ///whenever  new audio device gets connected   device  audio device  switched   triggered    void onAudioDeviceChanged(       {HMSAudioDevice? currentAudioDevice,       List<HMSAudioDevice>? availableAudioDevice}); }  ```  >HMSUpdateListener: A class conforming  HMSUpdateListener interface. The methods  HMSUpdateListener  invoked  notify updates happening   room like  peer joins/leaves,  track got muted/unmutes, etc.  Add  `updateListener` instance  hmsSDK :  ```dart HMSSDK hmsSDK = HMSSDK(); hmsSDK.build(); hmsSDK.addUpdateListener(updateListener); ```  After calling join  app will  provided  update   100ms SDK.  ✅ If successful,  `onJoin({required HMSRoom room})` method  HMSUpdateListener will  invoked  information   room encapsulated   HMSRoom object.  ❌ If failure,  `onHMSError({required HMSException error})` method will  invoked  exact failure reason.    ## Setting video  mic   Joining  Joining  muted audio/video   customization  sets  microphone  camera state  joining  room.  By default `HMSSDK` keeps  microphone  camera ON   using  feature  can decide  state according   use case.  To use   need  set  `hmsVideoTrackInitState` property  video  `hmsAudioTrackInitState`   `hmsTrackSetting` of  `HMSSDK` constructor.  Here `trackInitialState` property  `HMSVideoTrackSetting`  `HMSAudioTrackSetting`  Enum  type `HMSTrackInitState`    possible values as:  ```dart enum HMSTrackInitState {    //If  track needs   kept mute  joining    MUTED,    //If  track needs   kept unmute  joining    UNMUTED, } ``` #### Let's take  example  understand  implementation:   1. For joining  room  muted audio/video  values need   set   `hmsTrackSetting` property  :  ```dart HMSTrackSetting trackSetting = HMSTrackSetting(         //This   joining  muted audio  unmuted video          audioTrackSetting: HMSAudioTrackSetting(trackInitialState: HMSTrackInitState.MUTED),          videoTrackSetting: HMSVideoTrackSetting(trackInitialState: HMSTrackInitState.MUTED)); ``` 2. While creating  `HMSSDK` object pass  `HMSTrackSetting` object created  :  ```dart  HMSSDK hmsSDK = HMSSDK(          hmsTrackSetting: trackSetting); ```  3. Perform   steps  usual i.e call  `build` method.  Now,  user   able  join  room   microphone   camera turned off.   ## Get Room   The `getRoom` function  HMSSDK instance returns  currently joined room. Returns null   local peer     room.  Future<HMSRoom?> getRoom() async  ```dart // instance acquired  build() method await hmsSDK.getRoom();  ```  ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/join"
    },
    {
        "title": "leave.mdx",
        "link": "/flutter/v2/features/leave",
        "keywords": [],
        "headings": [],
        "content": "--- title: Leave Room nav: 3.03 ---  Once  done   meeting  want  exit, call leave   HMSSDK instance  created  join it.   Before calling leave,remove  `HMSUpdateListener` instance as: ```dart hmsSDK.removeUpdateListener(updateListener); ```  To leave  meeting, call  `leave` method  `HMSSDK`  pass  `hmsActionResultListener` parameter  get  success callback  SDK   `onSuccess` override method  follow: ```dart await hmsSDK.leave(hmsActionResultListener: this);  @override   void onSuccess(       {HMSActionResultListenerMethod methodType = HMSActionResultListenerMethod.unknown, Map<String, dynamic>? arguments}) {         switch (methodType) {           case HMSActionResultListenerMethod.leave:           // Room leaved successfully           break;           ...         } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/leave"
    },
    {
        "title": "mute.mdx",
        "link": "/flutter/v2/features/mute",
        "keywords": [],
        "headings": [
            "Setting video and mic off while joining",
            "Let's take an example to understand the implementation: ",
            "Mute Remote peers locally "
        ],
        "content": "--- title: Mute / Unmute nav: 3.04 ---  Mute  something  applies   audio  video.  When  mute audio,    heard   people.  When  mute  video,  will   broadcasting  video   people.  It can  called  local (you)  remote (other people) peer's audio  video tracks.  You get  reference    local peer  `getLocalPeer`  HMSSDK.  You can     remote peers  HMSRemoteVideoTrack  HMSRemoteAudioTrack. Get  peers  calling `hmsSDK.getRemotePeers()`  > 💡 You may get null   track   peer   allowed  publish  track according   role permissions.   ```dart  hmsSDK.switchAudio(true);  hmsSDK.switchVideo(true);  hmsSDK.switchCamera();  hmsSDK.stopCapturing();  hmsSDK.startCapturing(); ````  ## Setting video  mic   joining  Joining  muted audio/video   customization  sets  microphone  camera state  joining  room.  By default `HMSSDK` keeps  microphone  camera    using  feature  can decide  state according   use case.  To use   need  set  `hmsVideoTrackInitState` property  video  `hmsAudioTrackInitState`   `hmsTrackSetting` of  `HMSSDK` constructor.  Here `trackInitialState` property  `HMSVideoTrackSetting`  `HMSAudioTrackSetting`  Enum  type `HMSTrackInitState`    possible values as:  ```dart enum HMSTrackInitState {    //If  track needs   kept mute  joining   MUTED,    //If  track needs   kept unmute  joining   UNMUTED, } ``` #### Let's take  example  understand  implementation:   1. For joining  room  muted audio/video  values need   set   `hmsTrackSetting` property  :  ```dart HMSTrackSetting trackSetting = HMSTrackSetting(         //This   joining  muted audio  unmuted video         audioTrackSetting: HMSAudioTrackSetting(trackInitialState: HMSTrackInitState.MUTED),         videoTrackSetting: HMSVideoTrackSetting(trackInitialState: HMSTrackInitState.MUTED)); ``` 2. While creating  `HMSSDK` object pass  `HMSTrackSetting` object created  :  ```dart  HMSSDK hmsSDK = HMSSDK(         hmsTrackSetting: trackSetting); ```  3. Perform   steps  usual i.e call  `build` method.  Now,  user   able  join  room   microphone   camera turned off.  ## Mute Remote peers locally   To mute peers locally `HMSSDK` provides dedicated methods `muteRoomAudioLocally`  audio  `muteRoomVideoLocally`  video. Execution  of  method mutes audio  video   others will still  able  hear audio  video.  ```dart  //To mute audio locally hmsSDK.muteRoomAudioLocally();  //To mute video locally hmsSDK.muteRoomVideoLocally(); ```  Similarly  counterparts:  ```dart //To unmute audio locally hmsSDK.unMuteRoomAudioLocally();  //To unmute video locally hmsSDK.unMuteRoomVideoLocally(); ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/mute"
    },
    {
        "title": "preview-update-listeners.mdx",
        "link": "/flutter/v2/features/preview-update-listeners",
        "keywords": [],
        "headings": [],
        "content": "--- title: Preview Listener nav: 3.25 ---  Now,  take  look   listener class   implemented.  ```dart ///[HMSPreviewListener] listens  updates   preview. /// ///Just implement   get  preview updates. /// /// Check   [Sample App]    using it.  abstract class HMSPreviewListener {   ///when  error  caught [onError] will  called   ///   /// - Parameters:   ///   - error: error   get.   void onHMSError({required HMSException error});    ///when  want  preview listen   callback   ///   /// - Parameters:   ///   - room:  room   joined   ///   - localTracks: local audio/video tracks list   void onPreview({required HMSRoom room, required List<HMSTrack> localTracks});    /// This  called     change   property   Room   ///   /// - Parameters:   ///   - room:  room   joined   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onRoomUpdate({required HMSRoom room, required HMSRoomUpdate update});    /// This will  called whenever    update   existing peer   ///   new peer got added/existing peer  removed.   ///   /// This callback can  used  keep  track    peers   room   /// - Parameters:   ///   - peer:  peer  joined/left   updated   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update});    ///whenever  new audio device  plugged   audio output  changed we   ///get  onAudioDeviceChanged update   ///This callback   fired  Android devices. On iOS,  callback will   triggered.   /// - Parameters:   ///   - currentAudioDevice: Current audio output route   ///   - availableAudioDevice: List  available audio output devices   void onAudioDeviceChanged(       {HMSAudioDevice? currentAudioDevice,       List<HMSAudioDevice>? availableAudioDevice}); }  ```  > `HMSPreviewListener` : A class conforming  HMSPreviewListener interface. The methods  HMSPreviewListener  invoked  notify updates   preview like  peer join,video mute/unmute, audio device selection etc.  Add  `previewListener` instance to ```dart HMSSDK hmsSDK = HMSSDK(); hmsSDK.build(); hmsSDK.addPreviewListener(previewListener); ```  After calling preview  app will  provided  update   100ms SDK.  ✅ If successful,  `onPreview({required HMSRoom room, required List<HMSTrack> localTracks})` method  HMSPreviewListener will  invoked  information   room encapsulated   HMSRoom object.  ❌ If failure,  `onHMSError({required HMSException error})` method will  invoked  exact failure reason.  Remove  `previewListener` instance as: ```dart hmsSDK.removePreviewListener(previewListener); ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/preview-update-listeners"
    },
    {
        "title": "preview.mdx",
        "link": "/flutter/v2/features/preview",
        "keywords": [],
        "headings": ["Get onPeerUpdate and room state in preview "],
        "content": "--- title: Preview nav: 3.06 ---  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining.   100ms SDKs provide  easy-to-use API  back  feature. Additionally,  SDK will try  establish  connection  100ms server  verify    network issues    auth credentials  valid    everything   order  subsequent room join will  much faster.  Create  object  HMSConfig class using  available join configurations     ```dart    HMSConfig config = HMSConfig(authToken: token,                                 userName: user);    ```  To invoke  Preview API call -  ```dart HMSSDK hmsSDK = HMSSDK(); hmsSDK.build(); hmsSDK.preview(config); ```  You need HMSConfig instance    created above.  Now   started preview  need  listen   updates. You get  via `PreviewUpdateListener`.  ```dart abstract class HMSPreviewListener {    /// On success,   want  preview listen   callback   ///   /// - Parameters:   ///   - room:  room   joined   ///   - localTracks: local audio/video tracks list   void onPreview({required HMSRoom room, required List<HMSTrack>localTracks});    ///   error  caught [onHMSError] will  called   ///   /// - Parameters:   ///   - error: error   get.   void onHMSError({required HMSError error});       /// This  called     change   property   Room   ///   /// - Parameters:   ///   - room:  room   joined   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onRoomUpdate({required HMSRoom room, required HMSRoomUpdate update});    /// This will  called whenever    update   existing peer   ///   new peer got added/existing peer  removed.   ///   /// This callback can  used  keep  track    peers   room   /// - Parameters:   ///   - peer:  peer  joined/left   updated   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update}); } ```  This will pass  array  local tracks   can display   user (see [Render Video](render-video)  [Mute](mute) sections   details).  If however    error related  getting  input sources   preflight check  failed delegate callback will  fired   `HMSException` instance  can use  object  find  went wrong (see [Error Handling](error-handling)).   Add  `previewListener` instance    ```dart hmsSDK.addPreviewListener(previewListener); ```  ## Get onPeerUpdate  room state  preview   To enable `onPeerUpdate`  preview,  need  enable room state  dashboard. This can  enabled  selecting  template   navigating  advanced settings.  ![Advanced settings](/docs/v2/flutter-advanced-settings.png)  These options  available  advanced settings:  ![Room State  preview](/docs/v2/flutter-room-state-in-preview.png) ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/preview"
    },
    {
        "title": "reconnection-handling.mdx",
        "link": "/flutter/v2/features/reconnection-handling",
        "keywords": [],
        "headings": [
            "Reconnecting & Reconnected Callbacks",
            "Case when user never gets reconnected",
            "Best practices to handle reconnection"
        ],
        "content": "--- title: Reconnection Handling nav: 3.23 ---  Real world apps operate  varying network conditions thus requires handling  network bandwidth issues. The SDK provides callbacks   user gets disconnected due  network issues  network switch  also  user gets reconnected again.  > 💡 Note: The SDK tries  reconnect automatically  60 seconds    connection  terminated,the peer  removed   room   room    rejoined.  ## Reconnecting & Reconnected Callbacks  `onReconnecting`  `onReconnected` callbacks  provided  `HMSUpdateListener`.So,These method needs   overriden   class wherever `HMSUpdateListener`  implemented.  ```dart  //OnReconnecting callback  triggered   SDK detects  network issue   trying to // reconnect automatically   network drop, switch etc.  @override void onReconnecting(){     // Reconnecting...     // Handle reconnection  showing loaders etc. }  //OnReconnected callback  triggered   SDK  successfully recovered   network // drop, switch   network issue etc. @override void onReconnected(){     // Reconnected...     // Handle  reseting  loaders  switching  normal UI.  }  ```  > 💡 Note: On getting reconnected  SDK will send   updates(Track  Peer updates) again.  ## Case  user never gets reconnected  SDK tries  reconnect  user automatically  60 seconds    connection gets terminated   peer  removed   room  SDK. If reconnection fails  SDK sends `onHMSError` callback.  ```dart  @override   void onHMSError({required HMSException error}){     //Handle  UI depending   error object   }  ```  The user will receive  following callbacks  `error` object  `isTerminal:true`  `errorCode`  :  * Error Code: 1003, Cause: Websocket disconnected  ![Error Code:1003](/docs/v2/flutter-errorCode-1003.png)  * Error Code: 4005, Cause: ICE Connection Failed due  network issue[PUBLISH]  ![Error Code:1003](/docs/v2/flutter-errorCode-4005-PUBLISH.png)  * Error Code: 4005, Cause: ICE Connection Failed due  network issue[SUBSCRIBE]  ![Error Code:1003](/docs/v2/flutter-errorCode-4005-SUBSCRIBE.png)  ## Best practices  handle reconnection  The SDK will send `onReconnecting` callback first  user disconnects, If user reconnects  SDK sends `onReconnected` callback whereas if the user fails  connect   sends `onHMSError`.These callbacks can  handled  follows:   * Once  SDK sends `onReconnecting` callback, Do  allow user  interact  UI  show loaders  reconnecting indicator. * If `onReconnected`  received  switch back  room UI allowing interaction  usual. * If  user fails  reconnect  SDK sends `onHMSError` callback, look  `isTerminal` parameter    is set  `true`  navigate   `HomeScreen`,showing  toast  errorDialog   user  `description`. In  `false` case look   `errorCode`  handle  accordingly. ```dart @override   void onHMSError({required HMSException error}){     if(error.isTerminal){         //Pop   meeting room     }     else{         //Handle  error accordingly     }   } ```  > 🗝️ You can find  errorCodes, descriptions   suggested actions   taken [here](./error-handling)",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/reconnection-handling"
    },
    {
        "title": "recording.mdx",
        "link": "/flutter/v2/features/recording",
        "keywords": [],
        "headings": [
            "Starting Streaming / Recording",
            "Stopping Streaming / Recording",
            "Current Room Status",
            "When to check for room status"
        ],
        "content": "--- title: RTMP Streaming / Recording nav: 3.16 ---  Want  preserve  video call  posterity   recording? Or live stream    millions  viewers  Twitch  YouTube  whatever gives   RTMP injest URL?  Turn  RTMP Streaming  Recording!  In 100ms, recording  streaming  usually achieved    bot join  room  stream   sees  hears   file (recording)    rtmp injest url (streaming).  The topics covered   doc are:  1. [How  start streaming / recording.](#starting-streaming-recording) 2. [How  stop streaming / recording.](#stopping-streaming-recording) 3. [How  check  current status  streaming / recording.](#current-room-status) 4. [When  check  current status](#when-to-check-for-room-status)  ## Starting Streaming / Recording  To start recording, streaming  both, create  instance  `HMSRecordingConfig`.  `HMSRecordingConfig` takes  following:  1. **meetingUrl**: _String_. The url  100ms bot user will open  join  room. It must allow access without  user level interaction. 2. **rtmpUrls**: _List<String\\>_. If streaming  required,     one   RTMP Injest Urls   max limit  3 urls   stream  go. If  recording,  can   empty list.      - Format: `rtmp://server.com/app/STREAM_KEY`     - Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`         - \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.         - \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.  3. **record**: _Boolean_. If recording  required, set true. If recording   required, set false. This value   effect  streaming. 4. **resolution**: _HMSResolution_. An optional value   output resolution   stream. For instance default  landscape  1280x720     set   portrait mode  720x1280. Or smaller values like 480x80.  The `HMSResolution` takes Width  Height.  -   If  rtmpUrls  record = true  provided,  streaming  recording will begin. -   If  rtmpUrls  provided,  streaming will begin. -   If  record true  provided,  recording will begin.  If either one  started,     started without stopping whatever  running. Eg: If  streaming  started  recording   started unless streaming  stopped first.  If   required,     started together  providing  `RTMP Ingest Urls`  `recording = true`.  [hmsActionResultListener]   callback    called  SDK  case   success  failure.  ```dart   void startRtmpOrRecording(       {required HMSRecordingConfig hmsRecordingConfig,       HMSActionResultListener? hmsActionResultListener}) async {} ```  ## Stopping Streaming / Recording  To stop streaming AND recording. It   currently possible  stop just one, whatever  running will  stopped.  Here's   stop both:  The result   action  sent  `HMSException`    successfull   will  null otherwise   not.  [hmsActionResultListener]   callback    called  SDK  case   success  failure.  ```dart void stopRtmpAndRecording(       {HMSActionResultListener? hmsActionResultListener}) async ```  ## Current Room Status  The current status   room  always reflected   `HMSRoom` object   returned   `HMSUpdateListener`.  Here   relevant properties inside  `HMSRoom` object   can read  get  current recording/streaming status   room namely: `rtmpHMSRtmpStreamingState`, `browserRecordingState`  `serverRecordingState`.  Each    objects  contain  boolean `running`  lets  know   active   room right now  `error`  lets  know     error.  Apart   rtmp stream   browser recording,   ones  can start  stop,   also  serverRecording,  can  turned    room  archival purposes    currently  stopped  enabled   room   dashboard.  1. **HMSRtmpStreamingState**  instance  `HMSRtmpStreamingState`,  looks like:  ```dart class HMSRtmpStreamingState {   final HMSException? error;   final bool running;   HMSRtmpStreamingState({required this.error,required this.running}); } ```  This represents  livestream  one   RTMP urls.  2. **browserRecordingState**  instance  `HMSBrowserRecordingState`,  looks like:  ```dart class HMSBrowserRecordingState {   final HMSException? error;   final bool running;   HMSBrowserRecordingState({required this.error,required this.running}); } ```  This represents  recording  can  requested  start.  3. **serverRecordingState**  instance  `HMSServerRecordingState`,  looks like:  ```dart class HMSServerRecordingState {   final HMSException? error;   final bool running;   HMSServerRecordingState({required this.error,required this.running}); } ```  This represents   room  set   recorded    created   sessions within  will always  recorded  archival   server.  ## When  check  room status  The room status   checked  three places:  1. `onJoin` callback  `HMSUpdateListener` 2. When `hmsSDK.startRtmpOrRecording()`  called 3. When `hmsSDK.stopRtmpAndRecording()`  called.  -   In  `onJoin(room: HMSRoom)` callback  `HMSUpdateListener`     The properties mentioned  will    `HMSRoom` object. -   Whenever either   start  stop recording functions  called,   success  error callbacks  called,  values   streaming  recording will  updated   room object returned  onJoin.     So saving  instance   room received   time  recommended. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/recording"
    },
    {
        "title": "remote-mute-unmute.mdx",
        "link": "/flutter/v2/features/remote-mute-unmute",
        "keywords": [],
        "headings": [
            "Permissions",
            "Mute/Unmute other peers",
            "Handling a mute callback",
            "Handling an unmute callback"
        ],
        "content": "--- title: Remote Mute/Unmute nav: 3.14 ---  You're running  video call room  decide  someone  currently talking   talking.  You'd prefer  stay mute. Or perhaps  want  video turned   well   audio. You're looking   remote mute.  Muting can apply   audio  video.  ### Permissions  Can't let just anyone mute others. First,  need  create  [role](../foundation/templates-and-roles)   permissions  mute others  also  ask   Unmute.  The permission  mute others  within  `PermissionsParams` `mute`    check   within  `HMSRole`   peer  see    it.  Similarly,  permission  Unmute  peers  within `PermissionsParams` `unmute`.  Here's   check whether  local peer  permission  mute  Unmute others. You can   like this:  ```dart Future<bool> isAllowedToMuteOthers() async{     return (await hmsSDK.getLocalPeer()).role.permission!.mute; }  Future<bool> isAllowedToUnMuteOthers(){     return (await hmsSDK.getLocalPeer()).role.permission!.unMute; }  ```  `hmsSDK.getLocalPeer()` will  return null  long     preview    meeting room. Since  likely  need  check  permissions     one So,    ok.  ### Mute/Unmute  peers  `HMSSDK` provides dedicated methods  mute/unmute: - Individual peer - Specific role  These methods will  work   peer  permission  mute/unmute another peer's audio/video. The permission can  checked   steps mentioned above.   Let's look    them:  - Individual peer  We can use  `changeTrackState` method  mute/unmute remote peer's audio/video  ```dart // [forRemoteTrack] : track whose state needs   changed // Set [mute]  true   track needs   muted, false otherwise. if(     //peer  permission  change track state     localPeer?.role.permissions.mute   ) HMSSDK.changeTrackState(         forRemoteTrack: forRemoteTrack,         mute: mute,         hmsActionResultListener: this); ``` If  `changeTrackState` method  successful  will get  `onSuccess` callback  track update  `onTrackUpdate`.  - Specific role  We can use  `changeTrackStateForRole` method  mute/unmute peers  specific roles.  ```dart // Set [mute] true   track needs   muted, false otherwise   // [type]   HMSTrackType    affected. If    source  specified,   considered  AND operation. If  specified,  track sources  affected.   // [source]   HMSTrackSource    affected. If   type  specified,   considered  AND operation. If  specified,  track types  affected.   // [roles]   list  roles,  may   single item   list, whose tracks   affected.   //If  specified,  roles  affected.   // [hmsActionResultListener] -  callback    called  SDK  case  success  failure.   /// `this`  used  since MeetingStore already implements   if(     //peer  permission  change track state     localPeer?.role.permissions.mute     )     HMSSDK.changeTrackStateForRole(         mute: mute,         kind: kind,         source: source,         roles: roles,         hmsActionResultListener: this); ``` If  `changeTrackStateForRole` method  successful  will get  `onSuccess` callback  track update  `onTrackUpdate` similar  `changeTrackState`.  > If *roles*  passed   empty list    roles will get affected.  ### Handling  mute callback  Mute callbacks  automatically applied   receiver. No action  required.  ### Handling  unmute callback  Let's turn  table now   happens   remote peer wishes  mute/unmute  audio/video.  - In case  remote peer mutes  audio/video `HMSSDK` performs  automatically without asking permission In another case,  get  `onChangeTrackStateRequest`   we accept  request  need  call `switchVideo`  `switchAudio` according   request.  ```dart  @override   void onChangeTrackStateRequest(       {required HMSTrackChangeRequest hmsTrackChangeRequest}){} ```  How   implemented   example app can  found [here](https://github.com/100mslive/100ms-flutter/blob/main/example/lib/data_store/meeting_store.dart)  Let's look   `HMSTrackChangeRequest` structure :  ```dart class HMSTrackChangeRequest {   bool mute;   HMSPeer requestBy;   HMSTrack track; } ```  This contains information   track  requested  unmuting. Check  track type  inform  user accordingly.  ```dart public void checkTrack(HMSTrackKind track) {     if( track.getType() == HMSTrackType.kHMSTrackKindAudio) {      } else  (track.getType() == HMSTrackType.kHMSTrackKindVideo) {             } } ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/remote-mute-unmute"
    },
    {
        "title": "remove-peer.mdx",
        "link": "/flutter/v2/features/remove-peer",
        "keywords": [],
        "headings": ["Permissions", "Removing a peer", "Handling the remove peer callback"],
        "content": "--- title: Remove Peer nav: 3.13 ---  Someone's overstayed  welcome  now  need  remove  peer   video call room. Just call `meeting.removePeer`.  ### Permissions  Can't let just anyone remove others   video call room. First  need  create  [role](../foundation/templates-and-roles)   permissions  remove others.  In  SDK,  permission  remove others   room  within `PermissionsParams` `removeOthers`    check   within  `HMSRole`   peer  see    it.  Here's   check whether  local peer   permission  end  room:  ```dart bool isAllowedToRemovePeer() async{   return (await hmsSDK.getLocalPeer()).role.permission!.removeOthers; } ```  `hmsSDK.getLocalPeer()` will  return null  long     preview    meeting room. Since  likely  need  check  permissions     one    ok.  ### Removing  peer  Once  permissions  checked  ensure  caller   permission  remove  peer, remove   calling `hmsSDK.removePeer`.  The parameters are:  peer:   `HMSRemotePeer`   like   removed   video call room.  ```dart void removePeer(       {required HMSPeer peer,       required String reason,       HMSActionResultListener? hmsActionResultListener}) async {} ```  ```dart hmsSDK.removePeer(peer: peerToRemove, reason: \"Some good reason  remove  peer\") ```  ### Handling  remove peer callback  The target   `removePeerRequest` will receive  call  `HMSUpdateListener`  `onRemovedFromRoom(notification : HMSRemovedFromRoom)`.  The `HMSRemovedFromRoom` object   passed   callback   structure:  ```dart class HMSRemovedFromRoom {   final HMSPeer peerWhoRemoved;   final String reason;   final bool roomWasEnded; } ```  `reason`: Is  string   caller  `removePeerRequest` sent   reason    removed   room.  `peerWhoRemoved`: Is  `HMSRemotePeer` instance containing  details   person  called `removePeerRequest`. This can  used  show  name   person  removed them.  `roomWasEnded`: This will  false   peer  removed. If true,  indicates   peer   removed,   entire room  ended. See [End Room](/flutter/v2/features/end-room)  details.  When  callback  received,  UI   cleaned    client side. The video call room   ended   SDK   callback  sent. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/remove-peer"
    },
    {
        "title": "render-video.mdx",
        "link": "/flutter/v2/features/render-video",
        "keywords": [],
        "headings": [
            "How to get HMSTrack ",
            "Render Video",
            "Dispose HMSVideoView to conserve bandwidth and cleanup elements",
            "Limit the number of HMSVideoView on-screen at a time "
        ],
        "content": "--- title: Render Video nav: 3.07 ---  It  comes   this. All  setup  far   done    can show live streaming videos   beautiful app.  To render video  will use HMSVideoView. To use   will need   things:  1. HMSTrack: `HMSVideoView` will render video using trackId  HMSTrack. 2. `HMSVideoView` will use viewSize  get  height  width   rendered video. If  passed,  will take whatever size  available   widget.  ## How  get HMSTrack   `HMSTrack`  used  render video  HMSVideoView.Single `HMSVideoView` can  attached   one `HMSVideoTrack`.  > For resetting  track  updating  property  `HMSVideoView`   required  use  new HMSVideoView widget.  And  can get  tracks  listening  `HMSUpdateListener.onTrackUpdate`  Add  check   tracks  see    video tracks  audio tracks.  > `HMSSDK` automatically handles audio tracks. So    required   set   application. Although [mute/unmute](../features/mute)  [set audio volume](../advanced-features/set-volume) features  provided >  SDK.    For example -  ```dart /// check   track  video  audio  /// For Audio track.kind == HMSTrackKind.kHMSTrackKindAudio  /// For Video track.kind == HMSTrackKind.kHMSTrackKindVideo ```  Now,  can pass  video track  `HMSVideoView `  get  live video   screen.  ## Render Video  To display video tracks `HMSSDK` provides  `HMSVideoView` widget.  ```dart class HMSVideoView extends StatelessWidget {   ///  This will render video  trackId present  track   will  height = 50  width = 50   //[track] - track   displayed   final HMSVideoTrack track;    //[matchParent] -  match  size  parent widget   final matchParent;    //[scaleType] - To set  video scaling   final ScaleType scaleType;    //[setMirror] - To set mirroring  video   //Generally true  local peer  false   remote peer   final bool setMirror; } ```  > `HMSVideoView` also accepts `Key`   optional parameter    recommended  always pass `Key`  `HMSVideoView` So   can  disposed   reset correctly  rebuilds.  Let's understand  `ScaleType` property  bit more. The `ScaleType` property decides  much space  video will take   available space.  ```dart enum ScaleType {     //Video maintains  aspect ratio    occupies space based   aspect ratio   SCALE_ASPECT_FIT,     //Video occupies   available space  may get cropped   SCALE_ASPECT_FILL,     //Video aspect ratio  balanced similar  SCALE_ASPECT_FIT   SCALE_ASPECT_BALANCED  } ```  > 🔑  Note: `SCALE_ASPECT_FIT`   default scaleType  HMSVideoView  ## Dispose HMSVideoView  conserve bandwidth  cleanup elements  Remove  HMSVideoView  UI   will  render  video & conserve network bandwidth.  It  always advised  stop rendering video     required  save bandwidth consumption. This  done   example app  setting  `isOffscreen` property  `PeerTrackNode`  true   peer tile  off-screen. So  app   download  video track   tile  off-screen.  ## Limit  number  HMSVideoView on-screen   time   `HMSVideoView` internally uses `SurfaceView`  android  `UiKitView`  iOS.It  recommended  render   4-6 videos   time on-screen   rest   paginated  better performance.   For  full example try   [Example app here](https://github.com/100mslive/100ms-flutter/tree/main/example). ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/render-video"
    },
    {
        "title": "screen-share.mdx",
        "link": "/flutter/v2/features/screen-share",
        "keywords": [],
        "headings": [
            "Android Setup",
            "iOS Setup",
            "Step 1 - Open project",
            "Step 2 - Add Broadcast Upload Extension",
            "Step 3 - Add App Group",
            "Step 4 - Edit Podfile",
            "Step 5 - Edit SampleHandler",
            "How to start screenshare from the app",
            "How to get Screen Share Status",
            "How to stop screenshare",
            "How to display screenshare in apps ",
            "Screenshare track from onTrackUpdate",
            "Screenshare track from auxiliaryTracks"
        ],
        "content": "--- title: Screen Share nav: 3.18 ---  Flutter SDK provides support  sharing  entire screen   device   room.  Please note    peer  share  screen,  role must  Screenshare enabled   dashboard. Also select  appropriate resolution   Screen share quality. 1080p  recommended  better text readability.  ## Android Setup  You also need  pass  intent  android native side  HMS SDK   following way :  In  app's `MainActivity` add -  ```kotlin import live.hms.hmssdk_flutter.HmssdkFlutterPlugin import android.app.Activity import android.content.Intent import live.hms.hmssdk_flutter.Constants  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) { super.onActivityResult(requestCode, resultCode, data)       (requestCode == Constants.SCREEN_SHARE_INTENT_REQUEST_CODE && resultCode == Activity.RESULT_OK){         HmssdkFlutterPlugin.hmssdkFlutterPlugin?.requestScreenShare(data)     }  }  ``` > DONOT forget  add  permission  foreground service  AndroidManifest.xml  ```kotlin <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /> ```  ## iOS Setup  You need  create  iOS broadcast upload extension. It uses Apple's ReplayKit framework  record  device screen  delivers frame samples   broadcast extension. You can share     app  also  entire device sceeen including  apps   device.   ### Step 1 - Open project Open  iOS Xcode project,   `ios/Runner.xcworkspace`  full-Flutter apps.  ### Step 2 - Add Broadcast Upload Extension Click   project   Project Navigator  show  project settings.  Press +   bottom   target list  add  new target.  ![AddExtension](/docs/v2/flutter-xcode.png)  Select  `Broadcast Upload Extension` type   new target.  ![SelectExtension](/docs/v2/flutter-select-extension.png)  Enter  new target detail   dialog. Uncheck Include UI Extension option.  ![DetailExtension](/docs/v2/flutter-extension-detail.png)  In  following dialog, activate  new scheme   new target.  ![ActivateExtension](/docs/v2/flutter-activate-extension.png)  ### Step 3 - Add App Group  Click + icon  `Signing & Capabilities` section. Select `App Group`   list  Capabilities.  ![AddAppgroup](/docs/v2/flutter-add-appgroup.png)  New section   added  `Signing & Capabilities` named App Groups. Click + icon  that.  ![Appgroup](/docs/v2/flutter-appgroup.png)  Enter App group name (create unique app group name ex: group.your.domain.name)  ![AppgroupDetail](/docs/v2/flutter-appgroup-detail.png)  ### Step 4 - Edit Podfile In ios folder   flutter project  open `Podfile`. Paste  following code  replace  extension name  just created: ``` target 'Your Extension Name here' do   use_modular_headers!   pod 'HMSBroadcastExtensionSDK' end ``` ![Podfile](/docs/v2/flutter-podfile.png)  In terminal change directory  ios  run `pod install` command.  ### Step 5 - Edit SampleHandler Expand `Runner > ExtensionName`  open SampleHandler file.  ![SampleHandler](/docs/v2/flutter-sample-handler.png)  Replace  code   code   pass app group name   respected field:  ```swift import ReplayKit import HMSBroadcastExtensionSDK  class SampleHandler: RPBroadcastSampleHandler {      let screenRenderer = HMSScreenRenderer(appGroup: \"Enter App Group Name\")      override func broadcastStarted(withSetupInfo setupInfo: [String : NSObject]?) {         // User  requested  start  broadcast. Setup info   UI extension can  supplied  optional.     }      override func broadcastPaused() {         // User  requested  pause  broadcast. Samples will stop  delivered.     }      override func broadcastResumed() {         // User  requested  resume  broadcast. Samples delivery will resume.     }      override func broadcastFinished() {         // User  requested  finish  broadcast.         screenRenderer.invalidate()     }      override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {         switch sampleBufferType {         case RPSampleBufferType.video:             // Handle video sample buffer              let error = screenRenderer.process(sampleBuffer) {                  error.code == .noActiveMeeting {                     finishBroadcastWithError(NSError(domain: \"ScreenShare\",                                                      code: error.code.rawValue,                                                      userInfo: [NSLocalizedFailureReasonErrorKey : \"You     meeting.\"]))                 }             }             break         case RPSampleBufferType.audioApp:             // Handle audio sample buffer  app audio             break         case RPSampleBufferType.audioMic:             // Handle audio sample buffer  mic audio             break         @unknown default:             // Handle  sample buffer types             fatalError(\"Unknown type  sample buffer\")         }     } } ```  ## How  start screenshare   app  To start screen share, app needs  call  `startScreenshare` method  `HMSSDK`.  Following   snippet    use this:  ```dart hmsSDK.startScreenShare(hmsActionResultListener: hmsActionResultListener); ```  To start screen share  iOS  need  pass `App Group`  `Extension` name  `HMSSDK`  follows:  ```dart HMSSDK(appGroup: \"group.name\", preferredExtension: \"your.extension.name\") ``` You can find `app group`  `extension` name  Xcode  `Signing  Capabilities` section  `target > yourExtensionName`.  ![parameter](/docs/v2/flutter-dart-help.png)   > ❗️ NOTE  iOS 16: If  start Screenshare   iPhone/iPad running iOS 16 version,    app   foreground  Screenshare will work fine. But   start Screenshare & background  app,  Screenshare pauses   SDK  unable  send video frames using IPC. This results   peers  room seeing stuck frame. We  actively working  resolve  issue. On iOS 15  below,  issue   exists.   Note viewing Screenshare  iOS 16 devices  unaffected   & works fine.   ## How  get Screen Share Status  Application needs  call  `isScreenShareActive` method  `HMSSDK`.  This method returns  `Boolean`  will  true inscase ScreenShare  currently active   used,  False  inactive state.  ```dart hmsSDK.isScreenShareActive(); ```  To start Screen share  iOS  need  pass appGroup  preferred Extension name  HMSSDK:  ```dart HMSSDK(appGroup: appGroup, preferredExtension: preferredExtension); ```  ## How  stop screenshare  To stop  screenshare,  need  invoke `stopscreenShare` method  `HMSSDK`  Following   snippet    use this:  ```dart hmsSDK.stopScreenShare(hmsActionResultListener: hmsActionResultListener); ``` ## How  display screenshare  apps   > Screenshare track can  differentiated  normal video track using track's `source` property  `track.source == \"SCREEN\"`  screenshare >tracks  Screenshare tracks can  found  two ways,  `onTrackUpdate`   track  added    peer's `auxiliaryTracks`.  ## Screenshare track  onTrackUpdate  Get screenshare track directly  onTrackUpdate  display   below:   ```dart void onTrackUpdate(       {required HMSTrack track,       required HMSTrackUpdate trackUpdate,       required HMSPeer peer}) {      switch (update) {       case HMSTrackUpdate.trackAdded:          (track.source == \"SCREEN\") {             //This track   screenshare track  can  rendered using HMSVideoView as             HMSVideoView(track:track);         }     } } ```  ## Screenshare track  auxiliaryTracks  The peer's screenshare can also  found  `auxiliaryTracks` property  peer. `auxiliaryTracks`   type `List<HMSTrack>?`.  To get screenshare track  `auxiliaryTracks`  implementation   follows:  ```dart HMSTrack? screenShareTrack =         peer.auxiliaryTracks?.firstWhere((track) => track.source == \"SCREEN\"); if(screenShareTrack != null){   //The user  sharing  screen   screenshare track.   HMSVideoView(track: screenShareTrack); } ```  ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/screen-share"
    },
    {
        "title": "session-metadata.mdx",
        "link": "/flutter/v2/features/session-metadata",
        "keywords": [],
        "headings": [
            "Limits",
            "Set Session Metadata",
            "Get Session Metadata",
            "Updating session metadata manually"
        ],
        "content": "--- title: Session Metadata nav: 3.22 ---  Session Metadata   alpha feature  allows   set  get metadata   given session.  > A session  defined   period    first peer joins  empty room till  last peer leaves.   The  room can  multiple sessions. During one session  metadata will  preserved. Once  session ends  session metadata will also  cleared,  is,   last peer leaves.  ### Limits  Since session metadata   alpha feature,      following: 1. Locks  ensure consistency   data. If two peers update     time,  will   race condition   one succeeds last, overwriting whatever  before. 2. SDKs   made aware  session metadata updates   own. This    done manually. One suggested way  listed [below](#updating-session-metadata-manually).  #### Set Session Metadata Any peer can set  session metadata  calling `setSessionMetadata`  pass `String` value   metadata parameter.  ```dart hmsSDK.setSessionMetadata(metadata: \"ENTER METADATA HERE\", hmsActionResultListener: hmsActionResultListener); ``` > You will receive  update  `onSuccess` Callback  successfully setting metadata  `HMSActionResultListenerMethod.setSessionMetadata`.  ### Get Session Metadata Any peer can get metadata  calling `getSessionMetadata`.  ```dart String? metadata = await hmsSDK.getSessionMetadata(); ```  ### Updating session metadata manually  Since  updates  sent  session metadata     alpha feature,   one suggested way  getting peers  receive   set.  One way  notify  apps   change  session metadata   send  custom broadcast message   set succeeds. The type can  set  something like \"metadata\"  whatever  choose      handled   `onMessage`   apps. To `getSessionMetadata`   time instead  showing  message   type.  `onSuccess` callback send  broadcast message  follows:  ```dart  @override   void onSuccess(       {HMSActionResultListenerMethod methodType =           HMSActionResultListenerMethod.unknown,       Map<String, dynamic>? arguments}) {         switch (methodType){             case HMSActionResultListenerMethod.setSessionMetadata:                 hmssdk.sendBroadcastMessage(message:\"refresh\", type: \"metadata\", hmsActionResultListener:hmsActionResultListener);                 break;         }       } ```  `onMessage` callback check  message type  update session Metadata value.  ```dart   @override   void onMessage({required HMSMessage message}) {     if(message.type==\"metadata\") {         getSessionMetadata();         return;     }   } ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/session-metadata"
    },
    {
        "title": "set-playback-allowed.mdx",
        "link": "/flutter/v2/features/set-playback-allowed",
        "keywords": [],
        "headings": ["Fetch isPlaybackAllowed", "Set isPlaybackAllowed"],
        "content": "--- title: Set Playback Allowed nav: 3.27 ---  Mute  something  applies   audio  video   possible  mute remote peers   yourself. When  will mute audio  video,    able  hear  see  remote person   will  audible  visible  others  ## Fetch isPlaybackAllowed  You can check  playback  allowed     certain remote peer's audio  video.  ```dart //remoteAudioTrack   remote peer's audio track bool isPlaybackAllowedForAudioTrack = remoteAudioTrack.isPlaybackAllowed  //remoteVideoTrack   remote peer's video track bool isPlaybackAllowedForVideoTrack = remoteVideoTrack.isPlaybackAllowed ``` ## Set isPlaybackAllowed  You can set playback   certain remote peer's audio  video. If  set   false  will turn   audio  video   you. You can revert   setting   true.  ```dart //remoteAudioTrack   remote peer's audio track remoteAudioTrack.setPlaybackAllowed(false);//setting playback  false  //remoteVideoTrack   remote peer's video track remoteVideoTrack.setPlaybackAllowed(true);//setting playback  true ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/set-playback-allowed"
    },
    {
        "title": "update-listener-enums.mdx",
        "link": "/flutter/v2/features/update-listener-enums",
        "keywords": [],
        "headings": ["HMSPeerUpdate", "HMSTrackUpdate", "HMSRoomUpdate"],
        "content": "--- title: Update Listeners Enums nav: 3.10 ---  ## HMSPeerUpdate  Whenever    update related   peer  `HMSSDK` sends   `HMSPeerUpdate` enum type  ```dart ///PeerUpdates   room. enum HMSPeerUpdate {   ///When new peer joins  room.   peerJoined,    ///When peer left  room.   peerLeft,    ///when peer's role  changed   roleUpdated,    ///when meta data  changed(eg:Hand Raise)   metadataChanged,    ///When Peer name  changed   nameChanged,    ///Peer's network quality updates   networkQualityUpdated     ///Unknown Update   defaultUpdate } ```  ## HMSTrackUpdate  Whenever    update related  track  `HMSSDK` sends   `HMSTrackUpdate` enum type  ```dart ///Track updates  will get     change   track enum HMSTrackUpdate {   //when  new track  added.   trackAdded,    ///when track  removed.   trackRemoved,    ///when track  muted   audio,video  both.   trackMuted,    ///when track  unmuted   audio,video  both.   trackUnMuted,    ///When track  degraded   trackDegraded,    ///When track  restored   trackRestored,    ///when track description  changed   trackDescriptionChanged,    ///default update   defaultUpdate } ```   ## HMSRoomUpdate  Whenever    update related  room  `HMSSDK` sends   `HMSRoomUpdate` enum type  ```dart enum HMSRoomUpdate {    ///When room  muted   roomMuted,    ///When room  unmuted   roomUnmuted,    ///When server recording state  updated   serverRecordingStateUpdated,    ///When RTMP  started  stopped   rtmpStreamingStateUpdated,    ///When HLS  started  stopped   hlsStreamingStateUpdated,    ///When hls recording state  updated   hlsRecordingStateUpdated,    ///When browser recording state  changed   browserRecordingStateUpdated,    ///When room name changed   RoomNameUpdated,    ///Default Update   defaultUpdate } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/update-listener-enums"
    },
    {
        "title": "update-listeners.mdx",
        "link": "/flutter/v2/features/update-listeners",
        "keywords": [],
        "headings": ["A HMSSpeaker object contains -"],
        "content": "--- title: Update Listeners nav: 3.09 ---  Now,  take  look   listener class   implemented.  ```dart abstract class HMSUpdateListener {   /// This will  called   successful JOIN   room   user   ///   /// This   point  applications can stop showing  loading state   /// - Parameter room:  room   joined   void onJoin({required HMSRoom room});     /// This will  called whenever    update   existing peer   ///   new peer got added/existing peer  removed.   ///   /// This callback can  used  keep  track    peers   room   /// - Parameters:   ///   - peer:  peer  joined/left   updated   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update});     /// This  called    updates   existing track   ///   new track got added/existing track  removed   ///   /// This callback can  used  render  video  screen whenever  track gets added   /// - Parameters:   ///   - track:  track   added, removed  updated   ///   - trackUpdate:  triggered update type   ///   - peer:  peer   track  added, removed  updated   void onTrackUpdate(       {required HMSTrack track,       required HMSTrackUpdate trackUpdate,       required HMSPeer peer});     /// This  called     new broadcast message    peer   room   ///   /// This can  used  implement chat   room   /// - Parameter message:  received broadcast message   void onMessage({required HMSMessage message});     /// This  called  someone asks  change  role   ///   ///  eg. admin can ask  peer  become host  guest.   ///  triggers  call  peer's app   void onRoleChangeRequest({required HMSRoleChangeRequest roleChangeRequest});     /// ## A HMSSpeaker object contains -   ///    - peerId:  peer identifier  HMSPeer   speaking   ///    - trackId:  track identifier  HMSTrack   emitting audio   ///    - audioLevel:  number within range 1-100 indicating  audio volume   ///   /// A peer    present   list indicates   peer   speaking   ///   /// This can  used  highlight currently speaking peers   room   /// - Parameter speakers:  list  speakers   void onUpdateSpeakers({required List<HMSSpeaker> updateSpeakers});    /// This will  called     error   system   ///   ///  SDK  already retried  fix  error   /// - Parameter error:  error  occurred   void onHMSError({required HMSException error});     /// This  called     change   property   Room   ///   /// - Parameters:   ///   - room:  room   joined   ///   - update:  triggered update type. Should  used  perform different UI Actions   void onRoomUpdate({required HMSRoom room, required HMSRoomUpdate update});     ///when network    error happens  will  called   void onReconnecting();     ///when   back   room  reconnection   void onReconnected();    ///when someone requests  track change     video  audio  will  triggered   /// - Parameter hmsTrackChangeRequest: request instance consisting    required info  track change   void onChangeTrackStateRequest(      {required HMSTrackChangeRequest hmsTrackChangeRequest});    ///when someone kicks     someone ends  room   time   triggered   ///- Paramter hmsPeerRemovedFromPeer -  consists info   removed   why.   void onRemovedFromRoom(      {required HMSPeerRemovedFromPeer hmsPeerRemovedFromPeer});    ///whenever  new audio device gets connected   device  audio device  switched   triggered   ///- Parameters   ///  - currentAudioDevice - current audio output device   ///  - availableAudioDevice - list  available audio output devices   void onAudioDeviceChanged(      {HMSAudioDevice? currentAudioDevice,      List<HMSAudioDevice>? availableAudioDevice}); } ```  > `HMSUpdateListener` : A class conforming  HMSUpdateListener interface. The methods  HMSUpdateListener  invoked  notify updates happening   room like  peer join/leave, track mute/unmute etc.  Add  `updateListener` instance to ```dart HMSSDK hmsSDK = HMSSDK(); hmsSDK.build(); hmsSDK.addUpdateListener(updateListener); ```  After calling join  app will  provided  update   100ms SDK.  ✅ If successful,  `onJoin({required HMSRoom room})` method  HMSUpdateListener will  invoked  information   room encapsulated   HMSRoom object.  ❌ If failure,  `onHMSError({required HMSException error})` method will  invoked  exact failure reason.  Remove  `updateListener` instance as:  ```dart hmsSDK.removeUpdateListener(updateListener); ```",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/features/update-listeners"
    },
    {
        "title": "adaptive-bitrate.mdx",
        "link": "/flutter/v2/foundation/adaptive-bitrate",
        "keywords": [],
        "headings": [],
        "content": "--- title: Adaptive Bitrate nav: 1.7 ---  Adaptive bitrate (ABR) refers  features  enable dynamic adjustments  video quality—to optimise  end-user experience  diverse network conditions. ABR ensures  every participant  able  consume  highest possible quality video  conferencing  streaming use-cases, based   bandwidth constraints.\r \r In addition  network, ABR can also optimise   right video quality based   size   video element. For example,  video call running  active speaker layout  larger video tiles  require higher quality video track. These adjustments can  made dynamically  adaptive bitrate.\r \r Learn   100ms enables adaptive bitrate in:\r \r * [Conferencing scenarios](#abr-in-conferencing)\r * [Live streaming scenarios](#abr-in-live-streaming)\r \r ## ABR  conferencing\r \r Peers  100ms rooms can publish multiple video quality levels simultaneously. This  called “simulcast”  100ms. Peers  consume  video tracks can upgrade  downgrade video quality.\r \r You can enable simulcast   publishing role's template,  use manual  automatic layer changes   subscriber's side.\r \r ### Publisher-side configuration\r \r Simulcast configuration  opt-in  can  enabled   role's configuration inside  template. The role's publish video quality determines video quality layers  simulcast. For example,  role configured  publish  720p can simulcast 180p, 360p  720p layers.\r \r | Video publish quality  Possible simulcast layers |\r |-----------------------|---------------------------|\r | 1080p                  1080p, 540p, 270p         |\r | 720p                   720p, 360p, 180p          |\r | 480p                   480p, 240p                |\r | 360p                   360p, 180p                |\r | 240p                   240p                      |\r | 180p                   180p                      |\r \r #### Enable via dashboard\r \r Enable \"can publish simulcast\"   template page   particular role. You can also specify  many video quality layers will  simultaneously published  peers   role. The peer will publish  layers assuming network bandwidth permits.\r \r ![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r \r #### Enable via API\r \r Update role configuration using  [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2  3 layers  scale   selected publish layer.\r \r In  example below,  role  configured  publish 720p  3 simulcast layers:\r \r * `f`  full  scale  factor  1 (= 720p)\r * `h`  half  scale  factor  2 (= 360p)\r * `q`  quarter  scale  factor  4 (= 180p)  ```js {     \"publishParams\": {         ...         \"simulcast\": {             \"video\": {                 \"layers\": [                     {                         \"rid\": \"f\",                         \"scaleResolutionDownBy\": 1,                         \"maxBitrate\": 700,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"h\",                         \"scaleResolutionDownBy\": 2,                         \"maxBitrate\": 250,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"q\",                         \"scaleResolutionDownBy\": 4,                         \"maxBitrate\": 100,                         \"maxFramerate\": 30                     }                 ]             },             \"screen\": {}         }     } } ``` \r ### Subscribe-side behavior\r \r <br/>\r \r #### Manual layer selection\r \r The 100ms client-side SDKs provide methods  set  preferred quality layer   remote peer's video track. See docs   preferred platform:\r \r * [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r * [iOS](/docs/ios/v2/advanced-features/simulcast)\r * [Android](/docs/android/v2/advanced-features/simulcast)\r \r #### Automatic layer selection\r \r <br/>\r <video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r     <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r </video>\r <br/>\r \r - Based  video tile size: The SDK automatically ensures appropriate video layer  subscribed to,  demonstrated   video above. For example,   video element  360 px  width, 360p   closest layer will  selected.\r     - **JavaScript**: The `useVideo` hook   100ms React SDK auto-selects  appropriate video quality layer.\r     - **iOS**: `HMSVideoView` can auto-select video quality layer.\r     - **Android**: _Coming soon_.\r - Based  network quality: ABR will work alongside subscribe degradation  auto-downgrade video quality  peers. This  _coming soon_.\r \r ## ABR  live streaming\r \r 100ms uses  HTTP Live Streaming (HLS) protocol  live streaming scenarios. HLS supports adaptive bitrate    box,  HLS video players can automatically  manually pick appropriate video quality levels.\r \r Learn   [how HLS works   blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/adaptive-bitrate"
    },
    {
        "title": "basics.mdx",
        "link": "/flutter/v2/foundation/basics",
        "keywords": [],
        "headings": ["Quickstart", "100ms Flutter app", "Github Repo "],
        "content": "---\r title: Basic Concepts\r nav: 1.1\r ---\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](../guides/quickstart)\r \r ### 100ms Flutter app\r \r You can download & check   100ms Flutter app - \r \r 🤖 The Flutter Android app  [Google Play Store here](https://play.google.com/store/apps/details?id=live.hms.flutter)\r \r 📱 Flutter iOS app  [Apple App Store here](https://apps.apple.com/app/100ms-live/id1576541989)\r \r \r ### Github Repo \r You can checkout  100ms Flutter SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/100ms-flutter/) \r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/basics"
    },
    {
        "title": "handling-audio-video-edge-cases.mdx",
        "link": "/flutter/v2/foundation/handling-audio-video-edge-cases",
        "keywords": [],
        "headings": [],
        "content": "--- title: Handling audio-video edge cases nav: 1.4 ---  ## Introduction  100ms handles  lot  standard audio/video issues internally without  developer needing  handle  explicitly. This page describes  common issues   100ms handles them.  There  3 major issues  issues  can occur   audio/video conference  - Device capture exceptions - Network disconnection/switching network exceptions - Network bandwidth limitation/large room exceptions  ## Device failure  A common issue   failure  capture mic/camera even though  user   devices connected. Common causes include differences  OS/browser implementations  device capture APIs, permission   granted   user,   device   use  another program.  The usual recourse   exceptions   prompt  user action - \"Grant permission\", \"Please close   app using microphone\", \"Switch  Safari\"  100ms' SDKs come   [preview method](../features/preview)  can  called  joining  room. This will test  device failures, network connectivity  throw errors   recommended user action.  ## Network disconnection/Switching networks  Another set  common issues  minor network blips. Common causes    user moves  one room  another,  switches  wifi  data.  100ms will send  notification within 10s  detecting  network disconnection  will automatically retry  connection  available upto 60s. After 60s,  terminal error  thrown   client.  ## Network bandwidth limitation/large rooms  A common occurrence  large rooms,  constrained networks  dropped frames. This results  robotic voices, frozen frames, pixelated screenshare  entire pieces  audio/video   lost.  100ms will automatically prioritize connections  network limits  reached. This prioritization can  controlled  developers using  dashboard  100ms APIs.  eg. A developer can prioritize host's screenshare higher  guests' videos. In low bandwidth constraints, guests' videos will  turned off,  host's screenshare will remain.   ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/handling-audio-video-edge-cases"
    },
    {
        "title": "live-streaming.mdx",
        "link": "/flutter/v2/foundation/live-streaming",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming nav: 1.5 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   Flutter SDK [here](/flutter/v2/features/hls). ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/live-streaming"
    },
    {
        "title": "recordings.mdx",
        "link": "/flutter/v2/foundation/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.6 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/recordings"
    },
    {
        "title": "security-and-tokens.mdx",
        "link": "/flutter/v2/foundation/security-and-tokens",
        "keywords": [],
        "headings": ["Code sample: Generate app token", "Code sample: Generate management token"],
        "content": "---\r title: Authentication  Tokens\r nav: 1.3\r ---\r \r ## Introduction  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](./../features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](/docs/server-side/v2/Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use? You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language. \r \r #### Code sample: Generate app token\r \r <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='client-code-token-0'>\r \r ```javascript\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r var payload = {\r     access_key: app_access_key,\r     room_id: '<room_id>',\r     user_id: '<user_id>',\r     role: '<role>',\r     type: 'app',\r     version: 2,\r     iat: Math.floor(Date.now() / 1000),\r     nbf: Math.floor(Date.now() / 1000)\r };\r \r jwt.sign(\r     payload,\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='client-code-token-1'>\r \r ```python\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r import sys\r \r app_access_key = \"<app_access_key>\"\r app_secret = \"<app_secret>\"\r \r def generate(room_id, user_id, role):\r     expires = expires  24 * 3600\r     now = datetime.datetime.utcnow()\r     exp  = now+ datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r                 \"access_key\": app_access_key,\r                 \"type\":\"app\",\r                 \"version\":2,\r                 \"room_id\": room_id,\r                 \"user_id\": user_id,\r                 \"role\":role,\r                 \"jti\": str(uuid.uuid4()),\r                 \"exp\": exp,\r                 \"iat\": now,\r                 \"nbf\": now,\r                 }, key=app_secret)\r if __name__ == \"__main__\":\r      len(sys.argv) == 3:\r         room_id = sys.argv[0]\r         user_id = sys.argv[1]\r         role = sys.argv[2]\r     print(generate(room_id=room_id, user_id=user_id, role=role))\r ```\r \r </Tab>\r \r <Tab id='client-code-token-2'  >\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateHmsClientToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"room_id\", \"<room_id>\");\r     payload.put(\"user_id\", \"<user_id>\");\r     payload.put(\"role\", \"<role>\");\r     payload.put(\"type\", \"app\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id='client-code-token-3'  >\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r \r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"app_secret\"\r \r def generateAppToken(room_id, user_id, role)\r     now = Time.now\r     exp = now + 86400\r     payload = {\r         access_key: $app_access_key,\r         room_id: room_id,\r         user_id: user_id,\r         role: role,\r         type: \"app\",\r         jti: SecureRandom.uuid,\r         version: 2,\r         iat: now.to_i,\r         nbf: now.to_i,\r         exp: exp.to_i\r     }\r \r     token = JWT.encode(payload, $app_secret, 'HS256')\r end\r \r puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"\r \r ```\r \r </Tab>\r \r <Tab id='client-code-token-4'>\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $issuedAt  = new DateTimeImmutable();\r $expire    = $issuedAt->modify('+24 hours')->getTimestamp();\r $accessKey = \"<app_access_key>\";\r $secret = \"<app_secret>\";\r $version   = 2;\r $type      = \"app\";\r $role      = \"<role>\";\r $roomId    = \"<room_id>\";\r $userId    = \"<user_id>\";\r \r $payload = [\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r     'access_key' => $accessKey,\r     'type' => \"app\",\r     'jti' =>  Uuid::uuid4()->toString()\r     'version' => 2,\r     'role' => $role,\r     'room_id' => $roomId,\r     'user_id' => $userId\r ];\r \r $token = JWT::encode(\r     $payload,\r     $secret,\r     'HS256'\r );\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure.\r \r </Note>\r \r #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](./../guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.   #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.   If  evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics),  can use  public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.\r \r #### Code sample: Generate management token\r \r <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='test-code-0'>\r \r ```js\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r jwt.sign(\r     {\r         access_key: app_access_key,\r         type: 'management',\r         version: 2,\r         iat: Math.floor(Date.now() / 1000),\r         nbf: Math.floor(Date.now() / 1000)\r     },\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='test-code-1'>\r \r ```py\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r \r app_access_key = '<app_access_key>'\r app_secret = '<app_secret>'\r \r \r def generateManagementToken():\r     expires = 24 * 3600\r     now = datetime.datetime.utcnow()\r     exp = now + datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r         'access_key': app_access_key,\r         'type': 'management',\r         'version': 2,\r         'jti': str(uuid.uuid4()),\r         'iat': now,\r         'exp': exp,\r         'nbf': now\r         }, key=app_secret)\r \r if __name__ == '__main__':\r     print(generateManagementToken())\r ```\r \r </Tab>\r \r <Tab id=\"test-code-2\">\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateManagementToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"type\", \"management\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id=\"test-code-3\">\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"<app_secret>\"\r \r def generateManagementToken()\r     now = Time.now\r     exp = now + 86400\r     payload = {\r     access_key: $app_access_key,\r     type: \"management\",\r     version: 2,\r     jti: SecureRandom.uuid,\r     iat: now.to_i,\r     nbf: now.to_i,\r     exp: exp.to_i\r }\r token = JWT.encode(payload, $app_secret, 'HS256')\r return token\r end\r \r puts generateManagementToken\r ```\r \r </Tab>\r \r <Tab id=\"test-code-4\">\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $app_access_key = \"<app_access_key>\";\r $app_secret = \"<app_secret>\";\r \r $issuedAt   = new DateTimeImmutable();\r $expire     = $issuedAt->modify('+24 hours')->getTimestamp();\r \r $payload = [\r     'access_key' => $app_access_key,\r     'type' => 'management',\r     'version' => 2,\r     'jti' =>  Uuid::uuid4()->toString(),\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r ];\r \r $token = JWT::encode($payload, $app_secret, 'HS256');\r ?>\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.\r \r </Note>\r ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/security-and-tokens"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/flutter/v2/foundation/templates-and-roles",
        "keywords": [],
        "headings": ["API reference"],
        "content": "--- title: Templates  Roles nav: 1.2 ---  ## Introduction  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              |   ## API reference  Apart   dashboard,  programmatic way  interact  templates  via [API](/server-side/v2/policy/template-object). ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/foundation/templates-and-roles"
    },
    {
        "title": "joining-with-preview.mdx",
        "link": "/flutter/v2/guides/joining-with-preview",
        "keywords": [],
        "headings": ["Attaching Preview and Error Listeners", "Calling Preview and Join functions"],
        "content": "--- title: Joining  Preview nav: 2.4 ---  ## Attaching Preview  Error Listeners  It  important  attach preview listener  error listener  calling  preview function  order  get updates  preview got executed successfully  failed.  ```dart section=AttachingPreviewAndErrorListeners sectionIndex=1 import 'package:hmssdk_flutter/hmssdk_flutter.dart';  class HMSSDKInteractor {   late HMSSDK hmsSDK;    HMSSDKInteractor() {     hmsSDK = HMSSDK();    // save  hms instance     hmsSDK.build();   }    void addPreviewListener(HMSPreviewListener listener) {     hmsSDK.addPreviewListener(listener: listener);   }    void addUpdateListener(HMSUpdateListener listener) {     hmsSDK.addUpdateListener(listener: listener);   }  } ```  ## Calling Preview  Join functions  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining. Once  listeners  attached  can call  preview function. After  preview function  called    wait   preview  error callback  calling  join function.  ```dart section=CallingPreviewAndJoinFunctions sectionIndex=1 import 'package:hmssdk_flutter/hmssdk_flutter.dart';  Class preview implements HMSUpdateListener, HMSActionResultListener{   void preview(HMSConfig config){     hmsInstance.preview(config);   } }    @override   void onHMSError({required HMSException error}) {     //  callback will  triggered  preview  join functions fails   }  void onPreviewListener(HMSPreviewListener listener) { //  callback will  triggered  preview  successful      call join     hmsSDK.join(config: this.config);   }  void onUpdateListener(HMSUpdateListener listener) {     hmsSDK.addUpdateListener(listener: listener);   } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/guides/joining-with-preview"
    },
    {
        "title": "quickstart.mdx",
        "link": "/flutter/v2/guides/quickstart",
        "keywords": [],
        "headings": [
            "Overview",
            "Prerequisites",
            "Get an instant video call joining link",
            "Add SDK dependencies",
            "Login",
            "Request",
            "Response",
            "Add Permissions",
            "Android Permissions",
            "iOS Permissions",
            "Join a Video Call",
            "A HMSSpeaker object contains -",
            "How you know when people join or leave",
            "How to render audio and video",
            "Showing Videos",
            "Mute/UnMute Audio",
            "Mute/UnMute Video",
            "Leave a video call",
            "Glossary",
            "Where to go from here",
            "100ms Flutter app",
            "Github Repo "
        ],
        "content": "--- title: 100ms SDK Flutter Quickstart Guide nav: 2.0 ---  ## Overview  This overview shows  major steps involved  creating  Demo Flutter Project   100ms SDK. Each section links  extra detail.  [A sample app demonstrating   available here](https://github.com/100mslive/100ms-flutter/tree/main/example).  Jump   section  interested   read top   get  overview  -   [Get  instant video call joining link](#getting-the-video-call-joining-link) -   [Add  SDK dependencies](#add-sdk-dependencies) -   [Create  login token  authenticate  user](#login) -   [Add permissions](#add-permissions) -   [Create  instance   `HMSSDK`](#instantiate-hmssdk)  *   Show  optional   user's audio video   100ms `hmssdk.preview`.  -   [Call `hmssdk.join`   video call link  join  call](#join-a-video-call) -   [Know  people join  leave](#how-you-know-when-people-join-or-leave) -   [How  render audio/video](#how-to-render-audio-and-video) -   [Listening  updates effectively](#listening-to-updates-effectively)     <hr />  ## Prerequisites  Familiarity   [fundamentals](https://flutter.dev/docs/reference/tutorials)  Flutter apps.  > HMSSDK requires flutter 2.10.x   versions  ### Get  instant video call joining link  To join  video call  need  authentication token   room id. Or  server  will translate  link  them. The [100ms Dashboard](https://dashboard.100ms.live/register)  one way  generate  auth tokens. In production   server will generate   manage user authentication.  Links created   dashboard will stop working  10k minutes  video calls. You'll need  setup   server after.  For  purposes   quickstart  can rely  just  100ms dashboard. Sign    100ms Dashboard [here](https://dashboard.100ms.live/register).  From either  dashboard,    server  implemented,  need  generate  video call link. Video call links generated   100ms Dashboard look like `https://myname.app.100ms.live/meeting/correct-horse-battery`.  > ⚙️ For Production > > With   server  authentication  link generation,  format   link    you.  ### Add SDK dependencies  Add  `hmssdk_flutter` plugin  dependencies  pubspec.yaml  ```dart section=AddSDKDependencies sectionIndex=1 #pubspec.yaml  dependencies: flutter:   sdk: flutter  hmssdk_flutter: ```  ### Login  #### Request  Here's   get  auth token  100ms's demo authentication  1. Sign    dashboard. 2. Get  video call link. It  look like `https://myname.app.100ms.live/meeting/correct-horse-battery` 3. Send  http post request  `https://prod-in.100ms.live/hmsapi/get-token` 4. With  header \"subdomain\" set  `myname.app.100ms.live`   link  `https://myname.app.100ms.live/meeting/correct-horse-battery` 5. For  link   type `https://myname.app.100ms.live/meeting/correct-horse-battery` The body  json   format `{\"code\": \"correct-horse-battery\", \"user_id\":\"your-customer-id\" }`  user_id can   random string  well   can create   `UUID.randomUUID().toString(),`.  > ⚙️ For Production > > Maybe   use links  all. You will need  generate tokens   backend,  rooms  users. Look   [Token Setup Guide](token) here.  #### Response  The 100ms server will respond   auth token like  `{\"token\":\"some-token-string\"}`.  ### Add Permissions  #### Android Permissions  Camera, Recording Audio  Internet permissions  required. Add    AndroidManifest.xml.  ```xml section=AndroidPermissions sectionIndex=1 <uses-feature android:name=\"android.hardware.camera\"/> <uses-feature android:name=\"android.hardware.camera.autofocus\"/> <uses-permission android:name=\"android.permission.CAMERA\"/> <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/> <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/> <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/> <uses-permission android:name=\"android.permission.BLUETOOTH\"/> <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> ```  You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.  #### iOS Permissions  Add following permissions  iOS Info.plist file  ```xml section=iOSPermissions sectionIndex=1 <key>NSMicrophoneUsageDescription</key> <string>{YourAppName} wants  use  microphone</string>  <key>NSCameraUsageDescription</key> <string>{YourAppName} wants  use  camera</string>  <key>NSLocalNetworkUsageDescription</key> <string>{YourAppName} App wants  use  local network</string> ```  ### Join  Video Call  To join  video call, call join method  HMSSDK   config settings. To listen  updates, call `addUpdateListener`  HMSSDK.  These   listener's callback functions:  `onJoin` - called   join  successful    entered  room.  > 💡 Audio will  automatically connected, video requires  work   side.  `onPeerUpdate` - called   person joins  leaves  call    audio/video mutes/unmutes.  `onTrackUpdate` - usually   person joins  call,  listener will first call `onPeerUpdate`  notify   join. Subsequently `onTrackUpdate` will  called   actual video track.  > 💡 It's essential   callback  listened    may  peers without video.  ```dart section=JoinVideoCall sectionIndex=1 HMSConfig config = HMSConfig(userName: this.userName, authToken: this.authToken); hmsSDK = HMSSDK(); hmsSDK.build() hmsSDK.join(config: this.config); hmsSDK.addUpdateListener(listener); ```  ```dart section=JoinVideoCall sectionIndex=2 /// 100ms SDK provides callbacks   client app   change  update happening   room   user  joined  implementing HMSUpdateListener. /// These updates can  used  render  video  screen   display  info regarding  room. abstract class HMSUpdateListener {    /// This will  called   successful JOIN   room   user   ///   /// This   point  applications can stop showing  loading state   /// [room]:  room   joined   void onJoin({required HMSRoom room});    /// This  called     change   property   Room   ///   ///  [room]:  room   joined   ///  [update]:  triggered update type. Should  used  perform different UI Actions   void onRoomUpdate({required HMSRoom room, required HMSRoomUpdate update});    /// This will  called whenever    update   existing peer   ///   new peer got added/existing peer  removed.   ///   /// This callback can  used  keep  track    peers   room   /// [peer]:  peer  joined/left   updated   /// [update]:  triggered update type. Should  used  perform different UI Actions   void onPeerUpdate({required HMSPeer peer, required HMSPeerUpdate update});    /// This  called    updates   existing track   ///   new track got added/existing track  removed   ///   /// This callback can  used  render  video  screen whenever  track gets added   ///  [track]:  track   added, removed  updated   ///  [trackUpdate]:  triggered update type   ///  [peer]:  peer   track  added, removed  updated   void onTrackUpdate({required HMSTrack track, required HMSTrackUpdate trackUpdate, required HMSPeer peer});    /// This will  called     error   system   ///  SDK  already retried  fix  error   /// [error]:  error  occurred   void onHMSError({required HMSException error});    /// This  called     new broadcast message    peer   room   ///   /// This can  used  implement chat   room   /// [message]:  received broadcast message   void onMessage({required HMSMessage message});    /// This  called  someone asks  change  role   ///   ///  eg. admin can ask  peer  become host  guest.   ///  triggers  call  peer's app   void onRoleChangeRequest({required HMSRoleChangeRequest roleChangeRequest});    /// This  called every 1 second  list  active speakers   ///   /// ## A HMSSpeaker object contains -   ///    - peerId:  peer identifier  HMSPeer   speaking   ///    - trackId:  track identifier  HMSTrack   emitting audio   ///    - audioLevel:  number within range 1-100 indicating  audio volume   ///   /// A peer    present   list indicates   peer   speaking   ///   /// This can  used  highlight currently speaking peers   room   /// [speakers]  list  speakers   void onUpdateSpeakers({required List<HMSSpeaker> updateSpeakers});    ///when network    error happens  will  called   void onReconnecting();    ///when   back   room  reconnection   void onReconnected();    ///when someone requests  track change     video  audio  will  triggered   /// [hmsTrackChangeRequest] request instance consisting    required info  track change   void onChangeTrackStateRequest({required HMSTrackChangeRequest hmsTrackChangeRequest});    ///when someone kicks     someone ends  room   time   triggered   /// [hmsPeerRemovedFromPeer]  consists info   removed   why.   void onRemovedFromRoom({required HMSPeerRemovedFromPeer hmsPeerRemovedFromPeer});    ///whenever  new audio device  plugged   audio output  changed we   ///get  onAudioDeviceChanged update   ///This callback   fired  Android devices. On iOS,  callback will   triggered.   /// - Parameters:   ///   - currentAudioDevice: Current audio output route   ///   - availableAudioDevice: List  available audio output devices   void onAudioDeviceChanged(       {HMSAudioDevice? currentAudioDevice,       List<HMSAudioDevice>? availableAudioDevice}); }  ```  ### How  know  people join  leave  The join method takes  interface called `HMSUpdateListener`. It lets  know  peers join  leave  call, mute/unmute  audio  video  lots more.  The `HMSUpdateListener`   callback  notify  people joining  leaving. It  `onPeerUpdate(type: HMSPeerUpdate, peer: HMSPeer)`.  > 💡 HMSPeer  object  represents  person   call.  ---  ### How  render audio  video  The SDK plays  audio  every person  joins  call. Audio will begin playing  join succeeds. To render  person's video  need  create  instance  HMSVideoView.  ### Showing Videos  A peer represents one person   video call.  A peer's video track   hmsPeer.videoTrack. ScreenShares can  found  auxilary tracks  peer i.e  auxiliary tracks   list  tracks, one   can   ScreenShare    chosen  share  screen.  ```dart section=ShowingVideos sectionIndex=1 peer.auxiliaryTracks           ?.where((each) => each.kind == HMSTrackKind.kHMSTrackKindVideo); ```  ### Mute/UnMute Audio  You can mute/unmute audio  calling switchAudio  HMSSDK. `isOn`  state variable. If `isOn`  true  audio will unmute    false  audio will mute.  ```dart section=MuteUnMuteAudio sectionIndex=1  /// audio unmute hmsSDK.switchAudio(isOn: true);  /// audio mute hmsSDK.switchAudio(isOn: false); ```  ### Mute/UnMute Video  You can mute/unmute video  calling switchVideo  HMSSDK. `isOn`  state variable. If `isOn`  true  video will turn     false  video will turn off.  ```dart section=MuteUnMuteVideo sectionIndex=1  /// video on hmsSDK.switchVideo(isOn: true);  /// video off hmsSDK.switchVideo(isOn: false); ```  ### Leave  video call  To leave  video call, just call leave  HMSSDK.  ```dart section=LeaveVideoCall sectionIndex=1 hmsSDK.leave(); ```  ## Glossary  -   `Room`: When  join  particular video call,   peers said     video call `room` -   `Track`: Media. Can   audio track   video track. -   `Peer`: One participant   video call. Local peers  you, remote peers  others. -   `Broadcast`: Chat messages  broadcasts.  ## Where  go  here  Checkout  [simple version](https://github.com/100mslive/100ms-flutter/tree/main/example)   project.This uses provider   state management library.  For implementations   state management libraries visit :  * [Bloc](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/bloc) * [Getx](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/getx) * [Riverpod](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/riverpod) * [Mobx](https://github.com/100mslive/100ms-flutter/tree/main/sample%20apps/mobx)  ### 100ms Flutter app  You can download & check   100ms Flutter app -  🤖 The Flutter Android app  [Google Play Store here](https://play.google.com/store/apps/details?id=live.hms.flutter)  📱 Flutter iOS app  [Apple App Store here](https://apps.apple.com/app/100ms-live/id1576541989)   ### Github Repo  You can checkout  100ms Flutter SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/100ms-flutter/) ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/guides/quickstart"
    },
    {
        "title": "token-endpoint.mdx",
        "link": "/flutter/v2/guides/token-endpoint",
        "keywords": [],
        "headings": [
            "Overview",
            "Get an app token using token endpoint",
            "Example client-side implementation",
            "Disable 100ms token endpoint",
            "Error Response"
        ],
        "content": "--- title: Auth Token Endpoint Guide nav: 2.3 ---  ## Overview  100ms provides  option  get `App Tokens` without setting   token generation backend service  simplify  integration journey  testing  [sample app](https://github.com/100mslive/100ms-web)  building integration  100ms.  You can find  token endpoint   [developer page](https://dashboard.100ms.live/developer)   100ms dashboard.  ![Token endpoint](/guides/token-endpoint-dashboard.png)  We recommend  move   token generation service   transition  app  production,   token endpoint service will  scale  production.  The \"Sample Apps\" built using 100ms client SDKs require  `App Token`  join  room  initiate  video conferencing  live streaming session. Please check  [Authentication  Tokens guide](./../foundation/security-and-tokens)  Please note    use  token endpoint  create  `Management Token`  server APIs. Refer   [Management Token section](./../foundation/security-and-tokens#management-token)  Authentication  Tokens guide   information.  ## Get  app token using token endpoint  You can use  token endpoint   100ms dashboard  building integration  100ms. This acts   tool enabling front-end developers  complete  integration without depending   backend developers  set   token generation backend service.  **URL format:** `<YOUR_TOKEN_ENDPOINT>api/token`  100ms token endpoint can generate  app token   inputs passed,   room_id, role, & user_id (optional -  internal user identifier   peer's user_id). You can use [jwt.io](https://jwt.io/)  validate whether  app token contains   input values.  <PostRequest title=\"https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"room_id\":\"633fcdd84208780bf665346a\",     \"role\":\"host\",     \"user_id\":\"1234\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOi***************************R3tT-Yk\",     \"msg\": \"token generated successfully\",     \"status\": 200,     \"success\": true,     \"api_version\": \"2.0.192\" } ```  </ResponseBox>  ### Example client-side implementation  You can directly add    client-side implementation, check  [sample app](https://github.com/100mslive/100ms-flutter/blob/0d4c3b5409003932d80cb19f67027a63424169e7/example/lib/service/room_service.dart#L8)  reference.  ### Disable 100ms token endpoint  Due   security concerns,    wish  use  token endpoint  generate app tokens,   can disable    [Developers page](https://dashboard.100ms.live/developer)   dashboard  disabling  option \"Disable &lt;room_id&gt;/&lt;role&gt; link format.\"  ![Disable Token endpoint](/guides/disable-token-endpoint.png)  #### Error Response  Once  disabled    dashboard,  requests  create  app token using  100ms token endpoint will throw   error:  ```json {     \"success\": false,     \"msg\": \"Generating token using  room_id  role  disabled.\",     \"api_version\": \"2.0.192\" } ``` ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/guides/token-endpoint"
    },
    {
        "title": "token.mdx",
        "link": "/flutter/v2/guides/token",
        "keywords": [],
        "headings": [],
        "content": "--- title: Auth Token Quickstart Guide nav: 2.2 ---  ## Create  100ms account  - Create  account  [Dashboard  100ms](https://dashboard.100ms.live/)  ![Create Account](/docs/guides/token/create-account.png)  - After   created  account    Confirm  Email , check  promotions tab   Mail Box    find it.  - Login   Dashboard   will see  option  Create  first app. Click  it.  ![Create  first app](/docs/guides/token/starter-kit-initialize-first-step.png)  - Then   see  popup  multiple starter kits, hover  one   starter kits  click `Deploy`. We will choose \"Video Conferencing\"  now.  ![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)  - In  `Choose  deployment` step, select 100ms  enter  subdomain  wish   `Subdomain` field.  ![Domain details](/docs/guides/token/domain-details.png)  - After  App  set click  \"Go  Dashboard\"  [Go Here](https://dashboard.100ms.live/dashboard)  ![Dasboard](/docs/guides/token/go-to-dashboard.png)  ## Create  room  - Go   [Room  Dashboard](https://dashboard.100ms.live/rooms)  click  \"Create Room\" , While creating  room  can specify  name, roles  enable recording.  ![Create Room](/docs/guides/token/create-room.png)  - You will now see \"Room Details\" section     `room_id` created, copy  somewhere.  ![Room Id](/docs/guides/token/room-id.png)  ## Get  temporary token  100ms dashboard  Any client connecting calling 100ms' service needs  authenticate using  auth token. In production      servers generating  tokens (see  [here](/docs/javascript/v2/foundation/security-and-tokens)),    quick start  can use  dashboard  create  token  you. The token will expire  24 hours     hard-coded   production app.  - To get  temporary token click  \"Join room\" button.  ![Join Room](/docs/guides/token/join-room.png)  - In  popup  shows  click  icon   key shape next   role  want  join as.  ![Copy Token](/docs/guides/token/copy-token.png)  The token will  copied   clipboard. Use  along   `room_id`  proceed   quickstart guide. ",
        "platformName": "Flutter",
        "objectID": "/flutter/v2/guides/token"
    },
    {
        "title": "peer-metadata-update.mdx",
        "link": "/ios/v2/advanced-features/peer-metadata-update",
        "keywords": [],
        "headings": ["Reading metadata", "Responding to updates", "Updating Metadata"],
        "content": "---  title: Peer Metadata Update  nav: 4 ---  Looking  persistent state  can  set   peer  updated anytime,  everyone   room? Peer metadata  it.  Metadata can  set initially   `HMSConfig` object  passed   join method.  This section will show   to:  1.  [Read Peer Metadata](#reading-metadata). 2.  [Respond    remote peer changes  metadata](#responding-to-updates). 3.  [How  set  peer's metadata](#updating-metadata).  The `HMSPeer` object prior  0.2.1 contained `customerDescription`  read-only string whose value  change throughout  call. This   replaced  `metadata`. The value  initially assigned    now can  changed   peer  owns it.  Any peer can change  metadata  themselves. Currently one peer  change another peer's metadata.  To change   metadata value  peer  call `change(metadata:completion:)`   `HMSSSDK` instance.  The data may   arbitrary string.  ## Reading metadata  To read metadata, read  `metadata` value   `HMSPeer` instance.  ## Responding  updates  Whenever  remote peer's metadata  updated  callback will  received  `on(peer: HMSPeer, update: HMSPeerUpdate)`  `HMSUpdateListener`   `update` value will   type `HMSPeerUpdate.metadataUpdated`.  When  callback  received  UI   peer   updated  well.  ## Updating Metadata  Here    peer can set   metadata   random string. In  case  string  stringified json.  ```swift let newMetadata = \"{\\\"ms\\\": 100 }\" hmsSdk.change(metadata: newMetadata) { success, error in    ... } ``` ",
        "platformName": "iOS",
        "objectID": "/ios/v2/advanced-features/peer-metadata-update"
    },
    {
        "title": "simulcast.mdx",
        "link": "/ios/v2/advanced-features/simulcast",
        "keywords": [],
        "headings": ["Minimum Requirements", "100ms SDK Simulcast APIs", "Auto Layer Selection"],
        "content": "---  title: Simulcast  nav: 4.01 ---  Simulcast enables [Adaptive Bitrate](../foundation/adaptive-bitrate) (ABR)  video conferencing scenarios. This means 100ms SDKs can upgrade  downgrade video quality  remote tracks based  user preferences  network conditions.  ## Minimum Requirements  - SDK version 0.5.1  higher - Simulcast enabled  room template  ## 100ms SDK Simulcast APIs  You interact   simulcast feature  setting `HMSRemoteVideoTrack`'s `layer` property. Let's look   track interface:  ```swift class HMSRemoteVideoTrack {     open var layerDefinitions: [HMSSimulcastLayerDefinition]?     open var layer: HMSSimulcastLayer }  class HMSSimulcastLayerDefinition : NSObject {     open var layer: HMSSimulcastLayer     open var resolution: CGSize }  enum HMSSimulcastLayer {     case high     case mid     case low } ```  Here `layerDefinitions` property holds  array  currently available layers   track  `layer` property   currently selected layer.  Within `HMSSimulcastLayerDefinition`  get  resolution   layer name   high/mid/low.   ## Auto Layer Selection  `HMSVideoView`   automatic simulcast layer selection capability   enabled  default. It will select  layer  best matches  current view frame size  reacts  frame updates. In case manual layer selection  preferred set `disableAutoSimulcastLayerSelect` property  `true`. By default,  track layer  set  `high`.",
        "platformName": "iOS",
        "objectID": "/ios/v2/advanced-features/simulcast"
    },
    {
        "title": "release-notes.mdx",
        "link": "/ios/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "0.5.3 - 2022-12-14",
            "Added",
            "Fixed",
            "0.5.2 - 2022-12-07",
            "Fixed",
            "0.5.1 - 2022-11-25",
            "Added",
            "0.4.7 - 2022-11-04",
            "Added",
            "Fixed",
            "Changed",
            "0.4.6 - 2022-10-21",
            "Added",
            "0.4.5 - 2022-10-06",
            "Fixed",
            "0.4.3 - 2022-09-28",
            "Added",
            "Fixed",
            "0.4.2 - 2022-09-21",
            "Fixed",
            "0.4.1 - 2022-09-09",
            "Added",
            "Fixed",
            "Breaking changes",
            "0.3.3 - 2022-07-27",
            "Added",
            "Changed",
            "0.3.2 - 2022-07-01",
            "Added",
            "Fixed",
            "0.3.1 - 2022-05-31",
            "Added",
            "Breaking change",
            "0.2.13 - 2022-05-16",
            "Fixed",
            "0.2.12 - 2022-05-13",
            "Fixed ",
            "0.2.11 - 2022-04-28",
            "Added",
            "Fixed ",
            "0.2.10 - 2022-04-21",
            "Fixed",
            "Changed",
            "0.2.9 - 2022-03-29",
            "Added",
            "0.2.8 - 2022-03-08",
            "Added",
            "0.2.7 - 2022-02-21",
            "Added",
            "Fixed",
            "0.2.6 - 2022-01-28",
            "Fixed",
            "0.2.5 - 2022-01-20",
            "Added",
            "0.2.4 - 2021-12-21",
            "Added",
            "Changed",
            "Fixed",
            "0.2.3 - 2021-12-06",
            "Fixed",
            "0.2.2 - 2021-11-26",
            "Added",
            "0.2.1 - 2021-11-18",
            "Breaking Change",
            "0.1.6 - 2021-10-29",
            "Changed",
            "0.1.5 - 2021-10-21",
            "0.1.4 - 2021-10-13",
            "Fixed",
            "0.1.3 - 2021-10-11",
            "Added",
            "Changed",
            "0.1.2 - 2021-09-30",
            "Added",
            "0.1.1 - 2021-09-23",
            "Added",
            "Changed",
            "Fixed",
            "0.0.12 - 2021-09-02",
            "Added",
            "Changed",
            "0.0.11 - 2021-08-25",
            "Added",
            "Changed",
            "0.0.10 - 2021-08-17",
            "Added",
            "Changed",
            "0.0.9 - 2021-08-05",
            "0.0.8 - 2021-07-26",
            "0.0.7 - 2021-07-16",
            "0.0.6 - 2021-07-09",
            "0.0.5 - 2021-07-02",
            "0.0.4 - 2021-06-25",
            "0.0.3 - 2021-06-22",
            "0.0.2 - 2021-06-16",
            "0.0.1 - 2021-06-04"
        ],
        "content": "--- title: Release Notes nav: 6.1 description: Release Notes  100ms iOS SDK ---  ## 0.5.3 - 2022-12-14 ### Added - Varying frame rate support  simulcast layers  ### Fixed - iPhone 14 + bluetooth headset microphone issue  custom audio source  used - Video track settings  respecting back camera selection - HLS Stream playback  using bluetooth headset speaker   ## 0.5.2 - 2022-12-07 ### Fixed - Microphone  captured  non publishing  publishing role change first time  app force quit.   ## 0.5.1 - 2022-11-25 ### Added - Simulcast support - HMSHLSPlaybackMonitor class  easy retrieval  HLS playback stats  AVPlayer - Audio routing API  change audio output  earpiece  speaker - Local camera frame capture plugin   ## 0.4.7 - 2022-11-04 ### Added - Tap  focus local camera API  ### Fixed - iOS 16 screen share failing   app went  background without PIP mode - Sending chat message  REST API resulted  peer joined update getting fired ### Changed - Bitcode support   deprecated   ## 0.4.6 - 2022-10-21 ### Added - HMSVideoTrackSettings  HMSAudioTrackSettings now  initialMuteState property  controls wether user will  tracks muted  unmuted  join  - HMSAudioTrackSettingsBuilder  HMSVideoTrackSettingsBuilder  provided  simplify settings creation. Example: ```swift sdk.trackSettings = HMSTrackSettings.build { videoSettingsBuilder, audioSettingsBuilder in    videoSettingsBuilder.initialMuteState =  .mute    audioSettingsBuilder.initialMuteState =  .mute } ```   ## 0.4.5 - 2022-10-06 ### Fixed - Screenshare compatibility  iOS 16   ## 0.4.3 - 2022-09-28 ### Added - Session metadata API  ### Fixed - Potential fix   race condition  WebSocket message arriving post cleanup leading   crash   ## 0.4.2 - 2022-09-21 ### Fixed - Audio coming   earpiece instead   speaker  joining   non publishing role. - Fix missing headers compiler warning.   ## 0.4.1 - 2022-09-09 ### Added - HLS Extended metadata support - Zoom  pan gesture support  HMSVideoView can  enabled via `isZoomAndPanEnabled` property.  ### Fixed - Headset microphone audio getting distorted  custom audio source  provided.  ### Breaking changes - Error reporting   updating  match error codes  Android  well   use iOS conventions   error interface. See migration guide [here](https://www.100ms.live/docs/ios/v2/migration-guides/03to04)  details.   ## 0.3.3 - 2022-07-27 #### Added - Support  local file playback  audio sharing - Support  Picture  Picture mode  #### Changed - Simplified HLS start API   ## 0.3.2 - 2022-07-01 #### Added - Add resolution variable  HMSRTMPConfig - Support message sending  REST API - Join performance improvements  large rooms #### Fixed - Reconnecting/reconnected callbacks triggered  new user joins - Fix HLS playback audio  routed  external speaker post role change  ## 0.3.1 - 2022-05-31 #### Added - Screenshare support - Virtual background - Custom video plugins API - Analytics capturing improvements #### Breaking change - Removed tracksErrorAudioShouldBeSilenced error   used  signal   app  playing unmixable audio,   now    app  detect  example using CallKit  ## 0.2.13 - 2022-05-16 #### Fixed - Local track state updates   sent due   bug  0.2.12  ## 0.2.12 - 2022-05-13 #### Fixed  - Track will  recover    unsubscribed  post  degraded  ## 0.2.11 - 2022-04-28 #### Added - Subscribe degradation improvements #### Fixed  - onReconnected callback  fired   scenarios  ## 0.2.10 - 2022-04-21 #### Fixed - Error 5000 returned  trying  rejoin  onError callback #### Changed - Message  sendBroadcastMessage, sendDirectMessage  sendGroupMessage completion handlers will now   timestamp set   server instead  using local  ## 0.2.9 - 2022-03-29 #### Added - Network health callbacks  preview  mid call - Fix camera light going   muted track post role change  ## 0.2.8 - 2022-03-08 #### Added - HMSHLSConfig constructor now takes HMSHLSRecordingConfig param  optionally enabled recording  HLS stream - hlsRecordingState property added  HMSRoom  show current recording state  ## 0.2.7 - 2022-02-21 #### Added - Recording/Streaming info will now  \"started at\" date - Room state  peer list  now available  preview mode (if enabled  dashboard) via on(room:update:)  on(peer:update:)  callbacks  HMSPreviewListener #### Fixed - SDK interfering  apps querying device battery level  ## 0.2.6 - 2022-01-28 #### Fixed - Fixed connection issues  EU based rooms.  ## 0.2.5 - 2022-01-20 #### Added - Call stats API  ## 0.2.4 - 2021-12-21 #### Added - HLS Streaming API  #### Changed - Improved track switching delay  HMSVideoView  #### Fixed - Track remove callback  fired  case  multiple auxiliary tracks  getting removed   ## 0.2.3 - 2021-12-06 #### Fixed - Microphone permission requested  view  role - Subscribe degradation  working - onError callback fired  non main thread   mic/video permission error  ## 0.2.2 - 2021-11-26 #### Added - changeMetadata API - changeName API - setVolume API  HMSRemoteAudioTrack  ## 0.2.1 - 2021-11-18 #### Breaking Change - `requestedBy` field   made optional  HMSChangeTrackStateRequest, HMSRemovedFromRoomNotification, HMSRoleChangeRequest. It will  nil  request can originated   REST API. -  `customerUserDescription` field   renamed  `metadata`  HMSPeer   ## 0.1.6 - 2021-10-29 #### Changed - HMSLocalVideoTrack settings property  now properly reflecting cameraFacing state - Calling leave  preview mode  longer returns  error - Calling setMute  local video track stops camera access - Calling setMute  local tracks will now result  on(track: HMSTrack, update: HMSTrackUpdate,  peer: HMSPeer) callback fired   tracks  ## 0.1.5 - 2021-10-21 - Removed Xcode 13 requirement   ## 0.1.4 - 2021-10-13 #### Fixed - Fixed leave call  taking effect   ## 0.1.3 - 2021-10-11 #### Added - hmsPeerStateDidChange notification added  convenience #### Changed - Deprecated init(userName:userID:roomID:)  HMSConfig   parameters  coming   auth token  ## 0.1.2 - 2021-09-30 #### Added -  preview(role:completion:) API added  support showing preview screen mid call   ## 0.1.1 - 2021-09-23 #### Added - changeRolesOfAllPeers API added  change roles  multiple peers  once - changeTrackState API variant added  mute/unmute multiple peers  once - startRTMPOrRecording  stopRTMPAndRecording APIs added  start/stop RTMP / browser recording #### Changed - leave API now provides  completion handler   called  leave operation  completed - HMSTrack source property type   changed  String  allow custom track sources #### Fixed - onReconnecting callback   firing upon network disconnect   ## 0.0.12 - 2021-09-02 #### Added - Swift package manager support - Bitcode support #### Changed - Moved  xcframework   ## 0.0.11 - 2021-08-25 #### Added - HMSVideoView now   `mirror` property  controls mirroring   video. #### Changed - `changeRole` API now can  used  change role   local peer.  ## 0.0.10 - 2021-08-17 #### Added - Sending private  group messages APIs - Remove peer   room API - Remote mute peer API - End room API - videoContentMode property added  HMSVideoView  allow selecting  content  fit  fill  view - videoTrack getter added HMSVideoView  convenience #### Changed - send(message:) API renamed  sendBroadcastMessage  ## 0.0.9 - 2021-08-05 - Fixed individual track publish settings  respected  change role - Fixed wrong track source coming  trackRemoved update - Fixed button states  updating properly  role change  sample app  ## 0.0.8 - 2021-07-26 - HMSVideoView will auto pick  best fitting simulcast layer - Sample app will  show role change options  user    necessary permissions  ## 0.0.7 - 2021-07-16 - Added simulcast support - Added support  forced change role - HMSSpeaker now   reference  HMSPeer instead  id  ## 0.0.6 - 2021-07-09 - Added capability  change role mid-call - Passing HMSRole object  peers - SDK checks  appropriate permissions  trying  publish audio & video - Corrected parsing  roles    subscribe   roles  ## 0.0.5 - 2021-07-02 - Automatic video track switch   bad network conditions. - Preview API added   SDK, added preview screen   sample app.  ## 0.0.4 - 2021-06-25  -   Added Media Interruption Handling -   Optimized network usage -   Updated background  foreground transitions -   Improved Error logging  ## 0.0.3 - 2021-06-22  -   Removed private modules  fix installing failure  ## 0.0.2 - 2021-06-16  -   Added Reconnection  reliability  bad network conditions -   Handled network provider \\(WiFi  Mobile Data\\) transitions mid-call -   Upgraded Data Source  apps can use  easily create customized views -   Added descriptive Error Codes -   Added Analytics  track SDK performance -   Added default handing  app background/foreground transitions -   Handled joining meetings  different roles -   Multiple Sample App enhancements  ## 0.0.1 - 2021-06-04  -   Simplified SDK interfaces  can power  fully-featured video conferencing application     -   `join`     -   `leave`     -   `listeners`  tracks/peers/other data -   Features  covered   release     -   Handling network disconnections \\(disconnect  wi-fi  4g ends  call\\)     -   Handling subscription network degradations     -   Handling second order publish network degradations     -   Detailed analytics     -   Recording ",
        "platformName": "iOS",
        "objectID": "/ios/v2/changelog/release-notes"
    },
    {
        "title": "audio-output-routing.mdx",
        "link": "/ios/v2/features/audio-output-routing",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "How to switch audio to a particular output device",
            "Can I switch audio to audio output devices other than speaker and earpiece?"
        ],
        "content": "--- title: Audio Output Routing - Speaker  Earpiece (Beta) nav: 3.987 ---  If  want  give  users option  switch audio  speaker  earpiece,  use Audio Output Routing API. For example,  can implement  in-call speaker button  toggles  speaker  earpiece audio.  ## Minimum Requirements  -   SDK version 0.5.1  ## How  switch audio   particular output device  You call **switchAudioOutput** method  HMSSDK instance passing   HMSAudioOutputDevice    like  switch audio to. Like below:  ```swift  // Switch audio  earpiece hmsSDK.switchAudioOutput(to: .earpiece)  // Switch audio  speaker hmsSDK.switchAudioOutput(to: .speaker)   ```    Currently,    2 HMSAudioOutputDevices available:  1. **speaker** - in-built speaker device 2. **earpiece** - in-built earpiece device   ## Can I switch audio  audio output devices   speaker  earpiece?  No. Currently _in-built speaker_  _in-built earpiece_    two supported devices. Although   getAudioOutputDeviceList method  HMSSDK   call  get  available audio output devices,  currently  will return just  2 in-built audio output devices.  ```swift let availableAudioOutputDevices = hmsSDK.getAudioOutputDeviceList()   ```    Note: In future getAudioOutputDeviceList may return  available audio devices.  👀 To see  example iOS audio routing implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/audio-output-routing"
    },
    {
        "title": "audio-share.mdx",
        "link": "/ios/v2/features/audio-share",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "How audio sharing works in iOS SDK",
            "How to use hmssdk to share audio from a file",
            "How to know when file playback is finished",
            "How to change mix volume of different nodes",
            "How to schedule multiple audio files for back-to-back playback",
            "How to play multiple files concurrently",
            "How to pause, resume, stop playback and more",
            "How to share audio that's playing on your iPhone",
            "Advanced use cases",
            "Play AVAudioPCMBuffer",
            "You own custom audio implementation"
        ],
        "content": "--- title: Audio Share (Beta) nav: 3.982 ---  iOS SDK provides support  sharing audio  audio files   device  sharing audio  playing  iOS device (for example,  another app like spotify)  sharing  screen   device   room.  ## Minimum Requirements  -   Minimum iOS version required  support Audio Share  iOS 13 -   Minimum 100ms SDK version required  `0.3.3`  ## How audio sharing works  iOS SDK  The audio   share goes   peers   mic channel. To  able  share audio  need  setup  sdk  use  custom audio source instead  default mic. To    pass  instance  custom audio source  HMSAudioTrackSettings   hmssdk instance.  ### How  use hmssdk  share audio   file  1. You create  instance  HMSAudioFilePlayerNode   instance  HMSMicNode like below:  ```swift     let audioFilePlayerNode = HMSAudioFilePlayerNode()     let micNode = HMSMicNode()   ```  2. Next,  create  instance  HMSAudioMixerSource, passing  array  nodes   created   step  like below:  ```swift     let audioMixerSource = try HMSAudioMixerSource(nodes: [audioFilePlayerNode, micNode])   ```    3. Next,  pass  custom audio source   'audioSource' parameter  HMSAudioTrackSettings   set  hmssdk instance like so:  ```swift     let audioSettings = HMSAudioTrackSettings(..., audioSource: audioMixerSource)     hmsSDK.trackSettings = HMSTrackSettings(..., audioSettings: audioSettings)   ```  That's   need  setup  sdk  use  custom audio source.  4. You call play function  audioFilePlayerNode  play  file  local device   file url like below:  ```swift     try audioFilePlayerNode.play(fileUrl: ...)   ```  ### How  know  file playback  finished  You pass  completion handler   play function. CompletionHandler gets called  file  finished playing.  ```swift     try audioFilePlayerNode.play(fileUrl: ...) {         print(\"File finished playing\")     }   ```    ### How  change mix volume  different nodes  You can use volume property  nodes  control  volume.  ```swift     audioFilePlayerNode.volume = 0.5     micNode.volume = 0.9   ```  ### How  schedule multiple audio files  back-to-back playback  You can set 'interrupts' parameter  false  tell audioFilePlayerNode   interrupt  current file playback,  schedule  file   current file  finished. Like below:  ```swift     try audioFilePlayerNode.play(fileUrl: url  file 1)     try audioFilePlayerNode.play(fileUrl: url  file 2, interrupts: false)     try audioFilePlayerNode.play(fileUrl: url  file 3, interrupts: false)     ...   ```  ### How  play multiple files concurrently  You can pass multiple instances  audioFilePlayerNode  pass   nodes  creating audioMixerSource like so:  ```swift     let backgroundMusicNode = HMSAudioFilePlayerNode()     backgroundMusicNode.volume = 0.2     let audioFilePlaybackNode = HMSAudioFilePlayerNode()     audioFilePlaybackNode.volume = 0.5     let micNode = HMSMicNode()         let audioMixerSource = try HMSAudioMixerSource(nodes: [backgroundMusicNode, audioFilePlaybackNode, micNode])   ```  Now,  can play  looping background music  low volume   audio file    time:  ```swift     try backgroundMusicNode.play(fileUrl: ..., loops: true)     try audioFilePlayerNode.play(fileUrl: ...)   ```    ### How  pause, resume, stop playback  more  You can use following interfaces  HMSAudioFilePlayerNode  pause, resume  stop playback  more:  ```swift     audioFilePlayerNode.pause()     audioFilePlayerNode.resume()     audioFilePlayerNode.stop()         let isPlaying = audioFilePlayerNode.isPlaying()     let currentPlaybackTime = audioFilePlayerNode.currentTime     let totalPlaybackDuration = audioFilePlayerNode.duration   ```      ### How  share audio  playing   iPhone  Note: iOS allows  get access  audio playing  iOS device (for example,  another app like spotify)   broadcating  entire iPhone screen. So    work   implement screen sharing   app. You can follow along   set   [Screen Share](./../features/screen-share)  Now    implemented  screen share feature  above. You can follow  steps  enable system audio broadcasting  sharing  screen:  1. You get  instance  HMSScreenBroadcastAudioNode  add    mixer.  ```swift     let screenAudioNode = try sdk.screenBroadcastAudioReceiverNode()     let audioMixerSource = try HMSAudioMixerSource(nodes: [audioFilePlaybackNode, micNode, screenAudioNode])   ```   Note:  can pass   single instance  HMSMicNode  HMSScreenBroadcastAudioNode  HMSAudioMixerSource, else  will receive  error.  Now  mixer source  set  receive audio   broadcast extension.  2. Next,  need  setup broadcast extension  send audio   main app.  Broadcast extension receives audio  playing   iOS device  processSampleBuffer function   RPBroadcastSampleHandler class. To send audio  broadcast extension  main app,  call process(audioSampleBuffer) function  HMSScreenRenderer:  ```swift     let screenRenderer = HMSScreenRenderer(appGroup: \"group.live.100ms.videoapp\")         override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {         ...                 case RPSampleBufferType.audioApp:             self.screenRenderer.process(audioSampleBuffer: sampleBuffer)             break         ...     }   ```    Now  broadcast extension  set   send audio   main app.  And  it. Now  custom mixer source   main app can receive  audio  broadcast extension  well.  ## Advanced use cases  ### Play AVAudioPCMBuffer  You add HMSAudioBufferPlayerNode   mixer. And call play  passing AVAudioPCMBuffer.  ```swift     let streamPlayer = HMSAudioBufferPlayerNode()     let audioMixerSource = try HMSAudioMixerSource(nodes: [audioFilePlaybackNode, micNode, streamPlayer])     ...         try streamPlayer.play(buffer: ...)   ```  ### You  custom audio implementation  If  want  create   custom audio implementation  just need hmssdk  forward  audio buffers   peers   room,  can use HMSAudioBufferSource (supported iOS 12+)  custom audio source. Use enqueue(buffer: AVAudioBuffer) function  HMSAudioBufferSource  send audio  remote peers.  ```swift     let audioBufferSource = HMSAudioBufferSource()         let audioSettings = HMSAudioTrackSettings(..., audioSource: audioBufferSource)     hmsSDK.trackSettings = HMSTrackSettings(..., audioSettings: audioSettings)     ...         audioBufferSource.enqueue(buffer: ...)   ```  👀 To see  example audio shareing implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example).  📲 Download  100ms fully-featured Sample iOS app here: https://testflight.apple.com/join/dhUSE7N8 ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/audio-share"
    },
    {
        "title": "call-stats.mdx",
        "link": "/ios/v2/features/call-stats",
        "keywords": [],
        "headings": [
            "HMSRTCStatsReport",
            "HMSLocalAudioStats",
            "HMSLocalVideoStats",
            "HMSRemoteAudioStats",
            "HMSRemoteVideoStats"
        ],
        "content": "---\r title: Call Stats\r nav: 3.97\r ---\r \r Sometimes  need  way  capture certain metrics related   call. This may  helpful   want  tailor  experience   users  debug issues. Typical metrics  interest  audio/video bitrate, round trip time, total consumed bandwidth  packet loss. 100ms SDK provides  data via dedicated delegate callbacks found  `HMSUpdateListener`. These will  called   fixed interval  one second   room   joined. You can get stats   per track basis ( `on(remoteAudioStats:track:peer)`)    overall summary (`on(rtcStats:)`) \r \r Here   full list  callbacks:\r \r ```swift\r /// This callback provides stats   local audio track.\r optional func on(localAudioStats: HMSLocalAudioStats, track: HMSLocalAudioTrack, peer: HMSPeer)\r \r /// This callback provides stats   local video track.\r optional func on(localVideoStats: HMSLocalVideoStats, track: HMSLocalVideoTrack, peer: HMSPeer)\r \r /// This callback provides stats   remote audio track.\r optional func on(remoteAudioStats: HMSRemoteAudioStats, track: HMSRemoteAudioTrack, peer: HMSPeer)\r \r /// This callback provides stats   remote video track.\r optional func on(remoteVideoStats: HMSRemoteVideoStats, track: HMSRemoteVideoTrack, peer: HMSPeer)\r \r /// This callback provides combined stats   session.\r optional func on(rtcStats: HMSRTCStatsReport)\r ```\r \r ## HMSRTCStatsReport\r \r This class will contain  combined stats   room.\r \r ```swift\r class HMSRTCStats {\r \t// Total bytes sent   current session.\r \tvar bytesSent: UInt64\r \t// Total bytes received   current session.\r \tvar bytesReceived: UInt64\r \t// Total packets received   current session.\r \tvar packetsReceived: UInt64\r \t// Total packets lost   current session.\r \tvar packetsLost: UInt64\r \t// Total outgoing bitrate observed since previous report.\r \tvar bitrateSent: Double\r \t// Total incoming bitrate observed since previous report  Kb/s.\r \tvar bitrateReceived: Double\r \t// Average round trip time observed since previous report  Kb/s.\r \tvar roundTripTime: Double\r }\r \r class HMSRTCStatsReport {\r \t// Combined audio + video values\r \tvar combined: HMSRTCStats\r \t// Summary   audio tracks\r \tvar audio: HMSRTCStats\r \t// Summary   video tracks\r \tvar video: HMSRTCStats\r }\r ```\r \r ## HMSLocalAudioStats\r \r This class contains stats related  local audio track.\r \r ```swift\r class HMSLocalAudioStats {\r \t// Round trip time observed since previous report.\r \tvar roundTripTime: Double\r \t// Total bytes sent   track   current session.\r \tvar bytesSent: UInt64\r \t// Outgoing bitrate   track observed since previous report  Kb/s.\r \tvar bitrate: Double\r }\r ```\r \r ## HMSLocalVideoStats\r \r This class contains stats related  local video track.\r \r ```swift\r class HMSLocalVideoStats {\r \t// Round trip time observed since previous report.\r \tvar roundTripTime: Double\r \t// Total bytes sent   track   current session.\r \tvar bytesSent: UInt64\r \t// Outgoing bitrate   track observed since previous report  Kb/s.\r \tvar bitrate: Double\r \t// Resolution  video frames  sent.\r \tvar resolution: HMSVideoResolution\r \t// Frame rate  video frames  sent (FPS).\r \tvar frameRate: Double\r }\r ```\r \r ## HMSRemoteAudioStats\r \r This class contains stats related  remote audio track.\r \r ```swift\r class HMSRemoteAudioStats {\r \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.\r \tvar jitter: Double\r \t// Total bytes received   track   current session.\r \tvar bytesReceived: UInt64\r \t// Incoming bitrate   track observed since previous report  Kb/s.\r \tvar bitrate: Double\r \t// Total packets received   track   current session.\r \tvar packetsReceived: UInt64\r \t// Total packets lost   track   current session.\r \tvar packetsLost: UInt64\r }\r ```\r \r ## HMSRemoteVideoStats\r \r This class contains stats related  remote video track.\r \r ```swift\r class HMSRemoteVideoStats {\r \t// Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.\r \tvar jitter: Double\r \t// Total bytes received   track   current session.\r \tvar bytesReceived: UInt64\r \t// Incoming bitrate   track observed since previous report  Kb/s.\r \tvar bitrate: Double\r \t// Total packets received   track   current session.\r \tvar packetsReceived: UInt64\r \t// Total packets lost   track   current session.\r \tvar packetsLost: UInt64\r \t// Resolution  video frames  received.\r \tvar resolution: HMSVideoResolution\r \t// Frame rate  video frames  received (FPS).\r \tvar frameRate: Double\r }\r ```",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/call-stats"
    },
    {
        "title": "change-role.mdx",
        "link": "/ios/v2/features/change-role",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Change Role\r nav: 3.91\r ---\r \r Role   powerful concept  takes  lot  complexity away  handling permissions  supporting features like breakout rooms. [Learn   roles here.](../foundation/templates-and-roles)\r \r Each `HMSPeer` instance   `role` property  returns  `HMSRole` instance. You can use  property   following:\r \r 1. Check   role  allowed  publish. I.e can  send video (and   resolution)? can  send audio? can  share screen? Who can  role subscribe to? (I.e student can  see  teacher's video) This  can  discovered  checking `publishSettings`  `subscribeSettings` properties\r 2. Check  actions  role can perform. i.e can  change someone else current role, end meeting, remove someone   room. This  can  discovered  checking `permissions` property\r \r In certain scenarios  may want  change someone's role. Imagine  audio room  2 roles \"speaker\"  \"listener.\" Only someone   \"speaker\" role can publish audio   room  \"listener\" can  subscribe. Now   point \"speaker\" may decide  nominate  \"listener\"  become  \"speaker.\" This    `changeRole` API comes in.\r \r To invoke  API  will need 2 things. An instance  `HMSPeer`   peer  role  want  change   `HMSRole` instance   target role. All  peers     current room  accessible via `peers` property  `HMSRoom` instance   can get via `room` property  `HMSSDK` instance  successful room join. A list   available roles   current room can  accessed via `roles` property  `HMSSDK`\r \r Once     can invoke\r \r ```swift\r  hmsSDK.changeRole(for: targetPeer, role: targetRole)\r ```\r \r If  change role succeeds  will get a\r \r ```swift\r func on(peer: HMSPeer, update: HMSPeerUpdate)\r ```\r \r delegate callback     peer  passed  targetPeer   `roleUpdated` update type.\r \r `changeRole`   optional `force` parameter   `false`  default meaning  `changeRole`  basically  polite request: \"Would  like  change  role  listener  speaker?\"  can  ignored    party. The way  works    party will first receive a\r \r ```swift\r func on(roleChangeRequest: HMSRoleChangeRequest)\r ```\r \r delegate callback. At  point app can choose  show  prompt   user asking  permission. If  user accepts, app  call\r \r ```swift\r hmsSDK.accept(changeRole: roleChangeRequest)\r ```\r \r which completes  `changeRole` loop. Both parties will receive  `roleUpdated` callback     can  necessary UI updates. Now  user actually becomes  speaker   audio publishing will start automatically.\r \r Now lets imagine  newly nominated speaker   behaving nicely   want  move  back  listener without  prompt. This    `force` parameter comes in. When   set  `true`   party will  receive  confirmation `roleChangeRequest`  instead will straight away receive  new set  updated permissions  stop publishing. `roleUpdated` callback will still  fired    app can update  user's UI state.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/change-role"
    },
    {
        "title": "change-user-name.mdx",
        "link": "/ios/v2/features/change-user-name",
        "keywords": [],
        "headings": ["Responding to name changes", "Changing the name"],
        "content": "---\r  title: Change User Name\r  nav: 3.911\r ---\r \r Any peer can change   name    joining  room. Before joining,  name     specified  `HMSConfig`   passed   join method. This document shows   name can  changed  joining.\r \r ## Responding  name changes\r \r Whenever  remote peer's name  changed  callback will  received  `on(peer: HMSPeer, update: HMSPeerUpdate)`  `HMSUpdateListener`   `update` will   type `HMSPeerUpdate.nameUpdated`.\r \r When  callback  received  UI   peer   updated  well.\r \r ## Changing  name\r \r The peer  wants  change  name  call  following method   `HMSSDK` instance.\r \r ```swift\r let newName = \"Ashwini Shetty\"\r hmsSdk.change(name: newName) { success, error in\r    ...\r }\r ```\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/change-user-name"
    },
    {
        "title": "chat.mdx",
        "link": "/ios/v2/features/chat",
        "keywords": [],
        "headings": [
            "Addressing messages",
            "Sending Chat Messages",
            "Sending Broadcast Messages",
            "Sending Direct Messages",
            "Sending Group Messages",
            "Receiving Chat Messages",
            "Identifying who the message was for"
        ],
        "content": "---\r title: Chat\r nav: 3.5\r ---\r \r What's  video without  able  send messages    too? 100ms supports chat  every video/audio room  create.\r \r You can see  example  every way  sending messages  interpreting messages   advanced [sample app](https://github.com/100mslive/100ms-ios-sdk).\r \r ### Addressing messages\r \r -   [Broadcast messages](#sending-broadcast-messages) can  sent  Everyone   chat `hmssdk.sendBroadcastMessage`.\r \r -   [Direct messages](#sending-direct-messages) let  send message   specific person `hmssdk.sendDirectMessage`.\r \r -   [Group messages](#sending-group-messages) let  send  message  everyone   particular `HMSRole`. Such   `hosts`   `teachers`   `students` `hmsSdk.sendGroupMessage`\r \r ### Sending Chat Messages\r \r #### Sending Broadcast Messages\r \r You want  let everyone   chat know something? Call `sendBroadcastMessage`   instance  `HMSSDK`   send  broadcast.\r \r The text   message,  type   listener  whether  message reached  server     parameters.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error. It   convey whether  message  delivered   read   recipient.\r > also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r ```swift\r hmssdk.sendBroadcastMessage(type: \"chat\", message: \"\") { message, error in\r \r }\r ```\r \r #### Sending Direct Messages\r \r Got secrets  share? Send  message directly   single person   chat   direct message. Call `sendDirectMessage`   instance  `HMSSDK`.\r \r The text   message,  type   listener  whether  message reached  server     parameters.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error. It   convey whether  message  delivered   read   recipient.\r > also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r ```swift\r hmssdk.sendDirectMessage(type: \"chat\", message: \"\", peer: recipientPeer) { message, error in\r \r }\r ```\r \r #### Sending Group Messages\r \r Want  share   group? Send  message directly   group   chat   group message. Call `sendGroupMessage`   instance  `HMSSDK`.\r \r The text   message,  type   listener  whether  message reached  server     parameters.\r \r > 💡 Note   callback  lets  know   server  received  request   message      error. It   convey whether  message  delivered   read   recipient.\r > also  important  make  new callback per message   will  contain  results   particular call  sending  message.\r \r ```swift\r hmssdk.sendGroupMessage(type: \"chat\", message: \"\", roles: recipientRoles) { message, error in\r \r }\r ```\r \r ### Receiving Chat Messages\r \r When  called `hmsSdk.join(config, delegate)`  join  room,  `HMSUpdateListener` implementation   passed    callback `on(message:)`.\r \r This   receive new messages  `HMSMessage`   call. It contains:\r \r ```swift\r public class HMSMessage {\r     public let message: String\r     public let type: String\r     public var sender: HMSPeer?\r     public var recipient: HMSMessageRecipient\r     public let time: Date\r }\r ```\r \r `message`: Content   text message   text description   raw message.\r \r `type`: Type  message sent. Default value  `chat`.\r \r `recipient`: The intended recipient(s)   message   `HMSMessageRecipient`.\r \r `time`: Timestamp    messaging server receives  message. Update  time    messages   comes back   server  `on(message:)`  accurate ordering    messages.\r \r `sender`: The `HMSPeer`   sending  message.\r \r Identifying Senders: The sender   message  always contained   `sender` field  HMSMessage. This lets  get  name  peer id   message sender.\r \r Message Body: The body   message   `message`   String.\r \r Time: The time  message  sent  contained  `time`.\r \r #### Identifying   message  for\r \r The HMSMessageRecipient contained   `recipient` field  `HMSMessage` lets  know   message  for.\r \r The `HMSMessageRecipient` contains:\r \r ```swift\r public class HMSMessageRecipient {\r     public let type: HMSMessageRecipientType\r     public let peerRecipient: HMSPeer?\r     public let rolesRecipient: [HMSRole]?\r }\r ```\r \r `peerRecipient`: Only contains  peer   specific single peer   direct messaged.\r \r `rolesRecipient`: Only contains values   group message   sent  one  many roles.\r \r `type`: Will  `broadcast`   message  sent  everyone. If   true,   two field will  null, empty respectively.\r \r `peer` will  set    direct message.\r \r `roles` will  set    message  one  many roles.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/chat"
    },
    {
        "title": "end-room.mdx",
        "link": "/ios/v2/features/end-room",
        "keywords": [],
        "headings": ["Permissions", "Ending the Room", "How to handle an end room callback"],
        "content": "---\r title: End Room\r nav: 3.92\r ---\r \r Done  talking   time  end  call  everyone  just yourself? You may  looking  end  room.\r \r ### Permissions\r \r Can't let just anyone end  call. First  need  create  [role](../foundation/templates-and-roles)   permissions  end  room.\r \r The permission  end  room  called `endRoom`    check   within  `permissions` property  `HMSRole`   peer  see    it.\r \r \r ### Ending  Room\r \r Once  sure  peer   permissions  end  room  can call   room  end   ready  `hmsSdk.endRoom`.\r \r `endRoom` takes three parameters.\r \r reason: Optional message  want  pass along  end room notification   peers\r \r lock: Whether  want  prevent anyone  rejoining  room. If false,  will  allowed  enter  room    client called `join`. If   false,  will  able  join  room again.\r \r completion handler: Lets  know whether  end room operation executed.  ended successfully  not. \r \r > 💡 After calling endRoom  local peer needs  dispose   video calling UI  well.\r \r ```swift\r hmssdk.endRoom(lock: false, reason: \"Meeting  over\") { success, error in\r if (success) {\r     // pop  previous screen\r }\r }\r ```\r \r ### How  handle  end room callback\r \r Once  peer  adequate permissions calls `endRoom`,   peers   room will receive  callback  `HMSUpdateListener.onRemovedFromRoom`.\r \r The `on(removedFromRoom:)` callback   single parameter called `HMSRemovedFromRoomNotification`   following structure.\r \r ```swift\r class HMSRemovedFromRoomNotification {\r     public let requestedBy: HMSPeer\r     public let reason: String\r     public let roomEnded: Bool\r }\r ```\r \r > 💡 This    callback  will  triggered   peer  [removed   room](remove-peer)  well. Except  `roomEnded` will  true   entire room  ended.\r \r reason: The string message detailing   room  ended.\r \r requestedBy: The details   peer  called `endRoom`.\r \r roomEnded: True   entire room  ended. False    receiving peer  removed.\r \r Clients  read  callback  show  appropriate UI.",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/end-room"
    },
    {
        "title": "error-handling.mdx",
        "link": "/ios/v2/features/error-handling",
        "keywords": [],
        "headings": [
            "Error callbacks",
            "Error Type",
            "Error Handling Example",
            "HMSError Properties",
            "isTerminal",
            "canRetry",
            "Error Handling Example Using Properties",
            "Connection Errors",
            "Capture Device Errors",
            "API Errors",
            "Error Code List"
        ],
        "content": "--- title: Error Handling nav: 3.9 ---  Don't  time  dig  details? Here   minimum error handling code     app:  ```swift func on(error: Error) {     guard let error = error as? HMSError else { return }          error.isTerminal {         showErrorAndExitMeeting(errorMessage: error.localizedDescription)     } else {         print(error)     } } ```  Errors happen. When  happen  app needs  react   manner  makes   sense   user. There  3 major categories  errors:  1. Connection errors (i.e connect lost, unable  connect) 2. Capture device errors (i.e user   give permission  use microphone) 3. Lack  permissions/authentication errors (i.e. auth token  invalid/expired)  While  errors like permissions/authentication errors usually happen  development    expected  production, others like connection/device errors  expected  come  normal app lifecycle  require handling   application code.    ### Error callbacks  There 2 places   developer  expected  add error handling:  1. `func on(error: HMSError)` callback   `HMSUpdateListener` 2. Completion handler   various SDK APIs (i.e endRoom, changeRole etc)   # Error Type  The error type   public SDK interface   `Error` (`NSError`  case  ObjC).  In swift  error can  type casted  either `HMSError`  `NSError`  getting additional details like error code.   ### Error Handling Example  ```swift func on(error: Error) {     guard let error = error as? HMSError else { return }         //Example using error constants     switch error.code {     case .websocketConnectionLost, .iceFailure, .endpointUnreachable:         retryConnection()     default: \t\tshowErrorAndExitMeeting(errorMessage: error.localizedDescription)         break     }         //Example using error codes     switch error.code.rawValue {     case 1003, 4005, 2003:         retryConnection()     default: \t\tshowErrorAndExitMeeting(errorMessage: error.localizedDescription)         break     } } ```  ## HMSError Properties  ### isTerminal  The `HMSError` struct  swift will now   `isTerminal` property  denotes wether error  caused  current session  terminate   app will need  call `join`   reconnect. Same will  available via `is_terminal` (`HMSIsTerminalUserInfoKey` constant) key  `userInfo` dictionary  `NSError`  ### canRetry  The `HMSError` struct  swift will now   `canRetry` property  denotes wether app can call `join`     configuration   used before. The value  false  cases like token expiring  room getting locked. You can use  property  implementing infinite retry   app. Same will  available via `can_retry` (`HMSCanRetryUserInfoKey` constant) key  `userInfo` dictionary  `NSError`  ### Error Handling Example Using Properties  This example shows  minimal error handling  can    app without worrying  error codes.  ```swift func on(error: Error) {     guard let error = error as? HMSError else { return }          error.isTerminal {          error.canRetry && isInfiniteRetryEnabledInApp  {             retryConnection()         } else {             showErrorAndExitMeeting(errorMessage: error.localizedDescription)         }     } else {         logError(message: error.localizedDescription)     } } ```  # Connection Errors  When  whatever reason  internet connection becomes unavailable  SDK will first try  automatically reconnect. Upon failing  reconnect within  timeframe  50 seconds SDK will give   send  error via `onError` callback  `HMSUpdateListener`  There  3 error codes  can expect   scenario:   1. websocketConnectionLost (1003) 2. iceFailure (4005) 3. endpointUnreachable (2003)  When  application gets     can react  calling join     infinite retry,   can bring user   previous screen showing  error popup.  # Capture Device Errors  Typically   SDK can’t get  hold   capture device i.e  user   given access permission  will send  `onError` callback  `cantAccessCaptureDevice` (3001). If  microphone/camera access  crucial   experience   trying  build  app  end  meeting  show  error popup, otherwise user can continue participating without camera/mic   listen/watch  mode.  # API Errors  When issuing certain API calls like endRoom, changRole etc  might get en error  return. This might  due  lack  permissions   current role  server getting overloaded etc.   # Error Code List  Following   different error codes   returned   SDK.  | Error Code  HMSError.Code Enum Case Name  Cause   error  Action   taken | | :--  :---  :---  :--- | | 1003  websocketConnectionLost  Websocket disconnected - Happens due  network issues  Mention user  check  network connection  try    time. | | 2002  invalidEndpointUrl  Invalid Endpoint URL  Check  endpoint provided  calling join on HMSSDK. | | 2003  endpointUnreachable  Endpoint   reachable  Mention user  check  network connection  try    time. | | 2004  invalidTokenFormat  Token    proper JWT format  The token passed  calling join is   correct format. Retry getting  new token. | | 3001  cantAccessCaptureDevice  Cant Access Capture Device  Ask user  check permission granted  audio/video capture devices. | | 3008  audiovideoSubsystemFailure  System media services  reset due   failure.  Restart  session | | 4001  createOfferFailed  WebRTC error  Some webRTC error  occurred. Need  logs  debug. | | 4002  createOfferFailed  WebRTC error  Some webRTC error  occurred. Need  logs  debug. | | 4003  createOfferFailed  WebRTC error  Some webRTC error  occurred. Need  logs  debug. | | 4004  createOfferFailed  WebRTC error  Some webRTC error  occurred. Need  logs  debug. | | 4005  iceFailure  ICE Connection Failed due  network issue  Mention user  check  network connection  try    time. | | 5001  alreadyJoined  Trying  join  room   already joined  Trying  join  already joined room. | | 6002  unknown  webRTC Error: Error  renegotiating  Please try again. | | 401  n/a  Token Error: Invalid Access Key  Access Key provided   token  wrong. | | 401  n/a  Token Error: Invalid Room Id  RoomID provided   token  wrong. | | 401  n/a  Token Error: Invalid Auth Id  AuthID provided   token  wrong. | | 401  n/a  Token Error: Invalid App Id  App ID provided   token  wrong. | | 401  n/a  Token Error: Invalid Customer Id  Customer Id provided   token  wrong. | | 401  n/a  Token Error: Invalid User Id  User ID provided   token  wrong. | | 401  n/a  Token Error: Invalid Role  The role provided   token  wrong. | | 401  n/a  Token Error: Bad JWT Token  Bad JWT Token. | | 401  n/a  Generic Error  Need  debug   logs. | | 400  n/a  Invalid Room  Room ID provided  fetching  token   invalid room. | | 400  n/a  Room Mismatched  Token  Room ID provided  fetching  token   match. | | 400  n/a  Peer already joined  Peer   trying  join  already joined  room. | | 410  n/a  Peer  gone  The peer    present   room. | ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/error-handling"
    },
    {
        "title": "hls-stats.mdx",
        "link": "/ios/v2/features/hls-stats",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "How to monitor HLS playback statistics",
            "How can I keep monitoring these stats continuously",
            "Observing playback state"
        ],
        "content": "--- title: HLS Stats (Beta) nav: 3.986 ---  If  use Apple's AVPlayer  play HLS stream,  can utilise 100ms SDK  monitor statistics   HLS playback. You can use  stats  help  debug issues  show useful statistics   HLS playback.  ## Minimum Requirements  -   SDK version 0.5.1 -   You must  using AVPlayer  HLS Playback  ## How  monitor HLS playback statistics  You create  instance  HMSHLSPlaybackMonitor class passing  instance  AVPlayer  setup  play  HLS stream.  ```swift var statMonitor: HMSHLSStatsMonitor?  ... let player = AVPlayer(playerItem: item) statMonitor = HMSHLSStatsMonitor(player: player)   ```  That's all. Now  can check  properties exposed  HMSHLSStatsMonitor   moment  get various stats   current HLS playback.    HMSHLSStatsMonitor exposes following properties  give  stats  current HLS playback:  1. **estimatedBandwidth** - The network bandwidth estimated   player. This   bitrate observed   player  current network conditions (bits per second) 2. **bitrate** - The bitrate  current HLS stream (layer) indicated   server (bits per second) 3. **bytesDownloaded** - Total number  bytes downloaded till  moment 4. **bufferedDuration** - The duration  forward buffer  player  downloaded  ready  play (milliseconds) 5. **distanceFromLiveEdge** - The distance  current playback position   live edge  HLS stream (milliseconds) 6. **droppedFrames** - The total number  frames dropped till  moment 7. **videoSize** - The resolution   HLS stream 8. **watchDuration** - Total duration   user  watched  stream includes  rewatch time (milliseconds)  ## How can I keep monitoring  stats continuously  You use  timer  check  stats   interested  like below:  ```swift Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in    print(statMonitor.estimatedBandwidth)   print(statMonitor.distanceFromLiveEdge)    }   ```  ## Observing playback state  Set  delegate property  HMSHLSStatsMonitor   instance conforming  HMSHLSPlaybackDelegate protocol  listen   important changes  HLS playback.  Following delegate callbacks  available:  1. **playerDidStall** - Player  stalled    continue -  can happen  player    enough buffer  playback 2. **playerDidChangeResolution** - Player  switched  different resolution layer  HLS stream - due  improved/degraded network condition   user manually picks  different resolution  ```swift  class YourClass: HMSHLSPlaybackDelegate {    ...   statMonitor.delegate = self   ...    // HMSHLSPlaybackDelegate   func playerDidChangeResolution(videoSize: CGSize) {     print(\"Resolution Changed: \\(videoSize)\")   }    func playerDidStall() {     print(\"Player Stalled\")   }  }    ```  👀 To see  example iOS HLS Stats implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/hls-stats"
    },
    {
        "title": "hls.mdx",
        "link": "/ios/v2/features/hls",
        "keywords": [],
        "headings": [
            "Starting HLS",
            "Default View",
            "Custom View",
            "Optional HLS Recording",
            "Stopping HLS",
            "Current Room Status",
            "Tips"
        ],
        "content": "--- title: HLS Streaming nav: 3.96 ---  HLS Streaming allows  scaling  millions  viewers  near real time. You can give  link  your web-app  will  converted   HLS feed   server  can  played across devices  consumption. Behind  scenes,  will  achieved    bot join  room  stream   sees  hears. Once  feed is ready,  server will give  URL  can  played using  HLS Player.  > Note   media server serving  content   case  owned  100ms. If  looking   way  stream on YouTube, Twitch etc., please   look   RTMP streaming docs [here](./rtmp-recording).  ## Starting HLS  HLS can  started  two ways depending   level  customization  need. 1. Default View: The simplest view  just begin  stream  default UI  parameters. 2. Custom Views: To use   UI  HLS streaming,  need  provide   web-app URL   bot  join  stream.  #### Default View  Begins  stream  default parameters.  ```swift hmsSDK.startHLSStreaming() { didStart, error in     print(didStart, error)            } ````  #### Custom View To use   web-app UI  HLS,  need  pass   meeting URL. The 100ms bot will open  URL  join  room, so it must allow access without  user level interaction. In  future it'll  possible  start HLS  multiple  URLs    room.  For  purpose  API supports taking   array, although currently   first element   array will  used. To distinguish  multiple urls  additional field `metadata` can  optionally passed. The `meetingURL`  `metadata`  clubbed together  form   call  `variant`.  You can call `hmsSDK.startHLSStreaming`  `HMSHLSConfig`   array   variants. `HMSHlsRecordingConfig`  optional.  ```swift let config = HMSHLSConfig(variants: [HMSHLSMeetingURLVariant(meetingURL: meetingURL, metadata: \"tag  reference\")]) hmsSDK.startHLSStreaming(config: config) { didStart, error in     print(didStart, error)            } ````  ### Optional HLS Recording Optionally  record  HLS stream  may specify  `HMSHLSRecordingConfig` within  `HMSHLSConfig`.  Here's   `HMSHlsRecordingConfig` looks like  ```swift  class HMSHLSRecordingConfig {     let singleFilePerLayer: Bool     let enableVOD: Bool }  ```  1. `singleFilePerLayer`   desired end result   mp4 file per HLS layer, false  default. 2. `enableVOD`   desired end result   zip  m3u8    chunks, false  default.  Here's  example    create  recording config:   ```swift // Optional recording config let recordConfig = HMSHLSRecordingConfig(singleFilePerLayer: true, enableVOD: false) let config = HMSHLSConfig(variants: [variant], recording: recordConfig) ```   ## Stopping HLS  You can call `hmsSDK.stopHLSStreaming`  stop HLS Streaming  will stop   variants.  ```swift hmsSDK.stopHLSStreaming() { didStop, error      ... } ```  ## Current Room Status  The current status   room  always reflected   `HMSRoom` object.  Here   relevant properties inside  `HMSRoom` object   can read  get  current hls streaming status   room namely: `hlsStreamingState`.  The object contains  boolean `running`  lets  know   active   room right now  well  list  active variants.   1. **hlsStreamingState**  instance  `HMSHLSStreamingState`,  looks like:  ```swift @objcMembers public class HMSHLSStreamingState : NSObject {     public let running: Bool     public let variants: [HMSHLSVariant] } ```  This represents  livestream  one   HLS urls.  The room status   checked  following two places -  1. In  `onJoin(room: HMSRoom)` callback  `HMSUpdateListener`     The properties mentioned  will    `HMSRoom` object. 2. In  `on(room: HMSRoom, update: HMSRoomUpdate)` callback  `HMSUpdateListener`.     The `HMSRoomUpdate` type will  `hlsStreamingStateUpdated`.   ## Tips  * If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up. * If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users we're used  reloading  page   scenarios   difficult  achieve   automated case. * Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page if join  happen within  time interval. ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/hls"
    },
    {
        "title": "integration.mdx",
        "link": "/ios/v2/features/integration",
        "keywords": [],
        "headings": ["Swift Package Manager", "Cocoapods"],
        "content": "--- title: Integrating The SDK nav: 3.1 ---   HMSSDK  distributed via [Cocoapods](https://cocoapods.org/)  Swift Package Manager.   ## Swift Package Manager Use https://github.com/100mslive/100ms-ios-sdk.git   package source.  ## Cocoapods Add  `pod 'HMSSDK'`   Podfile  follows:     ```   // Podfile     platform :ios, '12.0'    target 'MyAwesomeApp' do     use_frameworks!     pod 'HMSSDK'   end   ```  then run `pod install --repo-update`  Add  entitlements  video, audio  network access   `Info.plist`  ```xml <key>NSCameraUsageDescription</key> <string>Allow access  camera  enable video calling.</string> <key>NSLocalNetworkUsageDescription</key> <string>Allow access  local network  enable video calling.</string> <key>NSMicrophoneUsageDescription</key> <string>Allow access  mic  enable video calling.</string> ``` ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/integration"
    },
    {
        "title": "interruption-handling.mdx",
        "link": "/ios/v2/features/interruption-handling",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Interruption Handling\r nav: 3.8\r ---\r \r You're chatting away   video call and, uh-oh,  phone call comes in. No worries,  100ms SDK abstracts away handling  situation  you.\r \r When  telephonic voice call comes    user accepts  following happens.\r \r -   You     parties  muted.\r -   If  app goes  background  video will  muted\r \r When  call ends  SDK will restore  audio, taking care   un-mute     muted    call came in. Neither will  un-mute   peers    muted    app.\r \r No code required,  happens automatically   calls.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/interruption-handling"
    },
    {
        "title": "join.mdx",
        "link": "/ios/v2/features/join",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Join Room\r nav: 3.2\r ---\r \r To join  interact  others  audio  video call,  user needs  join  `room`.\r \r When user indicates   want  _join_  room,  app   -\r \r 1. User Name -  name    displayed   peers   room.\r 2. [Authentication Token](../guides/token) -  client side authentication token generated   Token Service.\r \r We'll call  `join` method  `HMSSDK` object   config containing  fields  join  room.\r \r 1. First, create  instance  `HMSSDK` class. Store  instance   property. Ensure   SDK object  alive  memory    can receive event callbacks  SDK. Simplest way      follows -\r ```swift\r import HMSSDK\r \r class MyMeetingClass {\r     \r     let hmsSDK: HMSSDK // store instance  HMSSDK   property   class\r \r     init() {\r         hmsSDK = HMSSDK.build() // initialize  SDK using  `build()` class function\r     }\r }\r ```\r \r 2. Next, create  object  `HMSConfig` class using  available joining configurations\r ```swift\r let config = HMSConfig(userName: \"John Doe\",\r                       authToken: \"eyJH5c\")\r ```\r \r 3. Now,   primed  join  room. All      pass  `config` object  `hmsSDK`\r ```swift\r hmsSDK.join(config: config, delegate: self)\r ```\r \r That's it. You  joined  room successfully. 🥳\r \r Now,  take  look   signature   Join API\r ```swift\r func join(config: HMSConfig, delegate: HMSUpdateListener)\r ```\r As evident, `join` accepts 2 arguments - \r - `config`:  object  type `HMSConfig` class,  room configuration object  encapsulates user & token data\r - `delegate`:  class conforming  `HMSUpdateListener` protocol. \r \r The methods  `HMSUpdateListener`  invoked  notify updates happening   room like  peer joins/leaves,  track got muted/unmutes, etc.\r \r After calling `join`  app will  provided  update   100ms SDK.\r \r ✅ If successful,  `func on(join room: HMSRoom)` method  `HMSUpdateListener` will  invoked  information   room encapsulated   `HMSRoom` object. \r \r ❌ If failure,  `func on(error: HMSError)` method will  invoked  exact failure reason. \r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/join"
    },
    {
        "title": "leave.mdx",
        "link": "/ios/v2/features/leave",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Leave Room\r nav: 3.3\r ---\r \r Leaving  room   quick. Once  user wishes  end  interaction   room,  can choose  leave  meeting. 👋\r \r 100ms SDK provides  simple,  fuss API   exactly that. Invoke  `leave` method  instance  `HMSSDK`.\r \r ```swift\r hmsSDK.leave()\r ```\r \r You  expect   `leave` function always succeeds, even  scenarios like \"No Internet Connection\", \"Low Battery\", etc\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/leave"
    },
    {
        "title": "mute.mdx",
        "link": "/ios/v2/features/mute",
        "keywords": [],
        "headings": ["Mute Audio 🙊", "Ummute Audio 🐵", "Mute Video 🙈", "Unmute Video 🐒"],
        "content": "---\r title: Mute / Unmute\r nav: 3.4\r ---\r \r An user   able  mute  un-mute  audio & video  per  choice. 100ms SDK makes  simple   just   nifty way.\r \r 1. First, get  reference  local peer using  convenience method `localPeer`  `HMSSDK` class\r 2. Next, get  audio  video track   local peer\r 3. Now, set  mute status  true  false.\r \r -   When mute  true, local peer  transmit  audio  video. 🤫🤐\r -   When mute  false, local peer can speak & show  world whatever  want to. 🕺💃\r \r ### Mute Audio 🙊\r \r ```swift\r hmsSDK.localPeer?.localAudioTrack()?.setMute(true)\r ```\r \r ### Ummute Audio 🐵\r \r ```swift\r hmsSDK.localPeer?.localAudioTrack()?.setMute(false)\r ```\r \r ### Mute Video 🙈\r \r ```swift\r hmsSDK.localPeer?.localVideoTrack()?.setMute(true)\r ```\r \r ### Unmute Video 🐒\r \r ```swift\r hmsSDK.localPeer?.localVideoTrack()?.setMute(false)\r ```\r \r Note: Ensure   call  functions   main queue.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/mute"
    },
    {
        "title": "network-quality-reports.mdx",
        "link": "/ios/v2/features/network-quality-reports",
        "keywords": [],
        "headings": [
            "Receiving a Network Quality Update in Preview",
            "Receiving Network Quality Update During a Call",
            "Interpreting the Values"
        ],
        "content": "---\r title: Network Quality Reports\r nav: 3.98\r ---\r \r Video/Audio conferencing   nature  data intensive operation. The 100ms SDK attempts  stabilize connections especially  subscribe degradation  turned    template   possible  really bad connections  users will still  problems.\r \r It can  helpful  measure  user's connection speed  joining  room  order  set expectations  decide    join  video  etc.\r \r The 100ms SDK provides  way  measure  user's downlink speed   preview screen.\r \r > ⚠️ The downlink speed  measured    SDK download  file (1mb    writing).\r \r The download will  continued     fixed number  seconds (For example 10 seconds)   speed   interval  calculated. The entire file may   downloaded   exceeds  timeout.\r \r DNS time   counted  this,  throughput  measured.\r \r ## Receiving  Network Quality Update  Preview\r \r When creating  `HMSConfig` object  request  preview, set  `captureNetworkQualityInPreview`  `true`  measure  user's downlink network quality.\r \r When available,  information will  returned   `on(peer: HMSPeer, update: HMSPeerUpdate)` callback   `HMSPreviewListener`   `networkQualityUpdated` update type. It can  retrieved    `HMSPeer` object's `networkQuality` property. In case  preview,  peer will  local peer.\r \r ```swift\r let config = HMSConfig(userName: user, authToken: token, captureNetworkQualityInPreview: true)\r hmsSDK?.preview(config: config, delegate: self)\r ```\r \r Here's  class definition  `HMSNetworkQuality`,    property   `HMSPeer`.\r \r ```swift\r public class HMSNetworkQuality {\r     public let downlinkQuality: Int\r }\r ```\r \r ## Receiving Network Quality Update During  Call\r \r After  room   joined,  might  useful  give users  indication  network health   participants   room. In case  network issues  can reduce confusion regarding wether    network  fault    party's.\r No special configuration  required  enable network health callbacks. Starting  iOS SDK version 0.2.9  information will  sent via `on(peer: HMSPeer, update: HMSPeerUpdate)` callback  `HMSUpdateListener`. The peer will signify  peer  network health   reported for.\r \r ## Interpreting  Values\r \r `peer.networkQuality?.downlinkQuality` will   value  -1  5.\r \r -   -1 -> Test timeout.\r -   0 -> Very bad network  network check failure.\r -   1 -> Poor network.\r -   2 -> Bad network.\r -   3 -> Average.\r -   4 -> Good.\r -   5 -> Best.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/network-quality-reports"
    },
    {
        "title": "pip-mode.mdx",
        "link": "/ios/v2/features/pip-mode",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "How Picture in Picture works during a video call",
            "How to add PiP support",
            "How to display participant's video in PiP",
            "CPU budget in the background"
        ],
        "content": "--- title: PiP Mode (Beta) nav: 3.983 ---  iOS SDK provides support  creating Picture  Picture mode experience  video calls.  ## Minimum Requirements  -   Minimum iOS version required  support PiP  iOS 15 -   Minimum 100ms SDK version required  `0.3.3` -   Your app need   [com.apple.developer.avfoundation.multitasking-camera-access](https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_avfoundation_multitasking-camera-access) entitlement  use PiP mode  video calls.  ## How Picture  Picture works   video call  When  app goes   background,  can  longer access camera  publish    peers   room. Also,   see video   particiapants   call   app    background. Both   issues  resolved  implementing PiP mode  video calling   app.  ### How  add PiP support  1. You create  instance  AVPictureInPictureVideoCallViewController. And add  view   want  show  PiP window  subview:  ```swift     let pipVideoCallViewController = AVPictureInPictureVideoCallViewController()     pipVideoCallViewController.view.addSubview(...)   ```  2. Next,  create  content source  pipVideoCallViewController, passing  target view  PiP window will use  anchor view  animate  (you can optionally set PiP preferred size):  ```swift     let pipContentSource = AVPictureInPictureController.ContentSource(             activeVideoCallSourceView: targetView,             contentViewController: pipVideoCallViewController)                 // Optionally set  target frame  preferred content size  PiP window     pipVideoCallViewController.preferredContentSize = targetView.frame.size   ```    3. Then  create AVPictureInPictureController   content source:  ```swift     let pipController = AVPictureInPictureController(contentSource: pipContentSource)   ```    4. To start  PiP mode,  set pipController  automatically start PiP   app goes  background   can use startPictureInPicture function  start PiP manually:  ```swift     // To start PiP automatically  app goes  background     pipController.canStartPictureInPictureAutomaticallyFromInline = true                 // Or  can start PiP manually     pipController.startPictureInPicture()   ```    ### How  display participant's video  PiP  AVPictureInPictureController requires source content  use AVSampleBufferDisplayLayer   subview. HMSVideoView uses Metal  rendering video  peers   call. But  Metal  currently unsupported  AVPictureInPictureController,   directly use HMSVideoView  draw participants' video  PiP window. You need  use HMSSampleBufferDisplayView instead. HMSSampleBufferDisplayView   UIImageView  uses AVSampleBufferDisplayLayer  drawing.  1. You create  instance  HMSSampleBufferDisplayView  set  track  display. You add   subview  pipVideoCallViewController view:  ```swift     let trackVideoView = HMSSampleBufferDisplayView(frame: .zero)     trackVideoView.track = track         // Optionally set preferredSize  contentMode     trackVideoView.preferredSize = CGSize(width: 640.0, height: 480.0)     trackVideoView.contentMode = .scaleAspectFill         ...     // As  step 1  'How  add PiP support'     pipVideoCallViewController.view.addSubview(trackVideoView)   ```    2. Set trackVideoView  beging drawing  making  enabled  PiP window  shown (Make  false  PiP window  closed  save resources)  ```swift     trackVideoView.isEnabled = true     ...         // When PiP window  hidden     trackVideoView.isEnabled = false   ```    ### CPU budget   background HMSSampleBufferDisplayView updates  frame every 0.25 seconds (4 frames per second)  save CPU cycles. This  done   exceed CPU budget assinged   background app  iOS. You can experiment  change  update frequency using 'updateEvery' property  HMSSampleBufferDisplayView:  ```swift     // 10 frames per second     trackVideoView.updateEvery = 0.1   ```  👀 To see  example iOS Picuture  Picture implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/pip-mode"
    },
    {
        "title": "preview.mdx",
        "link": "/ios/v2/features/preview",
        "keywords": [],
        "headings": [],
        "content": "--- title: Preview nav: 3.7 ---  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining. 100ms SDKs provide  easy-to-use API  back  feature. Additionally,  SDK will try  establish  connection  100ms server  verify    network issues    auth credentials  valid    everything   order  subsequent room join  instant.  To invoke  API call  ```swift hmsSDK.preview(config: config, delegate: previewDelegate) ```  You  need   config object    pass  [join API](join). The `previewDelegate`   object conforming  `HMSPreviewListener` protocol   four callbacks:  ```swift func onPreview(room: HMSRoom, localTracks: [HMSTrack]) ```  Which  called  SDK  passed   preflight checks  established  connection  100ms server. This will pass  array  local tracks   can display   user (see [Render Video](render-video)  [Mute](mute) sections   details).  If however    error related  getting  input sources   preflight check  failed   ```swift func on(error: HMSError) ```  delegate callback will  fired   HMSError instance  can use  find  went wrong (see [Error Handling](error-handling)).  ```swift func on(room: HMSRoom, update: HMSRoomUpdate) ```  Can  used  get  room updates   state  recording, peer count etc.   ```swift func on(peer: HMSPeer, update: HMSPeerUpdate) ```  Can  used  get peer updates i.e peer join  leave. ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/preview"
    },
    {
        "title": "remote-mute.mdx",
        "link": "/ios/v2/features/remote-mute",
        "keywords": [],
        "headings": [
            "Unmuting",
            "Permissions",
            "Muting/Unmuting",
            "Handling a mute callback",
            "Handling an un-mute callback"
        ],
        "content": "---\r title: Remote Mute\r nav: 3.93\r ---\r \r You're running  room  decide  someone  currently talking   talking.\r \r You'd prefer  stay mute. Or perhaps  want  video turned   well   audio. You're looking   remote mute.\r \r Muting can apply   audio  video.\r \r ##### Unmuting\r \r You may also decide   want  let someone else speak   currently muted. Or may want  ask someone  turn   video.\r \r You can request people  un-mute   well.\r \r ### Permissions\r \r Can't let just anyone mute others. First  need  create  [role](../foundation/templates-and-roles)   permissions  end  room.\r \r The permission  end  room  called `mute`    check   within  `permissions` property  `HMSRole`   peer  see    it.\r \r ### Muting/Unmuting\r \r Once   checked   caller  permissions  mute another peer's audio  video, call    `hmsSdk.changeTrackState`.\r \r To mute  track:\r \r Get  audio  video track   peer   want  mute  pass    first parameter  `hmsSdk.changeTrackState`.\r \r The second parameter   boolean  muting. If true,  track will  muted. If false  track will  requested  un-mute.\r \r Finally  can pass  completion handler  check whether changeTrackState succeeded  failed   third parameter.\r \r ### Handling  mute callback\r \r Muting  automatically applied   receiver tracks. No action  required.\r \r ### Handling  un-mute callback\r \r Unmute callbacks  received   target peer's `on(changeTrackStateRequest:)` callback  `HMSUpdateListener`.\r \r The target peer will receive  object  `HMSChangeTrackStateRequest`.\r \r Here's  structure.\r \r ```swift\r class HMSChangeTrackStateRequest {\r     public let track: HMSTrack\r     public let mute: Bool\r     public let requestedBy: HMSPeer\r }\r ```\r \r With  information here, show  dialog   user  ask   want  accept  change   apply  settings locally. The     regular user [Mute/Unmute](mute).\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/remote-mute"
    },
    {
        "title": "remove-peer.mdx",
        "link": "/ios/v2/features/remove-peer",
        "keywords": [],
        "headings": ["Permissions", "Removing a peer", "Handling the remove peer callback"],
        "content": "---\r title: Remove Peer\r nav: 3.94\r ---\r \r Someone's overstayed  welcome  now  need  remove  peer   chat. Just call `hmsSdk.removePeerRequest`.\r \r \r ### Permissions\r \r Can't let just anyone remove others   room. First  need  create  [role](../foundation/templates-and-roles)   permissions  end  room.\r \r The permission  end  room  called `removeOthers`    check   within  `permissions` property  `HMSRole`   peer  see    it.\r \r ### Removing  peer\r \r Once  permissions  checked  ensure  caller   permission  remove  peer, remove   calling `hmsSdk.removePeer`.\r \r The parameters are:\r \r peer: The `HMSRemotePeer`   like   removed   room.\r \r reason: Optional message  want  pass along  peer  removed\r \r completion handler: Let  know whether  remove operation executed successfully  not. \r \r \r ```swift\r hmssdk.removePeer(targetPeer, reason: \"You  violating  community rules.\") { success, error in\r }\r ```\r \r ### Handling  remove peer callback\r \r The target peer   `removePeer` will receive  callback  `HMSUpdateListener`  `onRemovedFromRoom(notification : HMSRemovedFromRoom)`.\r \r The `HMSRemovedFromRoom` object   passed   callback   structure:\r \r ```swift\r class HMSRemovedFromRoomNotification {\r     public let requestedBy: HMSPeer\r     public let reason: String\r     public let roomEnded: Bool\r }\r ```\r \r > 💡 This    callback  will  triggered   room  [ended](end-room)  well. Except  `roomEnded` will  false.\r \r reason: The string message detailing   peer   removed.\r \r requestedBy: The details   peer  called `removePeer`.\r \r roomEnded: True   entire room  ended. False    receiving peer  removed.\r \r Clients  read  callback  show  appropriate UI.",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/remove-peer"
    },
    {
        "title": "render-video.mdx",
        "link": "/ios/v2/features/render-video",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Render Video\r nav: 3.6\r ---\r \r It  comes   this. All  setup  far   done    can show live streaming video   beautiful apps. \r \r How   it? What  I  careful about? Is  easy? 😨😰😱\r \r It's simpler   think. That's     for. 🙌✌️🤝\r \r 1. First,  need  create  `HMSVideoView` object   View hierarchy.\r `HMSVideoView`   subclass  `UIView`  add    UI just   regular view using Storyboard, XIB  in-code.\r \r 2. Next,    reference   video track object. Specifically,  object  type `HMSVideoTrack` (or    subclasses). For example,  local peer's video track can  accessed like  -\r ```swift\r hmsSDK.localPeer?.localVideoTrack() //   HMSLocalVideoTrack,  subclass  HMSVideoTrack\r ```\r \r 3. Now, pass  video **track** object  video **view** using `setVideoTrack` method  `HMSVideoView`\r ```swift\r videoView.setVideoTrack(track) // videoView  HMSVideoView, track  HMSVideoTrack\r ```\r Video Track  Video View. Remember this. You'll    often.\r \r That's it. \r \r The video   peer will  transmitting will now  rendered & start playing   video view. 🥳 ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/render-video"
    },
    {
        "title": "rtmp-recording.mdx",
        "link": "/ios/v2/features/rtmp-recording",
        "keywords": [],
        "headings": [
            "Starting Streaming / Recording",
            "Stopping Streaming / Recording",
            "Current Room Status",
            "Code sample"
        ],
        "content": "---\r title: RTMP Streaming / Recording\r nav: 3.95\r ---\r \r Want  preserve  video call  posterity   recording? Or live stream    millions  viewers  Twitch  YouTube  whatever gives   RTMP ingest URL?\r \r Turn  RTMP Streaming  Recording\r \r In 100ms, recording  streaming  usually achieved    bot join  room  stream   sees  hears   file (recording)    RTMP ingest URL (streaming).\r \r The topics covered   doc are:\r \r 1. [How  start streaming / recording.](#starting-streaming-recording)\r 2. [How  stop streaming / recording.](#stopping-streaming-recording)\r 3. [Checking  current status  streaming / recording.](#current-room-status)\r \r ## Starting Streaming / Recording\r \r To start recording, streaming  both, create  instance  `HMSRTMPConfig`.\r \r `HMSRTMPConfig` takes  following:\r \r 1. **meetingURL**: _URL?_. The URL  100ms bot user will open  join  room. It must allow access without  user level interaction.\r 2. **`rtmpURLs`**: _[URL]?_. If streaming  required,     one   RTMP ingest Urls  max limit  3 urls   stream  go. If  recording,    nil.\r \r     - Format: `rtmp://server.com/app/STREAM_KEY`\r     - Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`\r         - \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.\r         - \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.\r \r 3. **record**: _Bool_. If recording  required, set true. If recording   required, set false. This value   effect  streaming.\r \r -   If  `rtmpURLs`  record = true  provided,  streaming  recording will begin.\r -   If  `rtmpURLs`  provided,  streaming will begin.\r -   If  record true  provided,  recording will begin.\r \r If either one  started,     started without first stopping whatever  running.\r Eg: Only streaming  started. Recording   started unless streaming  stopped first.\r \r If   required,     started together  providing  RTMP ingest Urls  recording = true.\r \r The result   action  sent   completion handler `((Bool, HMSError?) -> Void)?`. When attempt  start streaming/recording  successful  `Bool` will  `true` & `HMSError` will  nil. In case  failure, `Bool` will  `false` &  `HMSError` object will  passed  relevant error information.\r \r ```swift\r let config = HMSRTMPConfig(meetingURL: <#meetingURL#>, rtmpURLs: <#rtmpURLs#>, record: <#recordingEnabled#>)\r hmsSDK?.startRTMPOrRecording(config: config) { didStart, error in\r     print(didStart, error)\r }\r ```\r \r ## Stopping Streaming / Recording\r \r To stop streaming AND recording. It   currently possible  stop just one, whatever  running will  stopped.\r \r Here's   stop both:\r \r The `stopRTMPAndRecording`    completion handler. When attempt  stop  successful  `Bool` will  `true` & `HMSError` will  nil. In case  failure  stop streaming AND recording, `Bool` will  `false` &  `HMSError` object will  passed  relevant error information.\r \r ```swift\r hmsSDK?.stopRTMPAndRecording() { didStop, error in\r }\r ```\r \r ## Current Room Status\r \r The current status   room  always reflected   `HMSRoom` object   returned   `HMSUpdateListener`.\r \r Here   relevant properties inside  `HMSRoom` object   can read  get  current recording/streaming status   room namely: `browserRecordingState`, `serverRecordingState`  `rtmpStreamingState`.\r \r Each    objects  contain  boolean `running`  lets  know   active   room right now  `error`  lets  know     error.\r \r Apart   RTMP stream   browser recording,   ones  can start  stop,   also  `serverRecordingState`,  can  turned    room  archival purposes    currently  stopped  enabled   room   dashboard.\r \r 1. **rtmpStreamingState**  instance  `HMSRTMPStreamingState`,  looks like:\r \r ```swift\r @objcMembers public class HMSRTMPStreamingState : NSObject {\r \r     public let running: Bool\r \r     public let error: HMSError?\r }\r ```\r \r This represents  livestream  one   RTMP urls.\r \r 2. **browserRecordingState**  instance  `HMSBrowserRecordingState`,  looks like:\r \r ```swift\r @objcMembers public class HMSBrowserRecordingState : NSObject {\r \r     public let running: Bool\r \r     public let error: HMSError?\r }\r ```\r \r This represents  recording  can  requested  start.\r \r 3. **serverRecordingState**  instance  `HMSServerRecordingState`,  looks like:\r \r ```swift\r @objcMembers public class HMSServerRecordingState : NSObject {\r \r     public let running: Bool\r \r     public let error: HMSError?\r }\r ```\r \r This represents   room  set   recorded    created   sessions within  will always  recorded  archival   server.\r \r The room status   checked  following two places -\r \r 1. In  `onJoin(room: HMSRoom)` callback  `HMSUpdateListener`\r    The properties mentioned  will    `HMSRoom` object.\r 2. In  `on(room: HMSRoom, update: HMSRoomUpdate)` callback  `HMSUpdateListener`.\r    The `HMSRoomUpdate` type will  `browserRecordingStateUpdated`, `serverRecordingStateUpdated`  `rtmpStreamingStateUpdated`.\r \r ### Code sample\r \r Refer   code example within  [100ms Sample App](https://github.com/100mslive/100ms-ios-sdk/blob/ebb6dab6b16472af405cdef5d74e59aea7e90300/Example/HMSSDKExample/Meeting/MeetingViewController.swift#L350)   information.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/rtmp-recording"
    },
    {
        "title": "screen-share.mdx",
        "link": "/ios/v2/features/screen-share",
        "keywords": [],
        "headings": [
            "How to start screenshare from the app",
            "How to import",
            "Using Swift Package Manager",
            "Using Cocoapods",
            "Podfile",
            "How to use HMSBroadcastExtensionSDK to share iOS screen with other participants in the room?",
            "How to create Replaykit Broadcast extension?",
            "How to configure your main app and extension to enable screen sharing",
            "How to share the screen in meeting",
            "How to invalidate the connection between main app and extension when the user stops screen recording",
            "Stop screen sharing when the user leaves the room",
            "Debugging issues in your screen-share implementation"
        ],
        "content": "--- title: Screen Share nav: 3.981 ---  iOS SDK provides support  sharing  entire screen   device   room.  It uses [Replaykit](https://developer.apple.com/documentation/replaykit) framework  Apple. To understand  documentation better consider familiarising   live screen broadcast  iOS: https://developer.apple.com/videos/play/wwdc2018/601  Please note    peer  share  screen,  role must  screenshare enabled   dashboard. Also, select  appropriate resolution   desire  screenshare track   of.  ![ScreenshareDashboard](/docs/v2/screenshare-dashboard.png)  ## How  start screenshare   app  You create  iOS broadcast upload extension. It uses Apple's ReplayKit framework  record  device screen  delivers frame samples   broadcast extension. You can share     app  also  entire device screen including  apps   device.  HMSBroadcastExtensionSDK  made specifically   used   iOS broadcast upload extension target. After importing  SDK,  use HMSScreenRenderer class  process  sample buffer coming  RPBroadcastSampleHandler. These samples   presented   main meeting app   screen recording track.  ## How  import  ### Using Swift Package Manager You can use [Swift Package Manager](https://www.swift.org/package-manager) (use https://github.com/100mslive/100ms-ios-broadcast-sdk.git   package source)  Add HMSBroadcastExtensionSDK   main app target  Swift Package Manager. Then add HMSBroadcastExtensionSDK   iOS broadcast upload extension target.  ### Using Cocoapods  Get  HMSBroadcastExtensionSDK via [Cocoapods](https://cocoapods.org/). Add  `pod 'HMSBroadcastExtensionSDK'`   broadcast upload extension target  Podfile  follows:    ```ruby    Podfile     platform :ios, '12.0'     target 'MainApp' do     pod 'HMSSDK'   end    target 'HMSScreenShare' do     pod 'HMSBroadcastExtensionSDK'   end   ```  ## How  use HMSBroadcastExtensionSDK  share iOS screen   participants   room?  iOS broadcast extension provides   CMSampleBuffers   can process using HMSBroadcastExtensionSDK. This enabled   share  screen   participants   room   main app  uses HMSSDK.  ## How  create Replaykit Broadcast extension?  1. Create  Broadcast Upload Extension target   embedded   app project target. 2. You create  subclass  RPBroadcastSampleHandler  override  processSampleBuffer function. This gives  access   CMSampleBuffer provided   Replaykit framework.  ## How  configure  main app  extension  enable screen sharing  1. Configure  [App Group](https://developer.apple.com/documentation/xcode/configuring-app-groups)   main app. Choose   App Group   broadcast extension target. 2. In  main app set  app group string   hmssdk instance like below:  ```swift     hmsSDK = HMSSDK.build { sdk in             sdk.appGroup = \"group.live.100ms.videoapp\"             ...         }   ```    3. In  broadcast extension import HMSBroadcastExtensionSDK  ```swift     import HMSBroadcastExtensionSDK   ```    4. Create  instance  HMSScreenRenderer passing  app group string like below:     ```swift     class SampleHandler: RPBroadcastSampleHandler {      let screenRenderer = HMSScreenRenderer(appGroup: \"group.live.100ms.videoapp\")         ...   ```     HMSScreenRenderer uses  app group string  talk   main app.    ## How  share  screen  meeting    In  Broadcast Extension,  create  subclass  RPBroadcastSampleHandler class. This class handles screen frame samples produced  Replaykit. Replaykit delivers  frames  CMSampleBuffer  processSampleBuffer function.    In  processSampleBuffer function call process function   screenRenderer instance passing  CMSampleBuffer like below:     ```swift     override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {         switch sampleBufferType {         case RPSampleBufferType.video:             // Handle video sample buffer             screenRenderer.process(sampleBuffer)         ...     }   ```    ## How  invalidate  connection  main app  extension   user stops screen recording  When  user stops screen sharing broadcastFinished function  called   RPBroadcastSampleHandler class. At  point, call invalidate   screenRenderer instance  stop screen sharing.  ```swift     override func broadcastFinished() {         // User  requested  finish  broadcast.         self.screenRenderer.invalidate()     }   ```    ## Stop screen sharing   user leaves  room When  user leaves  meeting room   main app,  will receive  error HMSScreenRendererErrorCode.noActiveMeeting  calling process  screenRenderer instance. You can handle  error  stop  broadcast extension like below:  ```swift     override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {         switch sampleBufferType {         case RPSampleBufferType.video:             // Handle video sample buffer              let error = screenRenderer.process(sampleBuffer) {                  error.code == .noActiveMeeting {                     finishBroadcastWithError(NSError(domain: \"ScreenShare\", code: error.code.rawValue, userInfo: [NSLocalizedFailureReasonErrorKey : \"You     meeting.\"]))                 }             }         ...     }   ```    ## Debugging issues   screen-share implementation  1. If  use cocoapods  M1 mac  compile  simulator   might run   error like this: \"error framework  found Pods_hmsscreenshare\". This issue  specific  cocoapods method  integrating  100ms SDK. If  use swift package manager,   run   error. As  workaround please use  snippet similar    end   example podfile  exclude arm64 arch  simulator   pod screen share target: Workaround  M1 simulator issue https://github.com/100mslive/100ms-ios-sdk/blob/main/Example/Podfile Note: Pods-HMSScreenShare   snippet   cocoapods framework target  broadcast extension (it's generally Pods-[Your Broadcast Extension target name])  2. If   getting  crash  running  screen share feature, please make sure   app group identifier   misspelled    main app   broadcast extension. Also make sure  entitlement file   correct app group name.   👀 To see  Example iOS broadcast upload extension implementation  screen sharing using 100ms Broadcast extension SDK, checkout [our Example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example).  📲 Download  100ms fully-featured Sample iOS app here: https://testflight.apple.com/join/dhUSE7N8 ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/screen-share"
    },
    {
        "title": "tap-to-focus.mdx",
        "link": "/ios/v2/features/tap-to-focus",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "What is Tap to Focus?",
            "What are different camera focus modes",
            "1. AutoFocus",
            "2. TapToAutoFocus",
            "3.TapToLockFocus",
            "How to enable Tap-to-focus mode"
        ],
        "content": "--- title: Tap-to-focus (Beta) nav: 3.985 ---  If    use-case  users   able  tap   screen  lock  camera focus  certain objects,  can use tap-to-focus feature provided  100ms iOS SDK.  ## Minimum Requirements  -   SDK version 0.4.7  ## What  Tap  Focus?  If   used native iOS camera app,  know   can tap   camera preview screen  lock focus  certain object   camera scene. The focus plane   camera  set   depth   object  focus. This  called 'Tap  focus'.  ## What  different camera focus modes  There  mainly 3 focus modes:  ### 1. AutoFocus  The default focus mode  camera continuously sets focus  exposure based  center point   scene.  ### 2. TapToAutoFocus  This allows user  tap  focus   object. Once user moves  camera enough  change  subject   scene  camera switches  default **Autofocus** mode  ### 3.TapToLockFocus  This allows user  tap  lock focus   object. The focus will   changed  user taps   focus  another object.  By default iOS camera uses **autofocus** mode. That means  constantly tries  focus   center object   camera scene.  ## How  enable Tap-to-focus mode  To enable 'Tap-to-focus' mode,  pass one   two tap-to-focus modes (**HMSCameraFocusMode**)   param   HMSVideoSettings like below:  ```swift sdk.trackSettings = HMSTrackSettings.build { videoSettingsBuilder, audioSettingsBuilder in     videoSettingsBuilder.cameraFocusMode = .focusModeTapToAutoFocus     ... }   ```     OR    ```swift sdk.trackSettings = HMSTrackSettings.build { videoSettingsBuilder, audioSettingsBuilder in     videoSettingsBuilder.cameraFocusMode = .focusModeTapToLockFocus     ... }   ```  That's   need  do. These camera modes  integrated   **HMSVideoView**   use  create video tiles. Now whenever user taps   local camera view (HMSVideoView),  tapped object   camera scene gets focused according   focus mode    set.  HMSCameraFocusMode  following 3 modes:  1. **kHMSFocusModeAuto** 2. **kHMSFocusModeTapToAutoFocus** 3. **kHMSFocusModeTapToLockFocus**  If   use **cameraFocusMode** video setting,  **autofocus** mode  used  default.  👀 To see  example iOS tap  focus implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/features/tap-to-focus"
    },
    {
        "title": "adaptive-bitrate.mdx",
        "link": "/ios/v2/foundation/adaptive-bitrate",
        "keywords": [],
        "headings": [],
        "content": "--- title: Adaptive Bitrate nav: 1.7 ---  Adaptive bitrate (ABR) refers  features  enable dynamic adjustments  video quality—to optimise  end-user experience  diverse network conditions. ABR ensures  every participant  able  consume  highest possible quality video  conferencing  streaming use-cases, based   bandwidth constraints.\r \r In addition  network, ABR can also optimise   right video quality based   size   video element. For example,  video call running  active speaker layout  larger video tiles  require higher quality video track. These adjustments can  made dynamically  adaptive bitrate.\r \r Learn   100ms enables adaptive bitrate in:\r \r * [Conferencing scenarios](#abr-in-conferencing)\r * [Live streaming scenarios](#abr-in-live-streaming)\r \r ## ABR  conferencing\r \r Peers  100ms rooms can publish multiple video quality levels simultaneously. This  called “simulcast”  100ms. Peers  consume  video tracks can upgrade  downgrade video quality.\r \r You can enable simulcast   publishing role's template,  use manual  automatic layer changes   subscriber's side.\r \r ### Publisher-side configuration\r \r Simulcast configuration  opt-in  can  enabled   role's configuration inside  template. The role's publish video quality determines video quality layers  simulcast. For example,  role configured  publish  720p can simulcast 180p, 360p  720p layers.\r \r | Video publish quality  Possible simulcast layers |\r |-----------------------|---------------------------|\r | 1080p                  1080p, 540p, 270p         |\r | 720p                   720p, 360p, 180p          |\r | 480p                   480p, 240p                |\r | 360p                   360p, 180p                |\r | 240p                   240p                      |\r | 180p                   180p                      |\r \r #### Enable via dashboard\r \r Enable \"can publish simulcast\"   template page   particular role. You can also specify  many video quality layers will  simultaneously published  peers   role. The peer will publish  layers assuming network bandwidth permits.\r \r ![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r \r #### Enable via API\r \r Update role configuration using  [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2  3 layers  scale   selected publish layer.\r \r In  example below,  role  configured  publish 720p  3 simulcast layers:\r \r * `f`  full  scale  factor  1 (= 720p)\r * `h`  half  scale  factor  2 (= 360p)\r * `q`  quarter  scale  factor  4 (= 180p)  ```js {     \"publishParams\": {         ...         \"simulcast\": {             \"video\": {                 \"layers\": [                     {                         \"rid\": \"f\",                         \"scaleResolutionDownBy\": 1,                         \"maxBitrate\": 700,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"h\",                         \"scaleResolutionDownBy\": 2,                         \"maxBitrate\": 250,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"q\",                         \"scaleResolutionDownBy\": 4,                         \"maxBitrate\": 100,                         \"maxFramerate\": 30                     }                 ]             },             \"screen\": {}         }     } } ``` \r ### Subscribe-side behavior\r \r <br/>\r \r #### Manual layer selection\r \r The 100ms client-side SDKs provide methods  set  preferred quality layer   remote peer's video track. See docs   preferred platform:\r \r * [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r * [iOS](/docs/ios/v2/advanced-features/simulcast)\r * [Android](/docs/android/v2/advanced-features/simulcast)\r \r #### Automatic layer selection\r \r <br/>\r <video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r     <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r </video>\r <br/>\r \r - Based  video tile size: The SDK automatically ensures appropriate video layer  subscribed to,  demonstrated   video above. For example,   video element  360 px  width, 360p   closest layer will  selected.\r     - **JavaScript**: The `useVideo` hook   100ms React SDK auto-selects  appropriate video quality layer.\r     - **iOS**: `HMSVideoView` can auto-select video quality layer.\r     - **Android**: _Coming soon_.\r - Based  network quality: ABR will work alongside subscribe degradation  auto-downgrade video quality  peers. This  _coming soon_.\r \r ## ABR  live streaming\r \r 100ms uses  HTTP Live Streaming (HLS) protocol  live streaming scenarios. HLS supports adaptive bitrate    box,  HLS video players can automatically  manually pick appropriate video quality levels.\r \r Learn   [how HLS works   blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/adaptive-bitrate"
    },
    {
        "title": "basics.mdx",
        "link": "/ios/v2/foundation/basics",
        "keywords": [],
        "headings": ["Quickstart"],
        "content": "---\r title: Basics\r nav: 1.1\r ---\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](/ios/v2/guides/quickstart)\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/basics"
    },
    {
        "title": "handling-audio-video-edge-cases.mdx",
        "link": "/ios/v2/foundation/handling-audio-video-edge-cases",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Handling audio-video edge cases\r nav: 1.4\r ---\r \r ## Introduction  100ms handles  lot  standard audio/video issues internally without  developer needing  handle  explicitly. This page describes  common issues   100ms handles them.  There  3 major issues  issues  can occur   audio/video conference  - Device capture exceptions - Network disconnection/switching network exceptions - Network bandwidth limitation/large room exceptions  ## Device failure  A common issue   failure  capture mic/camera even though  user   devices connected. Common causes include differences  OS/browser implementations  device capture APIs, permission   granted   user,   device   use  another program.  The usual recourse   exceptions   prompt  user action - \"Grant permission\", \"Please close   app using microphone\", \"Switch  Safari\"  100ms' SDKs come   [preview method](../features/preview)  can  called  joining  room. This will test  device failures, network connectivity  throw errors   recommended user action.  ## Network disconnection/Switching networks  Another set  common issues  minor network blips. Common causes    user moves  one room  another,  switches  wifi  data.  100ms will send  notification within 10s  detecting  network disconnection  will automatically retry  connection  available upto 60s. After 60s,  terminal error  thrown   client.  ## Network bandwidth limitation/large rooms  A common occurrence  large rooms,  constrained networks  dropped frames. This results  robotic voices, frozen frames, pixelated screenshare  entire pieces  audio/video   lost.  100ms will automatically prioritize connections  network limits  reached. This prioritization can  controlled  developers using  dashboard  100ms APIs.  eg. A developer can prioritize host's screenshare higher  guests' videos. In low bandwidth constraints, guests' videos will  turned off,  host's screenshare will remain. \r \r \r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/handling-audio-video-edge-cases"
    },
    {
        "title": "live-streaming.mdx",
        "link": "/ios/v2/foundation/live-streaming",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming nav: 1.5 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   iOS SDK [here](/ios/v2/features/hls). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/live-streaming"
    },
    {
        "title": "recordings.mdx",
        "link": "/ios/v2/foundation/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.6 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/recordings"
    },
    {
        "title": "security-and-tokens.mdx",
        "link": "/ios/v2/foundation/security-and-tokens",
        "keywords": [],
        "headings": ["Code sample: Generate app token", "Code sample: Generate management token"],
        "content": "--- title: Authentication  Tokens nav: 1.3 ---  ## Introduction  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](./../features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](/docs/server-side/v2/Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use? You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language.   #### Code sample: Generate app token  <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='client-code-token-0'>  ```javascript var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  var payload = {     access_key: app_access_key,     room_id: '<room_id>',     user_id: '<user_id>',     role: '<role>',     type: 'app',     version: 2,     iat: Math.floor(Date.now() / 1000),     nbf: Math.floor(Date.now() / 1000) };  jwt.sign(     payload,     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='client-code-token-1'>  ```python #!/usr/bin/env python3 import jwt import uuid import datetime import sys  app_access_key = \"<app_access_key>\" app_secret = \"<app_secret>\"  def generate(room_id, user_id, role):     expires = expires  24 * 3600     now = datetime.datetime.utcnow()     exp  = now+ datetime.timedelta(seconds=expires)     return jwt.encode(payload={                 \"access_key\": app_access_key,                 \"type\":\"app\",                 \"version\":2,                 \"room_id\": room_id,                 \"user_id\": user_id,                 \"role\":role,                 \"jti\": str(uuid.uuid4()),                 \"exp\": exp,                 \"iat\": now,                 \"nbf\": now,                 }, key=app_secret) if __name__ == \"__main__\":      len(sys.argv) == 3:         room_id = sys.argv[0]         user_id = sys.argv[1]         role = sys.argv[2]     print(generate(room_id=room_id, user_id=user_id, role=role)) ```  </Tab>  <Tab id='client-code-token-2'  >  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateHmsClientToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"room_id\", \"<room_id>\");     payload.put(\"user_id\", \"<user_id>\");     payload.put(\"role\", \"<role>\");     payload.put(\"type\", \"app\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id='client-code-token-3'  >  ```ruby require 'jwt' require 'securerandom'    $app_access_key = \"<app_access_key>\" $app_secret = \"app_secret\"  def generateAppToken(room_id, user_id, role)     now = Time.now     exp = now + 86400     payload = {         access_key: $app_access_key,         room_id: room_id,         user_id: user_id,         role: role,         type: \"app\",         jti: SecureRandom.uuid,         version: 2,         iat: now.to_i,         nbf: now.to_i,         exp: exp.to_i     }      token = JWT.encode(payload, $app_secret, 'HS256') end  puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"  ```  </Tab>  <Tab id='client-code-token-4'>  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $issuedAt  = new DateTimeImmutable(); $expire    = $issuedAt->modify('+24 hours')->getTimestamp(); $accessKey = \"<app_access_key>\"; $secret = \"<app_secret>\"; $version   = 2; $type      = \"app\"; $role      = \"<role>\"; $roomId    = \"<room_id>\"; $userId    = \"<user_id>\";  $payload = [     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire,     'access_key' => $accessKey,     'type' => \"app\",     'jti' =>  Uuid::uuid4()->toString()     'version' => 2,     'role' => $role,     'room_id' => $roomId,     'user_id' => $userId ];  $token = JWT::encode(     $payload,     $secret,     'HS256' ); ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure.  </Note>  #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](./../guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.   #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.   If  evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics),  can use  public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.  #### Code sample: Generate management token  <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='test-code-0'>  ```js var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  jwt.sign(     {         access_key: app_access_key,         type: 'management',         version: 2,         iat: Math.floor(Date.now() / 1000),         nbf: Math.floor(Date.now() / 1000)     },     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='test-code-1'>  ```py #!/usr/bin/env python3 import jwt import uuid import datetime  app_access_key = '<app_access_key>' app_secret = '<app_secret>'   def generateManagementToken():     expires = 24 * 3600     now = datetime.datetime.utcnow()     exp = now + datetime.timedelta(seconds=expires)     return jwt.encode(payload={         'access_key': app_access_key,         'type': 'management',         'version': 2,         'jti': str(uuid.uuid4()),         'iat': now,         'exp': exp,         'nbf': now         }, key=app_secret)  if __name__ == '__main__':     print(generateManagementToken()) ```  </Tab>  <Tab id=\"test-code-2\">  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateManagementToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"type\", \"management\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id=\"test-code-3\">  ```ruby require 'jwt' require 'securerandom'  $app_access_key = \"<app_access_key>\" $app_secret = \"<app_secret>\"  def generateManagementToken()     now = Time.now     exp = now + 86400     payload = {     access_key: $app_access_key,     type: \"management\",     version: 2,     jti: SecureRandom.uuid,     iat: now.to_i,     nbf: now.to_i,     exp: exp.to_i } token = JWT.encode(payload, $app_secret, 'HS256') return token end  puts generateManagementToken ```  </Tab>  <Tab id=\"test-code-4\">  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $app_access_key = \"<app_access_key>\"; $app_secret = \"<app_secret>\";  $issuedAt   = new DateTimeImmutable(); $expire     = $issuedAt->modify('+24 hours')->getTimestamp();  $payload = [     'access_key' => $app_access_key,     'type' => 'management',     'version' => 2,     'jti' =>  Uuid::uuid4()->toString(),     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire, ];  $token = JWT::encode($payload, $app_secret, 'HS256'); ?> ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.  </Note> ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/security-and-tokens"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/ios/v2/foundation/templates-and-roles",
        "keywords": [],
        "headings": ["API reference"],
        "content": "--- title: Templates  Roles nav: 1.2 ---  ## Introduction  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              |   ## API reference  Apart   dashboard,  programmatic way  interact  templates  via [API](/server-side/v2/policy/template-object). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/foundation/templates-and-roles"
    },
    {
        "title": "quickstart.mdx",
        "link": "/ios/v2/guides/quickstart",
        "keywords": [],
        "headings": [
            "Prerequisites",
            "Xcode Project Setup",
            "Initialising The SDK",
            "Get Auth Token",
            "Join Room",
            "Adding Video",
            "Cleanup",
            "Final Points",
            "Ways to go from here"
        ],
        "content": "--- title: 100ms SDK iOS Quickstart Guide nav: 2.1 devTime: 15mins author: Dmitry Fedoseyev date: 2-8-2021 image: /guides/audio-room.png tags:     - swift     - ios ---  ## Prerequisites  Familiarity  Xcode  iOS SDK, Cocoapods installed  ## Xcode Project Setup  Create  Xcode project  select \"iOS\"  platform  \"App\"  application  ![Xcode](/guides/xcode1.png)  Select \"Storyboard\"  interface  \"Swift\"  language  Assuming  project name  \"basicvideocall\", create \"Podfile\"   project folder   following contents then run `pod install`  ```jsx section=XcodeProjectSetup sectionIndex=1 platform :ios, '13.0'  target 'basicvideocall' do   use_frameworks!   pod 'HMSSDK'  end ```  Open .xcworkspace  Add  entitlements  video, audio  network access   `Info.plist`  ```xml section=XcodeProjectSetup sectionIndex=2 <key>NSCameraUsageDescription</key> <string>Please allow access  Camera  enable video conferencing.</string> <key>NSLocalNetworkUsageDescription</key> <string>Please allow access  network usage  enable video conferencing.</string> <key>NSMicrophoneUsageDescription</key> <string>Please allow access  Microphone  enable video conferencing.</string> ```  ### Initialising The SDK  Open `ViewController.swift`  Add `HMSSDK` import  ```swift section=InitializingTheSDK sectionIndex=1 import HMSSDK ```  Conform  HMSUpdateListener  add stubs  Xcode offers to  ```swift section=InitializingTheSDK sectionIndex=2 extension ViewController: HMSUpdateListener { } ```  Create  instance  HMSSDK  ```swift section=InitializingTheSDK sectionIndex=3 class ViewController: UIViewController { var hmsSDK = HMSSDK.build() ... } ```  ### Get Auth Token  Before  proceed  need  obtain  room id   token. In case    sure        quick guide:  [Token Setup Guide](token)  ### Join Room  Alright   token  room id   ready  proceed.  Add `joinRoom()` function  room id  token  obtained  previous steps. Then call `joinRoom()`  `viewDidLoad()`  ```swift section=JoinRoom sectionIndex=1 func joinRoom() {     let config = HMSConfig(userName: \"John Doe\", authToken: \"replace  token\")     hmsSDK.join(config: config, delegate: self) }  override func viewDidLoad() {     super.viewDidLoad()     joinRoom() } ```  Congratulations! You   audio conference app.  Build  launch  device,  join  room  web app  try  call  web  iOS. (To join   web, use one   role url links   room [Room  Dashboard](https://dashboard.100ms.live/rooms))  ## Adding Video  Lets create  add  lazily initialized UIStackView  will hold  video views  ```swift{4-24} section=AddingVideo sectionIndex=1 class ViewController: UIViewController {     var hmsSDK = HMSSDK.build()      lazy var stackView: UIStackView = {         let result = UIStackView()         result.axis = .vertical          view.addSubview(result)         result.translatesAutoresizingMaskIntoConstraints = false         result.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true         result.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true         result.topAnchor.constraint(equalTo: view.topAnchor).isActive = true         let heightConstraint =  result.heightAnchor.constraint(equalToConstant: 0)         heightConstraint.isActive = true         heightConstraint.priority = .defaultLow          return result     }() ```  Next step   listen  `trackAdded` update    get notified  someone  published  video track.  In  handler  will create  instance  `HMSVideoView`  allows us  render  `HMSVideoTrack`  ```swift section=AddingVideo sectionIndex=2 extension ViewController: HMSUpdateListener {     ...      func on(track: HMSTrack, update: HMSTrackUpdate,  peer: HMSPeer) {         switch update {         case .trackAdded:              let videoTrack = track as? HMSVideoTrack {                 addVideoView(for: videoTrack)             }         default:             break         }     }      func addVideoView(for track: HMSVideoTrack) {         let videoView = HMSVideoView()         videoView.translatesAutoresizingMaskIntoConstraints = false         videoView.setVideoTrack(track)         videoView.heightAnchor.constraint(equalTo: videoView.widthAnchor, multiplier: 9.0/16.0).isActive = true         stackView.addArrangedSubview(videoView)     } ```  Build  run  app. Congratulations    a/v call running!  ### Cleanup  A peer can decide  stop publishing    tracks   time (most frequent case  start/stop screen share), also peer may choose  leave  room. In    events  want  remove  corresponding video view  release resources.  To start  will introduce  map  track  video view    can figure   video view  remove  ```swift{4} section=Cleanup sectionIndex=1 class ViewController: UIViewController {     var hmsSDK = HMSSDK.build()      var trackViewMap = [HMSTrack: HMSVideoView]()  ... ```  Next  want  add  map entry   last step   `addVideoView` function  ```jsx section=Cleanup sectionIndex=2 func addVideoView(for track: HMSVideoTrack) {     let videoView = HMSVideoView()     videoView.translatesAutoresizingMaskIntoConstraints = false     videoView.setVideoTrack(track)     videoView.heightAnchor.constraint(equalTo: videoView.widthAnchor, multiplier: 9.0/16.0).isActive = true     stackView.addArrangedSubview(videoView)     trackViewMap[track] = videoView } ```  Now  will create  helper function  will remove  view  given track  ```swift section=Cleanup sectionIndex=3 func removeVideoView(for track: HMSVideoTrack) {     trackViewMap[track]?.removeFromSuperview() } ```  With    ready  add handlers  `trackRemoved`  `peerLeft` events  follows:  ```swift section=Cleanup sectionIndex=4 func on(peer: HMSPeer, update: HMSPeerUpdate) {     switch update {     case .peerLeft:          let videoTrack = peer.videoTrack {             removeVideoView(for: videoTrack)         }     default:         break     } }  func on(track: HMSTrack, update: HMSTrackUpdate,  peer: HMSPeer) {     switch update {     case .trackAdded:          let videoTrack = track as? HMSVideoTrack {             addVideoView(for: videoTrack)         }     case .trackRemoved:          let videoTrack = track as? HMSVideoTrack {             removeVideoView(for: videoTrack)         }     default:         break     } } ```  And    handle  common use case   100ms SDK!  ### Final Points  To control mute/unmute state  local video  audio tracks use  ```swift section=FinalPoints sectionIndex=1 hmsSDK.localPeer?.localAudioTrack()?.setMute(true) hmsSDK.localPeer?.localVideoTrack()?.setMute(true) ```  After   done   call    good idea  call  ```swift section=FinalPoints sectionIndex=2 hmsSDK.leave() ```  ### Ways  go  here  Checkout complete project code  github: [https://github.com/100mslive/100ms-ios-sdk/tree/main/BasicExample](https://github.com/100mslive/100ms-ios-sdk/tree/main/BasicExample)  Checkout  sample code   full featured conferencing app:  [https://github.com/100mslive/100ms-ios-sdk/tree/main/Example](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example) ",
        "platformName": "iOS",
        "objectID": "/ios/v2/guides/quickstart"
    },
    {
        "title": "token-endpoint.mdx",
        "link": "/ios/v2/guides/token-endpoint",
        "keywords": [],
        "headings": [
            "Overview",
            "Get an app token using token endpoint",
            "Example client-side implementation",
            "Disable 100ms token endpoint",
            "Error Response"
        ],
        "content": "--- title: Auth Token Endpoint Guide nav: 2.3 ---  ## Overview  100ms provides  option  get `App Tokens` without setting   token generation backend service  simplify  integration journey  testing  [sample app](https://github.com/100mslive/100ms-web)  building integration  100ms.  You can find  token endpoint   [developer page](https://dashboard.100ms.live/developer)   100ms dashboard.  ![Token endpoint](/guides/token-endpoint-dashboard.png)  We recommend  move   token generation service   transition  app  production,   token endpoint service will  scale  production.  The \"Sample Apps\" built using 100ms client SDKs require  `App Token`  join  room  initiate  video conferencing  live streaming session. Please check  [Authentication  Tokens guide](./../foundation/security-and-tokens)  Please note    use  token endpoint  create  `Management Token`  server APIs. Refer   [Management Token section](./../foundation/security-and-tokens#management-token)  Authentication  Tokens guide   information.  ## Get  app token using token endpoint  You can use  token endpoint   100ms dashboard  building integration  100ms. This acts   tool enabling front-end developers  complete  integration without depending   backend developers  set   token generation backend service.  **URL format:** `<YOUR_TOKEN_ENDPOINT>api/token`  100ms token endpoint can generate  app token   inputs passed,   room_id, role, & user_id (optional -  internal user identifier   peer's user_id). You can use [jwt.io](https://jwt.io/)  validate whether  app token contains   input values.  <PostRequest title=\"https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"room_id\":\"633fcdd84208780bf665346a\",     \"role\":\"host\",     \"user_id\":\"1234\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOi***************************R3tT-Yk\",     \"msg\": \"token generated successfully\",     \"status\": 200,     \"success\": true,     \"api_version\": \"2.0.192\" } ```  </ResponseBox>  ### Example client-side implementation  You can directly add    client-side implementation, check  [sample app](https://github.com/100mslive/100ms-ios-sdk/blob/23bd356ad03cb7369e16451a41d5923c6ceaf109/Example/HMSSDKExample/Meeting/RoomService.swift#L40)  reference.  ### Disable 100ms token endpoint  Due   security concerns,    wish  use  token endpoint  generate app tokens,   can disable    [Developers page](https://dashboard.100ms.live/developer)   dashboard  disabling  option \"Disable &lt;room_id&gt;/&lt;role&gt; link format.\"  ![Disable Token endpoint](/guides/disable-token-endpoint.png)  #### Error Response  Once  disabled    dashboard,  requests  create  app token using  100ms token endpoint will throw   error:  ```json {     \"success\": false,     \"msg\": \"Generating token using  room_id  role  disabled.\",     \"api_version\": \"2.0.192\" } ``` ",
        "platformName": "iOS",
        "objectID": "/ios/v2/guides/token-endpoint"
    },
    {
        "title": "token.mdx",
        "link": "/ios/v2/guides/token",
        "keywords": [],
        "headings": [],
        "content": "---\r title: Auth Token Quickstart Guide\r nav: 2.2\r ---\r \r ## Create  100ms account  - Create  account  [Dashboard  100ms](https://dashboard.100ms.live/)  ![Create Account](/docs/guides/token/create-account.png)  - After   created  account    Confirm  Email , check  promotions tab   Mail Box    find it.  - Login   Dashboard   will see  option  Create  first app. Click  it.  ![Create  first app](/docs/guides/token/starter-kit-initialize-first-step.png)  - Then   see  popup  multiple starter kits, hover  one   starter kits  click `Deploy`. We will choose \"Video Conferencing\"  now.  ![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)  - In  `Choose  deployment` step, select 100ms  enter  subdomain  wish   `Subdomain` field.  ![Domain details](/docs/guides/token/domain-details.png)  - After  App  set click  \"Go  Dashboard\"  [Go Here](https://dashboard.100ms.live/dashboard)  ![Dasboard](/docs/guides/token/go-to-dashboard.png)  ## Create  room  - Go   [Room  Dashboard](https://dashboard.100ms.live/rooms)  click  \"Create Room\" , While creating  room  can specify  name, roles  enable recording.  ![Create Room](/docs/guides/token/create-room.png)  - You will now see \"Room Details\" section     `room_id` created, copy  somewhere.  ![Room Id](/docs/guides/token/room-id.png)  ## Get  temporary token  100ms dashboard  Any client connecting calling 100ms' service needs  authenticate using  auth token. In production      servers generating  tokens (see  [here](/docs/javascript/v2/foundation/security-and-tokens)),    quick start  can use  dashboard  create  token  you. The token will expire  24 hours     hard-coded   production app.  - To get  temporary token click  \"Join room\" button.  ![Join Room](/docs/guides/token/join-room.png)  - In  popup  shows  click  icon   key shape next   role  want  join as.  ![Copy Token](/docs/guides/token/copy-token.png)  The token will  copied   clipboard. Use  along   `room_id`  proceed   quickstart guide.\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/guides/token"
    },
    {
        "title": "03to04.mdx",
        "link": "/ios/v2/migration-guides/03to04",
        "keywords": [],
        "headings": [
            "Error Type Changes",
            "Error Handling Example",
            "Error Property Changes",
            "isTerminal",
            "canRetry",
            "Removed properties",
            "Error Handling Example Using Properties",
            "Error Code Changes",
            "Error Constant Name Changes"
        ],
        "content": "--- title: 0.3.x  0.4.x Migration Guide nav: 7.1 ---  # Error Type Changes  The error type   public SDK interface   changed   `Error` (`NSError`  case  ObjC)   `HMSError`.  This   align  platform conventions. In swift  error can  type casted  either `HMSError`  `NSError`  getting additional details like error code.   ### Error Handling Example  ```swift func on(error: Error) {     guard let error = error as? HMSError else { return }         //Example using error constants     switch error.code {     case .websocketConnectionLost, .iceFailure, .endpointUnreachable:         retryConnection()     default: \t\tshowErrorAndExitMeeting(errorMessage: error.localizedDescription)         break     }         //Example using error codes     switch error.code.rawValue {     case 1003, 4005, 2003:         retryConnection()     default: \t\tshowErrorAndExitMeeting(errorMessage: error.localizedDescription)         break     } } ```  # Error Property Changes  ### isTerminal  The `HMSError` struct  swift will now   `isTerminal` property  denotes wether error  caused  current session  terminate   app will need  call `join`   reconnect. Same will  available via `is_terminal` (`HMSIsTerminalUserInfoKey` constant) key  `userInfo` dictionary  `NSError`  ### canRetry  The `HMSError` struct  swift will now   `canRetry` property  denotes wether app can call `join`     configuration   used before. The value  false  cases like token expiring  room getting locked. You can use  property  implementing infinite retry   app. Same will  available via `can_retry` (`HMSCanRetryUserInfoKey` constant) key  `userInfo` dictionary  `NSError`  ### Removed properties  Error properties: id, action, info, message, params   removed. `localizedDescription` property will contain   necessary info.   ### Error Handling Example Using Properties  This example shows  minimal error handling  can    app without worrying  error codes.  ```swift func on(error: Error) {     guard let error = error as? HMSError else { return }          error.isTerminal {          error.canRetry && isInfiniteRetryEnabledInApp  {             retryConnection()         } else {             showErrorAndExitMeeting(errorMessage: error.localizedDescription)         }     } else {         logError(message: error.localizedDescription)     } } ```  # Error Code Changes  Previously upon loosing connection  failing  reconnect  well   case initial connection    established SDK  return error code `2000` (`initServerError`). Starting  0.4.1 SDK will return error `1003` (`websocketConnectionLost`)   connection  previously   got lost   middle   session. If  SDK can  connect   first place  will return error code `2003` (`endpointUnreachable`). This change makes makes error codes consistent  platforms  # Error Constant Name Changes  | **Code**  **Old Name**  **New Name** | | :---  :---  :--- | | 2002  initHTTPErrorInvalidEndpointURL  invalidEndpointUrl | | 2003  initHTTPErrorEndpointUnreachable  endpointUnreachable | | 3000  tracksErrorGeneric  genericTrack | | 3001  tracksErrorCantAccessCaptureDevice  cantAccessCaptureDevice | | 3005  tracksErrorNothingToReturn  nothingToReturn | | 3007  tracksErrorCodecChangeNotPermitted  codecChangeNotPermitted | | 3008  tracksErrorAudioVideoSubsystemFailure  audiovideoSubsystemFailure | | 3011  tracksErrorMicCaptureFailed  micCaptureFailed | | 4001  webrtcErrorCreateOfferFailed  createOfferFailed | | 4002  webrtcErrorCreateAnswerFailed  createAnswerFailed | | 4003  webrtcErrorSetLocalDescriptionFailed  setLocalDescriptionFailed | | 4004  webrtcErrorSetRemoteDescriptionFailed  setRemoteDescriptionFailed | | 4005  webrtcErrorICEFailure  iceFailure | | 5001  joinErrorAlreadyJoined  alreadyJoined | | 6000  genericErrorNotConnected  notConnected | | 6002  genericErrorUnknown  unknown | | 6004  genericErrorJsonParsingFailed  jsonParsingFailed ",
        "platformName": "iOS",
        "objectID": "/ios/v2/migration-guides/03to04"
    },
    {
        "title": "custom-video-plugins.mdx",
        "link": "/ios/v2/plugins/custom-video-plugins",
        "keywords": [],
        "headings": [
            "Prerequisites",
            "Video Plugin Interface",
            "Adding the plugin",
            "Activating and deactivating the plugin",
            "Implementation Example - Grayscale Filter",
            "Handler synchronisation between process and your own methods and properties",
            "Plugin Guidelines"
        ],
        "content": "--- title: Custom Video Plugins (Beta) nav: 5.2 ---  Custom video plugins allow   hook  100ms' video lifecycle  add   video processing pipeline right   gets sent    participants   room. This allows  super cool things like building AR Filters, adding Virtual Background, Emojifying  streams  monitoring participant engagement. Checkout  [Virtual Background](./virtual-background) docs  see  example    plugin. Note   page   creating custom new plugins  using existing ones.  ## Prerequisites  * Basic Knowledge  100ms SDK, follow  quickstart guides.  ## Video Plugin Interface  By  'video plugin' here,  mean  custom class   can write   manipulate video frames. Your class  subclass HMSVideoPlugin class  override  'process' function  implement  plugin functionality.  ```swift class GrayscaleVideoPlugin: HMSVideoPlugin {     override func process(_ frame: CVPixelBuffer) -> CVPixelBuffer {     ...   }    } ```  The process function provides    input frame   can process. After processing,  return  output frame.  HMSSDK calls  process function whenever  new frame  generated   camera. The input frames  replaced   output frames provided   thus transforming  video stream.  The general approach  write  video plugin  modifies  frames   video  like below:  ```swift class GrayscaleVideoPlugin: HMSVideoPlugin {     override func process(_ frame: CVPixelBuffer) -> CVPixelBuffer {             // Process  'frame'  transform    grayscal frame       ...             let outputFrame: CVPixelBuffer = ...             // return  output frame       return outputFrame   }    } ```  In case   writing  plugin   modify  video frames   analyse  frames   purpose,  recommend    processing asynchronously  returning  input frame immediately like below:  ```swift class FaceAttendencePlugin: HMSVideoPlugin {     override func process(_ frame: CVPixelBuffer) -> CVPixelBuffer {        DispatchQueue.global().async {         // Recognise face  mark attendence         ...      }           return frame   }    } ```  ## Adding  plugin  Once  plugin implementation  ready,  can  added   local peer's video track   -  1. Create  HMSVideoPlugin array  ```swift      var videoPlugins = [HMSVideoPlugin]()    ```     2. Create  instance  HMSVirtualBackgroundPlugin  append   videoPlugins array, like below  ```swift      let grayscalePlugin = GrayscaleVideoPlugin()      grayscalePlugin.activate()      videoPlugins.append(grayscalePlugin)    ```     3. Next, create  instance  HMSVideoTrackSettings passing videoPlugins array  ```swift      let videoSettings = HMSVideoTrackSettings(... videoPlugins: self.videoPlugins)    ```     4. Use  videoSettings instance  setting  trackSettings  HMSSDK  ```swift      hmsSDK = HMSSDK.build { sdk in             sdk.trackSettings = HMSTrackSettings(videoSettings: videoSettings, audioSettings: ...)             ...         }    ```     That    need    add  custom video plugin   HMSSDK session!  ## Activating  deactivating  plugin  When  subclass  HMSVideoPlugin,  custom class also gains access  activate(), deactivate() functions. You call  functions   plugin instance  activate  deactivate  plugin. Note    add  plugin  deactivated  defualt.  ```swift grayscalePlugin.deactivate() grayscalePlugin.activate() ```   ## Implementation Example - Grayscale Filter  Below   sample implementation    interface  converts  local video  grayscale.  ```swift class GrayscaleVideoPlugin: HMSVideoPlugin {         static let defaultAttributes: [NSString: NSObject] = [         kCVPixelBufferPixelFormatTypeKey: NSNumber(value: kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange),         kCVPixelBufferIOSurfacePropertiesKey : [:]  NSDictionary     ]         private var attributes: [NSString: NSObject] {         var attributes: [NSString: NSObject] = Self.defaultAttributes         attributes[kCVPixelBufferWidthKey] = NSNumber(value: Int(extent.width))         attributes[kCVPixelBufferHeightKey] = NSNumber(value: Int(extent.height))         return attributes     }         private var _pixelBufferPool: CVPixelBufferPool?     private var pixelBufferPool: CVPixelBufferPool! {         get {              _pixelBufferPool == nil {                 var pixelBufferPool: CVPixelBufferPool?                 CVPixelBufferPoolCreate(nil, nil, attributes  CFDictionary?, &pixelBufferPool)                 _pixelBufferPool = pixelBufferPool             }             return _pixelBufferPool!         }         set {             _pixelBufferPool = newValue         }     }         private var extent = CGRect.zero {         didSet {             guard extent != oldValue else { return }             pixelBufferPool = nil         }     }         let ciContext = CIContext(options: nil)         override func process(_ frame: CVPixelBuffer) -> CVPixelBuffer {         let inputImage = CIImage(cvPixelBuffer: frame)                 guard let outputImage = inputImage.grayscale else { return frame }                 var outputBuffer: CVImageBuffer?                 extent = outputImage.extent                 CVPixelBufferPoolCreatePixelBuffer(nil, pixelBufferPool, &outputBuffer)           let outputBuffer = outputBuffer {             ciContext.render(outputImage, to: outputBuffer)         }         return outputBuffer ?? frame     } }  extension CIImage {     var grayscale: CIImage? {         let context = CIContext(options: nil)         guard let currentFilter = CIFilter(name: \"CIPhotoEffectNoir\") else { return nil }         currentFilter.setValue(self, forKey: kCIInputImageKey)          let output = currentFilter.outputImage,             let cgImage = context.createCGImage(output, from: output.extent) {             return CIImage(cgImage: cgImage)         }         return nil     } } ```  ## Handler synchronisation  process    methods  properties  When  subclass  HMSVideoPlugin,  custom class also gains access   property called 'frameProcessingQueue'. The frameProcessingQueue   serial dispatch queue    frames arrive   process function. You can use  queue  serialise access   shared resources   class's properties  functions.  ```swift let serialGrayscalePluginProcessingQueue = grayscalePlugin.frameProcessingQueue ```  👀 To see  example video plugin implementation using 100ms SDK, checkout  [Example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example).  📲 Download  100ms fully featured Sample iOS app here: https://testflight.apple.com/join/dhUSE7N8   ## Plugin Guidelines  * Feel free  implement  methods outside  interface, options passed  plugin's constructor etc.  required for the users   plugin  give  interaction points. For example,  Virtual background plugin exposes  property  change the background  required. ",
        "platformName": "iOS",
        "objectID": "/ios/v2/plugins/custom-video-plugins"
    },
    {
        "title": "local-camera-capture.mdx",
        "link": "/ios/v2/plugins/local-camera-capture",
        "keywords": [],
        "headings": [
            "Introduction",
            "Minimum Requirements",
            "How to capture current camera frame in high quality"
        ],
        "content": "--- title: Camera Frame Capture Plugin (Beta) nav: 5.3 ---  ## Introduction  You can use Camera Frame Capture Plugin  capture  current frame   local camera  hight quality. This can  useful   want  implement  remote KYC (know-your-customer) use-case  capture high quality photos  client's documents.  ## Minimum Requirements  -   SDK version 0.5.1  ## How  capture current camera frame  high quality  1. Create  HMSVideoPlugin array  ```swift      var videoPlugins = [HMSVideoPlugin]() ```  2. Create  instance  HMSFrameCapturePlugin  activate it. Then append   videoPlugins array, like below  ```swift      let frameCapturePlugin = HMSFrameCapturePlugin()      frameCapturePlugin.activate()      videoPlugins.append(frameCapturePlugin) ```  3. Next, assign videoPlugins array  videoPlugins property  videoSettingsBuilder:  ```swift let hmsSDK = HMSSDK.build { sdk in       sdk.trackSettings = HMSTrackSettings.build { videoSettingsBuilder, audioSettingsBuilder in           videoSettingsBuilder.videoPlugins = videoPlugins           ...      } } ```  That    setup  need  do. Now,  can call **capture** method   frameCapturePlugin instance  get  current camera frame   UIImage:  ```swift       let image = frameCapturePlugin.capture() {         // show/upload/process  uiimage      } ```  👀 To see  example iOS Local Camera Capture Plugin implementation using 100ms SDK, checkout [our example project](https://github.com/100mslive/100ms-ios-sdk/tree/main/Example). ",
        "platformName": "iOS",
        "objectID": "/ios/v2/plugins/local-camera-capture"
    },
    {
        "title": "virtual-background.mdx",
        "link": "/ios/v2/plugins/virtual-background",
        "keywords": [],
        "headings": [
            "Introduction",
            "Minimum Requirements",
            "How to enable virtual background in your app using HMSSDK",
            "How to enable and disable virtual background",
            "How to blur background instead of replacing it with an image",
            "Change Background",
            "Recommendations for supporting older devices"
        ],
        "content": "---\r title: Virtual Background (Beta)\r nav: 5.1\r ---\r \r ## Introduction\r \r Virtual Background plugin helps  customising one’s background  replacing  background   static image  blurring  background.\r This guide provides  overview  usage   Virtual Background plugin  100ms.\r \r <div style={{textAlign: 'center'}}>\r \r ![VirtualBackground](/docs/v2/ios-vb.gif)\r \r </div>\r \r ## Minimum Requirements\r \r -   Minimum iOS version required  support Virtual Background plugin  iOS 15\r -   Minimum 100ms SDK version required  `0.3.1`\r -   Virtual background plugin   beta stage  may  performance issues  iPhone X, 8, 7, 6   older devices. We recommend   use  feature   high performance device  smooth experience.\r \r ## How  enable virtual background   app using HMSSDK\r \r 1. Create  HMSVideoPlugin array\r \r ```swift\r      var videoPlugins = [HMSVideoPlugin]()\r ```\r \r 2. Create  instance  HMSVirtualBackgroundPlugin  append   videoPlugins array, like below\r \r ```swift\r      let virtualBackgroundPlugin = HMSVirtualBackgroundPlugin(backgroundImage: UIImage(named: \"VB1\"))\r      videoPlugins.append(virtualBackgroundPlugin)\r ```\r \r 3. Next, create  instance  HMSVideoTrackSettings passing videoPlugins array\r \r ```swift\r      let videoSettings = HMSVideoTrackSettings(... videoPlugins: self.videoPlugins)\r ```\r \r 4. Use  videoSettings instance  setting  trackSettings  HMSSDK\r \r ```swift\r      hmsSDK = HMSSDK.build { sdk in\r             sdk.trackSettings = HMSTrackSettings(videoSettings: videoSettings, audioSettings: ...)\r             ...\r         }\r ```\r \r That    need    enable virtual background!\r \r ## How  enable  disable virtual background\r \r Hold    reference   instance  HMSVirtualBackgroundPlugin  use activate  deactivate functions    enable/disable  virtual background.\r \r ```swift\r      var virtualBackgroundPlugin: HMSVideoPlugin?\r \r      func setupPlugins() {\r         virtualBackgroundPlugin = HMSVirtualBackgroundPlugin(backgroundImage: UIImage(named: \"VB1\"))\r         ...\r      }\r \r      func toggleVB() {\r          let isVBActivated = UserDefaults.standard.bool(forKey: \"virtualBackgroundPluginEnabled\")\r \r           isVBActivated {\r              self?.interactor.virtualBackgroundPlugin?.deactivate()\r              UserDefaults.standard.set(false, forKey: \"virtualBackgroundPluginEnabled\")\r          }\r          else {\r              _ = self?.interactor.virtualBackgroundPlugin?.activate()\r              UserDefaults.standard.set(true, forKey: \"virtualBackgroundPluginEnabled\")\r          }\r      }\r ```\r \r ## How  blur background instead  replacing    image\r \r If  pass nil   backgroudImage parameter  initilising HMSVirtualBackgroundPlugin,  will blur  background instead  replaicng    image. You can optionally pass blurRadius parameter  control  amount  blur   background. Default blurRadius used  10.\r \r ```swift\r      let virtualBackgroundPlugin = HMSVirtualBackgroundPlugin(backgroundImage: nil, blurRadius: 20)\r ```\r \r ## Change Background\r \r You can use backgroundImage property  HMSVirtualBackgroundPlugin  set  new background image.\r \r ```swift\r      let virtualBackgroundPlugin = HMSVirtualBackgroundPlugin(backgroundImage: UIImage(named: \"VB1\"))\r      virtualBackgroundPlugin.backgroundImage = UIImage(named: \"VB2\")\r ```\r \r ## Recommendations  supporting older devices\r \r Built-in Virtual background plugin uses Apple's segementation APIs   supported  iOS 15  onwards.\r In  testing,  built-in Virtual background plugin  uses Apple's segementation API performs well  iPhone 13, 12, 11,  XS. It may  perform well  iPhone X, 8, 7, 6  older devices.\r \r If   like  support iOS version lower  iOS 15  want  support older devices,  can write  custom virtual background video plugin. For example  can use Google's MLKit's segementer  replcing background. Below   example  writing  custom video plugin called 'GoogleSegementor'\r \r ```swift\r class CustomVirtualBackground: HMSVideoPlugin {\r \r     // MARK: Private\r     private static let DefaultFrameRate = 15\r \r     private lazy var rateLimiter: RateLimiter = {.init(limit: 1/Double(CustomVirtualBackground.DefaultFrameRate))}()\r \r     private var coreBackgroundImage: CIImage?\r     private var blurRadius: CGFloat?\r \r     private let hmsVideoPersonSegmentationHandler = HMSMLKitPersonSegmentationHandler()\r \r     // MARK: Public\r     public var backgroundImage: UIImage? {\r         didSet {\r             frameProcessingQueue.sync {\r                  let cgImage = backgroundImage?.cgImage {\r                     coreBackgroundImage = CIImage(cgImage: cgImage)\r                 }\r                 else {\r                     coreBackgroundImage = nil\r                 }\r             }\r         }\r     }\r \r     public init(backgroundImage: UIImage?, blurRadius: NSNumber? = nil) {\r         self.backgroundImage = backgroundImage\r         self.blurRadius = blurRadius != nil ? CGFloat(blurRadius!.doubleValue) : nil\r         super.init()\r         // This defer   make didSet get triggered  backgroundImage  init\r         defer {\r             self.backgroundImage = backgroundImage\r         }\r     }\r \r     public override func process(frame: CVPixelBuffer) -> CVPixelBuffer {\r \r         hmsVideoPersonSegmentationHandler.replaceBackground(in: frame,\r                                                             with: coreBackgroundImage,\r                                                             blurRadius: blurRadius ?? 10,\r                                                             shouldSkip: {\r             return !rateLimiter.shouldFeed()\r         })\r     }\r }\r \r // Helper classes  custom video plugin above\r // MLKit   GoogleMLKit/SegmentationSelfie\r import MLKit\r \r class HMSMLKitPersonSegmentationHandler {\r \r     private static let defaultAttributes: [NSString: NSObject] = [\r         kCVPixelBufferPixelFormatTypeKey: NSNumber(value: kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange),\r         kCVPixelBufferIOSurfacePropertiesKey : [:]  NSDictionary\r     ]\r \r     private var extent = CGRect.zero {\r         didSet {\r             guard extent != oldValue else { return }\r             pixelBufferPool = nil\r         }\r     }\r \r     private var attributes: [NSString: NSObject] {\r         var attributes: [NSString: NSObject] = Self.defaultAttributes\r         attributes[kCVPixelBufferWidthKey] = NSNumber(value: Int(extent.width))\r         attributes[kCVPixelBufferHeightKey] = NSNumber(value: Int(extent.height))\r         return attributes\r     }\r \r     private var _pixelBufferPool: CVPixelBufferPool?\r     private var pixelBufferPool: CVPixelBufferPool! {\r         get {\r              _pixelBufferPool == nil {\r                 var pixelBufferPool: CVPixelBufferPool?\r                 CVPixelBufferPoolCreate(nil, nil, attributes  CFDictionary?, &pixelBufferPool)\r                 _pixelBufferPool = pixelBufferPool\r             }\r             return _pixelBufferPool!\r         }\r         set {\r             _pixelBufferPool = newValue\r         }\r     }\r \r     private var ciContext = CIContext()\r     private var previousBuffer: CVImageBuffer?\r \r     // MARK: Public\r     func replaceBackground(in framePixelBuffer: CVPixelBuffer,  backgroundImage: CIImage?, blurRadius: CGFloat, shouldSkip: ()->Bool) -> CVImageBuffer {\r \r         guard !shouldSkip() else { return previousBuffer ?? framePixelBuffer }\r \r         var info = CMSampleTimingInfo()\r         info.presentationTimeStamp = CMTime.zero\r         info.duration = CMTime.invalid\r         info.decodeTimeStamp = CMTime.invalid\r \r         var formatDesc: CMFormatDescription? = nil\r         CMVideoFormatDescriptionCreateForImageBuffer(allocator: kCFAllocatorDefault, imageBuffer: framePixelBuffer, formatDescriptionOut: &formatDesc)\r \r         var sampleBuffer: CMSampleBuffer? = nil\r \r         CMSampleBufferCreateReadyWithImageBuffer(allocator: kCFAllocatorDefault,\r                                                  imageBuffer: framePixelBuffer,\r                                                  formatDescription: formatDesc!,\r                                                  sampleTiming: &info,\r                                                  sampleBufferOut: &sampleBuffer);\r \r         let image = VisionImage(buffer: sampleBuffer!)\r         image.orientation = imageOrientation(\r           deviceOrientation: UIDevice.current.orientation,\r           cameraPosition: .front)\r \r         var mask: SegmentationMask?\r          {\r             mask = try segmenter.results(in: image)\r         } catch let error {\r             print(\"Failed  perform segmentation  error: \\(error.localizedDescription).\")\r \r             return framePixelBuffer\r         }\r \r         // Get  pixel buffer  contains  mask image.\r         guard let maskPixelBuffer = mask?.buffer else { return framePixelBuffer }\r \r         // Blend  images  mask.\r         return blend(original: framePixelBuffer, mask: maskPixelBuffer, backgroundImage: backgroundImage, blurRadius: blurRadius) ?? framePixelBuffer\r     }\r \r     let segmenter: Segmenter = {\r         let options = SelfieSegmenterOptions()\r         options.segmenterMode = .stream\r         options.shouldEnableRawSizeMask = true\r \r         let segmenter = Segmenter.segmenter(options: options)\r \r         return segmenter\r     }()\r \r     func imageOrientation(\r       deviceOrientation: UIDeviceOrientation,\r       cameraPosition: AVCaptureDevice.Position\r     ) -> UIImage.Orientation {\r       switch deviceOrientation {\r       case .portrait:\r         return cameraPosition == .front ? .leftMirrored : .right\r       case .landscapeLeft:\r         return cameraPosition == .front ? .downMirrored : .up\r       case .portraitUpsideDown:\r         return cameraPosition == .front ? .rightMirrored : .left\r       case .landscapeRight:\r         return cameraPosition == .front ? .upMirrored : .down\r       case .faceDown, .faceUp, .unknown:\r         return .up\r       }\r     }\r \r \r     // MARK: Private\r \r     private func blend(original framePixelBuffer: CVPixelBuffer, mask maskPixelBuffer: CVPixelBuffer, backgroundImage: CIImage? = nil, blurRadius: CGFloat) -> CVImageBuffer? {\r \r         var imageBuffer: CVImageBuffer?\r \r         let originalImage = CIImage(cvPixelBuffer: framePixelBuffer)\r \r         var maskImage = CIImage(cvPixelBuffer: maskPixelBuffer)\r \r         // Scale  mask image  fit  bounds   video frame.\r         scaleToFit(image: &maskImage, originalImage: originalImage)\r \r         // Create  clear colored background image.\r         var background: CIImage\r \r          let backgroundImage = backgroundImage {\r             background = backgroundImage.oriented(.left)\r         }\r         else {\r             background = originalImage.clampedToExtent()\r                 .applyingFilter(\r                     \"CIBokehBlur\",\r                     parameters: [\r                         kCIInputRadiusKey: blurRadius,\r                     ]\r                 )\r                 .cropped(to: originalImage.extent)\r         }\r \r         // Scale  background image  fit  bounds   video frame.\r         scaleToFit(image: &background, originalImage: originalImage)\r \r         // Blend  original, background,  mask images.\r         let blendFilter = CIFilter.blendWithRedMask()\r         blendFilter.inputImage = originalImage\r         blendFilter.backgroundImage = background\r         blendFilter.maskImage = maskImage\r \r         // Redner image   new buffer.\r          let finalImage = blendFilter.outputImage {\r \r             imageBuffer = renderToBuffer(image: finalImage)\r         }\r \r         previousBuffer = imageBuffer\r \r         return imageBuffer\r     }\r \r     private func renderToBuffer(image: CIImage) -> CVImageBuffer? {\r \r         var imageBuffer: CVImageBuffer?\r \r         extent = image.extent\r \r         CVPixelBufferPoolCreatePixelBuffer(nil, pixelBufferPool, &imageBuffer)\r \r          let imageBuffer = imageBuffer {\r             ciContext.render(image, to: imageBuffer)\r         }\r \r         return imageBuffer\r     }\r \r     private func scaleToFit(image: inout CIImage, originalImage: CIImage) {\r         // Scale  image  fit  bounds   video frame.\r         let scaleX = originalImage.extent.width / image.extent.width\r         let scaleY = originalImage.extent.height / image.extent.height\r         image = image.transformed(by: .init(scaleX: scaleX, y: scaleY))\r     }\r }\r \r class RateLimiter {\r    private let limit: TimeInterval\r    private var lastExecutedAt: Date?\r \r    init(limit: TimeInterval) {\r        self.limit = limit\r    }\r \r    func shouldFeed() -> Bool {\r        let now = Date()\r        let timeInterval = now.timeIntervalSince(lastExecutedAt ?? .distantPast)\r \r         timeInterval > limit {\r            lastExecutedAt = now\r \r            return true\r        }\r \r        return false\r    }\r }\r ```\r ",
        "platformName": "iOS",
        "objectID": "/ios/v2/plugins/virtual-background"
    },
    {
        "title": "audio-level.mdx",
        "link": "/javascript/v2/advanced-features/audio-level",
        "keywords": [],
        "headings": [],
        "content": "--- title: Show Audio Level nav: 5.01 ---  ![Show Audio Level](/guides/audio-levels.png)  You can also show audio levels   UI corresponding  every peer   easier  see   speaking currently. You can retrieve   speaker object  will contain peerID, trackID   audioLevel using `selectSpeakers` selector. You can fetch audio level   particular peer using `selectPeerAudioByID` and   particular track using `selectTrackAudioByID` selector.  You can also fetch  current active speaker using  `selectDominantSpeaker` selector.  <Tabs id=\"audio-level\" items={['JavaScript', 'React']} />{' '}  <Tab id='audio-level-0'>  ```js import {     selectPeerAudioByID,     selectDominantSpeaker,     selectSpeakers }  '@100mslive/hms-video-store';  const peerId = '..'; function updateAudioLevel(audioLevel) {     console.log(`audio level  peer - ${peerID}  ${audioLevel}`); }  hmsStore.subscribe(updateAudioLevel, selectPeerAudioByID(peerId));  console.log('all speakers', hmsStore.getState(selectSpeakers));  function activeSpeaker(peer, prevPeer) {     console.log(`previous active speaker - ${prevPeer.name}  role - ${prevPeer.roleName}`);     console.log(`current active speaker - ${peer.name}  role - ${peer.roleName}`); }  hmsStore.subscribe(activeSpeaker, selectDominantSpeaker); ```  </Tab>  <Tab id='audio-level-1'>  ```jsx import {     useHMSStore,     useHMSActions,     selectLocalPeer,     selectPeerAudioByID,     selectSpeakers,     selectDominantSpeaker }  '@100mslive/react-sdk';  const AudioLevelInfo = () => {     /** get localpeer  store */     const localpeer = useHMSStore(selectLocalPeer);     /** get  given peer's audio level. */     const peerAudioLevel = useHMSStore(selectPeerAudioByID(localpeer.id));     console.log(`audio level  peer - ${localpeer.id}  ${peerAudioLevel}`);      /** get  speakers. Gives back  list   peers    muted. */     const allSpeakers = useHMSStore(selectSpeakers);     console.log('all speakers', allSpeakers);      /** gets  active speaker */     const dominantSpeaker = useHMSStore(selectDominantSpeaker);     console.log(         `current active speaker - ${dominantSpeaker.name}  role - ${dominantSpeaker.roleName}`     );     return (         <>             <h1>Active Speaker</h1>             <span>                 {dominantSpeaker.name}: {dominantSpeaker.id}             </span>         </>     ); }; ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/audio-level"
    },
    {
        "title": "connection-quality.mdx",
        "link": "/javascript/v2/advanced-features/connection-quality",
        "keywords": [],
        "headings": [
            "Getting peer connection quality",
            "Connection Quality Score in Preview",
            "Score Interpretation",
            "Showing in the UI"
        ],
        "content": "--- title: Connection Quality nav: 5.06 ---  ![Network Icons](/docs/v2/network-icons.png)  Video/Audio conferencing   nature  data intensive operation.  Our SDK attempts  stabilize connections especially  subscribe degradation  is turned    template   possible  really bad connections  users will still  problems.  It can  helpful  measure  user's connection speed  joining  room  order  set expectations   decide    join  video  etc. Letting  participants know   other's connection status  also  great value addition.  Once   joined  room,  can get  network quality score    peers including yourself. You can also get current user's connection quality score   preview. The score ranges  -1  5, 5   hightest(Good Network)  0   lowest(No Network). -1 indicates  undefined state   either  score  yet  determined     determined.  ## Getting peer connection quality  Below   interface  connection quality.  ```ts interface HMSConnectionQuality {     peerID: string;     downlinkQuality: number; } ```  <Tabs id=\"connection-quality\" items={['JavaScript', 'React']} />  <Tab id='connection-quality-0'>  ```js hmsStore.subscribe((connectionQuality) => {      (connectionQuality) {         const quality = connectionQuality.downlinkQuality;         // use  score  show  UI!     } }, selectConnectionQualityByPeerID(peerId)); ```  </Tab>  <Tab id='connection-quality-1'>  ```jsx function ConnectionQuality(peerId) {     const downlinkQuality = useHMSStore(selectConnectionQualityByPeerID(peerId))?.downlinkQuality;     // use  score  show  UI!     return <span>downlinkQuality</span>; } ```  </Tab>   ## Connection Quality Score  Preview  To receive  score  [preview](../features/preview)  well,  can  pass   `captureNetworkQualityInPreview` flag  true  preview config while calling preview. The interface  get  quality score stays   above which   post joining  room.  > ⚠️ The downlink speed  measured    user download  file (1mb    writing)   websocket connection  established   preview. > The download will  continued     fixed number  seconds (eg: 10 seconds)   speed   interval  calculated. The entire file may   downloaded   exceeds  timeout.  ```js actions.preview({..., captureNetworkQualityInPreview: true}) ```   ## Score Interpretation  The networkQuality score will   number  -1  5.  - -1 -> Undefined - yet   determined   enough data  determine - 0 -> Disconnected  error  measuring score(in preview) - 1 -> Very Bad Connection - 2 -> Bad Connection - 3 -> Moderate Connection - 4 -> Good Connection - 5 -> Excellent Connection   > 0 score  preview  also mean  failure  measuring  network due  firewall block   internet otherwise looks good.  ## Showing   UI  You can show    network icon  every peer tile  show   list  peers   good connection. Feel free  checkout   code   dashboard app's implementation [here](https://github.com/100mslive/100ms-web/tree/main/src/components/Connection) where  show  network bar   peer's tile  well   participant list   tooltip describing  connection state.   ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/connection-quality"
    },
    {
        "title": "custom-tracks.mdx",
        "link": "/javascript/v2/advanced-features/custom-tracks",
        "keywords": [],
        "headings": ["Accessing custom/auxiliary tracks"],
        "content": "--- title: Add custom tracks nav: 5.04 ---  You can also add custom video  audio tracks   sdk  will  published  others. Possible use cases -  -    synthetic track   use camera -   screenshare  custom-built annotations   electron app. -   audio track   source   microphone  To add  custom/auxiliary track,  need  get hold   MediaStreamTrack object  add  using  `addTrack` method  `hmsActions`.  ```js /**  * track: MediaStreamTrack - Track   added  * source?: 'regular'  'screen'  'plugin' - Source  track - default: 'regular'  */ await hmsActions.addTrack(track, source);  //  remove  track await hmsActions.removeTrack(trackId); ```  ## Accessing custom/auxiliary tracks  ```js //    hold   peer object, it'll  ids    auxiliary tracks console.log(peer.auxiliaryTracks);  //  get  track   track id  can  this track = hmsStore.getState(selectTrackByID(trackId));  //  auxiliary tracks hmsStore.getState(selectAuxiliaryTracksByPeerID(peer.id));  // audio auxiliary track hmsStore.getState(selectAuxiliaryAudioByPeerID(peer.id));  // track  source  screenshare hmsStore.getState(selectScreenShareByPeerID(peer.id)); hmsStore.getState(selectScreenShareAudioByPeerID(peer.id)); ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/custom-tracks"
    },
    {
        "title": "hls-stats.mdx",
        "link": "/javascript/v2/advanced-features/hls-stats",
        "keywords": [],
        "headings": ["Initialization", "Subscribing to Stats", "Exposed Stats"],
        "content": "--- title: HLS Stats nav: 5.08 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  `@100ms-live/hls-stats`   simple library  provides easy  use APIs  acquiring stats for  HLS Stream.  ## Initialization  Initializing   simple. Just initialize Hls.js  pass  reference  well  a video element  `HLSStats`and   already done.  <Tabs id=\"stats-init\" items={['Javascript', 'React']} />  <Tab id=\"stats-init-0\">  ```js import Hls  'hls.js';  /**  * Initialize Hls.js  attach  video element.  */ const hlsUrl = 'http://my-domain/stream.m3u8'; const hlsInstance = new Hls(); hlsInstance.loadSource(hlsUrl); hlsInstance.attachMedia(videoEl);  /**  * initialize HlsStats  */ const hlsStats = new HlsStats(hlsInstance, videoEl); ```  </Tab>  <Tab id=\"stats-init-1\">  ```jsx import Hls  \"hls.js\";  export function MyComponent() {     const hls = new Hls(this.getHLSConfig());     hls.loadSource(hlsUrl);     hls.attachMedia(videoRef.current);     hlsStats = new HlsStats(hls, videoEl);      return (        // something     ); } ```  </Tab>  ### Subscribing  Stats  `hlsStats`   `subscribe` function  takes two parameter.  `callbackFn`   `interval`  ms. The `interval` tells  frequent  want hls-stats  report back  you. Default  2000ms.  <Tabs id=\"stats-subscribe\" items={['Javascript', 'React']} />  <Tab id=\"stats-subscribe-0\">  ```js const unsubscribe = hlsStats.subscribe((state) => {     // ... }); ```  </Tab>  <Tab id=\"stats-subscribe-1\">  ```jsx import Hls  \"hls.js\";  export function MyComponent() {    ...    ...     useEffect(() => {     const unsubscribe = hlsStats.subscribe(state => {         setHlsStatsState(state);     });      return () => {       unsubscribe?.();     };   }, []);     ...    ... } ```  </Tab>  the `subscribe()` also returns  reference  `unsubscribe()` function   later  used  unsubscribe from  subscription  ## Exposed Stats `hls-stats` currently exposes  following stats  | Name                              Description                                              Unit             Usage                                                                                         | |----------------------------------|---------------------------------------------------------|-----------------|-----------------------------------------------------------------------------------------------| | bandwidthEstimate                 The current bandwidth,  seen   player             bits per second  Use   show  current network speed   user                                        | | bitrate                           server indicated bitrate  current layer  HLS stream  bits per second  Use  know  bitrate required  current layer                                            | | bufferedDuration                  buffered duration   current position              ms               This can  used  show  much data  buffered   current location (forward buffer) | | distanceFromLiveEdge              The distance   live edge                          ms               Used  know currently buffered duration ahead                                                | | droppedFrames                     The number  dropped frames till now                                     Used  calculate  total number  dropped frames                                               | videoSize.width videoSize.height  The width  height   video                        px               Used  know  resolution  played                                                      | | watchDuration                     Total duration watched                                   ms               used  know  overall watch duration (not  stream length)                               | ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/hls-stats"
    },
    {
        "title": "peer-metadata.mdx",
        "link": "/javascript/v2/advanced-features/peer-metadata",
        "keywords": [],
        "headings": [
            "Getting and Setting metadata",
            "Peer Metadata update Notification",
            "Updating Remote Peer Metadata",
            "Ideas"
        ],
        "content": "--- title: Peer Metadata nav: 5.03 ---  Looking  persistent state  can  set   peer  updated anytime,  everyone   room? Peer metadata  is. Metadata can  set initially   `HMSConfig` object  passed   join method  update post join by following  API below. You can imagine metadata   persistent object attached   peer    details about them.  We'll explain  API using  example  implementing raise hand. For this,  use   interface  metadata -  ```ts interface CustomMetadata {     isHandRaised: boolean; } ```  ## Getting  Setting metadata  Note  `peer.metadata`   string,  can  used  keep  stringified JSON. The string will  converted properly to  json object however   use  selector described below. Metadata update post join can  achieved  calling `hmsActions.changeMetadata(metadata)`,   example shows implementing  toggle raise hand function   local peer.  <Tabs id=\"meta\" items={['Javascript', 'React']} />  <Tab id='meta-0'>  ```js async function toggleRaiseHand() {     const localPeerId = hmsStore.getState(selectLocalPeerID);     const metadata = hmsStore.getState(selectPeerMetadata(localPeerId));     const newMetadata = { ...metadata, isHandRaised: !metadata.isHandRaised };     await hmsActions.changeMetadata(newMetadata); } ```  </Tab>  <Tab id='meta-1'>  ```jsx const RaiseHand = () => {     const localPeerId = useHMSStore(selectLocalPeerID);     const metaData = useHMSStore(selectPeerMetadata(localPeerId));     const hmsActions = useHMSActions();     const toggleRaiseHand = useCallback(async () => {         const newMetadata = { ...metaData, isHandRaised: !metaData.isHandRaised };         await hmsActions.changeMetadata(newMetadata);     }, [hmsActions, metaData]);     return (         <button onClick={toggleRaiseHand}>             {metaData.isHandRaised ? 'Hand Raised' : 'Hand  Raised'}         </button>     ); }; ```  </Tab>  ## Peer Metadata update Notification  Once  metadata  updated,   peers will receive  notification with type `METADATA_UPDATED`  [HMSPeer](../../../api-reference/javascript/v2/interfaces/HMSPeer) object  notification data.  <Tabs id=\"meta-notif\" items={['Javascript', 'React']} />  <Tab id='meta-notif-0'>  ```js hmsNotifications.onNotification((notification) => {     const peer = notification.data;     const { isHandRaised } = hmsStore.getState(selectPeerMetadata(peer.id));      (isHandRaised && !peer.isLocal) {         toast(`${peer.name} raised  hand.`);     } }, HMSNotificationsTypes.METADATA_UPDATED); ```  </Tab>  <Tab id='meta-notif-1'>  ```jsx const notification = useHMSNotifications(HMSNotificationsTypes.METADATA_UPDATED) const peer = notification?.data const isHandRaised = useHMSStore(selectPeerMetadata(peer?.id ?? \"\"))?.isHandRaised  useEffect(() => {      (isHandRaised && peer && !peer.isLocal) {         toast(`${peer.name} raised  hand.`);     } }, [isHandRaised, peer]) ```  </Tab>  ## Updating Remote Peer Metadata  Say   guest  raised hand, host might want  lower  hand   while. We don't   direct method available    currently   can  done using [custom events](../features/chat#custom-events). The host can send  message   peer who raised  hand,   peer can lower  hand  getting  message.  <Tabs id=\"meta-update\" items={['Javascript', 'React']} />  <Tab id='meta-update-0'>  ```js const LOWER_HAND = 'LOWER_HAND'; //  save messages   type  store hmsActions.ignoreMessageTypes([LOWER_HAND]);  // host can send  custom message   peer   raised hand await hmsActions.sendDirectMessage('', peerIdWithRaisedHand, LOWER_HAND);  //  peer  receiving  event can lower  hand hmsNotifications.onNotification((notification) => {     const msg = notification.data;      (msg && msg.type === LOWER_HAND) {         const localPeerId = hmsStore.getState(selectLocalPeerID);         const metadata = hmsStore.getState(selectPeerMetadata(localPeerId));         const newMetadata = { ...metadata, isHandRaised: false };         hmsActions.changeMetadata(newMetadata);     } }, HMSNotificationTypes.NEW_MESSAGE); ```  </Tab>  <Tab id='meta-update-1'>  ```jsx const LOWER_HAND = 'LOWER_HAND'; //  save messages   type  store hmsActions.ignoreMessageTypes([LOWER_HAND]);  // host can send  custom message   peer   raised hand await hmsActions.sendDirectMessage('', peerIdWithRaisedHand, LOWER_HAND);  //  peer  receiving  event can lower  hand const hmsActions = useHMSActions(); const notification = useHMSNotifications(HMSNotificationsTypes.NEW_MESSAGE); const localPeerId = useHMSStore(selectLocalPeerID); const metadata = useHMSStore(selectPeerMetadata(localPeerId));  useEffect(() => {      (!notification) {         return;     }      const message = notification.data;      (message?.type === LOWER_HAND) {         const newMetadata = { ...metadata, isHandRaised: false };         hmsActions.changeMetadata(newMetadata);     } }, [notification]) ```  </Tab>  ## Ideas  -   Implementing raise hand -   Multiplayer games like chess, scribble, quizzes etc. -   Store extra information   profile picture  every peer  can  updated mid call ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/peer-metadata"
    },
    {
        "title": "playlist.mdx",
        "link": "/javascript/v2/advanced-features/playlist",
        "keywords": [],
        "headings": [
            "API",
            "Actions on the Playlist",
            "Accessing Audio/Video Playlist information",
            "Playing Next item in the playlist",
            "Ideas",
            "Limitations"
        ],
        "content": "--- title: Playlist - Audio/Video nav: 5.05 ---  Say    bunch  hosted audio/video files  want  play  everyone   room. The playlist feature gives  first class support  this. Supported actions -  -   Initialise   list  video  audio playlist items  can  played -   Choose  currently playing one -   Play, Pause, Next, Previous -   Seeking forward/backward    specific position -   Letting sdk play  sequence  shuffling per  logic -   Volume control -   Playback rate control - slow   speed up  ## API  The SDK deals   array    call `HMSPlaylistItem`. This    interface looks   looks like. There are 4 mandatory fields described   schema below.  ```ts enum HMSPlaylistType {     audio = 'audio',     video = 'video' }  interface HMSPlaylistItem<T> {     /**      * uniquely identifies  playlist item      */     id: string;     name: string;     type: HMSPlaylistType;     /**      *  url  play from, can also   url created  local file eg: URL.createObjectURL(file)      */     url: string;     /**      *  additional info,  eg. composer, musician etc.      */     metadata?: T;     /**      * duration  seconds      */     duration?: number; } ```  Once   made   array   playlist items,  can  give   sdk  below,    ready  go.  ```ts const audioPlayList: HMSPlaylistItem[] = getMyAudioPlaylist(); const videoPlayList: HMSPlaylistItem[] = getMyVideoPlaylist(); hmsActions.audioPlaylist.setList(audioPlayList); hmsActions.videoPlaylist.setList(videoPlayList); ```  ## Actions   Playlist  Once  playlist  ready  given   sdk, play/pause etc. can  done  calling different functions on `hmsActions.audioPlaylist`  `hmsActions.videoPlaylist`. The  interface shows   functions  can  called. Do note   will work     already joined  room.  ```ts export interface IHMSPlaylistActions {     /**      * Plays  item whose id  passed.      * @param {string} id -  id  given  initialising  list      */     play(id: string): Promise<void>;     /**      * Pauses  current playing item      */     pause(): Promise<void>;     /**      * Plays  next item   queue(order decided  original array)      */     playNext(): Promise<void>;     /**      * Plays  previous item   queue(order decided  original array)      */     playPrevious(): Promise<void>;     /**      * seek forward  backward relative  current position      * @param {number} seekValue - number  seconds  move forward(pass negative values  move backwards)      */     seek(seekValue: number): void;     /**      * seek   specific position - seekValue will  absolute      * @param {number} seekValue - value  seconds   absolute position   playlist item duration      */     seekTo(seekValue: number): void;     /**      * set volume passing volume      * @param {number} volume - number  0-100      */     setVolume(volume: number): void;     /**      * pass list  playlist items  set playlist      * @param {HMSPlaylistItem[]} - list  playlist items      */     setList<T>(list: HMSPlaylistItem<T>[]): void;     /**      * Stop  current playback  unpublish  tracks.      */     stop(): Promise<void>;     /**      * set whether  autoplay next item  playlist   current one ends. You can disable this      *   want  implement  custom ordering  shuffling   side. By default sdk will play  next      * item   queue   current ends.      * @param {boolean} autoplay      */     setIsAutoplayOn(autoplay: boolean): void;     /**      * Control  playback speed - 1.0  normal, less  1.0 will play  slowly      *    1.0 will play  faster.      * @param playbackRate - value  0.25  2.0      */     setPlaybackRate(playbackRate: number): void;     /**      * Remove  single item   playlist. This will stop  track     current playing one  remove  item      * returns  promise  resolves  true   item  removed      */     removeItem(id: string): Promise<boolean>;     /**      * Clear  entire playlist. This will stop  playing track(if any)      */     clearList(): Promise<void>; } ```  ## Accessing Audio/Video Playlist information  Once audio/video playlist item  played,  track will  obtained  added  `peer.auxiliaryTracks`. We also expose a bunch  helpful selectors similar    screenshare tracks  getting  current state.  <Tabs id=\"playlist\" items={['JavaScript', 'React']} />{' '}  <Tab id='playlist-0'>  ```js:playlist.js import { hmsActions, hmsStore }  './hms';  // audioListItems, videoListItems   HMSPlaylistItem[] interface hmsActions.audioPlaylist.setList(audioListItems); hmsActions.videoPlaylist.setList(videoListItems);   // Accessing playlist list set above const audioList = hmsStore.getState(selectAudioPlaylist.list); const videoList = hmsStore.getState(selectVideoPlaylist.list);  // Accessing current selectedItem const selectedAudio = hmsStore.getState(selectAudioPlaylist.selectedItem); const selectedVideo = hmsStore.getState(selectVideoPlaylist.selectedItem);  // Accessing current selection - { id, hasNext, hasPrevious } const audioSelection = hmsStore.getState(selectAudioPlaylist.selection); const videoSelection = hmsStore.getState(selectVideoPlaylist.selection);  // Accessing current volume const audioVolume = hmsStore.getState(selectAudioPlaylist.volume); const videoVolume = hmsStore.getState(selectVideoPlaylist.volume);  // Accessing current progress percentage - value  0-100 const audioProgress = hmsStore.getState(selectAudioPlaylist.progress); const videoProgress = hmsStore.getState(selectVideoPlaylist.progress);  // Accessing current time  seconds, 0-duration const audioCurrentTime = hmsStore.getState(selectAudioPlaylist.currentTime); const videoCurrentTime = hmsStore.getState(selectVideoPlaylist.currentTime);  // Accessing current playback rate - value  0.25-2.0 const audioPlaybackRate = hmsStore.getState(selectAudioPlaylist.playbackRate); const videoPlaybackRate = hmsStore.getState(selectVideoPlaylist.playbackRate);  // Accessing Tracks  playlist peer = hmsStore.getState(selectPeerSharingAudioPlaylist); peer = hmsStore.getState(selectPeerSharingVideoPlaylist);  const videoTrack = hmsStore.getState(   selectVideoPlaylistVideoTrackByPeerID(peer.id), ); const videoPlaylistAudioTrack = hmsStore.getState(   selectVideoPlaylistAudioTrackByPeerID(peer.id), ); const audioPlaylistAudioTrack = hmsStore.getState(   selectAudioPlaylistTrackByPeerID(peer.id), );  ```  </Tab>  <Tab  id='playlist-1'>  ```jsx:playlist.jsx import { useHMSActions, useHMSStore }  '@100mslive/react-sdk';  function Playlist() {   const hmsActions = useHMSActions();   const audioList = useHMSStore(selectAudioPlaylist.list);   const videoList = useHMSStore(selectVideoPlaylist.list);   const audioVolume = useHMSStore(selectAudioPlaylist.volume);   const videoVolume = useHMSStore(selectVideoPlaylist.volume);   const audioProgress = useHMSStore(selectAudioPlaylist.progress);   const videoProgress = useHMSStore(selectVideoPlaylist.progress);   const videoTrack = useHMSStore(     selectVideoPlaylistVideoTrackByPeerID(peer.id),   );   const videoPlaylistAudioTrack = useHMSStore(     selectVideoPlaylistAudioTrackByPeerID(peer.id),   );   const audioPlaylistAudioTrack = useHMSStore(     selectAudioPlaylistTrackByPeerID(peer.id),   );   const peerSharingAudioPlaylist = useHMSStore(selectPeerSharingAudioPlaylist);    setList() {     // audioListItems, videoListItems   HMSPlaylistItem interface     hmsActions.audioPlaylist.setList(audioListItems);     hmsActions.videoPlaylist.setList(videoListItems);   }    return </>; } ```  </Tab>  ## Playing Next item   playlist  By default,   current item ends,  next item  played automatically.   wish  control   play next, you can   following.  ``` hmsActions.audioPlaylist.setIsAutoplayOn(false); hmsActions.videoPlaylist.setIsAutoplayOn(false); ```  You can  listen   notification  type `HMSNotificationTypes.PLAYLIST_TRACK_ENDED`  current track ends  play  next track. The notification also contains  playlist item   ended.  <Note type=\"success\">     If  also using SDKs    platform  note   playlist tracks will come with     source  \"audioplaylist\"/\"videoplaylist\". </Note>  ## Ideas  -   Play background music  everyone   room   playlist. -   Allow  teachers  play educations videos  students   pre selected list  without worrying      screenshare etc. -   Watch videos together  friends,   help   [Chat API](/javascript/v2/features/chat), controls like play/pause can also      shared   peers. -   Play videos  mobile web browsers   support screenshare.  ## Limitations  -   No custom encoders/decoders,  file formats supported  native audio  video tags will work. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/playlist"
    },
    {
        "title": "simulcast.mdx",
        "link": "/javascript/v2/advanced-features/simulcast",
        "keywords": [],
        "headings": [
            "Minimum requirements",
            "Simulcast Layer 100ms API's",
            "Auto Layer selection:"
        ],
        "content": "--- title: Simulcast nav: 5.09 ---  Simulcast enables [Adaptive Bitrate](../foundation/adaptive-bitrate) (ABR)  video conferencing scenarios. This means 100ms SDKs can upgrade  downgrade video quality  remote tracks based  user preferences  network conditions.  ## Minimum requirements  - SDK versions `@100mslive/hms-video-store@0.8.0`, `@100mslive/react-sdk@0.6.0`  later - Simulcast   enabled  dashboard template  ## Simulcast Layer 100ms API's  Available simulcast layers are: - `HMSSimulcastLayer.HIGH` - `HMSSimulcastLayer.MEDIUM` - `HMSSimulcastLayer.LOW`  > Note: The number  layers available will  dependent   video publish resolution   role   available simulcast resolutions,  template settings   dashboard.  **Action  update  layer:**  <Tabs id=\"simulcast\" items={['JavaScript', 'React']} />  <Tab id='simulcast-0'>  ```js import { HMSSimulcastLayer }  '@100mslive/hms-video-store'; /*  * layer can  one of:  *   HMSSimulcastLayer.HIGH  *   HMSSimulcastLayer.MEDIUM  *   HMSSimulcastLayer.LOW  *  * Setting preferred layer   guarantee   layer will  selected.  * The server tries  give   preferred layer  possible.  * Otherwise,  will pick  next closest layer. Some   reasons for  *  getting  preferred layer   publisher   publishing that  * layer   download bandwidth   good enough  handle  layer.  */ hmsActions.setPreferredLayer(<videoTrackID>, layer); ```  </Tab>  <Tab id='simulcast-1'>  ```jsx import { HMSSimulcastLayer, selectTrackByID, useHMSStore }  '@100mslive/react-sdk';  const SimulcastLayers = ({ trackId }) => {     const track = useHMSStore(selectTrackByID(trackId));     const handleLayerChange = (layer) => {         /*         * layer can  one of:         * HMSSimulcastLayer.HIGH         * HMSSimulcastLayer.MEDIUM         * HMSSimulcastLayer.LOW         * Setting preferred layer   guarantee   layer will  selected. The server tries  give   preferred layer  possible. Otheriwse,  will pick  next closest layer.         * Some   reasons   getting  preferred layer   publisher   publishing  layer   download bandwidth   good enough  handle  layer.         */         hmsActions.setPreferredLayer(<videoTrackID>, layer);     }      return (         <div>         {track.layerDefinitions.map(trackLayer => {             return (<div onClick={() => {                 handleLayerChange(trackLayer.layer);             }}>                 {trackLayer.layer}             </div>         )}         </div>     ) } ```  </Tab>  **Simulcast fields   track**  The [HMSVideoTrack](/api-reference/javascript/v2/interfaces/HMSVideoTrack)    fields related  simulcast.  - `layer` -   current layer   receiving   server - `layerDefinitions` -   available layers   role based   template. These will contain layer name  resolution(widthxheight). - `preferredLayer` -  will contain  layer   either manually set  auto selected based  resolution.  ## Auto Layer selection:  When using `useVideo` hook   [React SDK](https://www.npmjs.com/package/@100mslive/react-sdk)  relevant simulcast layer  automatically subscribed to, based   video element dimensions. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/simulcast"
    },
    {
        "title": "stats.mdx",
        "link": "/javascript/v2/advanced-features/stats",
        "keywords": [],
        "headings": [
            "Initialization",
            "Retrieving data from HMSStatsStore",
            "Global Level Stats for Local Peer",
            "Individual Track Stats"
        ],
        "content": "--- title: Stats For Nerds nav: 5.07 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  Sometimes  need  way  capture certain metrics related   call. This may  helpful   want  tailor  experience   users  debug issues. Typical metrics  interest  audio/video bitrate, round trip time, total consumed bandwidth  packet loss. <APILink type=\"class\" name=\"HMSReactiveStore#get-stats\">`getStats`</APILink>  got  back.  With <APILink type=\"class\" name=\"HMSReactiveStore#get-stats\">`getStats`</APILink>   get statistics   whole session  individual tracks    peers   room.  ![Stats On Tile](/docs/v2/stats-tile.png)  ## Initialization  <Tabs id=\"stats-init\" items={['Javascript', 'React']} />  <Tab id=\"stats-init-0\">  ```jsx import { HMSReactiveStore }  '@100mslive/hms-video-store';  const hms = new HMSReactiveStore();  export const hmsStats = hms.getStats(); ```  </Tab>  <Tab id=\"stats-init-1\">  ```jsx import { HMSRoomProvider }  '@100mslive/react-sdk';  export function App() {     return (         <HMSRoomProvider isHMSStatsOn={true}>             <MyApp />         </HMSRoomProvider>     ); } ```  </Tab>  This initializes  SDK  collect stats  WebRTC periodically  store    reactive Zustand store called <APILink>`HMSStatsStore`</APILink>. This  similar  <APILink>`HMSStore`</APILink>  terms  retrieving data   store.  If   [Redux Devtools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) installed(which  highly recommended),   open  HMSStatsStore  get  quick sense   quality   call  looking   bitrate, packets lost, jitter, etc...  ![Stats Redux Store](/docs/v2/stats-redux-store.png)  ## Retrieving data  HMSStatsStore  Retrieving data  similar       HMSStore.  You  `getState`  `subscribe` methods,   using  JS SDK  `useHMSStatsStore`,   using  react SDK   bunch  useful selectors  <APILink type=\"selector\">`selectHMSStats`</APILink>.  ### Global Level Stats  Local Peer  Use  `selectHMSStats.localPeerStats` selector  get  combined stats   room  local peer.  <Tabs id=\"local-peer-stats\" items={['Javascript', 'React']} />  <Tab id=\"local-peer-stats-0\">  ```jsx import { selectHMSStats }  '@100mslive/hms-video-store';  const renderLocalPeerStats = (localPeerStats) => {      (!localPeerStats) return;      console.log('Publish Bitrate', localPeerStats.publish?.bitrate);     console.log('Subscribe Bitrate', localPeerStats.subscribe?.bitrate);     console.log('Total Bytes Sent', localPeerStats.publish?.bytesSent);     console.log('Total Bytes Received', localPeerStats.subscribe?.bytesReceived);     console.log('Total Packets Lost', localPeerStats.subscribe?.packetsLost);     console.log('Total Jitter', localPeerStats.subscribe?.jitter); };  hmsStats.subscribe(renderLocalPeerStats, selectHMSStats.localPeerStats); ```  </Tab>  <Tab id=\"local-peer-stats-1\">  ```jsx import { selectHMSStats, useHMSStatsStore }  '@100mslive/react-sdk';  const renderLocalPeerStats = (localPeerStats) => {      (!localPeerStats) return;      console.log('Publish Bitrate', localPeerStats.publish?.bitrate);     console.log('Subscribe Bitrate', localPeerStats.subscribe?.bitrate);     console.log('Total Bytes Sent', localPeerStats.publish?.bytesSent);     console.log('Total Bytes Received', localPeerStats.subscribe?.bytesReceived);     console.log('Total Packets Lost', localPeerStats.subscribe?.packetsLost);     console.log('Total Jitter', localPeerStats.subscribe?.jitter); };  const LocalPeerStats = () => {     const localPeerStats = useHMSStatsStore(selectHMSStats.localPeerStats);     useEffect(() => {         renderLocalPeerStats(localPeerStats);     }, [localPeerStats]); }; ```  </Tab>  ### Individual Track Stats  Use  `selectHMSStats.trackStatsByID` selector  get  individual track's stats.  <Tabs id=\"track-stats\" items={['Javascript', 'React']} />  <Tab id=\"track-stats-0\">  ```jsx import { selectHMSStats }  '@100mslive/hms-video-store';  const renderTrackStats = (trackStats) => {      (!trackStats) return;     console.log('Stat Type', trackStats.type); // 'outbound-rtp'  local tracks, 'inbound-rtp'  remote tracks     console.log('Track Type', trackStats.kind); // 'video'  'audio'     console.log('Bitrate', trackStats.bitrate);     console.log('Packets Lost', trackStats.packetsLost);     console.log('Packets Lost Rate', trackStats.packetsLostRate);     console.log('Jitter', trackStats.jitter);      const isLocal = trackStats.type.includes('outbound');      (isLocal) {         console.log('Bytes Sent', trackStats.bytesSent);     } else {         console.log('Bytes Received', trackStats.bytesReceived);     }       (trackStats.kind === 'video') {         console.log('Frame Width', trackStats.frameWidth);         console.log('Frame Height', trackStats.frameHeight);         console.log('Framerate', trackStats.framesPerSecond);           (isLocal) {             console.log('Quality Limitation Reason', trackStats.qualityLimitationReason);         }     } };  hmsStats.subscribe(renderTrackStats, selectHMSStats.trackStatsByID('some-track-id')); ```  </Tab>  <Tab id=\"track-stats-1\">  ```jsx import { selectHMSStats, useHMSStatsStore }  '@100mslive/react-sdk';  const renderTrackStats = (trackStats) => {      (!trackStats) return;     console.log('Stat Type', trackStats.type); // 'outbound-rtp'  local tracks, 'inbound-rtp'  remote tracks     console.log('Track Type', trackStats.kind); // 'video'  'audio'     console.log('Bitrate', trackStats.bitrate);     console.log('Packets Lost', trackStats.packetsLost);     console.log('Packets Lost Rate', trackStats.packetsLostRate);     console.log('Jitter', trackStats.jitter);      const isLocal = trackStats.type.includes('outbound');      (isLocal) {         console.log('Bytes Sent', trackStats.bytesSent);     } else {         console.log('Bytes Received', trackStats.bytesReceived);     }       (trackStats.kind === 'video') {         console.log('Frame Width', trackStats.frameWidth);         console.log('Frame Height', trackStats.frameHeight);         console.log('Framerate', trackStats.framesPerSecond);           (isLocal) {             console.log('Quality Limitation Reason', trackStats.qualityLimitationReason);         }     } };  const TrackStats = (trackID) => {     const trackStats = useHMSStatsStore(selectHMSStats.trackStatsByID(trackID));     React.useEffect(() => {         renderTrackStats(trackStats);     }, [trackStats]); }; ```  </Tab>  You  also use `selectHMSStats.localAudioTrackStats`  `selectHMSStats.localVideoTrackStats`  get stats  local audio track  local video track respectively.  For list   stats-related selectors, look  <APILink type=\"selector\">`selectHMSStats`</APILink>. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/stats"
    },
    {
        "title": "volume-control.mdx",
        "link": "/javascript/v2/advanced-features/volume-control",
        "keywords": [],
        "headings": [
            "Change Volume API",
            "Gotchas",
            "Ideas",
            "Proximity based audio for the Metaverse",
            "Silence a role"
        ],
        "content": "--- title: Manage Audio Volume nav: 5.02 ---  ![Change Volume](/guides/volume.png)  ## Change Volume API  Audio volume refers   volume   audio track  perceived   receiving end. This   number  0  100. To modify audio volume -   <Tabs id=\"volume\" items={['Javascript', 'React']} />  <Tab id='volume-0'>  ```js const volume = 70;  // set  volume across whole room   track hmsActions.setVolume(volume);  // set  volume   specific track hmsActions.setVolume(volume, \"<track_id>\");  // get  currrent volume   specific track hmsStore.getState(selectAudioTrackVolume(\"<track_id>\")); ```  </Tab>  <Tab id='volume-1'>  ```jsx function PeerVolumeController({peerID}) {   const track = useHMSStore(selectAudioTrackByPeerID(peerID));   const currVolume = useHMSStore(selectAudioTrackVolume(track?.id));   const hmsActions = useHMSActions();    const setVolume = (volume) => {      (track) {       console.log(`setting volume  track=${track.id}, prev=${currVolume}, new=${volume}`);       hmsActions.setVolume(volume, track.id);     }   }    return <Slider onChange={setVolume}/>; } ```  </Tab>  ## Gotchas  Availability  peer  mean availability   audio track. The  code can silence  whole room  peer's audio track   yet present.  ```js const peer = hmsStore.getState(selectPeerById(\"peer-id\")); hmsActions.setVolume(0, peer?.audioTrack);  //  ```  If  want  set volume  specific track, always   check  calling setVolume -    ```js const peer = hmsStore.getState(selectPeerById(\"peer-id\")); if (peer?.audioTrack) {   hmsActions.setVolume(0, peer.audioTrack); } ```  ## Ideas  ### Proximity based audio   Metaverse  If  building  2D/3D world,  peers can navigate around   want  audio   based   close two people are,  can use  action  decide  appropriate audio level based  proximity.   ### Silence  role  To silence  particular role,  can get   peers   role  silence  tracks   loop -   ```js function setVolumeByRole(roleName, volume) {   const peers = hmsStore.getState(selectPeersByRole(roleName));    (const peer  peers) {      (peer.audioTrack) {       hmsActions.setVolume(volume, peer.audioTrack);     }   } }  // silence  role setVolumeByRole(\"role-name\", 0); // revert  silence setVolumeByRole(\"role-name\", 100); ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/advanced-features/volume-control"
    },
    {
        "title": "release-notes.mdx",
        "link": "/javascript/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "Latest Versions",
            "2022-12-19",
            "Added:",
            "Fixed:",
            "2022-11-25",
            "Added:",
            "Fixed:",
            "Breaking:",
            "2022-11-10",
            "Fixed:",
            "Added:",
            "Breaking",
            "2022-10-20",
            "Fixed:",
            "2022-09-30",
            "Fixed:",
            "2022-09-28",
            "Added:",
            "Fixed:",
            "2022-09-13",
            "Added:",
            "Fixed:",
            "Breaking:",
            "2022-08-01",
            "Added:",
            "Breaking:",
            "2022-07-11",
            "Added:",
            "Fixed:",
            "Breaking:",
            "2022-06-22",
            "Added:",
            "2022-06-14",
            "Added:",
            "Fixed:",
            "2022-06-08",
            "Fixed:",
            "2022-05-31",
            "Fixed:",
            "Breaking:",
            "2022-05-11",
            "2022-04-29",
            "2022-04-21",
            "2022-03-29",
            "2022-03-21",
            "Fixed:",
            "2022-03-17",
            "Added:",
            "Fixed:",
            "2022-02-24",
            "Added:",
            "Breaking(react-sdk):",
            "2022-02-04",
            "Added:",
            "Fixed:",
            "2022-01-14",
            "Added:",
            "Fixed:",
            "2022-01-07",
            "Added:",
            "Fixed:",
            "Breaking:",
            "2021-12-21",
            "Added:",
            "Fixed:",
            "2021-12-10",
            "Added:",
            "Fixed:",
            "2021-11-26",
            "Added:",
            "Breaking",
            "2021-11-12",
            "Fixed:",
            "2021-10-25",
            "2021-10-21",
            "Breaking:",
            "2021-10-08",
            "Fixed",
            "2021-10-01",
            "Breaking:",
            "Experiemental:",
            "2021-09-17",
            "Added",
            "2021-08-27",
            "Added",
            "Fixed",
            "2021-08-16",
            "Added",
            "Breaking Change",
            "0.0.128 - 2021-08-07",
            "0.0.127 - 2021-08-06",
            "0.0.124 - 2021-08-06",
            "0.0.123 - 2021-08-05",
            "Added",
            "Fixed",
            "2021-07-28",
            "Added",
            "Fixed",
            "Known Issues",
            "2021-07-17",
            "Added",
            "Fixed",
            "2021-07-14",
            "Versions",
            "Added",
            "Fixed",
            "2021-07-09",
            "Added",
            "Fixed",
            "2021-07-08",
            "Added",
            "Fixed",
            "2021-07-02",
            "Added",
            "Fixed",
            "2021-06-24",
            "Added",
            "2021-06-21",
            "Added",
            "2021-06-17",
            "Added",
            "2021-06-13",
            "Fixed",
            "2021-06-11",
            "Versions",
            "Added",
            "Fixed",
            "2021-06-10",
            "Added",
            "Fixed",
            "2021-06-09",
            "Added",
            "Fixed",
            "0.0.19 - 2021-06-02",
            "Added",
            "0.0.18 - 2021-06-02",
            "Fixed",
            "Alpha"
        ],
        "content": "--- title: Release Notes nav: 7.1 description: Release Notes  100ms JavaScript SDK ---  ## Latest Versions  | Package                                 Version                                                                                                                                | | --------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------- | | @100mslive/hms-video-store              [![npm version](https://badge.fury.io/js/%40100mslive%2Fhms-video-store.svg)](https://badge.fury.io/js/%40100mslive%2Fhms-video-store) | | @100mslive/react-sdk                    [![npm version](https://badge.fury.io/js/%40100mslive%2Freact-sdk.svg)](https://badge.fury.io/js/%40100mslive%2Freact-sdk)             | | @100mslive/hms-video-react(deprecated)  [![npm version](https://badge.fury.io/js/%40100mslive%2Fhms-video-react.svg)](https://badge.fury.io/js/%40100mslive%2Fhms-video-react) |  ## 2022-12-19  Released: `@100mslive/hms-video-store@0.8.1`, `@100mslive/react-sdk@0.6.1`  #### Added: - Bulk role change API  #### Fixed: - Analytics fixes - FPS   `HMSVBPlugin` - Device change  working sometimes   bluetooth devices - Audio track  received  remote end  role change due   data  sent  ## 2022-11-25  Released: `@100mslive/hms-video-store@0.8.0`, `@100mslive/react-sdk@0.6.0`  #### Added: - Simulcast support - New virtual background plugin  improved cpu usage compared   previous one. Refer [usage](https://github.com/100mslive/100ms-web/blob/main/src/plugins/VirtualBackground/VirtualBackground.jsx)  #### Fixed: - Black tile  video tile   screen    split second(Example scenario: pagination) - Join promise  getting resolved   rare case - leave.failure webhook getting triggered  closing tab  preview   #### Breaking: - `hmsActions.setVolume`   promise now - `HMSStatsStore` interface updated     selectors  removed   ## 2022-11-10  Released: `@100mslive/hms-video-store@0.7.1`, `@100mslive/react-sdk@0.5.1`  #### Fixed: - `@100mslive/react-sdk` failing  nextjs environment - Fix dropdown  `@100mslive/react-ui` making  UI unresponsive  closed - Screenshare  working  macOS Ventura - Improved device change analytics  #### Added: - Stats  nerds  HLS - @alpha release  #### Breaking - `customerDescription`  [`HMSPeer`](https://www.100ms.live/docs/api-reference/javascript/v2/interfaces/HMSPeer)  now removed. Use `metadata` field instead - Screenshare config  updated. Please refer [here](https://www.100ms.live/docs/api-reference/javascript/v2/interfaces/HMSScreenShareConfig)  ## 2022-10-20  Released: `@100mslive/hms-video-store@0.6.4`, `@100mslive/react-sdk@0.4.4`  #### Fixed: - [`hmsActions.setAudioOutputDevice`](https://www.100ms.live/docs/api-reference/javascript/v2/interfaces/HMSActions#set-audio-output-device)  now async,  returned promise will resolve   device change  applied    audio tracks   room - Terminal errors, join promise  getting resolved  certain join failures - WebRTC stats  working  rejoining  room - `new HMSReactiveStore()`  work  server side rendering - Handling null  track selectors - End room sending  peer.leave.success  peer.leave.failure events   peer  webhook   ## 2022-09-30  Released: `@100mslive/hms-video-store@0.6.2`, `@100mslive/react-sdk@0.4.2`  #### Fixed: - setSessionMetadata API type  ## 2022-09-28  Released: `@100mslive/hms-video-store@0.6.1`, `@100mslive/react-sdk@0.4.1`  #### Added: - Session Metadata API (alpha release) - Strict track types     - Added HMSVideoTrack, HMSScreenVideoTrack, HMSAudioTrack, HMSScreenAudioTrack - Added HMSReconnectionNotification  notification types   #### Fixed: - Type error  subscribing   notifications.  ## 2022-09-13  Released: `@100mslive/hms-video-store@0.6.0`, `@100mslive/react-sdk@0.4.0`  #### Added: - `join`  now async - An error will  returned  `validateVideoPluginSupport`  called  video track  available - [facingMode](https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/facingMode) property  local videoTrack.(Note: This will  useful  mobile browsers)  #### Fixed: - Cleanup  leave - Improved logging  browser recording  #### Breaking: - A `HMSNotificationTypes.PEER_LIST` will  sent  join even     peers already   room - Specific types  added  Notifications  ## 2022-08-01  Released: `@100mslive/hms-video-store@0.5.0`, `@100mslive/react-sdk@0.3.0`  #### Added: -   retry calls    websocket messages -   params  now optional  `startHLSStreaming`  #### Breaking: -   react-ui theme colors   updated -   react-ui, styling  components  updated  ## 2022-07-11  Released: `@100mslive/hms-video-store@0.4.0`, `@100mslive/react-sdk@0.2.0`  #### Added:  -   `leaveOnUnload` prop  `HMSRoomProvider`  make leave  page load optional. Defaults  `true`. -   Video/Audio Plugins can  added  preview now.  #### Fixed:  -   `Error  getting track stats`  Audio/Video plugin  added  preview  #### Breaking:  -   react-ui theme colors   updated  ## 2022-06-22  Released: `@100mslive/hms-video-store@0.3.4`, `@100mslive/react-sdk@0.1.4`  #### Added:  -   `clearList`  `removeItem` actions  playlist -   `getContextType`  video plugin interface -   joining without webrtc connection  hls stream viewer  ## 2022-06-14  Released: `@100mslive/hms-video-store@0.3.2`, `@100mslive/react-sdk@0.1.2`, `@100mslive/hms-video-react@0.4.2`  #### Added:  -   Codec  track stats  #### Fixed:  -   System denied permission error  camera  microphone -   Duplicate tile  server recording  role change  AV  audio  AV -   Retry  join  ## 2022-06-08  Released: `@100mslive/hms-video-store@0.3.1`, `@100mslive/react-sdk@0.1.1`, `@100mslive/hms-video-react@0.4.1`  #### Fixed:  -   Analytics events -   Reconnected notification   triggered   cases  ## 2022-05-31  Released: `@100mslive/hms-video-store@0.3.0`, `@100mslive/react-sdk@0.1.0`, `@100mslive/hms-video-react@0.4.0`  #### Fixed:  -   Video freezing   video track  played  multiple video elements  one    removed -   Incorrect device showing  device selection  initially joined  muted   unmuted.  #### Breaking:  -   All  requests will   sender  optional now.     Examples:     -   In chat message object, message.sender  optional     -    unmute request, request.requestedBy  optional  > NOTE:    planning  use api's  send chat messages, update metadata  change roles,  sdk version   minimun   version.  ## 2022-05-11  Released: `@100mslive/hms-video-store@0.2.100`, `@100mslive/react-sdk@0.0.17`, `@100mslive/hms-video-react@0.3.128`  -   Upgrade  React 18 -   Added support  server-side subscribe degradation -   Fix device list failing   populated  preview  device error -   Fix inconsistent peer list  preview -   Fix auxiliary regular tracks     video tiles -   Fix token errors - made terminal  ## 2022-04-29  Released: `@100mslive/hms-video-store@0.2.98`, `@100mslive/react-sdk@0.0.15`, `@100mslive/hms-video-react@0.3.126`  -   Added support  resolutions  RTMP. -   Added methods  set  app data  100ms store. Refer docs [here](../features/store-appdata) -   Exposed Style-able Pagination component  react-ui  ## 2022-04-21  Released: `@100mslive/hms-video-store@0.2.96`, `@100mslive/react-sdk@0.0.13`, `@100mslive/hms-video-react@0.3.125`  -   Add reconnections due  internet issues  preview phase -   Add treeshaking  react-sdk  react-ui -   Fix race condition  leave  called immediately  join  join  complete. -   Fix race condition  preview complete   notified  join  ready   called. -   Support  server side degradation -   Fix bug  useVideo  leading  proper detach  unmounting  ## 2022-03-29  Released: `@100mslive/hms-video-store@0.2.94`, `@100mslive/react-sdk@0.0.11`, `@100mslive/hms-video-react@0.3.124`  -   Get Connection quality score  show network bar  UI, docs [here](../advanced-features/connection-quality) -   Measure internet quality score  local peer  preview -   Errors occurred  screenshare(permission  given etc.) will  sent via notification  well now in     addition   thrown   method call -   `hmsActions.refreshDevices()`  refresh  device list  UI side. This can  done  example   UI is     taking control  asking user permission. -   server timestamp  local peer's messages -   changed interface  check plugin's support -   Significant improvements  refactoring   [public sample app](https://github.com/100mslive/100ms-web)  ## 2022-03-21  Released: `@100mslive/hms-video-store@0.2.93`, `@100mslive/react-sdk@0.0.10`, `@100mslive/hms-video-react@0.3.123`  #### Fixed:  -   Redundant events sent  analytics  ## 2022-03-17  Released: `@100mslive/hms-video-store@0.2.91`, `@100mslive/react-sdk@0.0.8`, `@100mslive/hms-video-react@0.3.121`  #### Added:  -   `useCustomEvent` hook  react-sdk -   Subscribing  specific notification types -   HLS recording status  joining room -   Additional fields  disconnection events -   Video Only mode  screenshare -   `joinedAt`  HMSPeer  #### Fixed:  -   Fix turning  recording  hls  ## 2022-02-24  Released: `@100mslive/hms-video-store@0.2.90`, `@100mslive/react-sdk@0.0.7`, `@100mslive/hms-video-react@0.3.119`  #### Added:  -   PeerList  preview -   HLS recording status will  available  #### Breaking(react-sdk):  -   input/output interfaces  `useVideo`   changed. check [react quickstart](../guides/react-quickstart)  reference.  ## 2022-02-04  Released: `@100mslive/hms-video-store@0.2.89`, `@100mslive/react-sdk@0.0.6`, `@100mslive/hms-video-react@0.3.116`  #### Added:  -   startedAt fields  RTMP  recording -   A exception will  thrown  preview/join  called     WebRTC support now(for example disable via  extension) -   APIs  get WebRTC Stats   call -   A new `@100mslive/react-sdk` beta package  primitive hooks  build React UI components -   A new disconnecting room state  happens   moment leave  clicked till  successful  #### Fixed:  -   Fix  wrong video mute state   corner case  high frequency updates -   Fix  vb-background video overlaying -   VB  enabling  firefox  turned   muted state -   Fixes related  device settings remembering  muted state -   Distorted audio   noise suppression  virtual background  on  ## 2022-01-14  Released: `@100mslive/hms-video@0.1.41`, `@100mslive/hms-video-store@0.2.87`, `@100mslive/hms-video-react@0.3.115`  #### Added:  -   Terminal error  insecure contexts(http://)  #### Fixed:  -   Type errors   selectors -   iOS video getting stuck  custom plugins  enabled. -   Preview audio level failing.  ## 2022-01-07  Released: `@100mslive/hms-video@0.1.40`, `@100mslive/hms-video-store@0.2.86`, `@100mslive/hms-video-react@0.3.114`  #### Added:  -   server errors  marked  terminal, SDK will automatically leave  give  terminal error  #### Fixed:  -   process   defined error  using  CRA5, webpack5   react-scripts@5 -   update recording/streaming status    actually started  #### Breaking:  -   requestedBy  now optional  HMSRoleChangeRequest, HMSChangeTrackStateRequest, HMSChangeMultiTrackStateRequest  ## 2021-12-21  Released: `@100mslive/hms-video@0.1.39`, `@100mslive/hms-video-store@0.2.85`, `@100mslive/hms-video-react@0.3.113`  #### Added:  -   [HLS streaming](../features/hls)  streaming  room   large number  viewers -   Support  Multiple [video plugins](../plugins/custom-video-plugins) -   `startedAt` field  room  know since   call  running -   An additional boolean `showTileForAllPeers`  VideoList component  show peers   tiles.  #### Fixed:  -   Type  custom events  getting passed  direct messages -   Camera selection showing wrong device   cases  ## 2021-12-10  Released: `@100mslive/hms-video@0.1.37`, `@100mslive/hms-video-store@0.2.83`, `@100mslive/hms-video-react@0.3.112`  #### Added:  -   Support  Multiple Audio Plugins(alpha) -   Notification  user updates peer info(name  metadata)  #### Fixed:  -   Throw proper error  error code  description  firefox  network  blocked/disconnected. -   Resolve preview promise correctly.     (You can directly await  preview promise  perform  necessary actions  that.) -   Device change  audio plugins  > Add `@100mslive/hms-video-react`  `@100mslive/hms-video-store`   sole dependency  using 100ms. They include  core sdk.  ## 2021-11-26  Released: `@100mslive/hms-video@0.1.36`, `@100mslive/hms-video-store@0.2.82`, `@100mslive/hms-video-react@0.3.111`  #### Added:  -   [Change Name](../features/peer-name) post Joining  room -   [Change Metadata](../advanced-features/peer-metadata) post Joining  room -   Notifications  track [degraded  restored](../features/sub-degradation)  #### Breaking  -   `peer.customerDescription`  now renamed  `peer.metadata`  ## 2021-11-12  Released: `@100mslive/hms-video@0.1.32`, `@100mslive/hms-video-store@0.2.79`, `@100mslive/hms-video-react@0.3.105`  Added:  -   Support  play next item  audio/video playlist  current track ended -   Support  setting playbackrate  audio/video playlist -   `selectPeerSharingAudioPlaylist` selector  get peer   sharing audioplaylist -   `selectPeersByRole(role: string)` selector  get peers  role  #### Fixed:  -   Not able  change respective devices  audio/video  muted -   Devicelist empty  permissions  denied  joining  enabled later  unmuting. -   Retry getusermedia   fails  overconstrainedError. -   Type errors  selectors -   Role changes  persisent   role change event occurs   peer  reconnecting  ## 2021-10-25  Released: `@100mslive/hms-video@0.1.18`, `@100mslive/hms-video-react@0.3.97`  -   Fix  issue  VideoTile react component leading  blank tile -   Fix unsuccesful tracks publish  case  user toggling video  preview  ## 2021-10-21  Released: `@100mslive/hms-video@0.1.16`, `@100mslive/hms-video-store@0.2.71`, `@100mslive/hms-video-react@0.3.96`  -   Support resolution changes  screenshare  role change -   Fix extra track getting added  joined  Audio/Video muted -   Fix `setVolume(0, trackId)`  working  IOS    called  `onTrackUpdate`. -   Screenshare error codes - 3001  user rejection, 3002  OS level block. -   Fix  bug  mute    behaves  opposite way   request  Android/iOS. -   Fix type error  `setRemoteTracksEnabled` -   Add peerId   tracks -   Optimisations  tracksMap selector -   Add `HMSNotificationTypes.PEER_LIST` notification  gives peers already  room  joined -   Optimise video tile, participant list rerenders -   Add feedback component  #### Breaking:  -   ParticipantsInView component removed. Use UiSettings component instead  ## 2021-10-08  Released: `@100mslive/hms-video@0.1.1`, `@100mslive/hms-video-store@0.2.62`, `@100mslive/hms-video-react@0.3.88`  -   Single permission  audio  video -   Bulk Remote mute per type, source  roles. Refer  [remote muting](/javascript/v2/features/remote-mute) section   docs   information. -   Locally muting remote track  iOS Devices -   Performance optimizations  #### Fixed  -   Role change takes video resolution  account  well now  ## 2021-10-01  Released: `@100mslive/hms-video@0.0.204`, `@100mslive/hms-video-store@0.2.57`, `@100mslive/hms-video-react@0.3.81`  -   Support  starting/stopping RTMP/recording -   Add bitrate capping  playlist tracks     -   AudioTrack - 64kbps     -   VideoTrack - 1mbps -   Fix addSink issue  videoTrack.     Sometimes, addSink  sending correct data  backend,  leads  black tile  #### Breaking:  -   onPeerUpdate  called  HMSPeer[]  initial peer list instead  calling onPeerUdpate   peer  #### Experiemental:  -   Add/remove sink  audio element  feature flag. -   Join  publish  feature flag  ## 2021-09-17  Released: `@100mslive/hms-video@0.0.185`, `@100mslive/hms-video-store@0.2.43`, `@100mslive/hms-video-react@0.3.64`  #### Added  -   Support  Audio/Video Playlist  remote urls -   Support  AudioOnly screenshare  ## 2021-08-27  Released: `@100mslive/hms-video@0.0.173`, `@100mslive/hms-video-store@0.2.34`, `@100mslive/hms-video-react@0.3.54`  #### Added  -   Memorization  manual device selection. [Refer Usage](../features/device-change) -   Self role change. [Refer Usage](../features/change-role)  #### Fixed  -   Autoplay error  ios safari  ## 2021-08-16  Released: `@100mslive/hms-video@0.0.148`, `@100mslive/hms-video-store@0.2.22`, `@100mslive/hms-video-react@0.3.32`.  #### Added  -   Mute/unmute remote peers. [Refer Usage](/api-reference/javascript/v2/interfaces/HMSActions#set-remote-track-enabled) -   Remove peer  room. [Refer Usage](/api-reference/javascript/v2/interfaces/HMSActions#remove-peer) -   End room. [Refer Usage](/api-reference/javascript/v2/interfaces/HMSActions#remove-peer) -   Private Messages  peers/roles.     -   [Direct Message  Peer](/api-reference/javascript/v2/interfaces/HMSActions#send-direct-message)     -   [Group Message  Role](/api-reference/javascript/v2/interfaces/HMSActions#send-group-message)     -   [Broadcast Message  everyone   room](/api-reference/javascript/v2/interfaces/HMSActions#send-broadcast-message)  #### Breaking Change  -   **sendMessage  now deprecated**, please use sendBroadcastMessage, sendGroupMessage  sendDirectMessage  messaging. [Refer Usage](/api-reference/javascript/v2/interfaces/HMSActions#send-broadcast-message)  ## 0.0.128 - 2021-08-07  -   Fix tracks  getting removed properly  Firefox   role changes  ## 0.0.127 - 2021-08-06  -   Fix black tile issue  ## 0.0.124 - 2021-08-06  -   Export `HMSLogLevel`  set  HMSdk's log level.  ## 0.0.123 - 2021-08-05  #### Added  -   Autoplay handling added.     -    autoplay error,  onError callback  called     -   unblockAutoplay method  provided  resolve  autoplay error     -   [Refer Usage](/javascript/v2/features/error-handling#handling-autoplay-error) -   Audio/video state  preserved  setSettings  called. -   Device change handling improvements     -   Output device selection logic improved     -   Handled headphones   microphone     -   Stereo headphones  handled correctly  input/output -   Handle virtual background  role change -   Cleanup video/audio elements  limit chrome 92 bug  mediaplayers  #### Fixed  -   Fix Settings component  show correct selected devices -   Fix video elements  detached    view  ## 2021-07-28  #### Added  -   Changing roles mid-call. [Refer Usage](/javascript/v2/features/change-role) -   BREAKING CHANGE: The interface  `HMSPeer`   modified  users using  JavaScript SDK without  [Reactive Store](#).  ```jsx // Before peer.role; // returns  string  // After peer.role; // returns HMSRole  interface HMSRole {     name: string;     publishParams: PublishParams;     subscribeParams: {         subscribeToRoles: string[],         maxSubsBitRate: number     };     permissions: {         endRoom: boolean,         removeOthers: boolean,         stopPresentation: boolean,         muteAll: boolean,         askToUnmute: boolean,         muteSelective: boolean,         changeRole: boolean     };     priority: number; }  export interface PublishParams {     audio: {         bitRate: number,         codec: string     };     video: {         bitRate: number,         codec: string,         frameRate: number,         width: number,         height: number     };     screen: {         bitRate: number,         codec: string,         frameRate: number,         width: number,         height: number     };     allowed: string[]; } ```  -   BREAKING CHANGE: For users   [Reactive Store](#)  [React SDK](#),  `HMSPeer` interface   modified. Use `peer.roleName` instead  `peer.role`  obtain  name   peer's role.  #### Fixed  -   Improved automatic detection  input/output devices. -   Audio level update  Firefox due  wrong track ID.  #### Known Issues  -   Safari  Mac gives echo   wired headphones -   With  bluetooth headphones(eg: OnePlus Bullets)  stereo output option,  default audioOutput  work  windows.     (Quick Fix: Change device  another option   device)  ## 2021-07-17  #### Added  -   Added custom audio output management. [Refer Usage](/javascript/v2/advanced-features/volume-control) -   Added audio output device  volume control using `hmsActions.setAudioOutputDevice(\"a-valid-MediaDeviceInfo-object-id\")`  `hmsActions.setVolume(30)`. [Refer Usage](#) -   Audio Level  preview   fetched  `selectPeerAudioByID(localPeer.id)`.  #### Fixed  -   Audio level update callback  preview. [Refer Usage](/javascript/v2/advanced-features/audio-level) -   **Experimental** Automatic device change  plug/unplug. Use `track.setSettings`  override input devices. [Refer Usage](/javascript/v2/features/device-change). Use audio output manager(`hms.getAudioOutput().setDevice()`)  override output devices. [Refer Usage](/javascript/v2/features/device-change)  ## 2021-07-14  #### Versions  | Package                     Version | | --------------------------  ------- | | @100mslive/hms-video        0.0.79  | | @100mslive/hms-video-react  0.2.57  |  #### Added  -   Adjust remote peer volume locally -   Add HMSPeer, HMSTrack objects  HMSSpeaker  use  `onAudioLevelUpdate` callback.  ```ts interface HMSSpeaker {     peer: HMSPeer;     track: HMSTrack;     audioLevel: number; } ```  -   Add HMSPolicy  HMSPeer.  #### Fixed  -   Analytics  ## 2021-07-09  #### Added  -   New preview API. -   Screenshare  Audio  #### Fixed  -   Analytics  ## 2021-07-08  #### Added  -   Preview method  enable showing preview UI. [Refer Usage](/javascript/v2/features/preview) -   Audio  screen-share  #### Fixed  -   Analytics  ## 2021-07-02  #### Added  -   Enable OpusDtx -   Replace HMSPeer  HMSLocalPeer  HMSRemotePeer -   Made @100mslive/hms-video  peer dependency. Install `@100mslive/hms-video` alongside `@100mslive/hms-video-react`  use 100ms web SDK   app.  For yarn,  ``` yarn add @100mslive/hms-video @100mslive/hms-video-react ```  For npm,  ``` npm  @100mslive/hms-video @100mslive/hms-video-react ```  -   Added transitionType property  hmsToast.  #### Fixed  -   Black tiles  Safari - Correctly queue messages  data channel  open -   Retry Join Init API fetch failure  throw terminal error  retry failure -   Silent Audio -   Import problem  Angular - Replace Bowser  ua-parser-js -   UI fixes  components.  ## 2021-06-24  #### Added  -   Connection Reestablishment Mechanism. -   On network switch, disconnection, Websocket signal, Publish  Subscribe ICE connections will  retried  reconnection -   onReconnecting - called  reconnection starts -   onReconnected - called  reconnection  succeeded -   onError - called  reconnection  failed     -   [Refer usage](/javascript/v2/features/notifications#notification-types) -   Internal Bug fixes  ## 2021-06-21  #### Added  -   addTrack  removeTrack  add/remove auxiliary tracks  local peer. [See documentation](/javascript/v2/advanced-features/custom-tracks).  ## 2021-06-17  #### Added  -   Notifications [See Documentation](/javascript/v2/features/notifications)  ## 2021-06-13  #### Fixed  -   Join  camera/microphone device failures. -   Join  camera/microphone failures. -   Preview shows correct error message. -   Start preview  either  camera/microphone  available. -   Stop preview  page goes  background. -   UI Fixes  modal, chat.  ## 2021-06-11  #### Versions  | Package                     Version | | --------------------------  ------- | | @100mslive/hms-video        0.0.26  | | @100mslive/hms-video-react  0.2.14  |  #### Added  -   HMSPeer object will now  `customerUserId` property  stores  `userId`  [Client Token](/javascript/v2/foundation/security-and-tokens).  #### Fixed  -   Removed unsupported deviceId constraint  Safari. -   Use EventEmitter instead  EventTarget  support older versions   browsers. -   `selectDominantSpeaker` replaces `selectDominantSpeakerName`. `selectDominantSpeaker` will return  `HMSPeer` object  contains customerUserId, name, role. -   More responsive UI  smaller screens.  ## 2021-06-10  #### Added  -   Handle device change  mid-call.  #### Fixed  -   Video tile going black  double/multiple clicked  unmute. -   Block  preview  camera/mic failure.  ## 2021-06-09  #### Added  -   Support  Firefox\\(&gt;=60\\). -   Shim  polyfills  cross browser compatibility. -   Exported `isSupported` method  check  browser  device  supported. `import { isSupported }  \"@100mslive/hms-video\";`  #### Fixed  -   Show dismissible warning  unsupported browsers  preview. -   Export MessageModal component.  ## 0.0.19 - 2021-06-02  #### Added  -   Error Codes - every error thrown   SDK now will   type HMSException,  wrapper   native Error.  ```typescript interface HMSException {     code: number; // A code number denoting  type  error     name: string; // Name   error     action: string; // What action caused  error     message: string; // Message related   error     description: string; // Additional information  steps  recover   error } ```  ## 0.0.18 - 2021-06-02  #### Fixed  -   Screenshare permitted   user's role  allowed  share screen. -   Improved screenshare quality  removing maxBitrate limit.  ## Alpha  Our alpha release  here.  Thanks   patience :\\).  This release might still  bugs,  interfaces can change \\(we will keep    minimum\\)  This release has  -   Simplified SDK interfaces  can power  fully-featured video conferencing application     -   `join`     -   `leave`     -   `getPeers, getLocalPeer`  tracks/peers/other data -   Features  covered   release     -   Handling network disconnections \\(disconnect  wi-fi  4g ends  call\\)     -   Handling subscription network degradations     -   Handling second order publish network degradations     -   Detailed analytics     -   Recording -   Our sample app  currently  React edtech app  demonstrate  roles work,  also   UI-components work. Documentation   roles will  released soon -   Browser coverage  limited  latest versions  Chrome  desktop. We will improve    next  releases -   Please contact @akash goswami   Slack channel     questions ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/changelog/release-notes"
    },
    {
        "title": "debugging.mdx",
        "link": "/javascript/v2/debugging/debugging",
        "keywords": [],
        "headings": [
            "Console Logs",
            "Fully Typed API",
            "Redux Devtools Integration",
            "Feature Rich Sample App",
            "Error Codes",
            "Reaching Out",
            "Steps to reproduce",
            "Relevant code snippet",
            "Store Dump"
        ],
        "content": "--- title: Debugging nav: 4.01 ---  [![Debugging](https://imgs.xkcd.com/comics/debugging.png)](https://xkcd.com/1722/)  No code ever runs   first go. When things go wrong, debugging becomes  important aspect   developer first SDK. We  designed  APIs  error messages  developer experience  ease  debugging  mind. We hope that you'll   delightful experience walking   features  integrating  sdk   app.  ## Console Logs  In case   issues,  print error  warning logs  console  help  faster debugging.  ![types](/guides/role-error.png)  > The [log level](../features/log-level) can  configured  control sdk logging.  ## Fully Typed API  Since  Web SDK  written  TypeScript,  will get  amazing Intellisense / Autocompletion   box. This means  even   use JavaScript, editors will  able  give  significantly improved experience.  ![types](/guides/chat-types.png)  ## Redux Devtools Integration  We take  debugging experience one step   connecting  store to [redux devtools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) extension  default. This gives  transparency and visibility   whole room state  building  UI.  ![Redux Devtools](/guides/redux-devtools.png)  We highly recommend installing  [devtools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) extension  visualize  state along    activities taking place   single view. This makes  easier to understand     UI  change. You can use  time travel feature   redux devtools to recreate state changes  debugging specific issues  well.  ## Feature Rich Sample App  We also give  ready  use UI without writing  code  can  accessed from  [dashboard account](https://dashboard.100ms.live). The code   sample  open sourced [here](https://github.com/100mslive/100ms-web). You can either start   codebase  write  own,  use   testing  web-app in  initial phase  development.   ## Error Codes  Do check  detailed page  listening   handling errors [here](../features/error-handling).  ## Reaching Out  If nothing else works, feel free  create  issue [here](https://github.com/100mslive/100ms-web/issues)  reach   us on [discord](https://100ms.live/discord),    channel   web-sdk-discussion. If  reporting  bug,   appreciate  many details possible. We might  ask    following information  debug  issues better -  ### Steps  reproduce Detailed steps  reproduce  issue. You can also give us  [codesandbox](https://codesandbox.io/)   issue can  seen, feel free to base   code  one   quickstart examples.  ### Relevant code snippet This    React Component   JS Function in/around   bug/issue happens.  ### Store Dump You'll need  install  redux devtools [extension](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) for this. Once  open  devtools     download option  bottom panel.  ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/debugging/debugging"
    },
    {
        "title": "faq.mdx",
        "link": "/javascript/v2/debugging/faq",
        "keywords": [],
        "headings": [
            "What does HMS stand for in the SDK name?",
            "Can I listen to webhooks on server side?",
            "How do I record a room?",
            "How do I debug blank video tile while rendering?",
            "Why is the video not auto-playing on page load?",
            "(Angular) Why is video not auto-playing even though muted is set as true?",
            "How do I debug no audio coming in the room?",
            "Is it possible to do RTMP out, live stream a room to YouTube, Twitch, Wowza?",
            "What should I do to hide the beam tile showing up in 100ms web-app for browser based recording/streaming?",
            "How do I make the beam bot join with a custom role for dashboard web-app?",
            "Why does YouTube dashboard shows that the video bitrate is less than the recommended bitrate when using RTMP Out?",
            "Can I get HLS out for a room?",
            "How do I join an API created room from dashboard web-app?",
            "Do I need to do anything to handle poor internet connection?",
            "Can I store extra information with a peer?",
            "How do I implement Raise Hand?",
            "Why do I see videos getting stuck or frozen?",
            "Do you have UI components?",
            "Can I use the SDK with NextJS, Angular, Svelte, VueJS etc.?",
            "I want to suggest a new feature.",
            "I'm facing an issue, how do I reach out?",
            "Can I create room using API?",
            "Can I disable a room?",
            "Is it possible to create and manage roles using APIs?",
            "Does the SDK remembers input/output device selection for future joins?",
            "Can I implement custom events to broadcast or sent to a specific person in the room?",
            "How can I access the user id field used while creating the token after joining?",
            "How can I implement break out rooms?",
            "Can I locally mute a remote audio track?",
            "Can I process video before sending over to others in the room?",
            "How to disable console logs if I'm using the web SDK?",
            "What is the maximum allowed duration for a session?"
        ],
        "content": "--- title: Frequently Asked nav: 4.02 ---  This page lists  frequently asked questions. If  want  add  new question  edit  older one, feel free to [send us  PR](https://github.com/100mslive/100ms-docs/blob/main/docs/javascript/v2/debugging/faq.mdx).  ## What  HMS stand    SDK name?  Hundred(100) Milliseconds 😊. [Why?](https://www.nngroup.com/articles/response-times-3-important-limits/)  ## Can I listen  webhooks  server side?  Yes, please check [webhooks](/server-side/v2/introduction/webhook).  ## How  I record  room?  We  two types  recordings available, [SFU](/server-side/v2/Destinations/recording)  [Browser](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording). You can also start  latter   [SDK](../features/rtmp-recording).  ## How  I debug blank video tile  rendering?  Start  making sure  attach video   called   correct track  video element. Also ensure     bug leading  detach call just   around   time  attach. These calls when done will also show    redux DevTools [extension](../debugging/debugging#redux-devtools-integration). Some things   seen   past -  -   The role   subscribed properly   dashboard's templates section -   [React] Calling detach   cleanup function    useEffect  calls attach   video track  dependency. Instead  this     please   separate useEffect   dependencies  call detach  component unmount. -   [React] Not using  [key](https://reactjs.org/docs/lists-and-keys.html) field properly  rendering  list  components displaying      track. This  ideally   `trackId`  `peerId-trackType`,  track type  video  screen. -   [Angular] Not using  [trackBy](https://angular.io/api/core/TrackByFunction) field properly  rendering  list  components displaying      track. This  ideally   `trackId`  `peerId-trackType`,  track type  video  screen.  ## Why   video  auto-playing  page load?  For  video  auto-play please make sure  fields  set   video element - `auto-play`, `muted`, `playsinline`. Please check the docs  [render video](../features/render-video)   details.  ## (Angular) Why  video  auto-playing even though muted  set  true?  Angular 2+  sometimes  able  translate  `muted` field correctly. Instead  setting  muted  auto-play property as `<video muted>`  `<video [muted]=\"true\">`  work. Please check  [Stack Overflow answer](https://stackoverflow.com/questions/48856562/chrome-android-video-autoplay-inside-angular-2-component)   details.  ## How  I debug  audio coming   room?  -   Check   role   [subscribed to](../foundation/templates-and-roles#subscribe-strategies) properly  [dashboard's](https://dashboard.100ms.live/) templates section.  -   If  web-app  require  user click  join  room,  might run  auto-play issues. Browsers  allow  website  play audio  user  interacted   page till  point  time. Fortunately,   inbuilt support  detect  resolve  given   details [here](../features/error-handling#handling-autoplay-error).  -   If  using  [setVolume](../advanced-features/volume-control) API,  possible  even though  audio  available    locally muted.  ## Is  possible   RTMP out, live stream  room  YouTube, Twitch, Wowza?  Yes,  can achieve    [server-side APIs](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  [SDK](../features/rtmp-recording).  ## What  I   hide  beam tile showing   100ms web-app  browser based recording/streaming?  You can use  viewer role     publish permissions.  ## How  I make  beam bot join   custom role  dashboard web-app?  You can append  query param   end   URL   custom role - `<custom_role_url>?skip_preview=true`. This will tell  web-app  skip preview screen  join directly.  ## Why  YouTube dashboard shows   video bitrate  less   recommended bitrate  using RTMP Out?  You can safely ignore this,  will happen     activity happening   URL  streamed. For example,   nobody in the room   video turned on.  ## Can I get HLS    room?  Not yet,   working  this.  ## How  I join  API created room  dashboard web-app?  You  see  join room button   dashboard,   possible  form  URL   can use. The format is `https://<subdomain>.app.100ms.live/preview/<room_id>/<role>`, For example `https://myroomlink.app.100ms.live/preview/123456/teacher`. All  these,  subdomain, room_id  role  available   dashboard.  ## Do I need   anything  handle poor internet connection?  Not much, just turn   flag  dashboard,  show  proper UI   video gets degraded/unsubscribed. More details [here](../features/sub-degradation).  ## Can I store extra information   peer?  Yes  can store [peer metadata](../advanced-features/peer-metadata)   peer. The initial value can  provided   time  join, and can  modified post join.  ## How  I implement Raise Hand?  You can  using [peer metadata](../advanced-features/peer-metadata).  ## Why  I see videos getting stuck  frozen?  If   enabled subscribe degradation   dashboard,  SDK might go   degradation mode  poor internet connection turning   videos  ensure good call quality. When   done,  flag   track will  turned   let  UI know. The UI should treat  similar   track turning   purpose  displaying avatar etc. More details [here](../features/sub-degradation).  ## Do   UI components?  Not yet,   work  progress  react. Do let us know  discord   want  sign   beta   hit   soon.  ## Can I use  SDK  NextJS, Angular, Svelte, VueJS etc.?  Yes,  core SDK  framework agnostic,  can follow  [JS Quickstart](../guides/javascript-quickstart)  learn  basics. The quickstart guide   vanilla JS   assume  framework.  ## I want  suggest  new feature.  Awesome,  always   lookout  new ideas  feature. Please reach   us  [discord](https://100ms.live/discord).  ## I'm facing  issue,   I reach out?  Please see [reaching out](../debugging/debugging#reaching-out).  ## Can I create room using API?  [Yes](/server-side/v2/Rooms/create-via-api).  ## Can I disable  room?  [Yes](/server-side/v2/Rooms/disable-or-enable). You can also    ending  room using  [SDK](../features/end-room).  ## Is  possible  create  manage roles using APIs?  [Yes](/server-side/v2/policy/template-object).  ## Does  SDK remembers input/output device selection  future joins?  Yes, just make sure  pass  `rememberDeviceSelection`  true   [join config](../features/join).  ## Can I implement custom events  broadcast  sent   specific person   room?  Yes,  can   using  [messaging system](../features/chat#custom-events).  ## How can I access  user id field used  creating  token  joining?  It will  available  `peer.customerUserId`   peer   room.  ## How can I implement break  rooms?  This can  done using [roles](https://www.youtube.com/watch?v=aO0KA2w03io).  ## Can I locally mute  remote audio track?  [Yes](../advanced-features/volume-control).  ## Can I process video  sending   others   room?  Yes,  can write [custom video plugins](../plugins/custom-video-plugins).  ## How  disable console logs  I'm using  web SDK?  Please follow [setting log level](../features/log-level).  ## What   maximum allowed duration   session?  The maximum allowed duration   session   100ms platform  12 hours. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/debugging/faq"
    },
    {
        "title": "known-issues.mdx",
        "link": "/javascript/v2/debugging/known-issues",
        "keywords": [],
        "headings": [],
        "content": "--- title: Known Issues nav: 4.05 ---  We'll list  issues related   sdk  browsers/devices  along   possible workarounds.  1. In iOS Safari,  audio   times routed   phone earpiece instead   speaker. For  end user,  appears  if     volume   low. This   issue  Safari 15, please track  [webkit bug](https://bugs.webkit.org/show_bug.cgi?id=230902)   info. We recommend    showing  prompt  using earphones   user till   fixed  Safari.  2. If    audio   room    iOS Safari can take away autoplay permission requiring  user interaction     play future audio. Check  section  handling autoplay errors [here](../features/error-handling#handling-autoplay-error).  3. Controlling  volume  audio elements   supported  iOS. So, [locally setting remote peer volume](../advanced-features/volume-control)  work  iOS.    However, `hmsActions.setVolume(0, trackId)`  `hmsActions.setVolume(100, trackId)` will mute  unmute audio respectively.  4. Mac Safari   issue playing canvas stream  video. This will result  video playlist  visible   peer   playing   safari. This  happening    since Safari 15.2. Please track [this](https://bugs.webkit.org/show_bug.cgi?id=181663)  [this](https://bugs.webkit.org/show_bug.cgi?id=230621). ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/debugging/known-issues"
    },
    {
        "title": "supported-devices.mdx",
        "link": "/javascript/v2/debugging/supported-devices",
        "keywords": [],
        "headings": [],
        "content": "--- title: Supported Devices nav: 4.20 ---  | OS          Browsers:        Features        Minimum Browser Version  Minimum OS Version  | | ----------  ---------------  --------------  -----------------------  ------------------- | | Windows     Google Chrome    Screen Sharing  78                       7                   | |                              Audio           78                       7                   | |                              Video           78                       7                   | |             Mozilla Firefox  Screen Sharing  NA                       7                   | |                              Audio           78                       7                   | |                              Video           78                       7                   | |             Edge             Screen Sharing  83                       7                   | |                              Audio           83                       7                   | |                              Video           83                       7                   | | Mac OS      Google Chrome    Screen Sharing  78                       OS X Mojave         | |                              Audio           78                       OS X Mojave         | |                              Video           78                       OS X Mojave         | |             Mozilla Firefox  Screen Sharing  NA                       OS X Mojave         | |                              Audio           78                       OS X Mojave         | |                              Video           78                       OS X Mojave         | |             Safari           Screen Sharing  13.1                     OS X Mojave         | |                              Audio           13.1                     OS X Mojave         | |                              Video           13.1                     OS X Mojave         | |             Edge             Screen Sharing  83                       OS X Mojave         | |                              Audio           83                       OS X Mojave         | |                              Video           83                       OS X Mojave         | | Android OS  Google Chrome    Screen Sharing  78                       Android 5.0, API 21 | |                              Audio           78                       Android 5.0, API 21 | |                              Video           78                       Android 5.0, API 21 | |             Mozilla Firefox  Screen Sharing  78                       Android 5.0, API 21 | |                              Audio           78                       Android 5.0, API 21 | |                              Video           78                       Android 5.0, API 21 | |             Edge             Screen Sharing  83                       Android 5.0, API 21 | |                              Audio           83                       Android 5.0, API 21 | |                              Video           83                       Android 5.0, API 21 | |             SDK              Screen Sharing  API 21                   Android 5.0, API 21 | |                              Audio           API 21                   Android 5.0, API 21 | |                              Video           API 21                   Android 5.0, API 21 | | iOS Mobile  Google Chrome    Screen Sharing  78                       iOS 14              | |                              Audio           78                       iOS 14              | |                              Video           78                       iOS 14              | |             Mozilla Firefox  Screen Sharing  34                       iOS 14              | |                              Audio           34                       iOS 14              | |                              Video           34                       iOS 14              | |             Safari           Screen Sharing  13.1                     iOS 14              | |                              Audio           13.1                     iOS 14              | |                              Video           13.1                     iOS 14              | |             Edge             Screen Sharing  46                       iOS 14              | |                              Audio           46                       iOS 14              | |                              Video           46                       iOS 14              | |             SDK              Screen Sharing  10                       iOS 10              | |                              Audio           10                       iOS 10              | |                              Video           10                       iOS 10              | ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/debugging/supported-devices"
    },
    {
        "title": "change-role.mdx",
        "link": "/javascript/v2/features/change-role",
        "keywords": [],
        "headings": [
            "Introduction",
            "Example",
            "Know Thy Permissions",
            "Change Role API",
            "Handling a Role Change Request",
            "Forced Role Change",
            "Notifications",
            "Ideas",
            "Breakout Rooms/Groups",
            "Waiting Room",
            "Audio Rooms",
            "Classroom"
        ],
        "content": "--- title: Change Role nav: 3.12 ---  ![Role Change](/guides/role-change.png)  ## Introduction  Role   powerful concept  takes  lot  complexity away  handling permissions  supporting features like breakout rooms. [Learn   roles here.](../foundation/templates-and-roles)  Every peer  associated   role. The [`HMSRole`](/api-reference/javascript/v2/interfaces/HMSRole) object can  used  know  following:  1. Check   role  allowed  publish. i.e can  send video (and   resolution)? can  send audio? can  share screen? This can  discovered  using `selectIsAllowedToPublish`  display  UI appropriately. 2. Check   roles can  role subscribe to. This  internally taken care    100ms infra  sdk,   UI will  get tracks  per allowed subscriptions. `role.subscribeParams` can  used  get details. 3. Check  actions  role can perform. i.e can  change someone else's current role, mute others, end meeting, remove someone   room. This can  discovered  using  `selectPermissions` selector.  ### Example  Imagine  audio room  2 roles \"speaker\"  \"listener\". Only someone   \"speaker\" role can publish audio   room  \"listener\" can  subscribe. Now   point \"speaker\" may decide  nominate  \"listener\"  become  \"speaker\". This    `changeRole` API comes in.  ## Know Thy Permissions  The  selectors can  used  know   local peer  allowed  publish,   permissions  have. To know   the permissions please check [`selectPermissions'`](../../../api-reference/javascript/v2/home/content#select-permissions) api reference.  ```js const role = hmsStore.getState(selectLocalPeerRole); const permissions = hsmStore.getState(selectPermissions); console.log(\"can I end room - \", permissions.endRoom); console.log(\"can I end change role - \", permissions.changeRole); const { video, audio, screen } = hmsStore.getState(selectIsAllowedToPublish); ```  ## Change Role API  If  local peer  permissions  change role(`permissions.changeRole`),  can change either   someone else's role using the  interface.  ```js hmsActions.changeRole(forPeerId, toRoleName, force); ```  - `forPeerId`: The peer ID whose role needs   changed,  peer can  either  local  remote. - `toRoleName`: The target role name. - `force`(optional): The  peer gets  request  default  accept  role change,  setting force  true,  role can  changed   without requesting  approval.  > 💡 A list   available role names   current room can  accessed via  `selectAvailableRoleNames` selector. Further  `selectRoleByRoleName` > selector can  used  get  full [HMSRole](/api-reference/javascript/v2/interfaces/HMSRole) object   role name.  ### Handling  Role Change Request  The `force` parameter  `changeRole`,  false,   polite request: \"Would  like  change  role  listener  speaker?\"  can  ignored    party. The way  works    party will first receive  [request](/api-reference/javascript/v2/interfaces/HMSRoleChangeRequest)   can accept  reject.  <Tabs id=\"roleChange\" items={[\"Javascript\", \"React\"]} />{\" \"}  <Tab id='roleChange-0'>  ```js function handleRoleChangeRequest(request) {    (!request) {     return;   }   console.log(     `${request.requestedBy.name} requested role change  - ${request.role.name}`   );   // shouldAccept can  example present  pop    user  deciding   act   request   const accept = shouldAccept(request);    (accept) {     hmsActions.acceptChangeRole(request);   } else {     hmsActions.rejectChangeRole(request);   } }  hmsStore.subscribe(handleRoleChangeRequest, selectRoleChangeRequest); ```  </Tab>  <Tab  id='roleChange-1'>  ```jsx function handleRoleChangeRequest(request) {   const request = useHMSStore(selectRoleChangeRequest);   const hmsActions = useHMSActions();    useEffect(() => {     console.log(       `${request.requestedBy.name} requested role change  - ${request.role.name}`     );     // shouldAccept can  example present  pop    user  deciding   act   request     const accept = shouldAccept(request);      (accept) {       hmsActions.acceptChangeRole(request);     } else {       hmsActions.rejectChangeRole(request);     }   }, [request, hmsActions]);    return null; } ```  </Tab>  If  request  accepted,  `peer.roleName` field   store will update re rendering  declarative UI  required.  ### Forced Role Change  Imagine   newly nominated speaker   behaving nicely   want  move  back  listener without  prompt. This    `force` parameter comes in. When   set  `true`   party will  receive  confirmation `roleChangeRequest` but instead will straight away receive  new set  updated permissions  stop publishing.  ![Listener Role](/guides/role-listener.png)  ### Notifications  You'll get  notification  type `ROLE_UPDATED`  role change happens   local peer. When  peer's role change happens   way   updated role  new publish permissions,  track will  muted  default. So  example,   viewer(no audio/video) is changed   host,  tracks will  muted right   role change. They'll  able  manually unmute post role change though. If  want  unmuting  happen automatically,  can listen   notification  call  action.  ## Ideas  ### Breakout Rooms/Groups  You can  multiple roles  act  breakout rooms subscribing   peers within  role. A peer can join another breakout room or group easily using  change role API.  ### Waiting Room  You can create  specific role   waiting room   subscribe  anyone else. When someone joins waiting room, hosts get  notification,   can let  person join  changing  role  attendees.  ### Audio Rooms  An audio room can  designed  moderators, speakers  listeners   moderator can promote  listener  speaker and vice versa.  ### Classroom  Roles can  created  muted-student(not allowed  unmute), student-spotlight(publishes higher quality video), student-screen(allowed  screenshare), prefect(can mute others) etc.  create  enriching feature rich classroom experience. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/change-role"
    },
    {
        "title": "chat.mdx",
        "link": "/javascript/v2/features/chat",
        "keywords": [],
        "headings": [
            "Sending Chat Messages",
            "Broadcast Message:",
            "Group Message:",
            "Direct Message:",
            "Showing the messages",
            "Marking a message as read",
            "Message Notification",
            "Custom Events",
            "useCustomEvent"
        ],
        "content": "--- title: Chat nav: 3.06 ---  What's  video call without  able  send messages    too? 100ms supports chat  every video/audio room  create.  ![Chat](/guides/chat.png)  > Note: Chat messages   persistent. For example,   joined  call, received  messages  got disconnected  rejoin  call,    able  see  previous messages  ## Sending Chat Messages  ### Broadcast Message:  This will  received  everyone   room.  ```js hmsActions.sendBroadcastMessage('hello everyone!'); // yes   simple 😉 ```  ### Group Message:  This will  received  every peer   part   passed-in roles.  ```js hmsActions.sendGroupMessage('hi folks!', ['moderator', 'host']); ```  ### Direct Message:  This will   received   peer    message  sent to.  ```js hmsActions.sendDirectMessage('keep  message  secret!', peer.id); ```  ## Showing  messages  The selector `selectHMSMessages` can  used  get   messages. There    selectors  help  selecting more specific messages.  <Tabs id=\"chat\" items={['JavaScript', 'React']} />  <Tab id='chat-0'>  ```js import {     selectHMSMessages,     selectBroadcastMessages,     selectMessagesByRole,     selectMessagesByPeerID }  '@100mslive/hms-video-store';  function renderMessages(messages) {     console.log('messages - ', messages); }  hmsStore.subscribe(renderMessages, selectHMSMessages); // get  messages hmsStore.subscribe(renderMessages, selectBroadcastMessages); // get  broadcasted messages hmsStore.subscribe(renderMessages, selectMessagesByRole('host')); // get conversation   host role hmsStore.subscribe(renderMessages, selectMessagesByPeerID(peer.id)); // get private conversation  peer ```  </Tab>  <Tab id='chat-1'>  ```jsx import { Message }  './components'; import {     selectHMSMessages,     selectBroadcastMessages,     selectMessagesByRole,     selectMessagesByPeerID }  '@100mslive/react-sdk';  function Chat() {     // use   selectors   required   corresponding UI     const allMessages = useHMSStore(selectMessages); // get  messages     const brodacastMessages = useHMSStore(selectBroadcastMessages); // get  broadcasted messages     const groupMessagesByRole = useHMSStore(selectMessagesByRole('host')); // get conversation   host role     const directMessages = useHMSStore(selectMessagesByPeerID(peer.id)); // get private conversation  peer      return (         <>             {messages.map((msg) => (                 <Message key={msg.id} message={msg} />             ))}         </>     ); } ```  </Tab>  Refer [API Reference  **HMSMessage Interface**](/api-reference/javascript/v2/interfaces/HMSMessage).  ## Marking  message  read  We also   boolean `read` field  every message  can  optionally used  track whether  user has seen  message. You can set  read status   message   following interface.  ```js const readStatus = true; // true/false hmsActions.setMessageRead(readStatus); // set status   messages hmsActions.setMessageRead(readStatus, msg.id); // set status   specific message ```  ## Message Notification  When  peer receives  message  get  [notification](./notifications)  type `HMSNotificationTypes.NEW_MESSAGE`. The `HMSMessage` object will  present  `notification.data`.  ## Custom Events  It's also possible  utilise   system  sending custom messages across  room. All   methods take `type`   optional last param. The `type`  `chat`  default  can  changed   valid string. This can be used  differentiate  different types  messages. For example.  ```js // broadcast  message   whole room hmsActions.sendBroadcastMessage('START', 'GAME_EVENT'); hmsActions.sendBroadcastMessage('🚀', 'EMOJI_REACTION');  // Send  message  role groups hmsActions.sendGroupMessage('🔥', ['stage', 'backstage'], 'EMOJI_REACTION');  // Send  message   specific peer hmsActions.sendDirectMessage('❤️', peer.id, 'EMOJI_REACTION'); hmsActions.sendDirectMessage('STOP_SCREENSHARE', peer.id, 'MODERATOR_EVENT'); ```  Suppose    custom event  sending \"EMOJI_REACTION\"    want  messages   stored   store. In  cases `ignoreMessageTypes` action methods comes  handy. Notifications   ignored messages will still  sent, it'll    put   store.  ```js hmsActions.ignoreMessageTypes(['EMOJI_REACTION']); ```  Do note   messages   persistent    available   person joining  room   event was sent. So even though    good  emoji reactions, if  looking  implementing something like raise hand  check   documentation  [peer metadata](../advanced-features/peer-metadata).  > In case  want  send information    structured way   simple string,  can send  stringified JSON object.  ## useCustomEvent  This   react hook  eases firing & listening  custom events. It takes   config  `type`    type   event  `onEvent`  handler function   fired   event comes.  It returns  object containing `sendEvent`  helps  send  event data  others   room  will receive    `onEvent` handler.  Let's understand  hook   example   showing  button  UI  send emoji reactions.  ```jsx import { useCallback }  'react'; import { useCustomEvent, useHMSActions }  '@100mslive/react-sdk';  const Confetti = () => {     const actions = useHMSActions();      // onEvent  use useCallback     const onEvent = useCallback((msg) => {         console.log(msg); // {emoji: \"🚀\"}         // show emoji reactions  UI     }, []);      const { sendEvent } = useCustomEvent({         type: 'EMOJI_REACTION',         onEvent: onEvent     });      return <button onClick={() => sendEvent({ emoji: '🚀' })}>Rockets</button>; };  export default Confetti; ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/chat"
    },
    {
        "title": "device-change.mdx",
        "link": "/javascript/v2/features/device-change",
        "keywords": [],
        "headings": ["Manual Device Change", "Remember manually selected devices"],
        "content": "--- title: Device Changes nav: 3.07 ---  Device changes include changes  audio/video input  audio output devices. Plugging  headset,  disconnecting  airpods mid call are some   example  device changes. These   taken care    SDK without requiring  code.  ## Manual Device Change  ![Device Change Settings](/guides/settings.png)  You may still want  allow users  see  currently selected devices  change   required. We'll    three steps -  1. Fetching  attached devices list  `hmsStore`. 2. Fetching  currently selected devices  `hmsStore`. 3. Calling `hmsActions`  change  device  required.  > Note  changing audio output device  available   chromium based browsers.  <Tabs id=\"devicechange\" items={['JavaScript', 'React']} />  <Tab id='devicechange-0'>  ```js // {audioInput, audioOutput, videoInput} const devices = hmsStore.getState(selectDevices);  // {audioInputDeviceId, audioOutputDeviceId, videoInputDeviceId} const selected = hmsStore.getState(selectLocalMediaSettings);  // show user  settings component  manually choose device // The following selected devices can  obtained  changed   UI.  // Update AudioInput device  calling hmsActions.setAudioSettings({ deviceId: selectedAudioDeviceID }); // Update VideoInput device  calling hmsActions.setVideoSettings({ deviceId: selecedVideoDeviceID }); // Update AudioOutput device  calling hmsActions.setAudioOutputDevice(selectedAudioOutputDeviceID); ```  </Tab>  <Tab id='devicechange-1'>  ```jsx import {   useDevices,   DeviceType, }  '@100mslive/react-sdk';  const DeviceSettings = () => {   const { allDevices, selectedDeviceIDs, updateDevice } = useDevices();    // Call  updateDevice function like   update  videoInput device. Similarly  audio input  output pass corresponding deviceId  DeviceType    updateDevice({       deviceId,       deviceType: DeviceType.videoInput    });    // render devices  selection  allDevices  selectedDeviceIDs   return <div /> } ```  </Tab>  ## Remember manually selected devices  We support  additional boolean  join config  can  passed   let sdk use  localstorage  remember manual device selections  future room [join](./join).  <Tabs id=\"rememberdeviceselection\" items={['JavaScript', 'React']} />  <Tab id='rememberdeviceselection-0'>  ```js await hmsActions.join({ ...joinConfig, rememberDeviceSelection: true }); ```  </Tab>  <Tab id='rememberdeviceselection-1'>  ```jsx const JoinCall = () => {   const hmsActions = useHMSActions();   const join = useCallback(async () => {     await hmsActions.join({ ...joinConfig, rememberDeviceSelection: true });   }, [hmsActions]);    return <button onClick={join}>Join</button>; };  ``` </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/device-change"
    },
    {
        "title": "end-room.mdx",
        "link": "/javascript/v2/features/end-room",
        "keywords": [],
        "headings": ["End Room Notification"],
        "content": "--- title: End Room nav: 3.15 ---  ![End Room](/guides/end-room.png)  If  local peer  [`endRoom`](./change-role#know-thy-permissions) permission  can end  room using   api. It's also possible  lock the room  prevent  future rejoins.  <Tabs id=\"endroomcall\" items={['JavaScript', 'React']} />  <Tab id='endroomcall-0'>  ```js function renderEndRoomButton(permissions) {     const endRoomButton = document.getElementById('end-room-button');       (permissions.endRoom) {         endRoomButton.addEventListener('click', function () {             try {                 const lock = false; // set  true  disallow rejoins                 const reason = 'party  over';                 await hmsActions.endRoom(lock, reason);             } catch (error) {                 // Permission denied   connected  room                 console.error(error);             }         });         endRoomButton.style.display = 'inline-block';     } else {         endRoomButton.style.display = 'none';     } }  // subscribe   permissions,  render  called whenever    change due  role change hmsStore.subscribe(renderEndRoomButton, selectPermissions); ```  </Tab>  <Tab id='endroomcall-1'>  ```jsx function EndRoomButton() {     const permissions = useHMSStore(selectPermissions);     const hmsActions = useHMSActions();      const endRoom = () => {         try {             const lock = false; // set  true  disallow rejoins             const reason = 'party  over';             await hmsActions.endRoom(lock, reason);         } catch (error) {             // Permission denied   connected  room             console.error(error);         }     };      return permissions.endRoom ? <button onClick={endRoom}>End Room</button> : null; } ```  </Tab>  > 🚧 If  local peer    required `endRoom` permission,  `hmsActions.endRoom` call will throw  [HMSException error](error-handling).  ## End Room Notification  Once  peer  adequate permissions calls `endRoom`,   peers   room will receive  [notification](../features/notifications)  type `ROOM_ENDED`   [HMSLeaveRoomRequest](../../../api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest) object   data.  The SDK automatically calls leave  performs necessary clean ups immediately   notification  sent, clients  show  appropriate UI(show  toast, redirect   'good-bye' page) within  period.  <Tabs id=\"endroomhandle\" items={['JavaScript', 'React']} />  <Tab id='endroomhandle-0'>  ```js hmsNotifications.onNotification((notification) => {      (!notification) {         return;     }      switch (notification.type) {         // ...Other notification type cases         case 'ROOM_ENDED':             // Redirect  Show toast  user             toast(notification.data.reason);             break;     } }); ```  </Tab>  <Tab id='endroomhandle-1'>  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications();      useEffect(() => {          (!notification) {             return;         }          switch (notification.type) {             // ...Other notification type cases             case 'ROOM_ENDED':                 // Redirect  Show toast  user                 toast(notification.data.reason);                 break;         }     }, [notification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/end-room"
    },
    {
        "title": "error-handling.mdx",
        "link": "/javascript/v2/features/error-handling",
        "keywords": [],
        "headings": ["Handling Autoplay Error", "Error Codes"],
        "content": "--- title: Error Handling nav: 3.10 ---  When  make  API call  access  HMS SDK,  SDK may return error codes. ErrorCodes  usually returned   problem    recovered without app intervention  occurred.  These  returned  `type='error'`   [notifications interface](/javascript/v2/features/notifications). The type  `notification.data`  `HMSException`. Find  [HMSException interface here](/api-reference/javascript/v2/interfaces/HMSException).  ## Handling Autoplay Error  ![Device Change Settings](/guides/autoplay-error.png)  Most browsers   restriction  audio autoplay  audio  allowed    user  interacted   page. You can read more   restrictions   [chrome](https://developer.chrome.com/blog/autoplay/)  [safari](https://webkit.org/blog/7734/auto-play-policy-changes-for-macos/).  If  autoplay error  received(code=3008), UI can show  popup   notification  button. Once  user click  happened confirming  interaction point, unblockAudio can  called.  ```js await hmsActions.unblockAudio(); ```  ## Error Codes  Following   different error codes   returned   SDK. Before returning  error code, SDK retries  errors wherever possible.  | **Error Code**  **Cause   error**                                                                                     **Action   taken**                                                                                      | | :-------------  :--------------------------------------------------------------------------------------------------------  :---------------------------------------------------------------------------------------------------------- | | **1000**        Failed  connect  Websocket - Happens due  network issues  firewall blocking Websocket connections  Mention user  check  network connection  firewall/anti-virus/VPN  try    time.    | | **1003**        Websocket disconnected - Happens due  network issues                                                     Mention user  check  network connection  try    time.                                | | **2002**        Invalid Endpoint URL                                                                                       Check  endpoint provided  calling `join`  `HMSSDK`.                                               | | **2003**        Endpoint   reachable                                                                                  Mention user  check  network connection  try    time.                                | | **2004**        Token    proper JWT format                                                                          The token passed  calling `join`    correct format. Retry getting  new token.                  | | **3000**        Overconstrained error                                                                                      No Action needed  end user,  will  internally retrying.                                             | | **3001**        User denied permission  access capture device  browser level                                           Ask user  check permission granted  audio/video capture devices  browser(in address bar).             | | **3002**        Capture Device   Available                                                                            Ask user  check   audio/video capture device  connected  not.                                    | | **3003**        Capture device   use    application                                                         Show notification  user mentioning   capturing device  used    application currently. | | **3005**        There   media  return. Please select either video  audio  both.                                  There   media  return. Please select either video  audio  both.                                   | | **3008**        Browser  throw  autoplay exception                                                                    Show notification  user mentioning   browser blocked autoplay                                      | | **3009**        Device unable  satisfy requested media constraints                                                       Reduce media constraints   role  dashboard  upgrade device hardware.                              | | **3010**        No audio detected  track, indicates problem  device hardware                                       Notify user  try using  headphone  microphone.                                                        | | **3011**        System denied permission  access capture device                                                          Ask user  check permission granted  audio/video/screen capture devices  system settings.              | | **4001**        WebRTC error                                                                                               Some webRTC error  occured. Need  logs  debug.                                                     | | **4002**        WebRTC error                                                                                               Some webRTC error  occured. Need  logs  debug.                                                     | | **4003**        WebRTC error                                                                                               Some webRTC error  occured. Need  logs  debug.                                                     | | **4004**        WebRTC error                                                                                               Some webRTC error  occured. Need  logs  debug.                                                     | | **4005**        ICE Connection Failed due  network issue                                                                 Mention user  check  network connection  try    time.                                | | **5001**        Trying  join  room   already joined                                                              Trying  join  already joined room.                                                                      | | **5002**        Trying  join  room  preview   progress                                                          Call join action   room state  \"Preview\"   \"Connecting\".                                    | | **6000**        Calling actions   connected/joined   room                                                        Call  required action  joining  room.                                                              | | **6002**        WebRTC Error: Error  renegotiating                                                                    We can add check `error.message`   info.                                                             | | **6003**        WebRTC engine   ready yet                                                                             Wait  preview  complete  calling join.                                                           | | **6008**        Invalid arguments(peer ID, track ID,  others) passed  actions                                          Check   corresponding arguments  valid  checking  store  calling  action                | | **6009**        Trying  join  room  preview   progress                                                          Call join action   room state  \"Preview\"   \"Connecting\".                                    | | **6010**        navigator.mediaDevices  undefined  insecure contexts served  HTTP protocol                         Deploy  app   secure context  HTTPS protocol.                                                     | | **6011**        RTCPeerConnection  undefined  browser                                                                  Switch/Upgrade browser  WebRTC compatible version/check  browser extenstion blocking WebRTC.           | | **7001**        Platform Not Supported                                                                                     The platform   supported  plugin                                                                    | | **7002**        Plugin Init Failed                                                                                         Plugin initialization  failed                                                                            | | **7003**        Plugin Processing Failed                                                                                   Plugin processing failed                                                                                    | | **7004**        Plugin Add Already Going                                                                                 Plugin add  already  progress                                                                           | | **8001**        Playlist: Invalid action call                                                                              Check current playing entry, next entry, previous entry  calling seek/seekTo, playNext, playPrevious.   | ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/error-handling"
    },
    {
        "title": "hls.mdx",
        "link": "/javascript/v2/features/hls",
        "keywords": [],
        "headings": [
            "Starting HLS",
            "Stopping HLS",
            "Current HLS State",
            "Displaying HLS Stream",
            "Testing with the Dashboard web-app",
            "Tips"
        ],
        "content": "--- title: HLS Streaming nav: 3.35 ---  HLS Streaming allows  scaling  millions  viewers  near real time. You can give  link  your web-app  will  converted   HLS feed   server  can  played across devices  consumption. Behind  scenes,  will  achieved    bot join  room  stream   sees  hears. Once  feed is ready,  server will give  URL  can  played using  HLS Player.  > Note   media server serving  content   case  owned  100ms. If  looking   way  stream >  YouTube, Twitch etc., please   look   RTMP streaming docs [here](./rtmp-recording).  ## Starting HLS  To start HLS,  need  pass   meeting URL  configure  HLS settings  dashboard   template  destinations tab. The 100ms bot will open  URL  join  room, so it must allow access without  user level interaction. In  future, it'll  possible  start HLS  multiple  URLs    room. For  purpose,  API supports taking   array, although currently   first element   array will  respected. To distinguish between multiple URLs,  additional field `metadata` can  optionally passed. The `meetingURL`  `metadata`  clubbed together  form   call a `variant`.  If everything  configured   dashboard,  can directly call `hmsActions.startHLSStreaming`   join  room.  Otherwise, You can also call `hmsActions.startHLSStreaming`   `hlsConfig`   array   variants.  Additionally  can also start recording  passing   recording config   fields -  1. `singleFilePerLayer`:   desired end result   mp4 file per HLS layer, false  default 2. `hlsVod`:   desired end result   zip  m3u8    chunks, false  default  ```js async startHLSWithoutPrams() {     try {         // For   work, destinations   template needs   configured  dashboard         await hmsActions.startHLSStreaming();     } catch (err) {         console.error(\"failed  start hls\", err);     } }  async startHLS() {     const params = {         variants: [{meetingURL: \"\", metadata: \"landscape\"}]     };     params.recording = {singleFilePerLayer: true, hlsVod: false}; //  enable recording     try {         await hmsActions.startHLSStreaming(params);     } catch (err) {         console.error(\"failed  start hls\", err);     } } ```  ## Stopping HLS  You can call `hmsActions.stopHLSStreaming`  stop HLS Streaming  will stop   variants.  ```js async stopHLS() {     try {         await hmsActions.stopHLSStreaming();     } catch (err) {         console.error(\"failed  stop hls\", err);     } } ```  ## Current HLS State  The `selectHLSState` selector can  used  know  HLS  currently running,   url   can  viewed.  <Tabs id=\"hls\" items={['JavaScript', 'React']} />{' '}  <Tab id='hls-0'>  ```js function updateHLSState(hlsState) {     console.log('is hls streaming going  - ', hlsState.running);      (hlsState.running) {         console.log('hls url - ', hlsState.variants[0]?.url);     } else  (hlsState.error) {         console.error('error  hls streaming - ', hlsState.error);     } }  hmsStore.subscribe(updateHLSState, selectHLSState); ```  </Tab>  <Tab  id='hls-1'>  ```jsx function HLSState() {     const hlsState = useHMSStore(selectHLSState);     console.log('is hls streaming going  - ', hlsState.running);      (hlsState.running) {         console.log('hls url - ', hlsState.variants[0]?.url);     } else  (hlsState.error) {         console.error('error  hls streaming - ', hlsState.error);     }     return null; } ```  </Tab>  ## Displaying HLS Stream  Not  browsers support HLS [natively](https://caniuse.com/?search=hls), however  can use players like [hls.js](https://github.com/video-dev/hls.js/) or [Shaka Player](https://github.com/google/shaka-player). In case  need  UI side customisations  can go  something like [videojs](https://videojs.com/)  internally uses `hls.js`   hls piece.  Here   simple example  using `hls.js`  play  hls URL given   SDK. Make sure  installed  library(`npm  hls.js`)  using  code.  <Tabs id=\"hlsview\" items={['JavaScript', 'React']} />{' '}  <Tab id='hlsview-0'>  ```js import Hls  'hls.js';  function renderHLS({ hlsUrl }) {     const video = document.getElementById('video');     const browserHasNativeHLSSupport = videoRef.current.canPlayType(         'application/vnd.apple.mpegurl'     );      (Hls.isSupported()) {         let hls = new Hls();         hls.loadSource(hlsUrl);         hls.attachMedia(video);     }     // hls.js   supported  iOS Safari,    browser  native support  playing HLS,     //  can use  video element directly.     else  (browserHasNativeHLSSupport) {         video.src = hlsUrl;     } } ```  </Tab>  <Tab  id='hlsview-1'>  ```jsx import Hls  'hls.js';  function HLSView({ hlsUrl }) {     const videoRef = useRef(null);     useEffect(() => {          (videoRef.current && hlsUrl) {             const browserHasNativeHLSSupport = videoRef.current.canPlayType(                 'application/vnd.apple.mpegurl'             );              (Hls.isSupported()) {                 let hls = new Hls();                 hls.loadSource(hlsUrl);                 hls.attachMedia(videoRef.current);             }             // hls.js   supported  iOS Safari,    browser  native support  playing HLS,             //  can use  video element directly.             else  (browserHasNativeHLSSupport) {                 videoRef.current.src = hlsUrl;             }         }     }, [hlsUrl]);      return <video ref={videoRef} autoPlay controls></video>; } ```  </Tab>  ## Testing   Dashboard web-app  You may want  try   end  end flow   dashboard web-app  moving ahead  building   app. To do this,  can create  additional role named `hls-viewer`  will  presented   hls stream   join  room.  ![Streaming](/docs/v2/web-hamburger.png)  To start  hls stream,  can select Streaming   hamburger menu  bottom center   page. There will   HLS checkbox in the popup  opens  can  checked  start HLS. Once HLS  started,  can join   `hls-viewer` role to see  hls stream.  ## Tips  -   If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up.     The meeting url can  edited   streaming/recording popup  join   recording specific role configured  such. -   If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users we're     used  reloading  page   scenarios   difficult  achieve   automated case. -   Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page      join  happen within  time interval. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/hls"
    },
    {
        "title": "integration.mdx",
        "link": "/javascript/v2/features/integration",
        "keywords": [],
        "headings": [
            "Installing our libraries",
            "npm",
            "yarn",
            "npm",
            "yarn",
            "Setting up the sdk",
            "JavaScript",
            "React Hooks",
            "Debugging"
        ],
        "content": "--- title: Integrating The SDK nav: 3.01 ---  ## Installing  libraries  You can use either npm  yarn  install  dependencies. Please install  respective libraries depending  whether you're planning  use  react   framework/plain JavaScript.  <Tabs id=\"packages-install\" items={['JavaScript', 'React', 'JavaScript(CDN)']} />  <Tab id=\"packages-install-0\">  ```bash ## npm npm install --save @100mslive/hms-video-store ## yarn yarn add @100mslive/hms-video-store ```  </Tab>  <Tab id=\"packages-install-1\">  ```bash ## npm npm install --save @100mslive/react-sdk ## yarn yarn add @100mslive/react-sdk ```  </Tab>  <Tab id=\"packages-install-2\">  ``` https://cdn.skypack.dev/@100mslive/hms-video-store ```  </Tab>  ## Setting   sdk  Our core SDK can  used  plain JavaScript   UI framework. We also provide  convenient hooks based interface in case  planning  integrate  SDK   React app. Please follow  appropriate section below.  In case  want  use  CDN link,  can change  imports  present   example [here](https://codepen.io/triptu/pen/dymxmoR?editors=0010). It's recommended  use  fixed version  CDN  avoid unintentional retrieval   new release  breaking changes. Although CDN  great  quickstart  prototyping,  highly recommend setting   bundler  production  improve page load speed  avoid  dependency  cdn provider.   ### JavaScript  There  three entities   need   familiar  -  -   `hmsStore` -  contains  complete state   room   given time. This includes  example, participant details,     messages  track states. -   `hmsActions` -   used  perform  action   joining, muting  sending  message. -   `hmsNotifications` -  can  used  get notified  peer join/leave  new messages  order  show toast notifications to      user.  Let's create  `hms.js` file   initialize  export   entities,   can  used  required. We'll assume that this setup   place   sections   documentation.  <Tabs id=\"store\" items={['Setup  Export', 'Import  use']} />{' '}  <Tab id='store-0'>  ```js:hms.js import { HMSReactiveStore }  '@100mslive/hms-video-store';  const hms = new HMSReactiveStore();  //  default subscriber  notified  store changes post subscription only,  can be // changed  call  right  subscribing  using  function. hms.triggerOnSubscribe(); // optional, recommended  const hmsActions = hms.getActions(); const hmsStore = hms.getStore(); const hmsNotifications = hms.getNotifications();  export { hmsActions, hmsStore, hmsNotifications }; ```  </Tab>  <Tab  id='store-1'>  ```js:some_other_file.js import { hmsActions, hmsStore, hmsNotifications }  './hms'; ```  </Tab>  ### React Hooks  If  planning  use  SDK  React,  provide three friendly hooks   wrapper   plain JavaScript interface. You can wrap  UI  `HMSRoomProvider`   hooks will become available    UI components. We'll learn    hooks, and  use   navigate   sections.  <Tabs id=\"react\" items={['Wrap In Provider', 'Use hooks']} />{' '}  <Tab id='react-0'>  ```jsx:app.jsx import { HMSRoomProvider }  '@100mslive/react-sdk';  export function App() {   return (     <HMSRoomProvider>       <MyApp />     </HMSRoomProvider>   ); }  ```  </Tab>  <Tab  id='react-1'>  ```jsx:component.jsx import {   useHMSStore,   useHMSActions,   useHMSNotifications }  '@100mslive/react-sdk';  export function MyComponent() {   const hmsStore = useHMSStore();   const hmsActions = useHMSActions();   const hmsNotifications = useHMSNotifications();    return </>; } ```  </Tab>  ## Debugging  Do checkout  debugging page [here](../debugging/debugging)   easy debugging experience  integrating  sdk. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/integration"
    },
    {
        "title": "join.mdx",
        "link": "/javascript/v2/features/join",
        "keywords": [],
        "headings": ["Getting Current Room State"],
        "content": "--- title: Join Room nav: 3.02 ---  To join  interact  others  audio  video call,  user needs  join  `room`.  When user indicates   want  _join_  room,  app   -  1. User Name -  name    displayed   peers   room. 2. [Authentication Token](../guides/token) -  client side authentication token generated   Token Service.  You can also optionally pass  fields -  1. settings: {isAudioMuted, isVideoMuted} -  can use   set  initial audio/video state  time  join. 2. User metadata -  can  used  pass  additional metadata associated   user.  We'll call  `join` method  `hmsActions` object   config containing  fields  join  room.  > Note: join  async   [version](../changelog/release-notes#2022-09-13)  <Tabs id=\"join\" items={['JavaScript', 'React']} />{' '}  <Tab id='join-0'>  ```js:join.js import { hmsActions }  './hms';  const config = {     userName: 'Jon Snow',     authToken: '<Auth token>', // client-side token generated   token service     settings: {         isAudioMuted: true,         isVideoMuted: false     },     metaData: JSON.stringify({city: 'Winterfell', knowledge: 'nothing'}),     rememberDeviceSelection: true,  // remember manual device change };  await hmsActions.join(config);  ```  </Tab>  <Tab  id='join-1'>  ```jsx:join.jsx import { useHMSActions }  '@100mslive/react-sdk';  function Join() {   const hmsActions = useHMSActions();    const config = {     userName: 'Jon Snow',     authToken: '<Auth token>', // client-side token generated   token service     settings: {         isAudioMuted: true,         isVideoMuted: false,     },     metaData: JSON.stringify({city: 'Winterfell', knowledge: 'nothing'}),     rememberDeviceSelection: true,  // remember manual device change   };    async function onJoinClick() {     await hmsActions.join(config)   }    return <         // form  input  join button   />; } ```  </Tab>  That's it. You  joined  room successfully 🥳. You  now  able    audio  call  this.  ## Getting Current Room State  You might want  hide  join form   UI  navigate  another page   join  completed. We provide [some selectors](/api-reference/javascript/v2/home/content#functions)  operate upon  room state  give  relevant information. One such selector  [`selectIsConnectedToRoom`](/api-reference/javascript/v2/home/content#select-is-connected-to-room). Here's   use  -  <Tabs id=\"connected\" items={['JavaScript', 'React']} />{' '}  <Tab id='connected-0'>  ```js import { hmsStore }  './hms'; import { selectIsConnectedToRoom }  '@100mslive/hms-video-store';  // use getState  get  state   time console.log('isConnected - ', hmsStore.getState(selectIsConnectedToRoom));  function onRoomStateChange(connected) {     console.log('isConnected - ', connected); }  //  can also subscribe   state  get  function called whenever  state changes hmsStore.subscribe(onRoomStateChange, selectIsConnectedToRoom); ```  </Tab>  <Tab  id='connected-1'>  ```jsx import { useHMSStore, selectIsConnectedToRoom }  '@100mslive/react-sdk';  //   connection state changes,  store hook will take care  rerendering  component function ConnectionState() {     const isConnected = useHMSStore(selectIsConnectedToRoom);      return <div>{isConnected ? 'connected' : 'not connected, please join.'}</div>; } ```  </Tab>  > For  granular > room states, use [`selectRoomState`](/api-reference/javascript/v2/home/content#select-room-state). ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/join"
    },
    {
        "title": "leave.mdx",
        "link": "/javascript/v2/features/leave",
        "keywords": [],
        "headings": ["Leave on Navigating Away"],
        "content": "--- title: Leave Room nav: 3.03 ---  Leaving  room   quick. Once  user wishes  end  interaction   room,  can choose  leave  meeting. 👋  We provide  simple,  fuss API   exactly that. Invoke  leave method using `hmsActions`. You can use  current [room state](./join#getting-current-room-state)  render  UI accordingly post leave.  ```jsx hmsActions.leave() ```  ## Leave  Navigating Away  If  user closes  tab without calling leave  might seem   stuck    seconds  remote peers. This is because  server assumes   might   network issue  keeps  buffer waiting   peer  rejoin. For this reason,   important  call  leave api   detect  user navigating away   page. This includes, refreshing or closing  tab. We can set  leave   called  window unload event.  ```js window.addEventListener('beforeunload', () => hmsActions.leave()); window.addEventListener('onunload', () => hmsActions.leave()); ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/leave"
    },
    {
        "title": "log-level.mdx",
        "link": "/javascript/v2/features/log-level",
        "keywords": [],
        "headings": [],
        "content": "--- title: Log Level nav: 3.30 ---  Console logging  sdk can  controlled  using  [`setLogLevel`](https://docs.100ms.live/api-reference/javascript/v2/interfaces/HMSActions#set-log-level) api.  ```js hmsActions.setLogLevel(HMSLogLevel.WARN); // log warnings  errors hmsActions.setLogLevel(HMSLogLevel.ERROR); //  errors will  logged hmsActions.setLogLevel(HMSLogLevel.NONE); // nothing will  logged   sdk ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/log-level"
    },
    {
        "title": "mute.mdx",
        "link": "/javascript/v2/features/mute",
        "keywords": [],
        "headings": ["Toggling current mute state"],
        "content": "--- title: Mute / Unmute nav: 3.05 ---  Mute  something  applies   audio  video. When  mute audio,    heard   people. When  mute video,  will   broadcasting  video   people.  ```js await hmsActions.setLocalVideoEnabled(false); await hmsActions.setLocalAudioEnabled(true); ```  ## Toggling current mute state  1. Get current state 2. Invert  state  set  new value  <Tabs id=\"mute\" items={['JavaScript', 'React']} />  <Tab id='mute-0'>  ```js async function toggleAudio() {     const enabled = hmsStore.getState(selectIsLocalAudioEnabled);     await hmsActions.setLocalAudioEnabled(!enabled); }  async function toggleVideo() {     const enabled = hmsStore.getState(selectIsLocalVideoEnabled);     await hmsActions.setLocalVideoEnabled(!enabled); } ```  </Tab>  <Tab id='mute-1'>  ```jsx function MyComponent() {   const audioEnabled = useHMSStore(selectIsLocalAudioEnabled);   const videoEnabled = useHMSStore(selectIsLocalVideoEnabled);   const hmsActions = useHMSActions();    async function toggleAudio() {     await hmsActions.setLocalAudioEnabled(!audioEnabled);   }    async function toggleVideo() {     await hmsActions.setLocalVideoEnabled(!videoEnabled);   }    return <         // toggle buttons  user   />; } ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/mute"
    },
    {
        "title": "notifications.mdx",
        "link": "/javascript/v2/features/notifications",
        "keywords": [],
        "headings": [
            "Notification types",
            "Listening to specific notifications",
            "Unsubscribing from notifications",
            "Ideas"
        ],
        "content": "--- title: Notifications nav: 3.09 ---  ![Join Notification](/guides/notification-join.png)  ![Poor Connection Notification](/guides/notification-internet.png)  Notifications can  used  display toast  user  activities happening   room,   peer join/leave  new messages. It can also  used  know   mid call sdk level error.  In order  subscribe  notifications  can use  hmsNotifications object created   integration step.  <Tabs id=\"notification-initialize\" items={['JavaScript', 'React']} />  <Tab id=\"notification-initialize-0\">  ```jsx import { hmsNotifications }  './hms';  hmsNotifications.onNotification((notification) => {     // This function will  called   notification  received     console.log('notification type', notification.type);      // The data  notification depends   notification type     console.log('data', notification.data); }); ```  </Tab>  <Tab id=\"notification-initialize-1\">  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications();      useEffect(() => {          (!notification) {             return;         }          // notification   reactive object         //  function will run everytime    new notification         console.log('notification type', notification.type);          // The data  notification depends   notification type         console.log('data', notification.data);     }, [notification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab>  ## Notification types  The notification `type`   string  can  take values   [list here](/api-reference/javascript/v2/enums/HMSNotificationTypes). You can use   check  type   notification.  The data  notification depends   notification type. You can use  `switch` construct   handle  notification type.  <Tabs id=\"notification-types\" items={['JavaScript', 'React']} />  <Tab id=\"notification-types-0\">  ```jsx import { hmsNotifications }  './hms';  const unsubscribe = hmsNotifications.onNotification((notification) => {     console.log('notification type', notification.type);     console.log('data', notification.data);      //  can use  following  show appropriate toast notifications  eg.     switch (notification.type) {         case HMSNotificationTypes.PEER_LIST:             console.log(`${notification.data}   peers   room`); // received right  join             break;         case HMSNotificationTypes.PEER_JOINED:             console.log(`${notification.data.name} joined`);             break;         case HMSNotificationTypes.PEER_LEFT:             console.log(`${notification.data.name} left`);             break;         case HMSNotificationTypes.NEW_MESSAGE:             console.log(                 `${notification.data.message} received  ${notification.data.senderName}`             );             break;         case HMSNotificationTypes.ERROR:             console.log('[Error]', notification.data);             console.log('[Error Code]', notfication.data.code);             break;         case HMSNotificationTypes.RECONNECTING:             console.log('[Reconnecting]', notification.data);             break;         case HMSNotificationTypes.RECONNECTED:             console.log('[Reconnected]');             break;         case HMSNotificationTypes.NAME_UPDATED:         case HMSNotificationTypes.METADATA_UPDATED:         case HMSNotificationTypes.ROLE_UPDATED:             console.log(`peer updated(${notification.type}), new peer=`, notification.data);             break;         case HMSNotificationTypes.TRACK_DEGRADED:             console.log(`track - ${notification.data} degraded due  poor network`);             break;         case HMSNotificationTypes.TRACK_RESTORED:             console.log(`track - ${notification.data} recovered`);             break;         case HMSNotificationTypes.ROOM_ENDED:             console.log(`room ended, reason - ${notification.data.reason}`);             break;         case HMSNotificationTypes.REMOVED_FROM_ROOM:             console.log(`removed  room, reason - ${notification.data.reason}`);             break;         case HMSNotificationTypes.DEVICE_CHANGE_UPDATE:             console.log(`device changed - ${notification.data}`);             break;         default:             break;     } }); ```  </Tab>  <Tab id=\"notification-types-1\">  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications();      React.useEffect(() => {          (!notification) {             return;         }          console.log('notification type', notification.type);         console.log('data', notification.data);          //  can use  following  show appropriate toast notifications  eg.         switch (notification.type) {             case HMSNotificationTypes.PEER_JOINED:                 console.log(`${notification.data.name} joined`);                 break;             case HMSNotificationTypes.PEER_LEFT:                 console.log(`${notification.data.name} left`);                 break;             case HMSNotificationTypes.NEW_MESSAGE:                 console.log(                     `${notification.data.message} received  ${notification.data.senderName}`                 );                 break;             case HMSNotificationTypes.ERROR:                 console.log('[Error]', notification.data);                 console.log('[Error Code]', notfication.data.code);                 break;             case HMSNotificationTypes.RECONNECTING:                 console.log('[Reconnecting]', notification.data);                 break;             case HMSNotificationTypes.RECONNECTED:                 console.log('[Reconnected]');                 break;             case HMSNotificationTypes.NAME_UPDATED:             case HMSNotificationTypes.METADATA_UPDATED:             case HMSNotificationTypes.ROLE_UPDATED:                 console.log(`peer updated(${notification.type}), new peer=`, notification.data);                 break;             case HMSNotificationTypes.TRACK_DEGRADED:                 console.log(`track - ${notification.data} degraded due  poor network`);                 break;             case HMSNotificationTypes.TRACK_RESTORED:                 console.log(`track - ${notification.data} recovered`);                 break;             case HMSNotificationTypes.ROOM_ENDED:                 console.log(`room ended, reason - ${notification.data.reason}`);                 break;             case HMSNotificationTypes.REMOVED_FROM_ROOM:                 console.log(`removed  room, reason - ${notification.data.reason}`);                 break;             case HMSNotificationTypes.DEVICE_CHANGE_UPDATE:                 console.log(`device changed - ${notification.data}`);                 break;             default:                 break;         }     }, [notification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab>  ## Listening  specific notifications  You can pass  single notification  array  notifications  one  `HMSNotificationTypes`.  <Tabs id=\"notification-specific-types\" items={['JavaScript', 'React']} />  <Tab id=\"notification-specific-types-0\">  ```jsx import { hmsNotifications }  './hms';  const unsubscribe = hmsNotifications.onNotification((notification) => {     console.log('notification type', notification.type);     console.log('data', notification.data); }, HMSNotificationTypes.PEER_JOINED);  const unsubscribePeerNotifications = hmsNotifications.onNotification(     (notification) => {          (!notification) {             return;         }         //  will  called  one  HMSNotificationTypes.PEER_JOINED, HMSNotificationTypes.PEER_LEFT  arrived         console.log('notification type', notification.type);         console.log('data', notification.data);     },     [HMSNotificationTypes.PEER_JOINED, HMSNotificationTypes.PEER_LEFT] ); ```  </Tab>  <Tab id=\"notification-specific-types-1\">  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications(HMSNotificationTypes.PEER_JOINED);     const peerNotification = useHMSNotifications([         HMSNotificationTypes.PEER_JOINED,         HMSNotificationTypes.PEER_LEFT     ]);      React.useEffect(() => {          (!notification) {             return;         }          console.log('notification type', notification.type);         console.log('data', notification.data);     }, [notification]);      React.useEffect(() => {          (!peerNotification) {             return;         }         console.log('notification type', notification.type);         console.log('data', notification.data);     }, [peerNotification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab>  ## Unsubscribing  notifications  You can unsubscribe   notifications  calling  method returned   `hmsNotifications.onNotification` function.  <Tabs id=\"notification-unsubscribe\" items={['JavaScript', 'React']} />  <Tab id=\"notification-unsubscribe-0\">  ```jsx const unsubscribe = hmsNotifications.onNotification((notification) => {     //... });  unsubscribe(); ```  </Tab>  <Tab id=\"notification-unsubscribe-1\">  ```jsx // No code  required  unsubscribe  notifications // Unmount  component  calls  `useHMSNotifications` hook ```  </Tab>  ## Ideas  You can create notifications  buttons  them,  make  easier   end user  respond   notifications. For example -  ![Screenshare Notification](/guides/notification-screen.png) ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/notifications"
    },
    {
        "title": "peer-name.mdx",
        "link": "/javascript/v2/features/peer-name",
        "keywords": [],
        "headings": [],
        "content": "--- title: Change User Name nav: 3.07 ---  Any peer can change   name    joining  room. Before joining,  name     specified  `HMSConfig`   passed   join method. After joining, name can  changed   call  hmsActions -  ```jsx await hmsActions.changeName(newName); ```  The store will update   remote side,    result corresponding UI will also  updated automatically. A notification  type `HMSNotificationTypes.NAME_UPDATED` will also  sent  case  toast needs   presented. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/peer-name"
    },
    {
        "title": "preview.mdx",
        "link": "/javascript/v2/features/preview",
        "keywords": [],
        "headings": [
            "Post Preview call",
            "When you do join",
            "Limitations",
            "Know Others in the room",
            "Network Quality in preview"
        ],
        "content": "--- title: Preview nav: 3.08 ---  Preview screen   frequently used UX element  allows users  check   input devices  working properly and set  initial state (mute/unmute)   audio  video tracks  joining. 100ms SDKs provide  easy-to-use API  back  feature. Additionally,  SDK will try  establish  connection  100ms server  verify    network issues   the auth credentials  valid    everything   order  subsequent room join  instant.  To invoke  API call  ```js const config = {     userName: 'Jon Snow',     authToken: '<Auth token>', // client-side token generated   token service     settings: {         // initial states         isAudioMuted: true,         isVideoMuted: false     },     metaData: JSON.stringify({ city: 'Winterfell', knowledge: 'nothing' }),     rememberDeviceSelection: true, // remember manual device change     captureNetworkQualityInPreview: false // whether  measure network score  preview }; await hmsActions.preview(config); ```  You  need   config object    pass  [join API](./join). The interface  render video, mute/unmute etc. remains  same.  > Note    use preview,    need  maintaining  state   side  settings(device id, audio, video on). Selections >  preview will  moved across   join call.  ## Post Preview call  Once   made  preview call,  things will happen -  -   SDK will connect   100ms backend  ensure   token  correct  fetch  permissions   role. -   Network speed will  measured   connection score will  notified   UI  [turned on](../advanced-features/connection-quality). -   One peer   local peer will  added   store, accessible via `selectLocalPeer` selector. -   Permission prompt will  given   user  camera/mic  permissions   there -   Audio, Video tracks will  created  per  role permissions. -   The video can  rendered [similarly  post join](./render-video). -   [Audio Level](../advanced-features/audio-level) will start reflecting   microphone,  can  used  verify that      microphone  working properly. -   User will  able  see  modify input/output [devices](./device-change).  ## When   join  When join  done   preview call, changes done   user  preview   changing device  muting their tracks will  carry forwarded  user enters  room.  ## Limitations  -   You  preview  join  two different roles,  case   need   this,  can call leave  wait   promise      resolve  calling join.  ## Know Others   room  It's also possible  know   room state   peers   room,   permission  receive room state  given  the role  dashboard. The peers present   room can  known  using  `selectPeers` selector  given [here](../guides/useful-selectors#who-all-are-in-my-room).  <Tabs id=\"peers\" items={['Javascript', 'React']} />  <Tab id='peers-0'>  ```js const peers = hmsStore.getState(selectRemotePeers); ```  </Tab>  <Tab id='peers-1'>  ```jsx const peers = useHMSStore(selectRemotePeers); ```  </Tab>  ## Network Quality  preview  Follow [this section](../advanced-features/connection-quality#connection-quality-score-in-preview)  get  sense  user's network quality  preview. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/preview"
    },
    {
        "title": "remote-mute.mdx",
        "link": "/javascript/v2/features/remote-mute",
        "keywords": [],
        "headings": ["Muting/Unmuting", "Handling a mute/unmute request"],
        "content": "--- title: Remote Mute/Unmute nav: 3.13 ---  You're running  room  decide  someone  currently talking   talking,  perhaps  want  video turned off. You're looking   remote mute/unmute   case.  ## Muting/Unmuting  Use  [selectPermissions](./change-role#know-thy-permissions) selector  check whether  local peer  the permission  `mute`  `unmute` others   call one   APIs below.  1. Muting Single Track  To mute  single track, call [`hmsActions.setRemoteTrackEnabled`](../../../api-reference/javascript/v2/interfaces/HMSActions#set-remote-track-enabled) with  `trackID`   track  want  mute/unmute  `enable`(`true`  unmuting, `false`  muting).  ```js try {     await hmsActions.setRemoteTrackEnabled(peer.audioTrack, true); } catch (error) {     // Permission denied  invalid track ID   connected  room     console.error(error); } ```  2. Muting Multiple Tracks  You can use  API  mute mute/unmute multiple peers    time either   roles, track source, track type or  combination   above. Note   API always excludes the local peer   operation  applies   remote peers.  ```js try {     const options = {         enabled: false, // false  mute, true  unmute         roles: ['student', 'parents'], // optional, array  roles  mute, mutes everyone   passed         type: 'audio', // optional, audio/video, mutes    passed         source: 'regular' // optional, mutes  sources(regular, screen etc.)   passed     };     await hmsActions.setRemoteTracksEnabled(options); } catch (error) {     // Permission denied  invalid track ID   connected  room     console.error(error); } ```  > 🚧 If  local peer    required `mute`/`unmute` permission,  actions will throw  [HMSException error](error-handling).  ## Handling  mute/unmute request  ![Remote Unmute Request](/guides/remote-unmute.png)  Once  peer  adequate permissions calls `setRemoteTrackEnabled`,  local peer will receive  [notification](notifications). In case  single track mute  will   type `CHANGE_TRACK_STATE_REQUEST`  a [HMSChangeTrackStateRequest](../../../api-reference/javascript/v2/interfaces/HMSChangeTrackStateRequest) object   data.  -   Mute requests  automatically applied   receiver   SDK. No action  required.  -   For unmute request, use  information  `notification.data`  show  dialog   user  ask   want  accept      change   apply  settings locally. The     regular user [Mute/Unmute](mute).  <Tabs id=\"remotemutehandle\" items={['JavaScript', 'React']} />  <Tab id='remotemutehandle-0'>  ```js hmsNotifications.onNotification((notification) => {      (!notification) {         return;     }      switch (notification.type) {         // For Single Track Remote Mute         case HMSNotificationTypes.CHANGE_TRACK_STATE_REQUEST:             const { requestedBy, track, enabled } = notification.data;             // Unmute Request              (enabled) {                 // Ask  consent using dialog    appropriate UI                 await hmsActions.setEnabledTrack(track.id, enabled);             } else {                 // Mute Request                 // Show toast  user             }             break;         // For bulk remote mute, notification will contain   tracks  will  impacted   request         case HMSNotificationTypes.CHANGE_MULTI_TRACK_STATE_REQUEST:             const { requestedBy, tracks, type, source, enabled } = notification.data;             // Unmute Request              (enabled) {                 // Ask  consent using dialog    appropriate UI                 tracks.forEach(                     async (track) => await hmsActions.setEnabledTrack(track.id, enabled)                 );             } else {                 // Mute Request                 // Show toast  user             }             break;     } }); ```  </Tab>  <Tab id='remotemutehandle-1'>  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications();      useEffect(() => {          (!notification) {             return;         }          switch (notification.type) {             // For Single Track Remote Mute             case HMSNotificationTypes.CHANGE_TRACK_STATE_REQUEST:                 const { requestedBy, track, enabled } = notification.data;                 // Unmute Request                  (enabled) {                     // Ask  consent using dialog    appropriate UI                     await hmsActions.setEnabledTrack(track.id, enabled);                 } else {                     // Mute Request                     // Show toast  user                 }                 break;             // For bulk remote mute, notification will contain   tracks  will  impacted   request             case HMSNotificationTypes.CHANGE_MULTI_TRACK_STATE_REQUEST:                 const { requestedBy, tracks, type, source, enabled } = notification.data;                 // Unmute Request                  (enabled) {                     // Ask  consent using dialog    appropriate UI                     tracks.forEach(                         async (track) => await hmsActions.setEnabledTrack(track.id, enabled)                     );                 } else {                     // Mute Request                     // Show toast  user                 }                 break;         }     }, [notification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/remote-mute"
    },
    {
        "title": "remove-peer.mdx",
        "link": "/javascript/v2/features/remove-peer",
        "keywords": [],
        "headings": ["Remove Peer Notification"],
        "content": "--- title: Remove Peer nav: 3.14 ---  If  local peer  [`removeOthers`](./change-role#know-thy-permissions) permission  can remove  peer using   api.  ```js try {     const reason = 'Good Bye';     await hmsActions.removePeer(peer.id, reason); } catch (error) {     // Permission denied  invalid peer ID   connected  room     console.error(error); } ```  > 🚧 If  local peer    required `removeOthers` permission,  [HMSException](error-handling) will  thrown.  ## Remove Peer Notification  Once  peer  adequate permissions calls `removePeer`   local peer,  local peer will receive  [notification](notifications)  type `REMOVED_FROM_ROOM`   [HMSLeaveRoomRequest](../../../api-reference/javascript/v2/interfaces/HMSLeaveRoomRequest) object   data.  The SDK automatically calls leave  performs necessary clean ups immediately   notification  sent, clients  show  appropriate UI(show  dialog, redirect   'good-bye' page)  receiving  notification.  <Tabs id=\"removepeerhandle\" items={['JavaScript', 'React']} />  <Tab id='removepeerhandle-0'>  ```js hmsNotifications.onNotification((notification) => {      (!notification) {         return;     }      switch (notification.type) {         // ...Other notification type cases         case 'REMOVED_FROM_ROOM':             // Redirect  Show toast  user             toast('Reason: ', notification.data.reason);             break;     } }); ```  </Tab>  <Tab id='removepeerhandle-1'>  ```jsx import { useHMSNotifications }  '@100mslive/react-sdk';  function Notification() {     const notification = useHMSNotifications();      useEffect(() => {          (!notification) {             return;         }          switch (notification.type) {             // ...Other notification type cases             case 'REMOVED_FROM_ROOM':                 // Redirect  Show toast  user                 toast('Reason: ', notification.data.reason);                 break;         }     }, [notification]);      return <div>Notification: {notification?.type}</div>; } ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/remove-peer"
    },
    {
        "title": "render-video.mdx",
        "link": "/javascript/v2/features/render-video",
        "keywords": [],
        "headings": ["Detach video to conserve bandwidth and cleanup elements"],
        "content": "--- title: Render Video nav: 3.04 ---  It  comes   this. All  setup  far   done    can show live streaming video   beautiful apps.  1. First,  need  get   peers   room. You can use  `selectPeers` selector  this.  2. Next,  need    reference   video element. You must add  attributes  present below.  ```html <video autoplay muted playsinline /> ```  3. You can  iterate    peers,  call  `attachVideo` function  hmsActions  render  video.  <Tabs id=\"render\" items={['JavaScript', 'React']} />{' '}  <Tab id='render-0'>  ```js import { hmsActions }  './hms';  const peersContainer = document.getElementById('peers-container');  function renderVideo(peer) {     //  can either get  existing video element  create  new onw.     // const videoElement = document.getElementByID(peer.id)     const videoElement = document.createElement('video');     videoElement.autoplay = true;     videoElement.muted = true;     videoElement.playsinline = true;      hmsActions.attachVideo(peer.videoTrack, videoElement); }  function renderPeers(peers) {     peersContainer = document.getElementById('peers-container');     peersContainer.innerHTML = '';      peers.forEach((peer) => {         console.log(             `rendering video  peer - ${peer.name}, roleName - ${peer.roleName}, isLocal- ${peer.isLocal}`         );         peersContainer.append(renderVideo(peer));     }); }  // subscribe   peers,  render  called whenever    change like peer join  leave hmsStore.subscribe(renderPeers, selectPeers); ```  </Tab>  <Tab  id='render-1'>  ```jsx import { useRef, useEffect }  'react'; import {     useHMSStore,     useVideo,     selectPeers, }  '@100mslive/react-sdk';  function VideoTile({ peer }) {     const { videoRef } = useVideo({         trackId: peer.videoTrack     });         return <video ref={videoRef} autoPlay muted playsInline></video>; }  function Conference() {     const peers = useHMSStore(selectPeers);      return (         <>             {peers.map((peer) => (                 <VideoTile key={peer.id} peer={peer} />             ))}         </>     ); } ```  </Tab>  The videos will now  rendered & start playing   screen. 🥳  > In case  want  render local peer  remote peers separately,  can use  selectors - `selectLocalPeer`  `selectRemotePeers`.  ## Detach video  conserve bandwidth  cleanup elements  You can call `detachVideo`   `hmsActions`  unsubscribe  track   fetch  data. This can  done for example   video goes   view. This  also  called   component  going   unmounted for proper cleanups   video elements.  > Note    using  `useVideo` hook  `react-sdk`   already  taken care of.  ```js hmsActions.detachVideo(videoTrack.id, videoElement); ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/render-video"
    },
    {
        "title": "rtmp-recording.mdx",
        "link": "/javascript/v2/features/rtmp-recording",
        "keywords": [],
        "headings": [
            "Start and stop streaming / recording `rtmpUrls`",
            "Current Recording/RTMP State",
            "Tips"
        ],
        "content": "--- title: RTMP Streaming / Recording nav: 3.35 ---  Want  preserve  video call  posterity   recording? Or live stream    millions  viewers  YouTube, Twitch, Facebook, MUX  whatever gives   RTMP ingest URL?  Turn  RTMP streaming  recording.  In 100ms, recording  streaming  usually achieved    bot join  room and stream   sees  hears   file (recording)    RTMP ingest URL (streaming). It's also possible  start streaming  recording  [server side APIs](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording).  > There  another type >  SFU based recording  well  allows    tracks   recorded individually,  can find  details  it > [here](/server-side/v2/Destinations/recording).  ## Start  stop streaming / recording `rtmpUrls`  These   options  need   passed  start RTMP  recording -  1. **meetingURL**: _string_. The URL  100ms bot user will open  join  room. It must allow access without  user level interaction. 2. **rtmpURLs**: _string[]_. Optional,  streaming  required,     one   RTMP Ingest URLs  max limit  3 URLs   stream  go.      - Format: `rtmp://server.com/app/STREAM_KEY`     - Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`         - \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.         - \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.  3. **record**: _boolean_. Optional, If recording  required  can  set  true. This value   effect  streaming. 4. **resolution**: _{ width: number, height: number }_. Optional,  passed  recording  RTMP will  done   passed  resolution.  -   If  rtmpURLs  record = true  provided,  streaming  recording will begin. -   If  rtmpURLs  provided,  streaming will begin. -   If  record true  provided,  recording will begin.  If either one  started,     started without first stopping whatever  running. Eg: Only streaming  started. Recording   started unless streaming  stopped first.  If   required,     started together  providing  RTMP Ingest URLs  recording = true.  ```js async start() {     const params = {         meetingURL: \"\",         rtmpUrls: [\"\"],         record: true     };     try {         await hmsActions.startRTMPOrRecording(params);     } catch(err) {         console.error(\"failed  start RTMP/recording\", err);     } }  async stop() {     try {         await hmsActions.stopRTMPAndRecording();     } catch (err) {         console.error(\"failed  stop RTMP/recording\", err);     } }  ```  ## Current Recording/RTMP State  As    everything else   100ms web world,  selectors  tell us   current state   room, whether recording  streaming  already going    recording  happening,  type  recording  currently running.  ```js const recordingState = hmsStore.getState(selectRecordingState); const rtmpState = hmsStore.getState(selectRTMPState);  console.log('is sfu recording going  - ', recordingState.server.running);  if (recordingState.browser.running) {     console.log('time  browser recording  started - ', recordingState.browser.startedAt); } else  (recordingState.browser.error) {     console.error('error  browser recording - ', recordingState.browser.error); }  if (rtmpState.running) {     console.log('time  RTMP  started - ', rtmpState.startedAt); } else  (rtmpState.error) {     console.error('error  RTMP streaming - ', rtmpState.error); } ```  ## Tips  -   If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up.     The meeting URL can  edited   streaming/recording popup  join   recording specific role configured  such. -   If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users we're     used  reloading  page   scenarios   difficult  achieve   automated case. -   Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page      join  happen within  time interval. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/rtmp-recording"
    },
    {
        "title": "screen-share.mdx",
        "link": "/javascript/v2/features/screen-share",
        "keywords": [],
        "headings": [
            "AudioOnly Screenshare",
            "VideoOnly Screenshare",
            "Useful Selectors",
            "Screenshare with audio:"
        ],
        "content": "--- title: Screen Share nav: 3.11 ---  Screenshare involves sharing either  complete screen,  specific window or,  browser tab. For  peer  share  screen,  role must  screenshare enabled   dashboard.  ![ScreenshareDashboard](/docs/v2/screenshare-dashboard.png)  To start  screenshare:  ```js try {     await hmsActions.setScreenShareEnabled(true); } catch (error) {     //  error will  thrown  user  give access  share screen } ```  ## AudioOnly Screenshare  To start audio  screenshare,  can pass  config  second argument.  ```js try {     await hmsActions.setScreenShareEnabled(true, {         audioOnly: true     }); } catch (error) {     //  error will  thrown  user  give access  share screen } ```  ## VideoOnly Screenshare  To start video  screenshare,  can pass  config  second argument.  ```js try {     await hmsActions.setScreenShareEnabled(true, {         videoOnly: true     }); } catch (error) {     //  error will  thrown  user  give access  share screen } ```  To stop  screenshare:  ```js hmsActions.setScreenShareEnabled(false); ```  ## Useful Selectors  ```js //  know  someone  screensharing const screenshareOn = hmsStore.getState(selectIsSomeoneScreenSharing);  //  get  HMSPeer object   peer screensharing, will select  first  multiple screenshares const presenter = hmsStore.getState(selectPeerScreenSharing);  //  get  HMSPeer object    peers screensharing const presenters = hmsStore.getState(selectPeersScreenSharing);  //  boolean  know   local peer   one   screensharing const amIScreenSharing = hmsStore.getState(selectIsLocalScreenShared);  //  get  screenshare video track,  can  used  call attachVideo  rendering const screenshareVideoTrack = hmsStore.getState(selectScreenShareByPeerID(presenter.id));  // Get  peer   sharing audio  screenshare const peer = hmsStore.getState(selectPeerSharingAudio); // Get  audio track  audio Only screenshare const audioTrack = hmsStore.getState(selectScreenShareAudioByPeerID(peer?.id)); ```  Find  [here](/api-reference/javascript/v2/home/content#functions).  ## Screenshare  audio:  We also give support  adding screenshare  audio  chromium based browsers. This  applies  checkbox  bottom left shown   checked  sharing  browser tab.  ![ScreenshareAudio](/docs/v2/screenshare-audio.png) ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/screen-share"
    },
    {
        "title": "store-appdata.mdx",
        "link": "/javascript/v2/features/store-appdata",
        "keywords": [],
        "headings": [
            "Introduction",
            "Usage",
            "Setting up initial appData",
            "Updating State",
            "With Merge as true",
            "Without merge as true",
            "Reading App Data",
            "Example"
        ],
        "content": "--- title: Store AppData nav: 3.36 ---  ## Introduction  If  app  already use  global store,  can use  part  hmsStore  store simple states  needs sharing   components. You might want     improved performance  cleaner code   app layer(avoiding prop drilling). Note      replacement  external global store. It's limited  design   suitable  straightforward use cases.  > Note     suitable  - >  - storing large amount  data >  - data changing   high frequency >  - complex interlinked state  ## Usage  ### Setting  initial appData  [`initAppData`](/api-reference/javascript/v2/interfaces/HMSActions#init-app-data) takes  object  key value pairs  set  intial app data  store.  ```ts const data: Record<string,any> = {uiMode: \"activeSpeaker\", toasts: {message: false, errors: true}}; hmsActions.initAppData(data); ```  ### Updating State  [`setAppData`](/api-reference/javascript/v2/interfaces/HMSActions#set-app-data) takes  key  value  update  state  store. If key  already exist,   added.  ```ts hmsActions.setAppData(\"uiMode\", \"gallery\"); // new value => {uiMode: \"gallery\", toasts: {message: false, errors: true}} ```  If  value  also  object,    additional boolean option  can  used  merge(instead  replace)  new value  existing value.  #### With Merge  true  ```ts hmsActions.setAppData(\"toasts\", {message: true}, true); // new value => {uiMode: \"gallery\", toasts: {message: true, errors: true}} ```  #### Without merge  true  ```ts hmsActions.setAppData(\"toasts\", {message: true}); // new value => {uiMode: \"gallery\", toasts: {message: true}} ```  ### Reading App Data The selector [`selectAppData`](/api-reference/javascript/v2/home/content#select-app-data) can  used  this. You can pass   key you want  get,  it'll give  value. The component using  will   rendered   value actually changes.  ```ts console.log(hmsStore.getState(\"uiMode\")); // \"gallery\" console.log(hmsStore.getState(\"toasts\")); // {message: false, errors: true} ```  ### Example  <Tabs id=\"appData\" items={['JavaScript', 'React']} />{' '}  <Tab id='appData-0'>  ```js:app.js function initAppData() {     const initialAppData = {       uiMode: \"activeSpeaker\",       toasts: {           message: false,           errors: true,       }     };      hmsActions.initAppData(initialAppData);     console.log(\"inital toasts  show\", hmsStore.getState(selectAppData(\"toasts\"))); // { message: false, errors: true }     hmsActions.setAppData(\"toasts\", {message: true}, true); // merge  value  current value     console.log(\"merged new toasts\", hmsStore.getState(selectAppData(\"toasts\"))); // { message: true, errors: true }     hmsActions.setAppData(\"toasts\", {message: true}, true); // replace current value     console.log(\"replaced new toasts, hmsStore.getState(selectAppData(\"toasts\"))); // { message: true }         console.log(\"uiMode\", hmsStore.getState(selectAppData(\"uiMode\")); // activeSpeaker     hmsActions.setAppData(\"uiMode\", \"gallery\");     console.log(\"uiMode\", hmsStore.getState(selectAppData(\"uiMode\")); // gallery }  ```  </Tab>  <Tab  id='appData-1'>  ```jsx:app.jsx export function myComponent() {   const toasts = useHMSStore(selectAppData(\"toasts\"));   const uiMode = useHMSStore(selectAppData(\"uiMode\"));       const hmsActions = useHMSActions();   useEffect(() => {     const initialAppData = {       uiMode: \"activeSpeaker\",       toasts: {           message: false,           errors: true,       }     };      hmsActions.initAppData(initialAppData);   }, [hmsActions]); // runs  once    // toasts becomes { message: true, errors: true }  first call  toggle   toggleMessageToast = useCallback(()=> {     hmsActions.setAppData(\"toasts\", { message: !toasts.message }, true);   }, [hmsActions]);    // toasts becomes { message: false, errors: true }  call   method   resetToasts = useCallback((newValue)=> {     hmsActions.setAppData(\"toasts\",{           message: false,           errors: true,       });   }, [hmsActions]);    return <> {/* components */} </>; } ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/store-appdata"
    },
    {
        "title": "sub-degradation.mdx",
        "link": "/javascript/v2/features/sub-degradation",
        "keywords": [],
        "headings": ["Responding in the app"],
        "content": "--- title: Subscribe Degradation nav: 3.32 ---  Sometimes people  bad internet connections  everyone deserves  good meeting.  When  network   slow  support audio  video conversations together,  100ms SDK can automatically turn  downloading  peer's videos,  may improve  audio quality  avoid disconnections.  If  network quality improves,  videos will  restored automatically  well.  To turn  subscribe degradation   room, open  [templates](https://dashboard.100ms.live/templates)   dashboard  enable   roles there.  ![Dashboard Degradation Option](/docs/v2/degradation.png)   ## Responding   app  The [HMSVideoTrack](/api-reference/javascript/v2/interfaces/HMSVideoTrack#degraded) object   boolean `degraded` field  will become true   track gets degraded.  If `degraded`  true, treat     video  turned off. If  UI   changed,  video tile will appear black  frozen. So  eg.   UI shows  avatar   track   enabled,   also    degradation. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/features/sub-degradation"
    },
    {
        "title": "adaptive-bitrate.mdx",
        "link": "/javascript/v2/foundation/adaptive-bitrate",
        "keywords": [],
        "headings": [],
        "content": "--- title: Adaptive Bitrate nav: 1.7 ---  Adaptive bitrate (ABR) refers  features  enable dynamic adjustments  video quality—to optimise  end-user experience  diverse network conditions. ABR ensures  every participant  able  consume  highest possible quality video  conferencing  streaming use-cases, based   bandwidth constraints.\r \r In addition  network, ABR can also optimise   right video quality based   size   video element. For example,  video call running  active speaker layout  larger video tiles  require higher quality video track. These adjustments can  made dynamically  adaptive bitrate.\r \r Learn   100ms enables adaptive bitrate in:\r \r * [Conferencing scenarios](#abr-in-conferencing)\r * [Live streaming scenarios](#abr-in-live-streaming)\r \r ## ABR  conferencing\r \r Peers  100ms rooms can publish multiple video quality levels simultaneously. This  called “simulcast”  100ms. Peers  consume  video tracks can upgrade  downgrade video quality.\r \r You can enable simulcast   publishing role's template,  use manual  automatic layer changes   subscriber's side.\r \r ### Publisher-side configuration\r \r Simulcast configuration  opt-in  can  enabled   role's configuration inside  template. The role's publish video quality determines video quality layers  simulcast. For example,  role configured  publish  720p can simulcast 180p, 360p  720p layers.\r \r | Video publish quality  Possible simulcast layers |\r |-----------------------|---------------------------|\r | 1080p                  1080p, 540p, 270p         |\r | 720p                   720p, 360p, 180p          |\r | 480p                   480p, 240p                |\r | 360p                   360p, 180p                |\r | 240p                   240p                      |\r | 180p                   180p                      |\r \r #### Enable via dashboard\r \r Enable \"can publish simulcast\"   template page   particular role. You can also specify  many video quality layers will  simultaneously published  peers   role. The peer will publish  layers assuming network bandwidth permits.\r \r ![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r \r #### Enable via API\r \r Update role configuration using  [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2  3 layers  scale   selected publish layer.\r \r In  example below,  role  configured  publish 720p  3 simulcast layers:\r \r * `f`  full  scale  factor  1 (= 720p)\r * `h`  half  scale  factor  2 (= 360p)\r * `q`  quarter  scale  factor  4 (= 180p)  ```js {     \"publishParams\": {         ...         \"simulcast\": {             \"video\": {                 \"layers\": [                     {                         \"rid\": \"f\",                         \"scaleResolutionDownBy\": 1,                         \"maxBitrate\": 700,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"h\",                         \"scaleResolutionDownBy\": 2,                         \"maxBitrate\": 250,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"q\",                         \"scaleResolutionDownBy\": 4,                         \"maxBitrate\": 100,                         \"maxFramerate\": 30                     }                 ]             },             \"screen\": {}         }     } } ``` \r ### Subscribe-side behavior\r \r <br/>\r \r #### Manual layer selection\r \r The 100ms client-side SDKs provide methods  set  preferred quality layer   remote peer's video track. See docs   preferred platform:\r \r * [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r * [iOS](/docs/ios/v2/advanced-features/simulcast)\r * [Android](/docs/android/v2/advanced-features/simulcast)\r \r #### Automatic layer selection\r \r <br/>\r <video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r     <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r </video>\r <br/>\r \r - Based  video tile size: The SDK automatically ensures appropriate video layer  subscribed to,  demonstrated   video above. For example,   video element  360 px  width, 360p   closest layer will  selected.\r     - **JavaScript**: The `useVideo` hook   100ms React SDK auto-selects  appropriate video quality layer.\r     - **iOS**: `HMSVideoView` can auto-select video quality layer.\r     - **Android**: _Coming soon_.\r - Based  network quality: ABR will work alongside subscribe degradation  auto-downgrade video quality  peers. This  _coming soon_.\r \r ## ABR  live streaming\r \r 100ms uses  HTTP Live Streaming (HLS) protocol  live streaming scenarios. HLS supports adaptive bitrate    box,  HLS video players can automatically  manually pick appropriate video quality levels.\r \r Learn   [how HLS works   blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/adaptive-bitrate"
    },
    {
        "title": "basics.mdx",
        "link": "/javascript/v2/foundation/basics",
        "keywords": [],
        "headings": ["Quickstart"],
        "content": "---\r title: Basic Concepts\r nav: 1.1\r ---\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](/javascript/v2/guides/javascript-quickstart)\r ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/basics"
    },
    {
        "title": "handling-audio-video-edge-cases.mdx",
        "link": "/javascript/v2/foundation/handling-audio-video-edge-cases",
        "keywords": [],
        "headings": [],
        "content": "--- title: Handling audio-video edge cases nav: 1.4 ---  ## Introduction  100ms handles  lot  standard audio/video issues internally without  developer needing  handle  explicitly. This page describes  common issues   100ms handles them.  There  3 major issues  issues  can occur   audio/video conference  - Device capture exceptions - Network disconnection/switching network exceptions - Network bandwidth limitation/large room exceptions  ## Device failure  A common issue   failure  capture mic/camera even though  user   devices connected. Common causes include differences  OS/browser implementations  device capture APIs, permission   granted   user,   device   use  another program.  The usual recourse   exceptions   prompt  user action - \"Grant permission\", \"Please close   app using microphone\", \"Switch  Safari\"  100ms' SDKs come   [preview method](../features/preview)  can  called  joining  room. This will test  device failures, network connectivity  throw errors   recommended user action.  ## Network disconnection/Switching networks  Another set  common issues  minor network blips. Common causes    user moves  one room  another,  switches  wifi  data.  100ms will send  notification within 10s  detecting  network disconnection  will automatically retry  connection  available upto 60s. After 60s,  terminal error  thrown   client.  ## Network bandwidth limitation/large rooms  A common occurrence  large rooms,  constrained networks  dropped frames. This results  robotic voices, frozen frames, pixelated screenshare  entire pieces  audio/video   lost.  100ms will automatically prioritize connections  network limits  reached. This prioritization can  controlled  developers using  dashboard  100ms APIs.  eg. A developer can prioritize host's screenshare higher  guests' videos. In low bandwidth constraints, guests' videos will  turned off,  host's screenshare will remain.   ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/handling-audio-video-edge-cases"
    },
    {
        "title": "live-streaming.mdx",
        "link": "/javascript/v2/foundation/live-streaming",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming nav: 1.5 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   web SDK [here](/javascript/v2/features/hls). ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/live-streaming"
    },
    {
        "title": "recordings.mdx",
        "link": "/javascript/v2/foundation/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.6 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/recordings"
    },
    {
        "title": "security-and-tokens.mdx",
        "link": "/javascript/v2/foundation/security-and-tokens",
        "keywords": [],
        "headings": ["Code sample: Generate app token", "Code sample: Generate management token"],
        "content": "---\r title: Authentication  Tokens\r nav: 1.3\r ---\r \r ## Introduction  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](./../features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](/docs/server-side/v2/Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use? You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language. \r \r #### Code sample: Generate app token\r \r <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='client-code-token-0'>\r \r ```javascript\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r var payload = {\r     access_key: app_access_key,\r     room_id: '<room_id>',\r     user_id: '<user_id>',\r     role: '<role>',\r     type: 'app',\r     version: 2,\r     iat: Math.floor(Date.now() / 1000),\r     nbf: Math.floor(Date.now() / 1000)\r };\r \r jwt.sign(\r     payload,\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='client-code-token-1'>\r \r ```python\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r import sys\r \r app_access_key = \"<app_access_key>\"\r app_secret = \"<app_secret>\"\r \r def generate(room_id, user_id, role):\r     expires = expires  24 * 3600\r     now = datetime.datetime.utcnow()\r     exp  = now+ datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r                 \"access_key\": app_access_key,\r                 \"type\":\"app\",\r                 \"version\":2,\r                 \"room_id\": room_id,\r                 \"user_id\": user_id,\r                 \"role\":role,\r                 \"jti\": str(uuid.uuid4()),\r                 \"exp\": exp,\r                 \"iat\": now,\r                 \"nbf\": now,\r                 }, key=app_secret)\r if __name__ == \"__main__\":\r      len(sys.argv) == 3:\r         room_id = sys.argv[0]\r         user_id = sys.argv[1]\r         role = sys.argv[2]\r     print(generate(room_id=room_id, user_id=user_id, role=role))\r ```\r \r </Tab>\r \r <Tab id='client-code-token-2'  >\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateHmsClientToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"room_id\", \"<room_id>\");\r     payload.put(\"user_id\", \"<user_id>\");\r     payload.put(\"role\", \"<role>\");\r     payload.put(\"type\", \"app\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id='client-code-token-3'  >\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r \r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"app_secret\"\r \r def generateAppToken(room_id, user_id, role)\r     now = Time.now\r     exp = now + 86400\r     payload = {\r         access_key: $app_access_key,\r         room_id: room_id,\r         user_id: user_id,\r         role: role,\r         type: \"app\",\r         jti: SecureRandom.uuid,\r         version: 2,\r         iat: now.to_i,\r         nbf: now.to_i,\r         exp: exp.to_i\r     }\r \r     token = JWT.encode(payload, $app_secret, 'HS256')\r end\r \r puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"\r \r ```\r \r </Tab>\r \r <Tab id='client-code-token-4'>\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $issuedAt  = new DateTimeImmutable();\r $expire    = $issuedAt->modify('+24 hours')->getTimestamp();\r $accessKey = \"<app_access_key>\";\r $secret = \"<app_secret>\";\r $version   = 2;\r $type      = \"app\";\r $role      = \"<role>\";\r $roomId    = \"<room_id>\";\r $userId    = \"<user_id>\";\r \r $payload = [\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r     'access_key' => $accessKey,\r     'type' => \"app\",\r     'jti' =>  Uuid::uuid4()->toString()\r     'version' => 2,\r     'role' => $role,\r     'room_id' => $roomId,\r     'user_id' => $userId\r ];\r \r $token = JWT::encode(\r     $payload,\r     $secret,\r     'HS256'\r );\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure.\r \r </Note>\r \r #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](./../guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.   #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.   If  evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics),  can use  public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.\r \r #### Code sample: Generate management token\r \r <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />\r \r <Tab id='test-code-0'>\r \r ```js\r var jwt = require('jsonwebtoken');\r var uuid4 = require('uuid4');\r \r var app_access_key = '<app_access_key>';\r var app_secret = '<app_secret>';\r \r jwt.sign(\r     {\r         access_key: app_access_key,\r         type: 'management',\r         version: 2,\r         iat: Math.floor(Date.now() / 1000),\r         nbf: Math.floor(Date.now() / 1000)\r     },\r     app_secret,\r     {\r         algorithm: 'HS256',\r         expiresIn: '24h',\r         jwtid: uuid4()\r     },\r     function (err, token) {\r         console.log(token);\r     }\r );\r ```\r \r </Tab>\r \r <Tab id='test-code-1'>\r \r ```py\r #!/usr/bin/env python3\r import jwt\r import uuid\r import datetime\r \r app_access_key = '<app_access_key>'\r app_secret = '<app_secret>'\r \r \r def generateManagementToken():\r     expires = 24 * 3600\r     now = datetime.datetime.utcnow()\r     exp = now + datetime.timedelta(seconds=expires)\r     return jwt.encode(payload={\r         'access_key': app_access_key,\r         'type': 'management',\r         'version': 2,\r         'jti': str(uuid.uuid4()),\r         'iat': now,\r         'exp': exp,\r         'nbf': now\r         }, key=app_secret)\r \r if __name__ == '__main__':\r     print(generateManagementToken())\r ```\r \r </Tab>\r \r <Tab id=\"test-code-2\">\r \r ```java\r import java.time.Instant;\r import java.util.Date;\r import java.util.HashMap;\r import java.util.Map;\r import java.util.UUID;\r import io.jsonwebtoken.Jwts;\r import io.jsonwebtoken.SignatureAlgorithm;\r \r private void generateManagementToken() {\r     Map<String, Object> payload = new HashMap<>();\r     payload.put(\"access_key\", \"<app_access_key>\");\r     payload.put(\"type\", \"management\");\r     payload.put(\"version\", 2);\r     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())\r         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))\r         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))\r         .setNotBefore(new Date(System.currentTimeMillis()))\r         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();\r   }\r ```\r \r </Tab>\r \r <Tab id=\"test-code-3\">\r \r ```ruby\r require 'jwt'\r require 'securerandom'\r \r $app_access_key = \"<app_access_key>\"\r $app_secret = \"<app_secret>\"\r \r def generateManagementToken()\r     now = Time.now\r     exp = now + 86400\r     payload = {\r     access_key: $app_access_key,\r     type: \"management\",\r     version: 2,\r     jti: SecureRandom.uuid,\r     iat: now.to_i,\r     nbf: now.to_i,\r     exp: exp.to_i\r }\r token = JWT.encode(payload, $app_secret, 'HS256')\r return token\r end\r \r puts generateManagementToken\r ```\r \r </Tab>\r \r <Tab id=\"test-code-4\">\r \r ```php\r <?php\r \r use Firebase\\JWT\\JWT;\r use Ramsey\\Uuid\\Uuid;\r \r $app_access_key = \"<app_access_key>\";\r $app_secret = \"<app_secret>\";\r \r $issuedAt   = new DateTimeImmutable();\r $expire     = $issuedAt->modify('+24 hours')->getTimestamp();\r \r $payload = [\r     'access_key' => $app_access_key,\r     'type' => 'management',\r     'version' => 2,\r     'jti' =>  Uuid::uuid4()->toString(),\r     'iat'  => $issuedAt->getTimestamp(),\r     'nbf'  => $issuedAt->getTimestamp(),\r     'exp'  => $expire,\r ];\r \r $token = JWT::encode($payload, $app_secret, 'HS256');\r ?>\r ```\r \r </Tab>\r \r <Note>\r \r **Warning**\r \r Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.\r \r </Note>\r ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/security-and-tokens"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/javascript/v2/foundation/templates-and-roles",
        "keywords": [],
        "headings": ["API reference"],
        "content": "--- title: Templates  Roles nav: 1.2 ---  ## Introduction  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              |   ## API reference  Apart   dashboard,  programmatic way  interact  templates  via [API](/server-side/v2/policy/template-object). ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/foundation/templates-and-roles"
    },
    {
        "title": "javascript-quickstart.mdx",
        "link": "/javascript/v2/guides/javascript-quickstart",
        "keywords": [],
        "headings": [
            "Overview",
            "Create a sample app locally",
            "Initialize a project",
            "Install ParcelJS & 100ms SDK",
            "Project setup",
            "Complete code example",
            "Test the app",
            "Fetch token to join the room",
            "Building step-by-step",
            "Step 1: Initialize the SDK",
            "Step 2: Initialize the HTML elements",
            "Step 3: Join/leave a room",
            "Step 4: Render video tiles for peers",
            "Step 5: Mute/unmute local tracks",
            "Step 6: Change UI based on connection state",
            "Next steps"
        ],
        "content": "--- title: JavaScript Quickstart Guide nav: 2.1 ---  ## Overview  This guide will walk   step-by-step instructions  create  video conferencing application using  100ms JavaScript SDK  test  locally   device. If  plan  use React,  check  [React quickstart](https://www.100ms.live/docs/javascript/v2/guides/react-quickstart)  well.  Please check  [basic concepts](/javascript/v2/foundation/basics) guide  understand  concepts like rooms, templates, peers, etc.  TL;DR - Try   complete example  [CodeSandbox](https://codesandbox.io/s/hms-js-quickstart-5rmes).  <Codesandbox id=\"5rmes\" />  ## Create  sample app locally  In  section,  will walk    complete code example  will enable   create  local video-conferencing application   10 minutes  test audio/video functionality along   couple   essential functionalities like mute/unmute audio  video.  We will use [ParcelJS](https://parceljs.org/getting-started/webapp/),  web application bundler  requires zero configuration. If  wish  use   library  framework,  can set   app using that.  ### Initialize  project  You can initialize  project using `npm init`  `yarn init`. While initializing  project  can enter  details   project   wish.  ### Install ParcelJS & 100ms SDK  Then, install ParcelJS  100ms SDK   app like below  -   using yarn:     ```bash section=InstallingTheDependencies sectionIndex=1     yarn add --dev parcel     yarn add @100mslive/hms-video-store     ``` -   using npm:     ```bash section=InstallingTheDependencies sectionIndex=2     npm install --save-dev parcel     npm install @100mslive/hms-video-store     ```  ### Project setup  Now   dependencies  installed,  create basic source files   video-conferencing application. Let's create  files  folders    manner:  ``` 100ms-test   - index.html   - src     - index.js     - styles.css ```  ### Complete code example  Next, copy   code snippets  paste    respective files created    step.  <Tabs id=\"complete-code\" items={['JS', 'HTML', 'CSS']} />  <Tab id=\"complete-code-0\">  ```jsx:index.js section=completeCodeExample sectionIndex=1 tab=JS import {     HMSReactiveStore,     selectIsLocalAudioEnabled,     selectIsLocalVideoEnabled,     selectPeers,     selectIsConnectedToRoom }  \"@100mslive/hms-video-store\";  // Initialize HMS Store const hmsManager = new HMSReactiveStore(); hmsManager.triggerOnSubscribe(); const hmsStore = hmsManager.getStore(); const hmsActions = hmsManager.getActions();  // HTML elements const form = document.getElementById(\"join\"); const joinBtn = document.getElementById(\"join-btn\"); const conference = document.getElementById(\"conference\"); const peersContainer = document.getElementById(\"peers-container\"); const leaveBtn = document.getElementById(\"leave-btn\"); const muteAudio = document.getElementById(\"mute-aud\"); const muteVideo = document.getElementById(\"mute-vid\"); const controls = document.getElementById(\"controls\");  // Joining  room joinBtn.onclick = () => {     hmsActions.join({         userName: document.getElementById(\"name\").value,         authToken: document.getElementById(\"token\").value     }); };  // Leaving  room function leaveRoom() {     hmsActions.leave(); }  // Cleanup  user refreshes  tab  navigates away window.onunload = window.onbeforeunload = leaveRoom; leaveBtn.onclick = leaveRoom;  // Helper function  create html elements function createElementWithClass(tag, className) {     const newElement = document.createElement(tag);     newElement.className = className;     return newElement; }  // Render  single peer function renderPeer(peer) {     const peerTileDiv = createElementWithClass(\"div\", \"peer-tile\");     const videoElement = createElementWithClass(\"video\", \"peer-video\");     const peerTileName = createElementWithClass(\"span\", \"peer-name\");     videoElement.autoplay = true;     videoElement.muted = true;     videoElement.playsinline = true;     peerTileName.textContent = peer.name;     hmsActions.attachVideo(peer.videoTrack, videoElement);     peerTileDiv.append(videoElement);     peerTileDiv.append(peerTileName);     return peerTileDiv; }  // display  tile   peer   peer list function renderPeers() {     peersContainer.innerHTML = \"\";     const peers = hmsStore.getState(selectPeers);      peers.forEach((peer) => {          (peer.videoTrack) {             peersContainer.append(renderPeer(peer));         }     }); }  // Reactive state - renderPeers  called whenever    change   peer-list hmsStore.subscribe(renderPeers, selectPeers);   // Mute  unmute audio muteAudio.onclick = () => {     const audioEnabled = !hmsStore.getState(selectIsLocalAudioEnabled);     hmsActions.setLocalAudioEnabled(audioEnabled);     muteAudio.textContent = audioEnabled ? \"Mute\" : \"Unmute\"; };  // Mute  unmute video muteVideo.onclick = () => {     const videoEnabled = !hmsStore.getState(selectIsLocalVideoEnabled);     hmsActions.setLocalVideoEnabled(videoEnabled);     muteVideo.textContent = videoEnabled ? \"Hide\" : \"Unhide\";     // Re-render video tile     renderPeers(); };  // Showing  required elements  connection/disconnection function onConnection(isConnected) {      (isConnected) {         form.classList.add(\"hide\");         conference.classList.remove(\"hide\");         leaveBtn.classList.remove(\"hide\");         controls.classList.remove(\"hide\");     } else {         form.classList.remove(\"hide\");         conference.classList.add(\"hide\");         leaveBtn.classList.add(\"hide\");         controls.classList.add(\"hide\");     } }  // Listen   connection state hmsStore.subscribe(onConnection, selectIsConnectedToRoom); ```  </Tab>  <Tab id=\"complete-code-1\">  ```html:index.html section=completeCodeExample sectionIndex=1 tab=HTML <!DOCTYPE html> <html>   <head>     <title>Quickstart JS</title>     <link rel=\"stylesheet\" href=\"src/styles.css\" />     <meta charset=\"UTF-8\" />   </head>    <body>     <header>       <img class=\"logo\" src=\"https://www.100ms.live/assets/logo.svg\" />       <button id=\"leave-btn\" class=\"btn-danger hide\">Leave Room</button>     </header>     <form id=\"join\">       <h2>Join Room</h2>       <div class=\"input-container\">         <input id=\"name\" type=\"text\" name=\"username\" placeholder=\"Your name\" />       </div>       <div class=\"input-container\">         <input id=\"token\" type=\"text\" name=\"token\" placeholder=\"Auth token\" />       </div>       <button type=\"button\" class=\"btn-primary\" id=\"join-btn\">         Join       </button>     </form>      <div id=\"conference\" class=\"conference-section hide\">       <h2>Conference</h2>        <div id=\"peers-container\"></div>     </div>      <div id=\"controls\" class=\"control-bar hide\">       <button id=\"mute-aud\" class=\"btn-control\">Mute</button>       <button id=\"mute-vid\" class=\"btn-control\">Hide</button>     </div>      <script type=\"module\" src=\"src/index.js\"></script>   </body> </html> ```  </Tab>  <Tab id=\"complete-code-2\">  ```css:styles.css section=completeCodeExample sectionIndex=1 tab=CSS * {     margin: 0;     padding: 0;     box-sizing: border-box;   }    body {     font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,       Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;     background-color: #263238;     color: white;   }    h1,   h2,   h3,   h4,   h5 {     font-weight: normal;   }    header {     padding: 10px;     display: flex;     align-items: end;     justify-content: space-between;   }    .btn-danger {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #f44336;     color: white;     font-family: inherit;     font-size: 14px;   }    .hide {     display: none !important;   }    form {     max-width: 450px;     margin: 30px auto;     box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);     border-radius: 8px;     padding: 20px;   }    input {     display: block;     width: 100%;     border-radius: 8px;     border: 2px solid transparent;     height: 34px;     padding: 5px;     background: #37474f;     color: inherit;     font-family: inherit;   }    input::placeholder {     color: #aaa;   }    .input-container {     margin-bottom: 20px;   }    .btn-primary {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #1565c0;     color: white;     font-family: inherit;     font-size: 14px;   }    form h2,   .conference-section h2 {     margin-bottom: 20px;   }    .conference-section {     padding: 20px 30px;     max-width: 960px;     margin: 0 auto;   }    .conference-section h2 {     text-align: center;     font-size: 32px;     padding-bottom: 10px;     border-bottom: 1px solid #546e7a;   }    #peers-container {     display: grid;     grid-template-columns: repeat(3, minmax(min-content, 1fr));     place-items: center;     grid-gap: 10px;   }    .peer-video {     height: 250px;     width: 250px;     border-radius: 40%;     object-fit: cover;     margin-bottom: 10px;   }    .local.peer-video {     transform: scaleX(-1);   }    .peer-name {     font-size: 14px;     text-align: center;   }    .peer-tile {     padding: 10px;   }    .control-bar {     display: flex;     position: fixed;     bottom: 0;     width: 100%;     padding: 15px;     justify-content: center;     z-index: 10;   }    .control-bar > *:not(:first-child) {     margin-left: 8px;   }    .btn-control {     font-size: 12px;     text-transform: uppercase;     letter-spacing: 1px;     border: 2px solid #37474f;     width: 64px;     height: 64px;     border-radius: 50%;     text-align: center;     background-color: #607d8b;     box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);     color: white;   } ```  </Tab>  ### Test  app  To test  application, run  application using:  -   using Yarn `yarn parcel 100ms-test/index.html --port 3000` or -    using npm, run `npx parcel index.html --port 3000`.  This will start  development server  http://localhost:3000/. Open    browser  test  video conferencing app  created above.  #### Fetch token  join  room  To test audio/video functionality,  need  connect   100ms room; please check following steps   same:  1. Navigate   [100ms dashboard](https://dashboard.100ms.live/dashboard)  [create  account](https://dashboard.100ms.live/register)     one. 2. Use  `Video Conferencing Starter Kit`  create  room   default template assigned    test  app quickly. 3. Go  [Rooms page](https://dashboard.100ms.live/rooms)   dashboard, click   `Room Id`   room  created above,  click   `Join room` button   top right. 4. You will see two 100ms demo URLs  two roles created   deployed  starter kit;  can click   'key' icon  copy  token  use    join  room   browser.      ![Join room key](/guides/join_room_key.png)  Now,   click `join`,    able  see yourself!  <video loop=\"true\" autoplay=\"autoPlay\" controls=\"controls\" id=\"vid\" muted>     <source src=\"/docs/guides/peer-1.mp4\" type=\"video/mp4\" /> </video> <br />  You can open  app  another tab   browser  join   second peer  check audio/video transactions  two   peers.  <video loop=\"true\" autoplay=\"autoPlay\" controls=\"controls\" id=\"vid\" muted>     <source src=\"/docs/guides/peer-2.mp4\" type=\"video/mp4\" /> </video> <br />  **We   fully functional video conferencing application now** 🎉🚀  ## Building step-by-step  In  section,  walk    code does.  ### Step 1: Initialize  SDK  Let us start  initializing  libraries. We need two instances  get started:  -   An instance  [HMSStore](/api-reference/javascript/v2/interfaces/HMSStore)  holds  complete state   application   details    participants. We can also visualize  state   time using  [DevTools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) extension. -   And  instance  [HMSActions](/api-reference/javascript/v2/interfaces/HMSActions)  will help us perform actions   joining  room, muting  audio,  sending messages.  ```jsx:index.js section=InitializingTheSDK sectionIndex=1 import {   HMSReactiveStore,   selectIsLocalAudioEnabled,   selectIsLocalVideoEnabled,   selectPeers,   selectIsConnectedToRoom }  \"@100mslive/hms-video-store\";  // Initialize HMS Store const hmsManager = new HMSReactiveStore(); hmsManager.triggerOnSubscribe(); const hmsStore = hmsManager.getStore(); const hmsActions = hmsManager.getHMSActions(); ```  ### Step 2: Initialize  HTML elements  Now,  initialize   HTML elements required   tile  local  remote peers, join  leave button, mute  unmute button, etc.  <Tabs id=\"initialize-html-elements\" items={['JS', 'HTML', 'CSS']} />  <Tab id=\"initialize-html-elements-0\">  ```jsx:index.js section=InitializingTheSDK sectionIndex=2 tab=JS // HTML elements const form = document.getElementById(\"join\"); const joinBtn = document.getElementById(\"join-btn\"); const conference = document.getElementById(\"conference\"); const peersContainer = document.getElementById(\"peers-container\"); const leaveBtn = document.getElementById(\"leave-btn\"); const muteAudio = document.getElementById(\"mute-aud\"); const muteVideo = document.getElementById(\"mute-vid\"); const controls = document.getElementById(\"controls\"); ```  </Tab>  <Tab id=\"initialize-html-elements-1\">  ```html:index.html section=InitializingTheSDK sectionIndex=2 tab=HTML <!DOCTYPE html> <html>   <head>     <title>Quickstart JS</title>     <link rel=\"stylesheet\" href=\"src/styles.css\" />     <meta charset=\"UTF-8\" />   </head>    <body>     <header>       <button id=\"leave-btn\" class=\"btn-danger hide\">Leave Room</button>     </header>     <form id=\"join\">       <h2>Join Room</h2>       <div class=\"input-container\">         <input id=\"name\" type=\"text\" name=\"username\" placeholder=\"Your name\" />       </div>       <div class=\"input-container\">         <input id=\"token\" type=\"text\" name=\"token\" placeholder=\"Auth token\" />       </div>       <button type=\"button\" class=\"btn-primary\" id=\"join-btn\">         Join       </button>     </form>      <div id=\"conference\" class=\"conference-section hide\">       <h2>Conference</h2>        <div id=\"peers-container\"></div>     </div>      <div id=\"controls\" class=\"control-bar hide\">       <button id=\"mute-aud\" class=\"btn-control\">Mute</button>       <button id=\"mute-vid\" class=\"btn-control\">Hide</button>     </div>      <script type=\"module\" src=\"src/index.js\"></script>   </body> </html> ```  </Tab>  <Tab id=\"initialize-html-elements-2\">  ```css:styles.css section=InitializingTheSDK sectionIndex=2 tab=CSS * {     margin: 0;     padding: 0;     box-sizing: border-box;   }    body {     font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,       Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;     background-color: #263238;     color: white;   }    h1,   h2,   h3,   h4,   h5 {     font-weight: normal;   }    header {     padding: 10px;     display: flex;     align-items: end;     justify-content: space-between;   }    .btn-danger {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #f44336;     color: white;     font-family: inherit;     font-size: 14px;   }    .hide {     display: none !important;   }    form {     max-width: 450px;     margin: 30px auto;     box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);     border-radius: 8px;     padding: 20px;   }    input {     display: block;     width: 100%;     border-radius: 8px;     border: 2px solid transparent;     height: 34px;     padding: 5px;     background: #37474f;     color: inherit;     font-family: inherit;   }    input::placeholder {     color: #aaa;   }    .input-container {     margin-bottom: 20px;   }    .btn-primary {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #1565c0;     color: white;     font-family: inherit;     font-size: 14px;   }    form h2,   .conference-section h2 {     margin-bottom: 20px;   }    .conference-section {     padding: 20px 30px;     max-width: 960px;     margin: 0 auto;   }    .conference-section h2 {     text-align: center;     font-size: 32px;     padding-bottom: 10px;     border-bottom: 1px solid #546e7a;   }    #peers-container {     display: grid;     grid-template-columns: repeat(3, minmax(min-content, 1fr));     place-items: center;     grid-gap: 10px;   }    .peer-video {     height: 250px;     width: 250px;     border-radius: 40%;     object-fit: cover;     margin-bottom: 10px;   }    .local.peer-video {     transform: scaleX(-1);   }    .peer-name {     font-size: 14px;     text-align: center;   }    .peer-tile {     padding: 10px;   }    .control-bar {     display: flex;     position: fixed;     bottom: 0;     width: 100%;     padding: 15px;     justify-content: center;     z-index: 10;   }    .control-bar > *:not(:first-child) {     margin-left: 8px;   }    .btn-control {     font-size: 12px;     text-transform: uppercase;     letter-spacing: 1px;     border: 2px solid #37474f;     width: 64px;     height: 64px;     border-radius: 50%;     text-align: center;     background-color: #607d8b;     box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);     color: white;   } ```  </Tab>  ### Step 3: Join/leave  room  To join  room (a video call),  need  call  [join](/api-reference/javascript/v2/interfaces/HMSActions#join) method  `hmsActions`   requires us  pass  `config` object. The config object must  passed  following fields:  -   `userName`: The name   user. This   value  will  set   `peer` object   visible  everyone connected   room. -   `authToken`: A client-side token   used  authenticate  user. You can read    generate  token [here](./token).  Let's use  form  request    fields   user   application.  Let's include  way  people  leave  room  well. To leave  room,  can use  `hmsActions` [leave](/api-reference/javascript/v2/interfaces/HMSActions#leave) method. We'll set   `leave` method   called whenever  user closes  window  refreshes  tab.  <Tabs id=\"join-form\" items={['JS', 'HTML', 'CSS']} />  <Tab id=\"join-form-0\">  ```jsx:index.js section=JoiningRoom sectionIndex=1 tab=JS // Joining  room joinBtn.onclick = () => {   hmsActions.join({     userName: document.getElementById(\"name\").value,     authToken: document.getElementById(\"token\").value   }); };  // Leaving  room function leaveRoom() {   hmsActions.leave(); }  // Cleanup  user refreshes  tab  navigates away window.onunload = window.onbeforeunload = leaveRoom; leaveBtn.onclick = leaveRoom; ```  </Tab>  <Tab id=\"join-form-1\">  ```html:index.html section=JoiningRoom sectionIndex=1 tab=HTML <!DOCTYPE html> <html>   <head>     <title>Quickstart JS</title>     <link rel=\"stylesheet\" href=\"src/styles.css\" />     <meta charset=\"UTF-8\" />   </head>    <body>     <header>       <button id=\"leave-btn\" class=\"btn-danger hide\">Leave Room</button>     </header>     <form id=\"join\">       <h2>Join Room</h2>       <div class=\"input-container\">         <input id=\"name\" type=\"text\" name=\"username\" placeholder=\"Your name\" />       </div>       <div class=\"input-container\">         <input id=\"token\" type=\"text\" name=\"token\" placeholder=\"Auth token\" />       </div>       <button type=\"button\" class=\"btn-primary\" id=\"join-btn\">         Join       </button>     </form>      <script type=\"module\" src=\"src/index.js\"></script>   </body> </html> ```  </Tab>  <Tab id=\"join-form-2\">  ```css:styles.css section=JoiningRoom sectionIndex=1 tab=CSS * {     margin: 0;     padding: 0;     box-sizing: border-box;   }    body {     font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,       Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;     background-color: #263238;     color: white;   }    h1,   h2,   h3,   h4,   h5 {     font-weight: normal;   }    header {     padding: 10px;     display: flex;     align-items: end;     justify-content: space-between;   }    .btn-danger {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #f44336;     color: white;     font-family: inherit;     font-size: 14px;   }    .hide {     display: none !important;   }    form {     max-width: 450px;     margin: 30px auto;     box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);     border-radius: 8px;     padding: 20px;   }    input {     display: block;     width: 100%;     border-radius: 8px;     border: 2px solid transparent;     height: 34px;     padding: 5px;     background: #37474f;     color: inherit;     font-family: inherit;   }    input::placeholder {     color: #aaa;   }    .input-container {     margin-bottom: 20px;   }    .btn-primary {     border: 1px solid transparent;     border-radius: 4px;     padding: 6px 14px;     background-color: #1565c0;     color: white;     font-family: inherit;     font-size: 14px;   } ```  </Tab>  ### Step 4: Render video tiles  peers  Let us next add  way  show  tile  every participant   room. We'll need  list  peers connected   room.  -   We will use  [attachVideo](/api-reference/javascript/v2/interfaces/HMSActions#attach-video) method  `hmsActions`  add  video   element   track ID. -   And [selectPeers](/api-reference/javascript/v2/home/content#select-peers) selector  `hmsStore`  <Tabs id=\"render-peers\" items={['JS', 'HTML', 'CSS']} />  <Tab id=\"render-peers-0\">  ```jsx:index.js section=SubscribingToTheState sectionIndex=1 tab=JS // Helper function  create html elements function createElementWithClass(tag, className) {   const newElement = document.createElement(tag);   newElement.className = className;   return newElement; }  // Render  single peer function renderPeer(peer) {   const peerTileDiv = createElementWithClass(\"div\", \"peer-tile\");   const videoElement = createElementWithClass(\"video\", \"peer-video\");   const peerTileName = createElementWithClass(\"span\", \"peer-name\");   videoElement.autoplay = true;   videoElement.muted = true;   videoElement.playsinline = true;   peerTileName.textContent = peer.name;   hmsActions.attachVideo(peer.videoTrack, videoElement);   peerTileDiv.append(videoElement);   peerTileDiv.append(peerTileName);   return peerTileDiv; }  // Display  tile   peer   peer list function renderPeers() {   peersContainer.innerHTML = \"\";   const peers = hmsStore.getState(selectPeers);    peers.forEach((peer) => {      (peer.videoTrack) {       peersContainer.append(renderPeer(peer));     }   }); }  // Reactive state - renderPeers  called whenever    change   peer-list hmsStore.subscribe(renderPeers, selectPeers); ```  </Tab>  <Tab id=\"render-peers-1\">  ```html:index.html section=SubscribingToTheState sectionIndex=1 tab=HTML <div id=\"conference\" class=\"conference-section hide\">     <h2>Conference</h2>     <div id=\"peers-container\"></div> </div> ```  </Tab>  <Tab id=\"render-peers-2\">  ```css:styles.css section=SubscribingToTheState sectionIndex=1 tab=CSS   form h2,   .conference-section h2 {     margin-bottom: 20px;   }    .conference-section {     padding: 20px 30px;     max-width: 960px;     margin: 0 auto;   }    .conference-section h2 {     text-align: center;     font-size: 32px;     padding-bottom: 10px;     border-bottom: 1px solid #546e7a;   }    #peers-container {     display: grid;     grid-template-columns: repeat(3, minmax(min-content, 1fr));     place-items: center;     grid-gap: 10px;   }    .peer-video {     height: 250px;     width: 250px;     border-radius: 40%;     object-fit: cover;     margin-bottom: 10px;   }    .local.peer-video {     transform: scaleX(-1);   }    .peer-name {     font-size: 14px;     text-align: center;   }    .peer-tile {     padding: 10px;   }  ```  </Tab>  ### Step 5: Mute/unmute local tracks  Right now   publishing  audio  video feed   user whenever  join  room. We may want  allow  user  mute/unmute   tracks -  audio  video.  Let's add 2 buttons   bottom   page  call  [setLocalAudioEnabled](/api-reference/javascript/v2/interfaces/HMSActions#set-local-audio-enabled) method  `hmsActions`  mute/unmute  local audio tracks  [setLocalVideoEnabled](/api-reference/javascript/v2/interfaces/HMSActions#set-local-video-enabled) method  `hmsActions`  mute/unmute  local video tracks.  <Tabs id=\"mute-unmute\" items={['JS', 'HTML', 'CSS']} />  <Tab id=\"mute-unmute-0\">  ```jsx:index.js section=MutingUnmutingLocalTracks sectionIndex=1 tab=JS // Mute  unmute audio muteAudio.onclick = () => {   const audioEnabled = !hmsStore.getState(selectIsLocalAudioEnabled);   hmsActions.setLocalAudioEnabled(audioEnabled);   muteAudio.textContent = audioEnabled ? \"Mute\" : \"Unmute\"; };  // Mute  unmute video muteVideo.onclick = () => {   const videoEnabled = !hmsStore.getState(selectIsLocalVideoEnabled);   hmsActions.setLocalVideoEnabled(videoEnabled);   muteVideo.textContent = videoEnabled ? \"Hide\" : \"Unhide\";   // Re-render video tile   renderPeers(); }; ```  </Tab>  <Tab id=\"mute-unmute-1\">  ```html:index.html section=MutingUnmutingLocalTracks sectionIndex=1 tab=HTML <div id=\"controls\" class=\"control-bar\">     <button id=\"mute-aud\" class=\"btn-control\">Mute</button>     <button id=\"mute-vid\" class=\"btn-control\">Hide</button> </div> ```  </Tab>  <Tab id=\"mute-unmute-2\">  ```css:styles.css section=MutingUnmutingLocalTracks sectionIndex=1 tab=CSS   .control-bar {     display: flex;     position: fixed;     bottom: 0;     width: 100%;     padding: 15px;     justify-content: center;     z-index: 10;   }    .control-bar > *:not(:first-child) {     margin-left: 8px;   }    .btn-control {     font-size: 12px;     text-transform: uppercase;     letter-spacing: 1px;     border: 2px solid #37474f;     width: 64px;     height: 64px;     border-radius: 50%;     text-align: center;     background-color: #607d8b;     box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);     color: white;   } ```  </Tab>  ### Step 6: Change UI based  connection state  Right now,  join form will show  even    joined  room. We need  way  know  connection state   room  hide  form   connected.  We can    subscribing   store   [selectIsConnectedToRoom](/api-reference/javascript/v2/home/content#select-is-connected-to-room) selector  `hmsStore`.  ```jsx:index.js section=ChangingUIBasedOnConnectionState sectionIndex=1 // Showing  required elements  connection/disconnection function onConnection(isConnected) {    (isConnected) {     form.classList.add(\"hide\");     conference.classList.remove(\"hide\");     leaveBtn.classList.remove(\"hide\");     controls.classList.remove(\"hide\");   } else {     form.classList.remove(\"hide\");     conference.classList.add(\"hide\");     leaveBtn.classList.add(\"hide\");     controls.classList.add(\"hide\");   } }  // Listen   connection state hmsStore.subscribe(onConnection, selectIsConnectedToRoom); ```  Refer  [Test  app section](/javascript/v2/guides/javascript-quickstart#test-the-app)   test  sample app locally.  ## Next steps  Here's  complete example.  <Codesandbox id=\"5rmes\" />  There  also  version    quickstart using CDN [here](https://codepen.io/triptu/pen/dymxmoR?editors=0010).  That wraps     guide. We hope   fun. There  plenty  cool stuff  can  done   SDK,  sure  check  [features section](/javascript/v2/features/integration)   information.  You can also check   [React demo app](https://github.com/100mslive/100ms-web) built   features like screenshare, virtual background, noise suppression, audio/video playlist, etc. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/javascript-quickstart"
    },
    {
        "title": "react-quickstart.mdx",
        "link": "/javascript/v2/guides/react-quickstart",
        "keywords": [],
        "headings": [
            "Getting started",
            "Prerequisites",
            "Installing the dependencies",
            "npm",
            "yarn",
            "Initializing the SDK",
            "Concepts",
            "Joining a room",
            "Leaving the room",
            "Adding video tiles",
            "Fetching information from state",
            "Changing UI based on connection state",
            "Muting/unmuting local tracks"
        ],
        "content": "--- title: React Quickstart Guide nav: 2.2 ---  ## Getting started  Hello there! In  guide,  build  video conferencing application using  React SDK. We'll  using functional components   powerful hooks provided   SDK  build  app   can   video call   friends.  TL;DR - You can find  link   complete example  [here](https://codesandbox.io/s/100ms-react-quickstart-kh0hy?file=/src/App.jsx).  > If  get stuck   point  need help  understanding  concept,  can put  query   [Discord Channel](https://100ms.live/discord).  ### Prerequisites  To get started    familiar   basics  [React](https://reactjs.org/).  ### Installing  dependencies  ```bash section=InstallingTheDependencies sectionIndex=1 ## npm npm install --save @100mslive/react-sdk@latest ## yarn yarn add @100mslive/react-sdk@latest ```  ### Initializing  SDK  Let us start  initializing  libraries. We need  wrap  entire application  `<HMSRoomProvider />` component.  This will let us use  hooks  state  actions.  ```jsx:src/index.js section=InitializingTheSDK sectionIndex=1 import { StrictMode }  \"react\"; import ReactDOM  \"react-dom\"; import { HMSRoomProvider }  \"@100mslive/react-sdk\";  import App  \"./App\";  const rootElement = document.getElementById(\"root\"); ReactDOM.render(   <StrictMode>     <HMSRoomProvider>       <App />     </HMSRoomProvider>   </StrictMode>,   rootElement );  ```  `hmsStore` will hold  complete state   application   details    participants. We can also visualize  state   time using the [devtools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en) extension.  `hmsActions` will help us perform actions   joining  room, muting  audio/video,  sending messages.  ### Concepts  -   `Room`: When  join  conference call,  participants  said     video call `room`. -   `Peer`: A participant   video call. You   `local peer`  others  `remote peers`. -   `Track`: Media. There  two types  tracks  peer can  - audio  video.  ## Joining  room  To join  room (a video call),  need  call  `join` method  `hmsActions`   requires us  pass  `config` object. The config object must  passed  following fields:  -   `userName`: The name   user. This   value  will  set   `peer` object   visible  everyone connected   room. -   `authToken`: A client-side token   used  authenticate  user. You can read    generate  token [here](./token).  For  application, let us collect    fields   user using  form. Let's create  `JoinForm` component  add    application.  > Note: join  async   [version](../changelog/release-notes#2022-09-13)  ```jsx:src/JoinForm.jsx section=JoiningRoom sectionIndex=1 import { useState }  \"react\"; import { useHMSActions }  \"@100mslive/react-sdk\";  function JoinForm() {   const hmsActions = useHMSActions();   const [inputValues, setInputValues] = useState({     name: \"\",     token: \"\"   });    const handleInputChange = (e) => {     setInputValues((prevValues) => ({       ...prevValues,       [e.target.name]: e.target.value     }));   };    const handleSubmit = async (e) => {     e.preventDefault();     await hmsActions.join({       userName: inputValues.name,       authToken: inputValues.token     });   };    return (     <form onSubmit={handleSubmit}>       <h2>Join Room</h2>       <div className=\"input-container\">         <input           required           value={inputValues.name}           onChange={handleInputChange}           id=\"name\"           type=\"text\"           name=\"name\"           placeholder=\"Your name\"         />       </div>       <div className=\"input-container\">         <input           required           value={inputValues.token}           onChange={handleInputChange}           id=\"token\"           type=\"text\"           name=\"token\"           placeholder=\"Auth token\"         />       </div>       <button className=\"btn-primary\">Join</button>     </form>   ); }  export default JoinForm; ```  Let's add  form   `<App>` component.  ```jsx:src/App.jsx section=JoiningRoom sectionIndex=2 export default function App() {     return (         <div className=\"App\">             <JoinForm />         </div>     ); } ```  ![Join form](/guides/join-room.png)  Congratulations! **you now   audio-only conference ready  use**. If    friend join  another device,  can   nice friendly chat  them.  ## Leaving  room  Before  go ahead  adding video, let us add  way  leave  room  well. We can call  `leave` method  `hmsActions`  leave  room.  We'll set   `leave` method   called whenever  user closes  window  refreshes  tab.  ```jsx{2-8}:src/App.jsx section=LeavingTheRoom sectionIndex=1 export default function App() {   const hmsActions = useHMSActions();    useEffect(() => {     window.onunload = () => {       hmsActions.leave();     };   }, [hmsActions]);    return (     <div className=\"App\">       <JoinForm />     </div>   ); } ```  ## Adding video tiles  Let us next add  way  show  tile  every participant   room. We'll need  list  peers connected   room.  ### Fetching information  state  At  point  time  can get  list  peers with:  ```jsx section=FetchingInformation sectionIndex=1 import { useHMSStore, selectPeers }  '@100mslive/react-sdk';  function Component() {     const peers = useHMSStore(selectPeers);     return <Peers peers={peers} />; } ```  Let's take  moment  discuss  `hmsStore` works. The store maintains  state   video call  includes the list  peers,  connection state   room,  tracks, track states, etc. We can use \"selectors\"  return  slice   state  get  data piece  interested in.  The `hmsStore`  also reactive,  means  component using  HMSStore hook will re-render   slice   state,  listens to, changes. This allows us  write [declarative](https://en.wikipedia.org/wiki/Declarative_programming) code.  Let us now create  `Conference` component  will render  list  peers. We'll get  peers   store  render them. Our component will get rerendered   list  peers changes.  ```jsx:src/Conference.jsx section=FetchingInformation sectionIndex=2 import { selectPeers, useHMSStore }  \"@100mslive/react-sdk\"; import React  \"react\"; import Peer  \"./Peer\";  function Conference() {   const peers = useHMSStore(selectPeers);   return (     <div className=\"conference-section\">       <h2>Conference</h2>        <div className=\"peers-container\">         {peers.map((peer) => (           <Peer key={peer.id} peer={peer} />         ))}       </div>     </div>   ); }  export default Conference; ```  For  peer,  render  `<video>` element   `<div>` element   name.  To render  video,  need  call `attachVideo` method  `hmsActions`,  accepts  `trackId`   DOM element.  But   abstracted  implementation inside `useVideo` hook  ease. This hook will return  object videoRef given  video `trackId`. The returned `videoRef` can  used  set   video element meant  display  video. The hook will take care  attaching  detaching video,  will automatically detach   video goes   view  save  bandwidth.  ```jsx:src/Peer.jsx section=FetchingInformation sectionIndex=3 import { useVideo }  \"@100mslive/react-sdk\";  function Peer({ peer }) {   const { videoRef } = useVideo({     trackId: peer.videoTrack   });   return (     <div className=\"peer-container\">       <video         ref={videoRef}         className={`peer-video ${peer.isLocal ? \"local\" : \"\"}`}         autoPlay         muted         playsInline       />       <div className=\"peer-name\">         {peer.name} {peer.isLocal ? \"(You)\" : \"\"}       </div>     </div>   ); }  export default Peer; ```  > Note  `height`  `width` CSS properties need   set   `<video>` element  render  peer's video.  > In case   seeing  remote video   step,  ensure   role  [subscribing](https://www.100ms.live/docs/javascript/v2/foundation/templates-and-roles#subscribe-strategies)     [dashboard](https://dashboard.100ms.live/dashboard) template.  ## Changing UI based  connection state  Right now,  join form shows even    joined  room. We need  way  know  connection state   room  hide  form   connected.  We can    `selectIsConnectedToRoom` selector.  ```jsx{5,8,13,17,22-26}:src/App.jsx section=ChangingUIBasedOnConnectionState sectionIndex=1 import \"./styles.css\"; import JoinForm  \"./JoinForm\"; import Conference  \"./Conference\"; import { useEffect }  \"react\"; import {   selectIsConnectedToRoom,   useHMSActions,   useHMSStore }  \"@100mslive/react-sdk\";  export default function App() {   const isConnected = useHMSStore(selectIsConnectedToRoom);   const hmsActions = useHMSActions();    useEffect(() => {     window.onunload = () => {        (isConnected) {         hmsActions.leave();       }     };   }, [hmsActions, isConnected]);    return (     <div className=\"App\">       <Header />       {isConnected ? (         <Conference />       ) : (         <JoinForm />       )}     </div>   ); }  ```  ## Muting/unmuting local tracks  Right now   publishing  audio  video feed   user whenever  join  room. We may want  allow  user  mute/unmute   tracks -  audio  video.  If  specifically need granular data like knowing  current video status  can use `selectIsLocalVideoEnabled`   audio `selectIsLocalAudioEnabled` instead.  In  case,  can use `useAVToggle` hook  will give us  current audio/video status   user  also give us functions  toggle them.  ```jsx:src/Footer.jsx section=MutingUnmutingLocalTracks sectionIndex=1 import { useAVToggle }  \"@100mslive/react-sdk\";  function Footer() {   const {     isLocalAudioEnabled,     isLocalVideoEnabled,     toggleAudio,     toggleVideo   } = useAVToggle();   return (     <div className=\"control-bar\">       <button className=\"btn-control\" onClick={toggleAudio}>         {isLocalAudioEnabled ? \"Mute\" : \"Unmute\"}       </button>       <button className=\"btn-control\" onClick={toggleVideo}>         {isLocalVideoEnabled ? \"Hide\" : \"Unhide\"}       </button>     </div>   ); }  export default Footer; ```  We fetch  current state   local audio  video  toggle  whenever  buttons  clicked.  ![Mute/Unmute](/guides/mute-unmute.gif)  And finally,  add  component   `<App>` component  render  buttons     connected   room.  ```jsx{1,19-22}:src/App.js section=MutingUnmutingLocalTracks sectionIndex=2 import Footer  './Footer';  export default function App() {   const isConnected = useHMSStore(selectIsConnectedToRoom);   const hmsActions = useHMSActions();    useEffect(() => {     window.onunload = () => {        (isConnected) {         hmsActions.leave();       }     };   }, [hmsActions, isConnected]);    return (     <div className=\"App\">       <Header />       {isConnected ? (         <>           <Conference />           <Footer />         </>       ) : (         <JoinForm />       )}     </div>   ); } ```  That wraps     guide. We hope   fun. There  plenty  cool stuff  can  done   SDK,  sure  check  [features section](/javascript/v2/features/integration)   information. -->  Here's  complete example.  <Codesandbox id=\"100ms-react-quickstart-kh0hy\" /> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/react-quickstart"
    },
    {
        "title": "svelte-quickstart.mdx",
        "link": "/javascript/v2/guides/svelte-quickstart",
        "keywords": [],
        "headings": ["Introduction", "Trying out", "Deploy", "Next steps"],
        "content": "--- title: Svelte Quickstart Guide nav: 2.3 ---  ## Introduction  We  written  SvelteKit quickstart  Github [here](https://github.com/100mslive/svelte-100ms). It details   steps towards building  app using  JS SDK.  It follows   flow   [JS Quickstart](./javascript-quickstart),   `README` file  details   steps  well  link   commit   change  done  make  easier  follow. When  open  commit  Github,    option  browse files  will allow  see  full state   repository right   commit  done. This may  helpful   following  steps  need  compare local changes vs  quickstart repository changes   time.  ## Trying out  You can also try   full code alongside  live demo  Codesandbox.  <Codesandbox id=\"github/100mslive/svelte-100ms?module=/src/routes/JoinForm.svelte,/src/routes/Conference.svelte,/src/routes/Peer.svelte,/src/routes/Video.svelte,/src/routes/Footer.svelte&runonclick=1&forcerefresh=1\" />  ## Deploy  [![Deploy  Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2F100mslive%2Fsvelte-100ms&project-name=svelte-100ms-video-call&repo-name=svelte-100ms-video-call&demo-title=Svelte%20%2B%20100ms&demo-description=A%20video%20call%20app%20built%20with%20SvelteKit%20and%20100ms&demo-url=https%3A%2F%2Fsvelte-100ms.vercel.app%2F&demo-image=https%3A%2F%2Fraw.githubusercontent.com%2F100mslive%2Fsvelte-100ms%2Fmain%2Fstatic%2Fconference.png)  You can use   link  deploy  Vercel. As part   deployment,  will   prompt  create  clone   repository    Github/Gitlab account too.  ## Next steps  Once      quickstart   main branch,  can check  [this branch](https://github.com/100mslive/svelte-100ms/tree/features)  showcases building different features  top   quickstart.  You can also try   final code  Codesandbox below.  <Codesandbox id=\"github/100mslive/svelte-100ms/tree/features?module=/src/routes/JoinForm.svelte,/src/routes/Conference.svelte,/src/routes/Peer.svelte,/src/routes/Video.svelte,/src/routes/Footer.svelte&runonclick=1&forcerefresh=1\" />  Or deploy   Vercel -  [![Deploy  Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2F100mslive%2Fsvelte-100ms%2Ftree%2Ffeatures&project-name=svelte-100ms-video-call&repo-name=svelte-100ms-video-call&demo-title=Svelte%20%2B%20100ms&demo-description=A%20video%20call%20app%20built%20with%20SvelteKit%20and%20100ms&demo-url=https%3A%2F%2Fsvelte-100ms.vercel.app%2F&demo-image=https%3A%2F%2Fraw.githubusercontent.com%2F100mslive%2Fsvelte-100ms%2Fmain%2Fstatic%2Fconference.png) ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/svelte-quickstart"
    },
    {
        "title": "token-endpoint.mdx",
        "link": "/javascript/v2/guides/token-endpoint",
        "keywords": [],
        "headings": [
            "Overview",
            "Get an app token using token endpoint",
            "Example client-side implementation",
            "Disable 100ms token endpoint",
            "Error Response"
        ],
        "content": "--- title: Auth Token Endpoint Guide nav: 2.5 ---  ## Overview  100ms provides  option  get `App Tokens` without setting   token generation backend service  simplify  integration journey  testing  [sample app](https://github.com/100mslive/100ms-web)  building integration  100ms.  You can find  token endpoint   [developer page](https://dashboard.100ms.live/developer)   100ms dashboard.  ![Token endpoint](/guides/token-endpoint-dashboard.png)  We recommend  move   token generation service   transition  app  production,   token endpoint service will  scale  production.  The \"Sample Apps\" built using 100ms client SDKs require  `App Token`  join  room  initiate  video conferencing  live streaming session. Please check  [Authentication  Tokens guide](./../foundation/security-and-tokens)  Please note    use  token endpoint  create  `Management Token`  server APIs. Refer   [Management Token section](./../foundation/security-and-tokens#management-token)  Authentication  Tokens guide   information.  ## Get  app token using token endpoint  You can use  token endpoint   100ms dashboard  building integration  100ms. This acts   tool enabling front-end developers  complete  integration without depending   backend developers  set   token generation backend service.  **URL format:** `<YOUR_TOKEN_ENDPOINT>api/token`  100ms token endpoint can generate  app token   inputs passed,   room_id, role, & user_id (optional -  internal user identifier   peer's user_id). You can use [jwt.io](https://jwt.io/)  validate whether  app token contains   input values.  <PostRequest title=\"https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"room_id\":\"633fcdd84208780bf665346a\",     \"role\":\"host\",     \"user_id\":\"1234\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOi***************************R3tT-Yk\",     \"msg\": \"token generated successfully\",     \"status\": 200,     \"success\": true,     \"api_version\": \"2.0.192\" } ```  </ResponseBox>  ### Example client-side implementation  You can directly add    client-side implementation, check  [sample app](https://github.com/100mslive/100ms-web/blob/f559293779c0f496cc0cd6afa9236eefde2857d8/src/services/tokenService.js#L20)  reference.  ### Disable 100ms token endpoint  Due   security concerns,    wish  use  token endpoint  generate app tokens,   can disable    [Developers page](https://dashboard.100ms.live/developer)   dashboard  disabling  option \"Disable &lt;room_id&gt;/&lt;role&gt; link format.\"  ![Disable Token endpoint](/guides/disable-token-endpoint.png)  #### Error Response  Once  disabled    dashboard,  requests  create  app token using  100ms token endpoint will throw   error:  ```json {     \"success\": false,     \"msg\": \"Generating token using  room_id  role  disabled.\",     \"api_version\": \"2.0.192\" } ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/token-endpoint"
    },
    {
        "title": "token.mdx",
        "link": "/javascript/v2/guides/token",
        "keywords": [],
        "headings": [],
        "content": "--- title: Auth Token Quickstart Guide nav: 2.4 ---  ## Create  100ms account  - Create  account  [Dashboard  100ms](https://dashboard.100ms.live/)  ![Create Account](/docs/guides/token/create-account.png)  - After   created  account    Confirm  Email , check  promotions tab   Mail Box    find it.  - Login   Dashboard   will see  option  Create  first app. Click  it.  ![Create  first app](/docs/guides/token/starter-kit-initialize-first-step.png)  - Then   see  popup  multiple starter kits, hover  one   starter kits  click `Deploy`. We will choose \"Video Conferencing\"  now.  ![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)  - In  `Choose  deployment` step, select 100ms  enter  subdomain  wish   `Subdomain` field.  ![Domain details](/docs/guides/token/domain-details.png)  - After  App  set click  \"Go  Dashboard\"  [Go Here](https://dashboard.100ms.live/dashboard)  ![Dasboard](/docs/guides/token/go-to-dashboard.png)  ## Create  room  - Go   [Room  Dashboard](https://dashboard.100ms.live/rooms)  click  \"Create Room\" , While creating  room  can specify  name, roles  enable recording.  ![Create Room](/docs/guides/token/create-room.png)  - You will now see \"Room Details\" section     `room_id` created, copy  somewhere.  ![Room Id](/docs/guides/token/room-id.png)  ## Get  temporary token  100ms dashboard  Any client connecting calling 100ms' service needs  authenticate using  auth token. In production      servers generating  tokens (see  [here](/docs/javascript/v2/foundation/security-and-tokens)),    quick start  can use  dashboard  create  token  you. The token will expire  24 hours     hard-coded   production app.  - To get  temporary token click  \"Join room\" button.  ![Join Room](/docs/guides/token/join-room.png)  - In  popup  shows  click  icon   key shape next   role  want  join as.  ![Copy Token](/docs/guides/token/copy-token.png)  The token will  copied   clipboard. Use  along   `room_id`  proceed   quickstart guide. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/token"
    },
    {
        "title": "useful-selectors.mdx",
        "link": "/javascript/v2/guides/useful-selectors",
        "keywords": [],
        "headings": [
            "Am I connected to the Room?",
            "Am I in the Preview?",
            "How many people have joined the room?",
            "Who all are in my room?",
            "What is my current state of room?",
            "How do I know if my mic/video is on?",
            "How do I know the status of remote mic/video status?",
            "How do I get the video stream of a user?"
        ],
        "content": "--- title: Useful Selectors nav: 2.6 ---  Here's  list  useful Selector hooks   might want  use  building  application. Before using  make sure   initialized  SDK,  can refer   [guide](/javascript/v2/guides/javascript-quickstart#initializing-the-sdk).  Selector functions  fetch  information   state   point  time,  can  anything ranging  \"how many people    room?\"  \"is  audio   not?\". The answer    questions   store.  ## Am I connected   Room?  Knowing     room     barest model information  need. `selectIsConnectedToRoom` returns  boolean flag denoting whether  joined  room. NOTE: Returns true   join, returns false   preview.  <Tabs id=\"connect\" items={['Javascript', 'React']} />  <Tab id='connect-0'>  ```js section=AmIConnectedToTheRoom sectionIndex=1 tab=JS const isConnected = hmsStore.getState(selectIsConnectedToRoom); ```  </Tab>  <Tab id='connect-1'>  ```jsx section=AmIConnectedToTheRoom sectionIndex=1 tab=React const isConnected = useHMSStore(selectIsConnectedToRoom); ```  </Tab>  ## Am I   Preview?  `selectIsInPreview` returns  boolean denoting whether  room   Preview state.  <Tabs id=\"preview\" items={['Javascript', 'React']} />  <Tab id='preview-0'>  ```js section=AmIInThePreview sectionIndex=1 tab=JS const isInPreview = hmsStore.getState(selectIsInPreview); ```  </Tab>  <Tab id='preview-1'>  ```jsx section=AmIInThePreview sectionIndex=1 tab=React const isInPreview = useHMSStore(selectIsInPreview); ```  </Tab>  ## How many people  joined  room?  `selectPeerCount` returns  number  peers inside  room. If   turned on peer list  preview,  count  include  local peer   still  preview.  <Tabs id=\"peerCount\" items={['Javascript', 'React']} />  <Tab id='peerCount-0'>  ```js section=HowManyPeopleHaveJoinedTheRoom sectionIndex=1 tab=JS const count = hmsStore.getState(selectPeerCount); ```  </Tab>  <Tab id='peerCount-1'>  ```jsx section=HowManyPeopleHaveJoinedTheRoom sectionIndex=1 tab=React const count = useHMSStore(selectPeerCount); ```   </Tab>  ## Who     room?  `selectPeers` returns   array  peers(remote peers   local peer) present   room. It will include  local peer  preview phase.  <Tabs id=\"peers\" items={['Javascript', 'React']} />  <Tab id='peers-0'>  ```js section=WhoAllAreInMyRoom sectionIndex=1 tab=JS const peers = hmsStore.getState(selectPeers); ```  </Tab>  <Tab id='peers-1'>  ```jsx section=WhoAllAreInMyRoom sectionIndex=1 tab=React const peers = useHMSStore(selectPeers); ```  </Tab>  ## What   current state  room?  What   fail  join  room? How   know   user  reconnecting? This   `selectRoomState` comes  handy,  returns   current state   room. You can refer   [ENUMS](/api-reference/javascript/v2/enums/HMSRoomState) types  reference.  <Tabs id=\"roomState\" items={['Javascript', 'React']} />  <Tab id='roomState-0'>  ```js section=WhatIsMyCurrentStateOfRoom sectionIndex=1 tab=JS const roomState = hmsStore.getState(selectRoomState); ```  </Tab>  <Tab id='roomState-1'>  ```jsx section=WhatIsMyCurrentStateOfRoom sectionIndex=1 tab=React const roomState = useHMSStore(selectRoomState); ```  </Tab>  ## How  I know   mic/video  on?  Mic/Video  turned  can lead   lot  blunders, therefore  critical  show    end-user. `selectIsLocalAudioEnabled` & `selectIsLocalVideoEnabled` helps  know   local audio/video  enabled  not.  <Tabs id=\"av\" items={['Javascript', 'React']} />  <Tab id='av-0'>  ```js section=HowDoIKnowIfMyMicVideoIsOn sectionIndex=1 tab=JS const audioOn = hmsStore.getState(selectIsLocalAudioEnabled); const videoOn = hmsStore.getState(selectIsLocalVideoEnabled); ```  </Tab>  <Tab id='av-1'>  ```jsx section=HowDoIKnowIfMyMicVideoIsOn sectionIndex=1 tab=React const audioOn = useHMSStore(selectIsLocalAudioEnabled); const videoOn = useHMSStore(selectIsLocalVideoEnabled); ```  </Tab>  ## How  I know  status  remote mic/video status?  `selectIsPeerAudioEnabled` & `selectIsPeerVideoEnabled` returns  boolean denoting  peer's Audio/Video status.  <Tabs id=\"rm\" items={['Javascript', 'React']} />  <Tab id='rm-0'>  ```js section=HowDoIKnowTheStatusOfRemoteMicVideoStatus sectionIndex=1 tab=JS const audioOn = hmsStore.getState(selectIsPeerAudioEnabled(peerId)); const videoOn = hmsStore.getState(selectIsPeerVideoEnabled(peerId)); ```  </Tab>  <Tab id='rm-1'>  ```jsx section=MicVideoStatus sectionIndex=1 tab=React const audioOn = useHMSStore(selectIsPeerAudioEnabled(peerId)); const videoOn = useHMSStore(selectIsPeerVideoEnabled(peerId)); ```  </Tab>  ## How  I get  video stream   user?  You can get video stream   user using `selectCameraStreamByPeer`  returns [HMSVideoTrack](/api-reference/javascript/v2/interfaces/HMSVideoTrack)   can use  call [attach/detach](/javascript/v2/features/render-video) actions.  <Tabs id=\"cam\" items={['Javascript', 'React']} />  <Tab id='cam-0'>  ```js section=HowDoIGetTheVideoStreamOfAUser sectionIndex=1 tab=JS const videoTrack = hmsStore.getState(selectCameraStreamByPeer(peerId)); ```  </Tab>  <Tab id='cam-1'>  ```jsx section=HowDoIGetTheVideoStreamOfAUser sectionIndex=1 tab=React const videoTrack = useHMSStore(selectCameraStreamByPeer(peerId)); ```  </Tab> ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/guides/useful-selectors"
    },
    {
        "title": "custom-audio-plugins.mdx",
        "link": "/javascript/v2/plugins/custom-audio-plugins",
        "keywords": [],
        "headings": [
            "Prerequisites",
            "Audio Plugin Interface",
            "Adding and Removing Plugins",
            "Implementation Example - Gain effect Plugin",
            "Plugin Guidelines"
        ],
        "content": "--- title: Custom Audio Plugins nav: 7.02 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  Custom audio plugins allow   hook  100ms' video lifecycle  add   audio processing pipeline right   gets sent    participants   room. This allows  various audio effects like noise suppression, reverb, echo, delay, chorus, robotic voice etc. Note   page   creating custom new plugins  using existing ones.  ## Prerequisites  -   Basic Knowledge  100ms SDK, follow  quickstart guides. -   Knowledge  [Audio nodes](https://developer.mozilla.org/en-US/docs/Web/API/AudioNode)  ## Audio Plugin Interface  The plugin needs  implement   interface post   can  added   processing pipeline   local peer's audio.  ```ts section=AudioPluginInterface sectionIndex=1 export interface HMSPluginSupportResult {     isSupported: boolean;     errType?: HMSPluginUnsupportedTypes;     errMsg?: string; }  export enum HMSPluginUnsupportedTypes {     PLATFORM_NOT_SUPPORTED = 'PLATFORM_NOT_SUPPORTED', //  particular os  browser   supported     DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED' //  particular device   supported,  example Bluetooth headphones }  interface HMSAudioPlugin {     /**      * The name  meant  uniquely specify  plugin instance. This will  used  track number  plugins      * added   track,   name   allowed twice    audio track.      */     getName(): string;      /**      * This function will  called   call  init,   used  check whether  plugin supports current      * OS, browser  audio device  not. An error object will  thrown back   user   try  use  unsupported plugin.      */     checkSupport(ctx?: AudioContext): HMSPluginSupportResult;      /**      * This function will  called   beginning  initialization  may include tasks like setting up      * variables, loading ML models etc. This can  used   plugin  ensure  prepared   time      * processAudio  called.      */     init(): Promise<void>;      /**      * @see HMSAudioPluginType below      */     getPluginType(): HMSAudioPluginType;      /**      * This function will  called   SDK  audio track   plugin needs  process.      * The reason audio context  also part   interface    recommeneded  reuse  audio context      * instead  creating new  every use - https://developer.mozilla.org/en-US/docs/Web/API/AudioContext      */     processAudioTrack(ctx: AudioContext, source: AudioNode): Promise<AudioNode>;      /**      * The plugin can implement  function  dispose   resources. It'll  called   processor instance is      *  longer needed   plugin  removed.      */     stop(): void; }  /**  * Specifies  type   plugin  transforming plugin will get  output audio node  give  resulting  * transformation. While  analyzing plugin will   passed  input node.  * For analyse plugins,  can return  source node passed  plugin.processTrack   modify anything  */ export enum HMSAudioPluginType {     TRANSFORM = 'TRANSFORM',     ANALYZE = 'ANALYZE' } ```  ## Adding  Removing Plugins  Once  plugin implementation  ready,  can  added  removed  local peer's audio track   -  <Tabs id=\"add-remove-plugin\" items={['Usage', 'CustomPlugin']} />  <Tab id='add-remove-plugin-0'>  ```js section=AddingAndRemovingPlugins sectionIndex=1 tab=Usage const myPlugin = new MyCustomPlugin(); const checkSupport = myPlugin.checkSupport(); if (checkSupport.isSupported) {     // myPlugin.init(); // optional, recommended  plugin implements it,  can show  loader    UI     const isPluginAdded = hmsStore.getState(         selectIsLocalAudioPluginPresent(myPlugin.getName());     )      (!isPluginAdded) {         hmsActions.addPluginToAudioTrack(myPlugin);     } else {         hmsActions.removePluginFromAudioTrack(myPlugin);     } } else {     console.log('plugin  supported', checkSupport.errMsg, checkSupport.errType) } ```  </Tab>  <Tab id='add-remove-plugin-1'>  ```ts section=AddingAndRemovingPlugins sectionIndex=1 tab=CustomPlugin class MyCustomPlugin implements HMSAudioPlugin {} ```  </Tab>  ## Implementation Example - Gain effect Plugin  Below   sample implementation    interface  can  used  control  overall gain (or volume)   audio.  ```ts section=ImplementationExample sectionIndex=1 class GainPlugin implements HMSAudioPlugin {     private gainNode?: GainNode;     private gainValue = 0.25;     private name = 'gain-plugin';      constructor(gainValue?: number, name?: string) {          (gainValue !== undefined) {             this.gainValue = gainValue;         }          (name) {             this.name = name;         }     }      async processAudioTrack(ctx: AudioContext, source: AudioNode) {          (!ctx) {             throw new Error('Audio context   created');         }          (!source) {             throw new Error('source   defined');         }         this.gainNode = ctx.createGain();         this.gainNode.gain.value = this.gainValue;         source.connect(this.gainNode);         return this.gainNode;     }       checkSupport() {         // This   plugin  supported.         return {             isSupported: true,         }         //  plugin   supported   browser,  can send error here.         return {             isSupported: false,             errType: HMSPluginUnsupportedTypes.PLATFORM_NOT_SUPPORTED;             errMsg: 'Error message  want  share'         }     }       init() {}      getName() {         return this.name;     }      getPluginType() {         return HMSAudioPluginType.TRANSFORM;     }      stop() {         this.gainNode?.disconnect();         this.gainNode = undefined;     } }  //  add  plugin  local audio hmsActions.addPluginToAudioTrack(new GainPlugin()); ```  ## Plugin Guidelines  -   If  plugin involves  CPU intensive task   initialising  ML model, ensure   done  part   init method.     As  bonus, ensure   plugin remembers  model initialisation across instances,   case user leaves  joins  room again     without closing  tab   see  delay  second time. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/plugins/custom-audio-plugins"
    },
    {
        "title": "custom-video-plugins.mdx",
        "link": "/javascript/v2/plugins/custom-video-plugins",
        "keywords": [],
        "headings": [
            "Prerequisites",
            "Video Plugin Interface",
            "Adding and Removing Plugins",
            "Implementation Example - Grayscale Filter",
            "Plugin Guidelines"
        ],
        "content": "--- title: Custom Video Plugins nav: 7.02 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  Custom video plugins allow   hook  100ms' video lifecycle  add   video processing pipeline right   gets sent    participants   room. This allows  super cool things like building AR Filters, adding Virtual Background, Emojifying  streams  monitoring participant engagement. Checkout  [Virtual Background](./virtual-background) docs  see  example    plugin. Note   page   creating custom new plugins  using existing ones.  ## Prerequisites  -   Basic Knowledge  100ms SDK, follow  quickstart guides. -   Knowledge  [HTML Canvas](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)  ## Video Plugin Interface  The plugin needs  implement   interface post   can  added   processing pipeline   local peer's video.  ```ts section=VideoPluginInterface sectionIndex=1 interface HMSVideoPlugin {     /**      * The name  meant  uniquely specify  plugin instance. This will  used  track number  plugins      * added   track,   name   allowed twice    video track.      */     getName(): string;      /**      * This function will  called   call  init,   used  check whether  plugin supports current      * OS  device  not. An error will  thrown back   user   try  use  unsupported plugin.      */     checkSupport(): HMSPluginSupportResult;      /**      * @deprecated. Will  deleted  future updates. Use checkSupport instead.      */     isSupported(): boolean;      /**      * This function will  called   beginning  initialization  may include tasks like setting up      * variables, loading ML models etc. This can  used   plugin  ensure  prepared   time      * processVideoFrame  called.      */     init(): Promise<void>;      /**      * @see HMSVideoPluginType below      */     getPluginType(): HMSVideoPluginType;      /**      * By default  2d rendering context  used   output canvas.   want  change   webgl use this.      * @see HMSVideoPluginCanvasContextType below      */     getContextType?(): HMSVideoPluginCanvasContextType;      /**      * This function will  called   SDK  every video frame   plugin needs  process.      * PluginFrameRate -  rate    plugin  expected  process  video frames. This   necessarily      * equal   capture frame rate. The user can specify  rate,   sdk might also change   basis of      * device type,  CPU usage.      * For  analyzing plugin,   function will  called  plugin framerate.      * For  transforming plugin,  sdk will pass   input  output  real frame rate   additional boolean      * pass. The expectation    plugin  use results  previous runs instead    complex processing      *   skipProcessing  set  true. This helps  maintaining  framerate   video  well  bringing down      * CPU usage  case  complex processing.      * @param input input canvas containing  input frame      * @param output  output canvas   contain  output frame      * @param skipProcessing use results  previous run  true      */     processVideoFrame(         input: HTMLCanvasElement,         output?: HTMLCanvasElement,         skipProcessing?: boolean     ): Promise<void>  void;      /**      * The plugin can implement  function  dispose   resources. It'll  called   processor instance is      *  longer needed   plugin  removed.      */     stop(): void; }  /**  * Specifies  type   plugin,  transforming plugin will get  output canvas  give  resulting  * transformation. While  analyzing plugin will   passed  input canvas.  */ export enum HMSVideoPluginType {     TRANSFORM = 'TRANSFORM',     ANALYZE = 'ANALYZE' }  /**  * Specifies  type  canvas rendering context.  */ export enum HMSVideoPluginCanvasContextType {     '2D' = '2d',     WEBGL = 'webgl',     'WEBGL2' = 'webgl2' }  export interface HMSPluginSupportResult {     isSupported: boolean;     errType?: HMSPluginUnsupportedTypes;     errMsg?: string; }  export enum HMSPluginUnsupportedTypes {     PLATFORM_NOT_SUPPORTED = 'PLATFORM_NOT_SUPPORTED',     DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED' } ```  ## Adding  Removing Plugins  Once  plugin implementation  ready,  can  added  removed  local peer's video track   -  <Tabs id=\"add-remove-plugin\" items={['Usage', 'CustomPlugin']} />  <Tab id='add-remove-plugin-0'>  ```js section=AddingAndRemovePlugins sectionIndex=1 tab=Usage  import { hmsActions }  './hms';  const myPlugin = new MyCustomPlugin(); const pluginSupport = hmsActions.validateAudioPluginSupport(myPlugin); if (myPlugin.isSupported) {     // myPlugin.init(); // optional, recommended  plugin implements it,  can show  loader    UI     const isPluginAdded = hmsStore.getState(         selectIsLocalVideoPluginPresent(myPlugin.getName());     )      (!isPluginAdded) {         hmsActions.addPluginToVideoTrack(myPlugin);     } else {         hmsActions.removePluginFromVideoTrack(myPlugin);     } } else{      const err = pluginSupport.errMsg;      console.error(err); } ```  </Tab>  <Tab id='add-remove-plugin-1'>  ```ts section=AddingAndRemovePlugins sectionIndex=1 tab=CustomPlugin class MyCustomPlugin implements HMSVideoPlugin {} ```  </Tab>  ## Implementation Example - Grayscale Filter  Below   sample implementation    interface  converts  local video  grayscale.  ```js section=ImplementationExample sectionIndex=1 class GrayscalePlugin {   getName() {     return \"grayscale-plugin\";   }    checkSupport() {     let result = {}  HMSPluginSupportResult;     result.isSupported = true;     return result;   }    async init() {}    getPluginType() {     return HMSVideoPluginType.TRANSFORM;   }    stop() {}    /**    * @param input {HTMLCanvasElement}    * @param output {HTMLCanvasElement}    */   processVideoFrame(input, output) {     const width = input.width;     const height = input.height;     output.width = width;     output.height = height;     const inputCtx = input.getContext(\"2d\");     const outputCtx = output.getContext(\"2d\");     const imgData = inputCtx.getImageData(0, 0, width, height);     const pixels = imgData.data;      (let  = 0;  < pixels.length;  += 4) {       const red = pixels[i];       const green = pixels[i + 1];       const blue = pixels[i + 2];       // https://en.wikipedia.org/wiki/Grayscale#Luma_coding_in_video_systems       const lightness = Math.floor(red * 0.299 + green * 0.587 + blue * 0.114);       pixels[i] = pixels[i + 1] = pixels[i + 2] = lightness;     }     outputCtx.putImageData(imgData, 0, 0);   } }  //  add  plugin  local video hmsActions.addPluginToVideoTrack(new GrayscalePlugin()); ```  > To see  complete example   plugin  use   react quickstart, please check [this repo](https://github.com/triptu/100ms-face-filters) or >  [codesandbox](https://codesandbox.io/s/github/triptu/100ms-face-filters).  ## Plugin Guidelines  -   Feel free  implement  methods outside  interface, options passed  plugin's constructor etc.  required for      users   plugin  give  interaction points. For example,  Virtual background plugin exposes  method  change      background  required. -   If  plugin involves  CPU intensive task   initialising  ML model, ensure   done  part   init method.     As  bonus, ensure   plugin remembers  model initialisation across instances,   case user leaves  joins  room again     without closing  tab   see  delay  second time. -   The `addPlugin` method takes  second parameter  control  framerate. This can  used  reduce  amount  processing      low-end devices. CPU usage   plugin   proportional   video resolution  frame rate. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/plugins/custom-video-plugins"
    },
    {
        "title": "noise-suppression.mdx",
        "link": "/javascript/v2/plugins/noise-suppression",
        "keywords": [],
        "headings": [
            "Introduction",
            "Original audio",
            "Denoised audio",
            "Supported Devices/SampleRate",
            "Pre-requisites",
            "Import plugin",
            "Instantiate Noise Suppression",
            "Interfaces",
            "Check if plugin is supported",
            "Init(Optional)",
            "Add and Remove Background Noise Suppression",
            "Enable/disable background noise suppression"
        ],
        "content": "--- title: Noise Suppression nav: 7.1 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  ## Introduction  Background noise always rears  ugly head  live streaming outside,  site,    untreated setting. Sounds can ruin anyone's listening  watching experience, whether   passing cars, construction noise,  mechanical whirs. Noise suppression plugin helps  eliminating one’s background sound. This  trained  removing babble noise, car noise  street noise. This guide provides  overview  usage   noise suppression plugin  100ms     demo  it.  ### Original audio  <audio controls>     <source src=\"/docs/audio/test-music.mp3\" type=\"audio/mpeg\" />     <source src=\"/docs/audio/test-music.ogg\" type=\"audio/ogg\" /> </audio>  ### Denoised audio  <audio controls>     <source src=\"/docs/audio/testdenoised-music.mp3\" type=\"audio/mpeg\" />     <source src=\"/docs/audio/testdenoised-music.ogg\" type=\"audio/ogg\" /> </audio>  <br /> <br />  ## Supported Devices/SampleRate  -   Noise suppression  currently  supported  web  Chrome, Brave  Edge browsers. -   Noise suppression  limited support  Firefox  bluetooth devices.  ## Pre-requisites  **Get  100ms NoiseSuppression Package**  ```bash section=GetHMSNoiseSuppressionPackage sectionIndex=1 npm install --save @100mslive/hms-noise-suppression ```  ## Import plugin  ```jsx section=ImportPlugin sectionIndex=1 import { HMSNoiseSuppressionPlugin }  '@100mslive/hms-noise-suppression'; ```  ## Instantiate Noise Suppression  This accepts durationInMs   parameter  -   `durationInMs` - (optional)It maps   audio samples bufferSize  need  process,  default   using 80ms equivalent  bufferSize=4096  ```jsx section=InstantiateNoiseSuppresion sectionIndex=1 const noiseSuppressionPlugin = new HMSNoiseSuppressionPlugin(durationInMs); ```  ## Interfaces  ### Check  plugin  supported  validateAudioPluginSupport can  used  check   browser/ input device  supported  not. This accepts plugin instance   parameter It will return True  case  plugin  supported  return error message    not.  ```jsx section=CheckIfPluginIsSupported sectionIndex=1 import { hmsActions }  './hms';  const pluginSupport = hmsActions.validateAudioPluginSupport(noiseSuppressionPlugin); if (pluginSupport.isSupported) {     console.log('Plugin  supported'); } else {     const err = pluginSupport.errMsg;     console.error(err); } ```  ### Init(Optional)  Init  used  load model  background noise suppression   first time. It takes   average ..50.. milliseconds.<br/> Calling init  handled internally  SDK   done  user,   case addPlugin call will take around 50 milliseconds   first time   less  1 milliseconds   subsequent calls. Check [this section](#start-and-stop-noise-suppression)  addPlugin API usage  ```jsx section=Init sectionIndex=1 noiseSuppressionPlugin.init(); ```  ### Add  Remove Background Noise Suppression  <Tabs id=\"plugin-code\" items={['JavaScript', 'React']} />  <Tab id='plugin-code-0'>  ```js section=AddAndRemoveBackgroundNoiseSuppresion sectionIndex=1 tab=JS import { hmsActions, hmsStore }  './hms'; import { selectIsLocalAudioPluginPresent }  '@100mslive/hms-video-store';  async function toggleNoiseSuppression() {     const isNoiseSuppressed = hmsStore.getState(         selectIsLocalAudioPluginPresent(noiseSuppressionPlugin.getName())     );     try {          (!isNoiseSuppressed) {             // add background noise suppression             await hmsActions.addPluginToAudioTrack(noiseSuppressionPlugin);         } else {             // remove background noise suppression             await hmsActions.removePluginFromAudioTrack(noiseSuppressionPlugin);         }     } catch (err) {         console.log('noise suppression failure - ', isNoiseSuppressed, err);     } } ```  </Tab>  <Tab id='plugin-code-1'>  ```jsx section=AddAndRemoveBackgroundNoiseSuppresion sectionIndex=1 tab=React import {   useHMSStore,   useHMSActions,   selectIsLocalAudioPluginPresent }  '@100mslive/hms-video-react';  function NoiseSuppression() {   const isNoiseSuppressed = useHMSStore(selectIsLocalAudioPluginPresent(noiseSuppressionPlugin.getName());   const hmsActions = useHMSActions();    const toggleNoiseSuppression = async() => {    try {      (!isNoiseSuppressed) {       // add background noise suppression       await hmsActions.addPluginToAudioTrack(noiseSuppressionPlugin);     } else {       // remove background noise suppression       await hmsActions.removePluginFromAudioTrack(noiseSuppressionPlugin);     }   } catch (err) {     console.log('noise suppression failure - ', isNoiseSuppressed, err);   }    return <Button onClick={toggleNoiseSuppression} />; } ```  </Tab>  ### Enable/disable background noise suppression  The function `setEnabled` can  used  enable/disable background noise suppression without removing  plugin  audio track. It accepts boolean   parameter.  ```jsx section=EnableDisableBackgroundNoiseSuppresion sectionIndex=1 try {     noiseSuppressionPlugin.setEnabled(true); // true/false } catch (err) {     console.log('Failed  suppress noise', err); } ``` ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/plugins/noise-suppression"
    },
    {
        "title": "virtual-background.mdx",
        "link": "/javascript/v2/plugins/virtual-background",
        "keywords": [],
        "headings": [
            "Introduction",
            "Supported Devices",
            "Basic Concepts",
            "Pre-requisites",
            "Import plugin",
            "Instantiate Virtual Background",
            "Interfaces",
            "Check if plugin is supported",
            "Init(Optional)",
            "Start and Stop Virtual Background",
            "Change Background",
            "Tuning pluginFrameRate(Optional)",
            "Recommendations For Better User Experience"
        ],
        "content": "--- title: Virtual Background nav: 7.01 ---  <Note type=\"warning\">     This feature  still  Beta. To know   report  issues, feel free  reach   us      <a href={'https://discord.com/invite/kGdmszyzq2'}>Discord</a>. </Note>  ## Introduction  Virtual background plugin helps  customising one’s background. The customising options  blurring  background  replacing    static image. This guide provides  overview  usage   virtual background plugin  100ms.  ![VirtualBackground](/docs/v2/virtual.gif)  ## Supported Devices  Virtual background  currently  supported  web  Chrome, Firefox, Brave  Edge browsers.<br/> We   extended support  Mobile browsers   release.  ## Basic Concepts  -   `blur background` - This   action   background   video  blurred. No external image  used/required. -   `image background` - This    plugin will replace  video background   image provided  user. -   `plugin load time` - The time taken  plugin  load model. This    range  3-5 seconds  first time. Subsequent loads take less  100 milliseconds.  ## Pre-requisites  **Get  100ms VirtualBackground Package**  ```bash section=GetHMSVirtualBackgroundPackage sectionIndex=1 npm install --save @100mslive/hms-virtual-background@latest ```  ## Import plugin  ```jsx section=ImportPlugin sectionIndex=1 import HMSVirtualBackgroundPlugin  '@100mslive/hms-virtual-background'; ```  ## Instantiate Virtual Background  This accepts background   parameter, It can   3 types:  -   `blur` - String - This will set  background  blur -   `image` - HTMLImageElement - This will replace  background   image provide -   `none` - String - This will remove  background effect   video  ```jsx section=InstantiateVirtualBackground sectionIndex=1 // background : {'blur'  image  'none'} const virtualBackground = new HMSVirtualBackgroundPlugin(background : {'blur'  image  'none'}); ```  ## Interfaces  ### Check  plugin  supported  validateVideoPluginSupport can  used  check   browser/input device  supported  not. It will return True  case  plugin  supported  return error message    not.  ```jsx section=CheckIfPluginIsSupported sectionIndex=1 import { hmsActions }  './hms';  const pluginSupport = hmsActions.validateVideoPluginSupport(virtualBackground); if (pluginSupport.isSupported) {     console.log('Platform  supported'); } else {     const err = pluginSupport.errMsg;     console.error(err); } ```  ### Init(Optional)  Init  used  load model  virtual background   first time. It takes   average 3-5 seconds.<br/> Calling init  handled internally  SDK   done  user,   case addPlugin call will take 3-5 seconds   first time   less  100 milliseconds   subsequent calls. Check [this section](#start-and-stop-virtual-background)  addPlugin API usage  ```jsx section=Init sectionIndex=1 virtualBackground.init(); ```  Init can also  used  user  show  loader icon  background selector component   plugin loading stage  ```jsx section=Init sectionIndex=2 virtualBackground.init().then(() => console.log('background can  changed now')); ```  ### Start  Stop Virtual Background  <Tabs id=\"plugin-code\" items={['JavaScript', 'React']} />  Check [this section](#tuning-plugin-frame-rate-optional)  use custom pluginFrameRate  <Tab id='plugin-code-0'>  ```js section=StartAndStopVirtualBackground sectionIndex=1 tab=JS import { hmsActions, hmsStore }  './hms'; import { selectIsLocalVideoPluginPresent }  '@100mslive/hms-video-store';  async function toggleVB() {     const isVirtualBackgroundEnabled = hmsStore.getState(         selectIsLocalVideoPluginPresent(virtualBackground.getName())     );     try {          (!isVirtualBackgroundEnabled) {             // Recommended value             const pluginFrameRate = 15;             // add virtual background             await hmsActions.addPluginToVideoTrack(virtualBackground, pluginFrameRate);         } else {             // remove virtual background             await hmsActions.removePluginFromVideoTrack(virtualBackground);         }     } catch (err) {         console.log('virtual background failure - ', isVirtualBackgroundEnabled, err);     } } ```  </Tab>  <Tab id='plugin-code-1'>  ```jsx section=StartAndStopVirtualBackground sectionIndex=1 tab=React import { useHMSStore, useHMSActions, selectIsLocalVideoPluginPresent }  '@100mslive/react-sdk';  function VirtualBackground() {     const isVirtualBackgroundEnabled = useHMSStore(         selectIsLocalVideoPluginPresent(virtualBackground.getName())     );     const hmsActions = useHMSActions();      const toggleVB = async () => {         try {              (!isVirtualBackgroundEnabled) {                 // Recommended value                 const pluginFrameRate = 15;                 await hmsActions.addPluginToVideoTrack(virtualBackground, pluginFrameRate);             } else {                 await hmsActions.removePluginFromVideoTrack(virtualBackground);             }         } catch (err) {             console.log('virtual background failure - ', isVirtualBackgroundEnabled, err);         }     };      return <Button onClick={toggleVB} />; } ```  </Tab>  ### Change Background  The function `setBackground` can  used  update  background  later. It accepts string  HTMLImageElement   parameter Image will get fit   video  maintaining  aspect ratio. If  aspect ratio   background image       video,  image will  cropped  fit   background.  ```jsx section=ChangeBackground sectionIndex=1 // background parameter  explained  Instantiate Virtual Background section try{   virtualBackground.setBackground(background : {'blur'  image  'none'}); }catch(err){   console.log(\"Failed  update background\", err); } ```  ### Tuning pluginFrameRate(Optional)  `pluginFrameRate`- number - pluginFrameRate helps  controlling  performance  experience  Virtual background plugin. pluginFrameRate translates   number  frames   background  detected. Higher value will use  resources (cpu/memory/battery),  making  virtual background experience smooth. Lower value will  generous  resources, while lowering  virtual background smoothness. Recommended value  15. Values higher   will  significantly improve virtual background smoothness  will  heavy  resources. For lower end devices value can    range  7-10.  ## Recommendations For Better User Experience  For enhancing  performance  virtual background plugin  recommend enabling SIMD   browser. With SIMD enabled, browsers can process multiple data points   instruction, resulting   performance boost    2x.  -   `Chrome` - Open `chrome://flags/`  browser, search  simd, enable WebAssembly SIMD support  restart. -   `Firefox`- Open `about:config`  browser, search  simd, set javascript.options.wasm_simd=true  restart. -   `Edge` - Open `about:flags`  browser, search  simd, enable WebAssembly SIMD support  restart. -   `Brave` - Open `about:flags`  browser, search  simd, enable WebAssembly SIMD support  restart. ",
        "platformName": "JavaScript",
        "objectID": "/javascript/v2/plugins/virtual-background"
    },
    {
        "title": "capture-hmsView.mdx",
        "link": "/react-native/v2/advanced-features/capture-hmsView",
        "keywords": [],
        "headings": [],
        "content": "--- title: Capture HmsView nav: 3.999 ---  The React Native SDK provides  Component `HmsView`  renders  video  screen. To capture  frame   video  can call  capture function available   reference   component. This will   asynchronous function   return  base64 string. It   android  feature.  ```js import React  'react'; import { HMSVideoViewMode }  '@100mslive/react-native-hms'; ... // hms instance acquired  build method const HmsView = hmsInstance.HmsView; const hmsViewRef:  = React.useRef()  const onPress: async () => {   const granted = await requestExternalStoragePermission(); // request  `WRITE_EXTERNAL_STORAGE` permission  saving    (granted) {     hmsViewRef?.current?.capture()       .then((base64: string) => {         //  get  base64 string       });       .catch((error: any) => console.log(error));   } },  const styles = StyleSheet.create({   hmsView: {     height: '100%',     width: '100%',   }, });  <HmsView   ref={hmsViewRef}   trackId={trackId}   scaleType={HMSVideoViewMode.ASPECT_FILL}   style={styles.hmsView}   mirror={true}   sink={true} /> ... ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/capture-hmsView"
    },
    {
        "title": "change-metadata.mdx",
        "link": "/react-native/v2/advanced-features/change-metadata",
        "keywords": [],
        "headings": ["Reading metadata", "Responding to updates", "Updating Metadata"],
        "content": "--- title: Peer Metadata Update nav: 3.993 --- Looking  persistent state  can  set   peer  updated anytime,  everyone   room? Peer metadata  it.  Metadata can  set initially   HMSConfig object  passed   join method.  This section will show   to:  1. Read Peer Metadata. 2. Respond    remote peer changes  metadata. 3. How  set  peer's metadata.  The `HMSPeer` object prior  2.2.1 contained `customerDescription`  read-only string whose value  change throughout  call.  This   replaced  `metadata`. The value  initially assigned    now can  changed   peer  owns it.  Any peer can change  metadata  themselves. Currently one peer  change another peer's metadata.  To change   metadata value  peer  call `changeMetadata`   `HMSSdk` instance.  The data may   arbitrary string though    changed  null.  ## Reading metadata To read metadata, read  metadata value   HMSPeer instance. ```js hmsInstance?.localPeer?.metadata // local  remote peer ```  ## Responding  updates Whenever  remote peer's metadata  updated  callback will  received  `onPeerUpdate`   update value will   type `HMSPeerUpdate.METADATA_CHANGED`.  ## Updating Metadata Here    peer can set   metadata   random string. In  case  string  stringified json ```js const parsedMetadata = JSON.parse(hmsInstance?.localPeer?.metadata)  // Raise Hand await hmsInstance?.changeMetadata(   JSON.stringify({     ...parsedMetadata,     isHandRaised: true,   }), ).then(d => console.log('Change Metadata Success: ', d))  .catch(e => console.log('Change Metadata Error: ', e));  // BRB await hmsInstance?.changeMetadata(   JSON.stringify({     ...parsedMetadata,     isBRBOn: true,   }), ).then(d => console.log('Change Metadata Success: ', d))  .catch(e => console.log('Change Metadata Error: ', e)); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/change-metadata"
    },
    {
        "title": "mini-view.mdx",
        "link": "/react-native/v2/advanced-features/mini-view",
        "keywords": [],
        "headings": ["Example of mini view layout"],
        "content": "--- title: Mini View nav: 3.999 ---  The React Native SDK provides  Component `HmsView`  renders  video  screen. Generally   HmsViews   rendered side  side   list  but   `mini view / main view` also known  Picture-in-Picture (PIP) within  app layout  required  pass `setZOrderMediaOverlay` prop   component. This  allow  mini view  come   main view otherwise    hidden behind  main view.  ```js import { HMSVideoViewMode }  '@100mslive/react-native-hms'; ... // hms instance acquired  build method const HmsView = hmsInstance.HmsView; const styles = StyleSheet.create({   hmsView: {     height: '100%',     width: '100%',   }, }); <HmsView   setZOrderMediaOverlay={true} //   passed true    mini view / Picture  Picture   trackId={trackId}   scaleType={HMSVideoViewMode.ASPECT_FILL}   style={styles.hmsView}   mirror={true}   sink={true} /> ... ```  ## Example  mini view layout ![MiniView](/docs/v2/mini-view.png) ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/mini-view"
    },
    {
        "title": "network-quality.mdx",
        "link": "/react-native/v2/advanced-features/network-quality",
        "keywords": [],
        "headings": [
            "Requesting/Reading a Network Quality Update in Preview",
            "Interpreting the Values",
            "Showing in the UI"
        ],
        "content": "--- title: Connection Quality nav: 3.996 ---  ![Network Icons](/docs/v2/network-icons.png)  Video/Audio conferencing   nature  data intensive operation. The 100ms SDK attempts  stabilize connections especially  subscribe degradation  is turned    template   possible  really bad connections  users will still  problems.  It can  helpful  measure  user's connection speed  joining  room  order  set expectations  decide    join  video  etc. Letting  participants know   other's connection status  also  great value addition.  Once   joined  room,  can get  network quality score    peers including yourself. You can also get current user's connection quality score   preview. The score ranges  -1  5, 5   hightest(Good Network)  0   lowest(No Network). -1 indicates  undefined state   either  score  yet  determined     determined.  > ⚠️ The downlink speed  measured    user download  file (1mb    writing)   websocket connection  established    preview.  The download will  continued     fixed number  seconds (eg: 10 seconds)   speed   interval  calculated.  The entire file may   downloaded   exceeds  timeout.  DNS time   counted  this,  throughput  measured.  ## Requesting/Reading  Network Quality Update  Preview  When creating  `HMSConfig` object  request  preview, set  `captureNetworkQualityInPreview`  `true`  measure  user's downlink network  quality.  When available,  information will  returned  `onPeerUpdate`   `HMSPreviewListener`   update type  `HMSPeerUpdate.NETWORK_QUALITY_UPDATED`. It can  retrieved    `HMSPeer` object's `networkQuality` property.  ```js import {   HMSConfig, }  '@100mslive/react-native-hms';  const config = new HMSConfig({   authToken: token,   username: userID,   captureNetworkQualityInPreview: true, });  // hms instance acquired  build method hmsInstance?.preview(config); hmsInstance?.join(config); ```  Here's  class definition  HMSNetworkQuality,    property   HMSPeer.  ```js class HMSNetworkQuality {   downlinkQuality: number; } ```  ## Interpreting  Values  `hmsInstance?.localPeer?.networkQuality?.downlinkQuality` will   value  -1  5.  * -1 -> Undefined - yet   determined   enough data  determine * 0 -> Disconnected  error  measuring score(in preview) * 1 -> Very Bad Connection * 2 -> Bad Connection * 3 -> Moderate Connection * 4 -> Good Connection * 5 -> Excellent Connection  > 0 score  preview  also mean  failure  measuring  network due  firewall block   internet otherwise looks good.  ## Showing   UI  You can show    network icon  every peer tile  show   list  peers   good connection. Feel free  checkout   code   dashboard app's implementation [here](https://github.com/100mslive/react-native-hms/tree/main/example) where  show  network bar   peer's tile  well   participant list   tooltip describing  connection state. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/network-quality"
    },
    {
        "title": "set-volume.mdx",
        "link": "/react-native/v2/advanced-features/set-volume",
        "keywords": [],
        "headings": [],
        "content": "--- title: Set Volume nav: 3.98 ---  It allows   vary  volume level   remote peer's audio track. The change  volume level   effective locally, remote peers remain unaffected. It can   called  remote audio tracks.  Suppose  remote peer   loud compared  others  can reduce  volume level  vice versa.  Volume can vary  0(min)  10(max). The default value  volume   1.0  ```js const onTrackListener = ({   peer,   track,   type, }: {   peer: HMSPeer;   track: HMSTrack;   type: HMSTrackUpdate; }) => {   if(type === HMSTrackUpdate.TRACK_ADDED && track.type === HMSTrackType.AUDIO && peer.isLocal === false){     hmsInstance?.setVolume(track, 10.0);   } }; ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/set-volume"
    },
    {
        "title": "show-audio-level.mdx",
        "link": "/react-native/v2/advanced-features/show-audio-level",
        "keywords": [],
        "headings": [
            "Getting Audio Levels for all speaking peers",
            "Active Speaker Views",
            "Dominant Speaker - the loudest speaker."
        ],
        "content": "--- title: Show Audio Levels nav: 3.99 ---  ### Getting Audio Levels   speaking peers  ```js import {   HMSUpdateListenerActions,   HMSSpeaker, }  '@100mslive/react-native-hms';  // hmsInstance obtained  build method hmsInstance?.addEventListener(HMSUpdateListenerActions.ON_SPEAKER, onSpeaker);  const onSpeaker = (data: HMSSpeaker[]) => {   data?.map((speaker: HMSSpeaker) => console.log('speaker audio level: ', speaker?.level));   }; ```   Here   properties   HMSSpeaker class:  1. level : Number -> The level   audio. It may vary  0-100. A higher value indicates  higher speaking volume. 2. hmsTrack : HMSTrack -> The audio track corresponding   speaker. It may  null   speaker   speaking loudly, leaves. 3. peer : HMSPeer -> The peer   speaking. This may  null   peer  left   update information  reached   person.    ### Active Speaker Views To maintain  active speaker view,    default view   open source advanced sample app,  need  keep track    active speakers   time. We'll  using  input  `ON_SPEAKER` listener update  mentioned    building something  attempts  show all the active speakers  minimizing re-ordering  list.    ### Dominant Speaker -  loudest speaker. The dominant speaker   speaker   loudest   given moment. There's  callback     onPeerUpdate callback  HMSUpdateListener.  ```js import {   HMSUpdateListenerActions, }  '@100mslive/react-native-hms';  // hmsInstance obtained  build method hmsInstance?.addEventListener(HMSUpdateListenerActions.ON_PEER_UPDATE, onPeerListener); ```  Here's  method signature  onPeerUpdate: `fun onPeerUpdate(type: HMSPeerUpdate, localPeer: HMSLocalPeer, remotePeers: HMSRemotePeer[], room?: HMSRoom)`   When  dominant speaker  changed,  will  updates   type:  `HMSPeerUpdate.BECAME_DOMINANT_SPEAKER` When  new person becomes  dominant speaker.  `HMSPeerUpdate.NO_DOMINANT_SPEAKER` When  current dominant speaker stops talking    one  replace them.  ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/show-audio-level"
    },
    {
        "title": "track-settings.mdx",
        "link": "/react-native/v2/advanced-features/track-settings",
        "keywords": [],
        "headings": ["maxBitrate", "maxFrameRate", "cameraFacing", "resolution"],
        "content": "--- title: Set Track Settings nav: 3.95 ---  You can customize local peer's Audio & Video track settings  creating instance  100ms SDK.   These settings   optional parameter  meant   passed   `build` function  `trackSettings` parameter    `HMSTrackSettings` object.   You can set  quality  description   Audio tracks  props like maxBitrate  trackDescription.    Similarly,  Video tracks  can use props like maxBitrate, maxFrameRate, cameraFacing, resolution  trackDescription.   ## maxBitrate Property specifies  maximum number  bits per second  allow  track.  ## maxFrameRate Frames Per Second  used  measure frame rate –  number  consecutive full-screen images   displayed  second  ## cameraFacing Property specifies  camera  open  joining. It can  toggled later on.  ```js HMSCameraFacing.FRONT HMSCameraFacing.BACK ```  ## resolution Video resolution   number  pixels contained   frame.  Video resolution determines  amount  detail   video   realistic  clear  video appears.  ```js import {   HMSSDK,   HMSAudioTrackSettings,   HMSAudioCodec,   HMSVideoTrackSettings,   HMSVideoCodec,   HMSCameraFacing,   HMSVideoResolution,   HMSTrackSettings }  '@100mslive/react-native-hms';  const getTrackSettings = () => {   let audioSettings = new HMSAudioTrackSettings({     codec: HMSAudioCodec.opus,                        maxBitrate: 32,                                   trackDescription: 'Simple Audio Track',         });     let videoSettings = new HMSVideoTrackSettings({     codec: HMSVideoCodec.VP8,                         maxBitrate: 512,                                  maxFrameRate: 25,                                 cameraFacing: HMSCameraFacing.FRONT,              trackDescription: 'Simple Video Track',           resolution: new HMSVideoResolution({height: 180, width: 320}),   });     return new HMSTrackSettings({     video: videoSettings,     audio: audioSettings,     useHardwareEchoCancellation: false // true    handled automatically   }); }  const trackSettings = getTrackSettings(); const build = await HMSSDK.build({trackSettings}); ```   Here's  sample implementation  adding track settings  initializing 100ms SDK -  ```js const getTrackSettings = () => {     let audioSettings = new HMSAudioTrackSettings({ maxBitrate: 32, trackDescription: \"Simple Audio Track\" });     let videoSettings = new HMSVideoTrackSettings({ codec: HMSVideoCodec.vp8, maxBitrate: 512, maxFrameRate: 25, cameraFacing: HMSCameraFacing.FRONT, trackDescription: \"Simple Video Track\", resolution: new HMSVideoResolution({height: 180, width: 320})});      return new HMSTrackSettings({video: videoSettings, audio: audioSettings});   }    const setupBuild = async () => {     const trackSettings = getTrackSettings();     const build = await HMSSDK.build({ trackSettings });     setInstance(build);     updateHms({hmsInstance: build});   }; ```  ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/advanced-features/track-settings"
    },
    {
        "title": "release-notes.mdx",
        "link": "/react-native/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "1.1.0 - 2022-12-16",
            "Added",
            "Deprecated",
            "Fixed",
            "1.0.0 - 2022-12-01",
            "Added",
            "Fixed",
            "0.9.94 - 2022-10-31",
            "Breaking Change",
            "Added ",
            "Fixed ",
            "0.9.93 - 2022-09-27",
            "0.9.92 - 2022-09-13",
            "0.9.91 - 2022-08-18",
            "0.9.9 - 2022-07-11",
            "0.9.8 - 2022-07-08",
            "0.9.7 - 2022-06-16",
            "0.9.6 - 2022-06-09",
            "0.9.5 - 2022-05-11",
            "0.9.4 - 2022-04-20",
            "0.9.3 - 2022-04-05",
            "0.9.2 - 2022-03-28",
            "0.9.1 - 2022-03-02",
            "0.9.0 - 2022-01-28",
            "0.8.4 - 2022-01-07",
            "0.8.3 - 2021-12-29",
            "0.8.2 - 2021-12-29",
            "0.8.1 - 2021-12-10",
            "0.8.0 - 2021-11-19",
            "Breaking",
            "Changed",
            "Added",
            "0.7.4 - 2021-11-03",
            "0.7.3 - 2021-10-29",
            "0.7.2 - 2021-10-28",
            "0.7.1 - 2021-10-27",
            "0.7.0 - 2021-10-22",
            "0.6.0 - 2021-10-15",
            "0.5.0 - 2021-09-29",
            "0.3.0 - 2021-08-31",
            "0.2.0 - 2021-08-18",
            "0.1.0 - 2021-08-09"
        ],
        "content": "--- title: Release Notes nav: 4.1 ---  ## 1.1.0 - 2022-12-16  ### Added  - Added support  Bulk Role Change    Bulk Role Change  used   want  convert  Roles   list  Roles,  another Role.    For example,  peers join  room   _Waiting_ Role  now  want  change   peers  _Viewer_ Role  use  `changeRoleOfPeersWithRoles` API.    ```js   // fetch  available Roles   room   const roles = await hmsInstance.getRoles();    // get  Host Role object   const hostRole = roles.find(role => role.name === 'host');    // get list  Roles   updated -   case \"Waiting\"  \"Guest\" Roles   const rolesToChange = roles.filter(role => role.name === 'waiting' || role.name === 'guest');    // now perform Role Change   peers  \"Waiting\"  \"Guest\" Roles   \"Host\" Role   await hmsInstance.changeRoleOfPeersWithRoles(rolesToChange, hostRole);   ```   For More Information, refer: https://www.100ms.live/docs/react-native/v2/features/change-role   - Added HMSPIPConfig  enable buttons  PIP Window  Android    Actionable buttons like Mute/Unmute Audio/Video, Leave Room  local peers can now  configured  enabling PIP Mode.   ```js   await hmsInstance?.enablePipMode({           aspectRatio: [16, 9],   //  16:9 aspect ratio           endButton: true,             videoButton: true,            audioButton: true,         });   ```   For More Information, refer: https://www.100ms.live/docs/react-native/v2/features/pip-mode   ### Deprecated  - Deprecated `changeRole` API  favour  `changeRoleOfPeer`    No change  functionality  method signature.   ### Fixed  - Corrected Speaker updates  avoiding sending  update event   peer   found  room  Android - Microphone  getting captured  Role Change   non-publishing  publishing Role  iOS - Corrected  issue   iOS  default Audio Mixer  getting created  Track Settings  passed  building  HMSSDK instance   Updated  Native Android SDK 2.5.4 & Native iOS SDK 0.5.3  Full Changelog: [1.0.0...1.1.0](https://github.com/100mslive/react-native-hms/compare/1.0.0...1.1.0)    ## 1.0.0 - 2022-12-01  #### Added - Added support  Picture  Picture mode  Android.      PIP Mode lets  user watch  room video   small window pinned   corner   screen  navigating  apps  browsing content   main screen.      Example implementation  checking device support & enabling PIP mode:         ```js     const isPIPSupported = await hmsInstance.isPipModeSupported();      const isEnabled = await hmsInstance.enablePipMode();     ```      - Added Session Metadata APIs.      Session metadata   shared state   accessible  everyone   room.         Session metadata can  used  achieve features like pinned text, spotlight(bringing  particular peer   larger stage), etc.         Example usage  setting & getting Room's Session Metadata:         ```js     // set session metadata   room     hmsInstance.setSessionMetaData(value).then(() => {        //  success,  can send  message    peers  fetch metadata       hmsInstance.sendBroadcastMessage('refresh', HMSMessageType.METADATA);     });      // peers   room can fetch current Session Metadata  time using `getSessionMetaData` method     const metadata = await hmsInstance.getSessionMetaData();     ```  - Added accessing   local peer   `HMSRoom` instance     ```js     //  can now directly access local peer  HMSRoom object returned  `ON_JOIN` event listener     const onJoinSuccess = (data: {room: HMSRoom}) => {         console.log('local peer: ', data.room.localPeer);     };     ```  - Added `HMSMessageType` enum  Message    #### Fixed  - Fixed memory leak  changing props  `HMSView` - Importing Native Android SDK dependency  Maven Central instead  Jitpack  Updated  Native Android SDK 2.5.1 & Native iOS SDK 0.4.7  Full Changelog: [0.9.94...1.0.0](https://github.com/100mslive/react-native-hms/compare/0.9.94...1.0.0)    ## 0.9.94 - 2022-10-31 #### Breaking Change - Removed sending   list   peers  `onPeerUpdate` & `onTrackUpdate` event listeners.  Now,   specific peer & track    change occurred will  sent   listeners. All peers   room can  fetched using  `getRemotePeers` & `getLocalPeer` functions.  #### Added  - Added option  use Software Decoder  Video rendering  Android devices - Added support  Joining  Muted Audio & Video  local peers - Added better Telemetrics  analytics - Added support  receiving Server-side HMSMessage - Added Maven Central repository  look  Android dependencies - Added HMSLogSettings  configure Native Android SDK logs - Added Utility functions  get  peers - Remote  Local peers &  Roles   room - Added toggle functions  enable/disable network quality updates  #### Fixed  - Corrected RTMP Streaming & Recording running status - Corrected `HMSSubscribeSettings`'s roles   subscribed - Fixed LetterBoxing (Black borders  top  bottom) observed  sharing  screen  Android devices - Corrected Preview callback track types - Removed unused setters  Local Audio & Video Track Settings  Updated  Native Android SDK 2.5.1 & Native iOS SDK 0.4.6  Full Changelog: [0.9.93...0.9.94](https://github.com/100mslive/react-native-hms/compare/0.9.93...0.9.94)   ## 0.9.93 - 2022-09-27 - Corrected params required  building HMSSDK instance - Added  ability  play local audio files  iOS devices - Added ability  share audio playing  iOS devices - Updated HMSException class. Added `canRetry` attribute - Updated  Native Android SDK 2.4.8 & Native iOS SDK 0.4.2  **Full Changelog**: [0.9.92...0.9.93](https://github.com/100mslive/react-native-hms/compare/0.9.92...0.9.93)   ## 0.9.92 - 2022-09-13 - Added ability  set track settings  building  SDK - Added capability  start screen share  iOS devices - Added  descriptive error messages  **Full Changelog**: [0.9.91...0.9.92](https://github.com/100mslive/react-native-hms/compare/0.9.91...0.9.92)   ## 0.9.91 - 2022-08-18  - Starting HLS streaming can now  done without HLSConfig object - Added ability   custom audio routing  Android - Added  ability  share audio  local files  Android - Updated permissions available  roles - Corrected properties available  `HMSException` class - Fixed  issue  exiting  Preview without joining  room   releasing camera access - Correct RTC Stats updates  Android - `minifyEnabled`  set  `true`  Android release builds - Updated  Native Android SDK 2.4.8 & Native iOS SDK 0.3.3  **Full Changelog**: [0.9.9...0.9.91](https://github.com/100mslive/react-native-hms/compare/0.9.9...0.9.91)   ## 0.9.9 - 2022-07-11  - `leave` functions fails  invoked  Reconnecting (No Internet) state - Added ability  remove logger  attaching - `changeMetadata` & `remoteMuteAllAudio` functions  now async  **Full Changelog**: [0.9.8...0.9.9](https://github.com/100mslive/react-native-hms/compare/0.9.8...0.9.9)   ## 0.9.8 - 2022-07-08 - Added resolution option  HMSRTMPConfig - Added granular error information  incorrect/missing params found  API invocations - Corrected current audio playback status  new tracks  added - Updated  Native Android SDK 2.4.4 & Native iOS SDK 0.3.2  **Full Changelog**: [0.9.7...0.9.8](https://github.com/100mslive/react-native-hms/compare/0.9.7...0.9.8)   ## 0.9.7 - 2022-06-16 - Corrected parsing  time  HMSMessage objects - Made sender peer nullable  HMSMessage. The sender will  null  messages  triggered  Server. - Updated  Native Android SDK 2.4.1 & Native iOS SDK 0.3.1  **Full Changelog**: [0.9.6...0.9.7](https://github.com/100mslive/react-native-hms/compare/0.9.6...0.9.7)  ## 0.9.6 - 2022-06-09 - Corrected HLSRecordingState updates received via room update events - Corrected return types  Browser/Server Recording & RTMP Streaming APIs  - Fixed incorrect source type  passed   tracks  - Added function & missing param details  receiving`REQUIRED_KEYS_NOT_FOUND` errors - Added `destroy` API  will de-initialize  HMSSDK instances, even  multiple instances scenarios - Added sessionId  HMSRoom class - Updated  Native Android SDK 2.3.9 & Native iOS SDK 0.3.1  ## 0.9.5 - 2022-05-11 - Added  ability  take capture video frame (screenshot)   individual video track  - Resolved circular dependency warnings - Updated HMSView params - removed `sink` & `id` keys, made `style` optional - Corrected `serverReceiveTime` param type  `HMSMessage` - Updated  Native Android SDK 2.3.7 & Native iOS SDK 0.2.11   ## 0.9.4 - 2022-04-20 - Added ability  overlay HMS Views  z-index via `setZOrderMediaOverlay`  `HmsView` [to enable Mini-view type  layouts](https://www.100ms.live/docs/react-native/v2/advanced-features/mini-view) - Added  ability  take screenshots  [individual video tiles using `screenshot`  `HmsView`](https://www.100ms.live/docs/react-native/v2/advanced-features/capture-hmsView) - Sending error callback   user denies permission  start screen-share   Android device - Updated  Native Android SDK 2.3.5 & Native iOS SDK 0.2.9   ## 0.9.3 - 2022-04-05 - Added Network Quality Reports measuring  user's connection speed - Added  ability  render local auxiliary tracks  Android - Updated  Native Android SDK 2.3.4 & Native iOS SDK 0.2.9   ## 0.9.2 - 2022-03-28 - Added `hlsRecordingConfig?: HMSHLSRecordingConfig`  allow HLS Recording  - Added `hlsRecordingState?: HMSHLSRecordingState`  `HMSRoom`  fetching  HLS Recording state   room - Added `sender: HMSPeer` & `recipient: HMSMessageRecipient` properties  `HMSMessage` - Added promise  `startScreenshare` API   clients can perform  action  screen share   android mobile device - Fixed  issue  muting audio/video   remote peer   work - Updated  Native Android SDK 2.3.4 & Native iOS SDK 0.2.8    ## 0.9.1 - 2022-03-02 - Added room update & peer update callbacks  Preview. So  joining  room,  can know  peers already   room & current room state like recording/streaming, etc - Added RTC Call Stats  show info  packet loss, bitrate, jitter, fps, resolution, etc  video tracks - Added start & stop timestamps  Server / Browser Recording & RTMP / HLS Streaming - Added streaming allowed attribute  peer's role permission - Added peer count attribute  HMSRoom object - Updated Native iOS SDK  0.2.7, Native Android SDK  2.3.1   ## 0.9.0 - 2022-01-28 - Added support  HLS Streaming - You can now start / stop / view HLS   package - Added support  Android Screenshare - From  android device,  can   screen share   meeting room - Updated API parameter types - Updated  Native iOS SDK version 0.2.6 & Native Android SDK version 2.2.8   ## 0.8.4 - 2022-01-07 - Added check  Preview  progress  invoking join - Added support React Native version 0.63  ## 0.8.3 - 2021-12-29 - Made HMSTrackSettings   optional parameter  building  HMS SDK instance  ## 0.8.2 - 2021-12-29 - Resolved  bug  Self Role Change  prevented  operation  succeed - Updated data passed  onPeerUpdate & onTrackUpdate callbacks - Made metadata   optional field  peer object - Added configuration  enable/disable  usage  Hardware Echo Cancellation  Android - Added promise callbacks  Messaging & Change Track/Role state APIs - Corrected error messages sent  SDK  ## 0.8.1 - 2021-12-10 - Added peer metadata APIs using   can build Raise Hand like features - Added Recording APIs  start / stop recording / streaming meeting room - Added set / get volume APIs  - Corrected emitting  errors  failures - Added support  custom video sources   ## 0.8.0 - 2021-11-19  #### Breaking - `build` function  HMSSDK will  create  singleton now. - `requestedBy` field   made optional  HMSChangeTrackStateRequest, HMSRemovedFromRoomNotification, HMSRoleChangeRequest. It will  nil   request originated   REST API. - `leave` function  now asynchronous. Join another room    previous leave call   completed.  #### Changed - Corrected  bug  userId    passed. - Sending full error description   error/exceptions occur. - `isMute` function  HMSTrack now returns correct status. - `HMSView`  now exported  HMSSDK class.  #### Added - Added `isPlaybackAllowed` & `setPlaybackAllowed`  Remote Audio/Video tracks. - Added `getRoom` function  HMSSDK  returns  currently joined room. Returns null   peer     room. - Added `changeTrackStateForRole` API    can mute/unmute audio/video   peers   particular Role.   ## 0.7.4 - 2021-11-03 - Catching exception  join function - Cleared iOS global variables  leave - Removed listeners  leave - Exposed type param  message functions   ## 0.7.3 - 2021-10-29 - Clearing local cache data  leaving  room - Catching exceptions thrown  join function - Added Role-based permissions checks   ## 0.7.2 - 2021-10-28 - Added isPlaybackAllowed  remote audio & video tracks  mute/unmute remote tracks locally - Added changeTrackState API  mute/unmute remote peers audio/video tracks   entire room   ## 0.7.1 - 2021-10-27 - Added mirror prop  HMSView  horizontally flip video tracks   ## 0.7.0 - 2021-10-22 - Added audio level, peer & track object  HMSSpeaker - Made package backwards compatible upto React Native version 0.63.0 - Removed Xcode 13 requirement - Updated Sample app   ## 0.6.0 - 2021-10-15 - Added aspect ratio prop  HMSView - Asking  Camera & Microphone permissions   required - Updated video tiles aspect ratio - Added horizontal pagination  sample app  improve performance   ## 0.5.0 - 2021-09-29 - Added Role-based permissions - You can now Change  Role  Remote Peers - Change Role  yourself - If   permission   can remove  peer   room - Multiple improvements  network & device usage optimization   ## 0.3.0 - 2021-08-31 - Updated  \"react-native\": \"0.65.1\"  mitigate security vulnerabilities - Example App updated - Multiple bug fixes & performance improvements   ## 0.2.0 - 2021-08-18 -   Added Support  Android! 🥳   ## 0.1.0 - 2021-08-09 The first version  100ms React Native SDK comes power-packed  support  multiple features like -  -   Join/Leave Rooms -   Mute / Unmute Audio / Video -   Switch Camera -   Chat -   Preview Screen -   Network Switch Support -   Subscribe Degradation  bad network scenarios -   Error Handling  much more.  Take    spin! 🥳 ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/changelog/release-notes"
    },
    {
        "title": "audio-mode-change.mdx",
        "link": "/react-native/v2/features/audio-mode-change",
        "keywords": [],
        "headings": ["Switch audio mode"],
        "content": "--- title: Audio Mode Change nav: 3.999 ---  This  android  API  change Audio Mode manually. The  common use-case   toggle  (in-call volume/media volume)   call volume [AudioManager.MODE_IN_COMMUNICATION] media volume [AudioManager.MODE_NORMAL]  ## Switch audio mode  ```js fun setAudioMode(audioMode: HMSAudioMode) ```  -   Types  audio mode. [Audio Modes  Android](https://developer.android.com/reference/android/media/AudioManager#MODE_IN_COMMUNICATION) -   MODE_NORMAL - Normal audio mode:  ringing   call established. (common one!) -   MODE_RINGTONE - Ringing audio mode. An incoming   signaled. -   MODE_IN_CALL - In call audio mode. A telephony call  established.(common one!) -   MODE_IN_COMMUNICATION - In communication audio mode. An audio/video chat  VoIP call  established. -   MODE_CALL_SCREENING - Call screening  progress. Call  connected  audio  accessible  call screening applications   audio use cases  still possible  invoke  method  appropriate option,  switch audio mode manually  ```js import { HMSAudioMode }  '@100mslive/react-native-hms';  hmsInstance?.setAudioMode(HMSAudioMode.MODE_IN_COMMUNICATION); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/audio-mode-change"
    },
    {
        "title": "audio-output-routing.mdx",
        "link": "/react-native/v2/features/audio-output-routing",
        "keywords": [],
        "headings": [
            "Switch audio focus to another device",
            "Adding a listener",
            "Get current focussed device",
            "Get list of audio device"
        ],
        "content": "--- title: Audio Output Routing nav: 3.9991 ---  These  android  APIs. Audio Routing can  helpful   case  user wants  switch output  device    default focussed one  SDK.  ## Switch audio focus  another device  ```js fun switchAudioOutput(audioDevice: HMSAudioDevice) ```  Types  audio routing supported.  * SPEAKER - route audio  device speaker * EARPIECE - route audio  device earpiece * WIRED - route audio  connected wired device * BLUETOOTH - route audio  connected bluetooth device * AUTOMATIC - automatic routing  invoke  method  appropriate option ,  switch  output   device  `audioDevice`   [AudioDevice] type   audio   routed.  ```js import { HMSAudioDevice }  '@100mslive/react-native-hms';  hmsInstance?.switchAudioOutput(HMSAudioDevice.EARPIECE) ```  ## Adding  listener ```js fun setAudioDeviceChangeListener(callback: Function) ``` Add  listener  get updates whenever  device  removed  attached   device. Callback function   passed   able  listen  device updates.  Callback methods :  * callback passed -  method  invoked  output device  changed. * onError listener -  method  invoked     error  switching  output device.  ```js const onAudioDeviceChangedListener = (data: {   device: string;   audioDevicesList: string[]; }) => {   //  };    hmsInstance?.setAudioDeviceChangeListener(onAudioDeviceChangedListener) ```  ## Get current focussed device  ```js async function getAudioOutputRouteType() : AudioDevice ```  invoke  method get current device type   audio output   routed.  ```js await hmsInstance?.getAudioOutputRouteType() ```  ## Get list  audio device  ```js async function getAudioDevicesList() : AudioDevice[] ```  invoke  method get list  devices type   audio output can  routed.  ```js await hmsInstance?.getAudioDevicesList() ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/audio-output-routing"
    },
    {
        "title": "audio-share.mdx",
        "link": "/react-native/v2/features/audio-share",
        "keywords": [],
        "headings": [
            "Android Setup",
            "How does audio share work on android",
            "How to stream device audio from the app",
            "How to stop audio sharing",
            "How to change mode",
            "How to get Audio Share Status",
            "iOS Setup",
            "How does audio share work on iOS",
            "How to share audio from a file",
            "How to change mic volume of different nodes",
            "How to play multiple files concurrently",
            "How to schedule multiple audio files for back-to-back playback",
            "How to pause, resume, stop playback and more",
            "How to share audio that's playing on your iPhone"
        ],
        "content": "--- title: Audio Share nav: 3.9992 ---  This feature   analog  screen capture,   audio. There may  cases   application needs  stream music   either stored   device locally     app present   device   room   peer  joined.  Examples   use cases can   FM like application   host  want  stream music  also interacting  others   room   host   gaming app   want  stream music   device   room along   regular audio track.  ## Android Setup > Note: The Audio share option currently available  Android 10  above.  ### How  audio share work  android 100ms SDK uses  [MediaProjection APIs](https://developer.android.com/guide/topics/media/av-capture#capture_audio_playback)  Android  capture  device audio  stream  along   user's regular audio track. To achieve  SDK starts  foreground service  starts capturing  device audio  mixes  bytes   data collected  mic,    stream contains  system music  mic data.  This API gives apps  ability  copy  audio  played   apps   set  usage  USAGE_MEDIA, USAGE_GAME,  USAGE_UNKNOWN. (Audio  apps like YouTube, Music, etc can  captured)  ### How  stream device audio   app  Add permission  `FOREGROUND_SERVICE` & `HMSAudioshareActivity`  manifest located  `android/app/src/main/AndroidManifest.xml`. ```js ... <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /> ...  ... <activity   android:name=\"com.reactnativehmssdk.HMSAudioshareActivity\"   android:label=\"@string/app_name\" /> ... ```  To start streaming device audio , app needs  call  `startAudioshare` async method  `HMSSDK`,  takes  one parameter   one   modes  type `HMSAudioMixingMode`    user wants  stream. This can  one    three available types - TALK_ONLY :  data captured  mic will  streamed   room TALK_AND_MUSIC: data captured  mic  well  playback audio  captured  device will  streamed   room MUSIC_ONLY:   playback audio  captured  device will  streamed   room.  Following   snippet    use this: ```js import { HMSAudioMixingMode }  '@100mslive/react-native-hms';  await hmsInstance?.startAudioshare(HMSAudioMixingMode.MUSIC_ONLY) ```  ### How  stop audio sharing To stop capturing device audio  streaming   room, call  `stopAudioshare` API.  ```js await hmsInstance?.stopAudioshare() ```  ### How  change mode To change  mode   user  streaming audio, call  `setAudioMixingMode` API  pass one   modes   `TALK_ONLY`  `TALK_AND_MUSIC`  `MUSIC_ONLY` enum available  `HMSAudioMixingMode` class.  Note  `TALK_ONLY` mode  equivalent  regular mode,   without starting  API. ```js import { HMSAudioMixingMode }  '@100mslive/react-native-hms';  await hmsInstance?.setAudioMixingMode(HMSAudioMixingMode.MUSIC_ONLY) ```  ### How  get Audio Share Status Application needs  call  `isAudioShared` method  `HMSSDK`. This method returns  boolean  will  true  incase Audioshare  currently active   used,  false  inactive state. ```js await hmsInstance?.isAudioShared() ```  ## iOS Setup > Note: Minimum iOS version required  support Audio Share  iOS 13  ### How  audio share work  iOS The audio   share goes   peers   mic channel. To  able  share audio  need  setup  sdk  use  custom audio source instead  default mic. To    pass  instance  custom audio source  `HMSAudioTrackSettings`   hmssdk instance.  ### How  share audio   file  1. You create  instance  HMSAudioFilePlayerNode   instance  HMSMicNode like below: HMSAudioFilePlayerNode required  parameter type `String`  will  use  control music player  room. ```js import { HMSAudioFilePlayerNode, HMSMicNode }  '@100mslive/react-native-hms';  const audioFilePlayerNode = new HMSAudioFilePlayerNode('audio_file_player_node'); const micNode = new HMSMicNode(); ```  2. Next,  create  instance  HMSAudioMixerSource, passing  array  nodes   created   step  like below: ```js import { HMSAudioMixerSource }  '@100mslive/react-native-hms';  const audioMixerSource = new HMSAudioMixerSource({   node: [audioFilePlayerNode, micNode], }); ```  3. Next,  pass  custom audio source   `audioSource` parameter  `HMSAudioTrackSettings`   set  hmssdk instance like so: ```js import { HMSSDK, HMSAudioTrackSettings, HMSTrackSettings }  '@100mslive/react-native-hms';  const audioSettings = = new HMSAudioTrackSettings({   ...,   maxBitrate: 32,   audioSource: audioMixerSource.toList(), });  const trackSettings = new HMSTrackSettings({   ...,   audio: audioSettings, })  const hmsInstance = await HMSSDK.build({   ...,   trackSettings, }); ``` That's   need  setup  sdk  use  custom audio source.  4. You can call `play` function  audioFilePlayerNode  play  file  local device  meeting room   file url like below: ```js new HMSAudioFilePlayerNode('audio_file_player_node')   .play(fileUrl)   .then(d => console.log('Start Audioshare Success: ', d))   .catch(e => console.log('Start Audioshare Error: ', e)); ``` Note  parameter value  HMSAudioFilePlayerNode must    define  time  initializing HMSSDK.  ### How  change mic volume  different nodes  You can use `setVolume` property  nodes  control  volume. ```js audioFilePlayerNode.setVolume(0.5) micNode.setVolume(0.9) ``` Note volume value range  0.0  1.0  ### How  play multiple files concurrently  You can pass multiple instances  audioFilePlayerNode  pass   nodes  creating audioMixerSource like so:  ```js import { HMSAudioFilePlayerNode, HMSMicNode, HMSAudioMixerSource }  '@100mslive/react-native-hms';  const backgroundMusicNode = new HMSAudioFilePlayerNode('background_music_node'); const audioFilePlayerNode = new HMSAudioFilePlayerNode('audio_file_player_node'); const micNode = new HMSMicNode();  const audioMixerSource = new HMSAudioMixerSource({   node: [backgroundMusicNode, audioFilePlayerNode, micNode], });  // follow step 3 similarly  ``` Now,  can play  looping background music  low volume   audio file    time  passing second parameter `loops`  play function  true. Like below: ```js backgroundMusicNode.play(fileUrl, true, true) audioFilePlayerNode.play(fileUrl, false, true) ``` Note default value  loops  interrupts parameter  false  ### How  schedule multiple audio files  back-to-back playback  You can set  third parameter `interrupts`  false  tell audioFilePlayerNode   interrupt  current file playback,  schedule  file   current file  finished. Like below:  ```js audioFilePlayerNode.play(url  file 1) audioFilePlayerNode.play(url  file 2, false, false) audioFilePlayerNode.play(url  file 3, false, false) ``` Note default value  loops  interrupts parameter  false  ### How  pause, resume, stop playback  more  You can use following functions  HMSAudioFilePlayerNode  pause, resume  stop playback  more. Like below:  ```js audioFilePlayerNode.pause() audioFilePlayerNode.resume() audioFilePlayerNode.stop()  const isPlaying = await audioFilePlayerNode.isPlaying() const totalPlaybackDuration = audioFilePlayerNode.duration() const currentPlaybackTime = audioFilePlayerNode.currentDuration() ```  ### How  share audio  playing   iPhone  Note: iOS allows  get access  audio playing  iOS device (for example,  another app like spotify)   broadcating  entire iPhone screen. So    work   implement screen sharing   app. You can follow along   set   [Screen Share](./screenshare)  Now    implemented  screen share feature  above. You can follow  steps  enable system audio broadcasting  sharing  screen:  1. You get  instance  HMSScreenBroadcastAudioReceiverNode  add    mixer.  ```js import { HMSScreenBroadcastAudioReceiverNode, HMSAudioMixerSource }  '@100mslive/react-native-hms';  const screenBroadcastAudioReceiverNode = new HMSScreenBroadcastAudioReceiverNode(); const audioMixerSource = new HMSAudioMixerSource({   node: [audioFilePlayerNode, micNode, screenBroadcastAudioReceiverNode], }); ``` Note:  can pass   single instance  HMSMicNode  HMSScreenBroadcastAudioReceiverNode  HMSAudioMixerSource, else  will receive  error.  Now  mixer source  set  receive audio   broadcast extension.  2. Next,  need  setup broadcast extension  send audio   main app.  Broadcast extension receives audio  playing   iOS device  processSampleBuffer function   RPBroadcastSampleHandler class. To send audio  broadcast extension  main app,  call process(audioSampleBuffer) function  HMSScreenRenderer:  ```swift override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {     ...         case RPSampleBufferType.audioApp:         _ = self.screenRenderer.process(audioSampleBuffer: sampleBuffer)         break     ... } ``` Now  broadcast extension  set   send audio   main app.  And  it. Now  custom mixer source   main app can receive  audio  broadcast extension  well. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/audio-share"
    },
    {
        "title": "auto-video-degrade.mdx",
        "link": "/react-native/v2/features/auto-video-degrade",
        "keywords": [],
        "headings": ["Responding in the app"],
        "content": "--- title: Auto Video Degrade/Restore nav: 3.94 ---  Sometimes people  bad internet connections  everyone deserves  good meeting.  When  network   slow  support audio  video conversations together,  100ms SDK can automatically turn  downloading  peer's videos,  may improve  audio quality  avoid disconnections.  If  network quality improves,  videos will  restored automatically  well.  To turn  subscribe degradation   room, open  templates   dashboard  enable   roles there.  ## Responding   app  All HMSVideoTracks, within  HMSPeer's   variable called `isDegraded`.  If `isDegraded`  true, treat     video  turned off. If  UI   changed,  video tile will appear black.  ```js const isDegraded: boolean = peer.videoTrack.isDegraded ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/auto-video-degrade"
    },
    {
        "title": "change-name.mdx",
        "link": "/react-native/v2/features/change-name",
        "keywords": [],
        "headings": ["Responding to name changes", "Changing the name"],
        "content": "--- title: Change User Name nav: 3.994 ---  Any peer can change   name    joining  room. Before joining,  name     specified  `HMSConfig`   passed  to  join method. This document shows   name can  changed  joining.  ## Responding  name changes Whenever  remote peer's name  changed  callback will  received  `onPeerUpdate`   update will   type `HMSPeerUpdate.NAME_CHANGED`. When  callback  received  UI   peer   updated  well.  ## Changing  name The peer  wants  change  name  call  following method   HMSSdk instance.  ```js const newName: string = \"new name\"  // hms instance acquired  build method await hmsInstance.changeName(newName)     .then(d => console.log('Change Name Success: ', d))     .catch(e => console.log('Change Name Error: ', e)); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/change-name"
    },
    {
        "title": "change-role.mdx",
        "link": "/react-native/v2/features/change-role",
        "keywords": [],
        "headings": ["Single Peer Role Change", "Bulk Role Change"],
        "content": "--- title: Change Role nav: 3.9 ---  `Role`   powerful concept  takes  lot  complexity away  handling permissions  supporting features like breakout rooms.   Each `HMSPeer` instance   `role` property  returns  `HMSRole` instance. You can use  property    following:  1. Check   Role  allowed  publish i.e. can  publish  video (and   resolution)? Can  publish audio? Can  share  screen? Who can  role subscribe to?     For example,  Student Role can  see  Teacher's video. This  can  discovered  checking `publishSettings`  `subscribeSettings` properties.   2. Check  actions  Role can perform. i.e can  change someone else's current Role, End  Meeting,  remove someone   room. This  can  discovered  checking  `permissions` property.   In certain scenarios,  may want  change someone's role.  Imagine  audio room  2 roles `speaker`  `listener`. Only someone   `speaker` role can publish audio   room   `listener` can  subscribe.  Now   point,  `speaker` may decide  nominate  `listener`  become  `speaker`.   This   Change Role capabilities come  play.   You may choose   either:  1. [Single Peer Role Change](#single-peer-role-change): Change  role   single peer   specified one using  `changeRoleOfPeer` API   2. [Bulk Role Change](#bulk-role-change): Change  role   peers   certain role,   specified one using  `changeRoleOfPeersWithRoles` API   ## Single Peer Role Change  To invoke  API  will need 3 parameters -  -   `forPeer`: An instance  `HMSPeer`   peer  role  want  change.  -   `toRole`: The `HMSRole` instance   target role.  -   `force`: Whether  want  change  role without asking   give   chance  accept/reject.  Note: success  mean   role  changed, just   server accepted  request  valid.    All  peers     current room  accessible via  `peers` property   `HMSRoom` instance.    A list   available roles   current room can  accessed via  `getRoles` method  `HMSSDK`.   Now    parameters  can invoke  `changeRoleOfPeer` API:  ```js import { HMSRole, HMSRemotePeer }  '@100mslive/react-native-hms';  const force = false  // instance acquired  build() method await hmsInstance.changeRoleOfPeer(peer, newRole, force) // request role change,  forced     .then(d => console.log('Change Role Success: ', d))     .catch(e => console.log('Change Role Error: ', e)); ```  If  changing role succeeds  will get  update   `HMSUpdateListener`  `ROLE_CHANGED` update type:  ```js const onPeerListener = ({     peer,     type,   }: {     peer: HMSPeer;     type: HMSPeerUpdate;   }) => {      (type === HMSPeerUpdate.ROLE_CHANGED) {         // Update  app UI here     }   }; ```  With   peer,  passed  targetPeer   `HMSPeerUpdate.ROLE_CHANGED` update type.  The `force` parameter  `changeRole`,  false,   polite request: \"Would  like  change  role  listener  speaker?\" Which can  ignored   peer. The way  works    peer will first receive  `onRoleChangeRequest` callback  `HMSUpdateListener`:   ```js // import classes import { HMSUpdateListenerActions, HMSLeaveRoomRequest }  '@100mslive/react-native-hms';  const onRoleChangeRequest = ({ requestedBy, suggestedRole }) => {     // open  promt  accept  reject  request };  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_ROLE_CHANGE_REQUEST, onRoleChangeRequest); ```  At  point,  app  show  prompt   user asking  permission  accept  deny role change.    If  user wants  accept  request,  app  invoke `acceptRoleChangeRequest`  `HMSSDK` instance:  ```js // call    accept role change else close  prompt await hmsInstance.acceptRoleChange()     .then(d => console.log('Accept change role Success: ', d))     .catch(e => console.log('Accept change role Error: ', e)); ```   Now,  peers   room will receive  `HMSPeerUpdate.ROLE_CHANGED` callback    can   necessary UI updates. Now  user becomes  speaker   audio publishing will start automatically.  Now  imagine  newly nominated speaker   behaving nicely   want  move  back   listener without  prompt. This    `force` parameter comes in.   When   set  true   party will  receive  confirmation `roleChangeRequest`  instead will straight away receive  new set  updated permissions  stop publishing.    `HMSPeerUpdate.ROLE_CHANGED` callback will still  fired    app can update  user's UI state.     ## Bulk Role Change   Bulk Role Change  used   want  convert  Roles   list  Roles,  another Role.   For example,  peers join  room   `waiting` Role  now  want  change   peers  `viewer` Role  use  `changeRoleOfPeersWithRoles` API.  It takes fewer parameters    single peer. Here   method signature.  ```js changeRoleOfPeersWithRoles = async (ofRoles: HMSRole[], toRole: HMSRole) => { ... }; ```  1. `toRole`   `HMSRole`    changed to. 2. `ofRoles`   list  `HMSRole` whose role   changed.   Note    empty list  sent  `ofRoles`,  roles will  changed. This   avoid accidentally changing roles  may   intended    bots  provide recording  streaming   roles `beam`.  Also, Bulk Role Changes  always forced i.e.  option will  given   peer  accept it,  will just  changed immediately.   Here's   method   called  change  `waiting`  `guest` roles  `host`:  ```js // fetch  available Roles   room const roles = await hmsInstance.getRoles();  // get  Host Role object const hostRole = roles.find(role => role.name === 'host');  // get list  Roles   updated -   case \"Waiting\"  \"Guest\" Roles const rolesToChange = roles.filter(role => role.name === 'waiting' || role.name === 'guest');  // now perform Role Change   peers  \"Waiting\"  \"Guest\" Roles   \"Host\" Role await hmsInstance.changeRoleOfPeersWithRoles(rolesToChange, hostRole); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/change-role"
    },
    {
        "title": "change-track-state-roles.mdx",
        "link": "/react-native/v2/features/change-track-state-roles",
        "keywords": [],
        "headings": [
            "Unmuting",
            "Check if user has permissions",
            "Example",
            "Muting/Unmuting",
            "Multiple Peers or Tracks"
        ],
        "content": "--- title: Change Track State For Roles nav: 3.92 ---  You're running  video call room  decide  someone  currently talking   talking.  You'd prefer  stay mute. Or perhaps  want  video turned   well   audio. You're looking   remote mute.  Muting can apply   audio  video.  ## Unmuting You may also decide   want  let someone else speak   currently muted. Or may want  ask someone  turn   video.  You can request people  unmute   well.  ## Check  user  permissions Can't let just anyone mute others. First  need  create  role   permissions  mute others  also  ask   unmute.  The permission  mute others  within PermissionsParams mute    check   within  HMSRole   peer  see    it.  Similarly  permission  unmute  peers  within PermissionsParams unmute.  Here's   check whether  local peer   permission  mute  unmute others:  ```js const mute: boolean = peer.role.permissions.mute; const unmute: boolean = peer.role.permissions.unmute; ```  ## Example  Imagine  room  10 people  7 listeners & 3 speakers. You want  unmute audio/video    speakers  mute audio/video    listeners.  ## Muting/Unmuting There  two APIs  muting/unmuting.  * One   works   single track (audio/video)   single peer   time. [Learn   API here.](./change-track-state)  * One  can mute multiple tracks  multiple peers. Either   role,  track source  track type   combination   above.  ## Multiple Peers  Tracks  Once   checked   caller  permissions  mute another peer's audio  video, call `hmsInstance.changeTrackStateForRoles`.  To mute audio   multiple peers  tracks:  `hmsInstance.changeTrackStateForRoles` takes four parameters  * `Mute` Boolean true   track needs   muted, false otherwise * `Type` Optional,  HMSTrackType    affected. If   source  specified,   considered  `AND operation`. If null,  track sources  affected. * `Source` Optional,  HMSTrackSource    affected. If   type  specified,   considered  `AND operation`. If null,  track sources  affected. * `Roles` Array  HMSRole optional, may   single item   array, whose tracks   affected. If null,  roles  affected.  Here's  example     check   caller  allowed  mute peers   call   mute/unmute   peers   chat.  ```js // instance acquired  build() method await hmsInstance?.changeTrackStateForRoles(true, undefined, undefined, [   hmsInstance?.knownRoles, ]).then(d => console.log('Change Track State Roles Success: ', d))   .catch(e => console.log('Change Track State Roles Error: ', e)); ``` This can   narrowed  specifying   tracks  type Audio.  Note  `HMSTrackSource.REGULAR`   peer's  audio  video  opposed  one provided  screenshare   plugin. ```js import { HMSTrackType, HMSTrackSource }  '@100mslive/react-native-hms';  // instance acquired  build() method await hmsInstance?.changeTrackStateForRoles(true, HMSTrackType.AUDIO, HMSTrackSource.REGULAR, [   hmsInstance?.knownRoles, ]).then(d => console.log('Change Track State Roles Success: ', d))   .catch(e => console.log('Change Track State Roles Error: ', e)); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/change-track-state-roles"
    },
    {
        "title": "change-track-state.mdx",
        "link": "/react-native/v2/features/change-track-state",
        "keywords": [],
        "headings": [
            "Check if user has permissions",
            "Example",
            "Mute other tracks",
            "Unmute other tracks",
            "Accept Track change request",
            "Mute all remote audio tracks "
        ],
        "content": "--- title: Change Track State nav: 3.92 ---  Changing track state   concept  allows users  mute  peers's audio / video  request unmute  peer's audio / video    required permissions   according   role.  ## Check  user  permissions  ```js const mute: boolean = peer.role.permissions.mute; const unmute: boolean = peer.role.permissions.unmute; ```  ## Example  Imagine  room  10 people  3 speakers     speak one  one. The first speaker can mute  2 speakers  start. After  point   first speaker  finished  can mute   request  speakers  unmute.  ## Mute  tracks  If    required permissions  can mute remote tracks audio / video. The track   remote peer   muted without  requests.  ```js const mute: boolean = true;  // instance acquired  build() method await hmsInstance?.changeTrackState(audioTrack  HMSTrack, mute)   .then(d => console.log('Change Track State Success: ', d))   .catch(e => console.log('Change Track State Error: ', e)); await hmsInstance?.changeTrackState(videoTrack  HMSTrack, mute)   .then(d => console.log('Change Track State Success: ', d))   .catch(e => console.log('Change Track State Error: ', e)); ```  ## Unmute  tracks  If    required permissions  can request  unmute remote tracks audio / video. If  request  accepted   remote peer ON_TRACK_UPDATE listener will get triggered.  ```js const unmute: boolean = false;  // instance acquired  build() method await hmsInstance?.changeTrackState(audioTrack  HMSTrack, unmute)   .then(d => console.log('Change Track State Success: ', d))   .catch(e => console.log('Change Track State Error: ', e)); await hmsInstance?.changeTrackState(videoTrack  HMSTrack, unmute)   .then(d => console.log('Change Track State Success: ', d))   .catch(e => console.log('Change Track State Error: ', e)); ```  ## Accept Track change request  Once  peer  adequate permissions calls change track state  unmute,  can either accept  reject  request.  ```js import { HMSUpdateListenerActions, HMSChangeTrackStateRequest }  '@100mslive/react-native-hms';  // add change track state listener hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_CHANGE_TRACK_STATE_REQUEST,   onChangeTrackStateRequest, );  // reject  accept  request const onChangeTrackStateRequest = (data: HMSChangeTrackStateRequest) => {   const requestedBy = data?.requestedBy?.name   const trackType = data?.trackType              if( trackType === 'audio' ) {     hmsInstance?.localPeer?.localAudioTrack()?.setMute(false);   } else  ( trackType === 'video' ) {       hmsInstance?.localPeer?.localVideoTrack()?.setMute(false);   } }; ```  ## Mute  remote audio tracks   If    required permissions  can mute  remote audio tracks  once.  ```js // instance acquired  build method await hmsInstance.remoteMuteAllAudio()   .then(d => console.log('Remote Mute All Audio Success: ', d))   .catch(e => console.log('Remote Mute All Audio Error: ', e)); ```",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/change-track-state"
    },
    {
        "title": "chat.mdx",
        "link": "/react-native/v2/features/chat",
        "keywords": [],
        "headings": [
            "Sending Chat Messages",
            "Broadcast Messages",
            "Group Messages",
            "Direct Messages",
            "Receiving Chat Messages",
            "Putting together a list of chat messages."
        ],
        "content": "--- title: Chat nav: 3.35 ---  What's  video without  able  send messages    too? 100ms supports chat  every video/audio room  create.  ## Sending Chat Messages  With  HMSSDK instance call different send message functions.  ### Broadcast Messages  This will  received  everyone   room.  ```js // instance acquired  build() method await hmsInstance.sendBroadcastMessage('hello everyone!') // yes   simple 😉     .then(d => console.log('Broadcast Message Success: ', d))     .catch(e => console.log('Broadcast Message Error: ', e)); ```  ### Group Messages  This will  received  every peer   part   passed  roles.  ```js // instance acquired  build() method  //  available Roles can  obtained  hmsInstance using hmsInstance.knownRoles.  //  will return  array  HMSRole   required roles can  selected   API.  await hmsInstance.sendGroupMessage('hi folks!', [role1, role2])     .then(d => console.log('Group Message Success: ', d))     .catch(e => console.log('Group Message Error: ', e)); ```  ### Direct Messages  This will   received   peer   message  sent to.  ```js // instance acquired  build() method await hmsInstance.sendDirectMessage('keep  message  secret!', peer)     .then(d => console.log('Direct Message Success: ', d))     .catch(e => console.log('Direct Message Error: ', e)); ```  ## Receiving Chat Messages  When  called hmsInstance.join(config)  join  room, add  ON_MESSAGE event listener  callback function onMessageReceived.  ```js // import HMSUpdateListenerActions,HMSMessage classes import { HMSUpdateListenerActions, HMSMessage }  '@100mslive/react-native-hms';  // instance acquired  build() method hmsInstance.addEventListener(HMSUpdateListenerActions.ON_MESSAGE, onMessageReceived);  const onMessageReceived = (message: HMSMessage) => {     // perform action }; ```  ## Putting together  list  chat messages.  The UI  completely     decide! You'll also need  hold onto   received messages   want  display history. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/chat"
    },
    {
        "title": "end-room.mdx",
        "link": "/react-native/v2/features/end-room",
        "keywords": [],
        "headings": ["Check if user has permissions", "End Room for all", "End Room Notification"],
        "content": "--- title: End Room nav: 3.8 ---  If  local peer  endRoom permission  can end  room. It's also possible  lock  room  prevent  future rejoins.  ## Check  user  permissions  ```js const endRoom: boolean = peer.role.permissions.endRoom; ```  ## End Room  all  ```js const reason = 'Host ended  room'; const lock = false; // optional parameter  // instance acquired  build() method await hmsInstance.endRoom(reason, lock)     .then(d => console.log('End Room Success: ', d))     .catch(e => console.log('End Room Error: ', e)); ```  ## End Room Notification  Once  peer  adequate permissions calls endRoom,   peers   room will receive  notification  type ON_REMOVED_FROM_ROOM   HMSLeaveRoomRequest object   data.  ```js // import classes import { HMSUpdateListenerActions, HMSLeaveRoomRequest }  '@100mslive/react-native-hms';  const onRemovedFromRoom = (data: HMSLeaveRoomRequest) => {     // redirect  home screen };  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_REMOVED_FROM_ROOM, onRemovedFromRoom); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/end-room"
    },
    {
        "title": "error-handling.mdx",
        "link": "/react-native/v2/features/error-handling",
        "keywords": [],
        "headings": [
            "HMSException Properties",
            "isTerminal",
            "description",
            "code",
            "canRetry",
            "message",
            "name",
            "action"
        ],
        "content": "--- title: Error Handling nav: 3.6 ---  When  make various function calls  HmsInstance,  may return errors  different error codes. ErrorCodes  returned   problem    recovered without app intervention  occurred.  These  returned  HMSException   onError callback   HMSUpdateListner.  ```js // import HMSUpdateListenerActions class import { HMSUpdateListenerActions, HMSException }  '@100mslive/react-native-hms';  // instance acquired  build() method hmsInstance.addEventListener(HMSUpdateListenerActions.ON_ERROR, onError);  const onError = (error: HMSException) => {      (Platform.OS === 'android') {        (data?.code === 4005 || data?.code === 1003) {         destroy();       }     } else {        (data?.code === 2000) {         destroy();       }     } }; ``` ## HMSException Properties  ### isTerminal  The isTerminal property denotes wether error  caused  current session  terminate   app will need  call join   reconnect.   ### description  The description property denotes    source   error.  ### code  The code property denotes error code   unique identifier   error.  ### canRetry  It   `iOS`  property. The canRetry property denotes wether app can call join     configuration   used before. The value  false  cases like token expiring  room getting locked. You can use  property  implementing infinite retry   app.  ### message  It   `android`  property. The message property denotes error information.  ### name  It   `android`  property. The name property denotes error name.  ### action  It   `android`  property. The action property tells      error occurs. For example `SEND_ALL_REQUIRED_KEYS` means    sent  required key   API call  Following   different error codes   returned   callback . Before returning  error code,  retries  errors (whichever  possible).  | **Error Code**  **Cause   error**                                                                                                               **Action   taken**                                                                                              | | :-------------  :----------------------------------------------------------------------------------------------------------------------------------  :------------------------------------------------------------------------------------------------------------------ | | **1003**        Websocket disconnected - Happens due  network issues                                                                               Mention user  check  network connection  try    time.                                        | | **2002**        Invalid Endpoint URL                                                                                                                 Check  endpoint provided  calling `join`  `HMSSDK`.                                                       | | **2003**        Endpoint   reachable                                                                                                            Mention user  check  network connection  try    time.                                        | | **2004**        Token    proper JWT format                                                                                                    The token passed  calling `join`    correct format. Retry getting  new token.                          | | **3001**        Cant Access Capture Device                                                                                                           Ask user  check permission granted  audio/video capture devices.                                                | | **3002**        Capture Device   Available                                                                                                      Ask user  check   audio/video capture device  connected  not.                                            | | **3003**        Capture device   use    application.                                                                                  Show notification  user mentioning   capturing device  used    application currently.         | | **3008**        Browser  thrown  auto-play exception.                                                                                           Show notification  user mentioning   browser blocked auto-play.                                            | | **3012**        [BLUETOOTH_CONNECT](https://developer.android.com/reference/android/Manifest.permission#BLUETOOTH_CONNECT) permission   given.  Add  BLUETOOTH_CONNECT permission   app  request   runtime since   dangerous level permission. | | **3013**        [BLUETOOTH](https://developer.android.com/reference/android/Manifest.permission#BLUETOOTH) permission   given.                  Add  BLUETOOTH permission   app.                                                                           | | **4001**        WebRTC error                                                                                                                         Some webRTC error  occurred. Need  logs  debug.                                                            | | **4002**        WebRTC error                                                                                                                         Some webRTC error  occurred. Need  logs  debug.                                                            | | **4003**        WebRTC error                                                                                                                         Some webRTC error  occurred. Need  logs  debug.                                                            | | **4004**        WebRTC error                                                                                                                         Some webRTC error  occurred. Need  logs  debug.                                                            | | **4005**        ICE Connection Failed due  network issue                                                                                           Mention user  check  network connection  try    time.                                        | | **5001**        Trying  join  room   already joined                                                                                        Trying  join  already joined room.                                                                              | | **6002**        webRTC Error: Error  renegotiating                                                                                              Please try again.                                                                                                   | | **40101**       Token Error: Invalid Access Key                                                                                                      Access Key provided   token  wrong.                                                                          | | **40102**       Token Error: Invalid Room Id                                                                                                         RoomID provided   token  wrong.                                                                              | | **40103**       Token Error: Invalid Auth Id                                                                                                         AuthID provided   token  wrong.                                                                              | | **40104**       Token Error: Invalid App Id                                                                                                          App ID provided   token  wrong.                                                                              | | **40105**       Token Error: Invalid Customer Id                                                                                                     Customer Id provided   token  wrong.                                                                         | | **40107**       Token Error: Invalid User Id                                                                                                         User ID provided   token  wrong.                                                                             | | **40108**       Token Error: Invalid Role                                                                                                            The role provided   token  wrong.                                                                            | | **40109**       Token Error: Bad JWT Token                                                                                                           Bad JWT Token.                                                                                                      | | **40100**       Generic Error                                                                                                                        Need  debug   logs.                                                                                    | | **40001**       Invalid Room                                                                                                                         Room ID provided  fetching  token   invalid room.                                                       | | **40002**       Room Mismatched  Token                                                                                                           Room ID provided  fetching  token   match.                                                           | | **40004**       Peer already joined                                                                                                                  Peer   trying  join  already joined  room.                                                             | | **41001**       Peer  gone                                                                                                                         The peer    present   room.                                                                            | | **7001**        Platform Not Supported                                                                                                               The platform   supported  plugin                                                                            | | **7002**        Plugin Init Failed                                                                                                                   Plugin initialization  failed                                                                                    | | **7003**        Plugin Processing Failed                                                                                                             Plugin processing failed                                                                                            | | **7004**        Plugin Add Already Going                                                                                                           Plugin add  already  progress                                                                                   | ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/error-handling"
    },
    {
        "title": "event-listeners-enums.mdx",
        "link": "/react-native/v2/features/event-listeners-enums",
        "keywords": [],
        "headings": ["HMSPeerUpdate", "HMSTrackUpdate", "HMSRoomUpdate"],
        "content": "--- title: Event Listeners Enums nav: 3.71 ---  ## HMSPeerUpdate  ```js import { HMSPeerUpdate, HMSUpdateListenerActions, HMSRoom, HMSLocalPeer, HMSRemotePeer }  '@100mslive/react-native-hms';  // hms instance acquired  build method hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_PEER_UPDATE,   onPeerListener, );  const onPeerListener = ({ type } : {   peer: HMSPeer;   room?: HMSRoom;   type?: HMSPeerUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   if(type === HMSPeerUpdate.PEER_JOINED){     //   peer joins   }   if(type === HMSPeerUpdate.PEER_LEFT){     //   peer leaves   }   if(type === HMSPeerUpdate.ROLE_CHANGED){     //   peer's role  changed   }   if(type === HMSPeerUpdate.METADATA_CHANGED){     //   peer's metadata  changed   }   if(type === HMSPeerUpdate.NAME_CHANGED){     //   peer's name  changed   }   if(type === HMSPeerUpdate.NETWORK_QUALITY_UPDATED){     //   peer's network quality  changed   } }; ```  ## HMSTrackUpdate  ```js import { HMSTrackUpdate, HMSUpdateListenerActions, HMSRoom, HMSLocalPeer, HMSRemotePeer }  '@100mslive/react-native-hms';  // hms instance acquired  build method hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_TRACK_UPDATE,   onTrackListener, );  const onTrackListener = ({ type } : {   peer: HMSPeer;   track: HMSTrack;   room?: HMSRoom;   type?: HMSTrackUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   if(type === HMSTrackUpdate.TRACK_ADDED){     //  track  added   }   if(type === HMSTrackUpdate.TRACK_REMOVED){     //  track  removed   }   if(type === HMSTrackUpdate.TRACK_MUTED){     //  track  muted   }   if(type === HMSTrackUpdate.TRACK_UNMUTED){     //  track  unmuted   }   if(type === HMSTrackUpdate.TRACK_DESCRIPTION_CHANGED){     //  track's description  changed   }   if(type === HMSTrackUpdate.TRACK_DEGRADED){     //  track  degraded   }   if(type === HMSTrackUpdate.TRACK_RESTORED){     //  track  restored   } }; ```  ## HMSRoomUpdate  ```js import { HMSRoomUpdate, HMSUpdateListenerActions, HMSRoom, HMSLocalPeer, HMSRemotePeer }  '@100mslive/react-native-hms';  // hms instance acquired  build method hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_ROOM_UPDATE,   onRoomListener, );  const onRoomListener = ({ type } : {   room?: HMSRoom;   type?: HMSRoomUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   if(type === HMSRoomUpdate.ROOM_MUTED){     //  room  muted   }   if(type === HMSRoomUpdate.ROOM_UNMUTED){     //  room  unmuted   }   if(type === HMSRoomUpdate.SERVER_RECORDING_STATE_UPDATED){     //  server recording state  updated   }   if(type === HMSRoomUpdate.RTMP_STREAMING_STATE_UPDATED){     //  rtmp streaming state  updated   }   if(type === HMSRoomUpdate.BROWSER_RECORDING_STATE_UPDATED){     //  browser recording state  updated   }   if(type === HMSRoomUpdate.HLS_RECORDING_STATE_UPDATED){     //  hls recording state  updated   }   if(type === HMSRoomUpdate.HLS_STREAMING_STATE_UPDATED){     //  hls streaming state  updated   } }; ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/event-listeners-enums"
    },
    {
        "title": "event-listeners.mdx",
        "link": "/react-native/v2/features/event-listeners",
        "keywords": [],
        "headings": [],
        "content": "--- title: Event Listeners nav: 3.7 ---  You can easily add  remove  event listener  using  addEventListener()  removeEventListener() method. HMSUpdateListenerActions   enum class     types  event listeners.  ```js import {   HMSSDK,   HMSUpdateListenerActions,   HMSException,   HMSMessage,   HMSLeaveRoomRequest,   HMSSpeaker,   HMSPeer,   HMSTrack }  '@100mslive/react-native-hms';  const hmsInstance = await HMSSDK.build();  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_PREVIEW,   onPreviewListener );  const onPreviewListener = ({ previewTracks }) => {   const videoTrack = previewTracks.videoTrack;   const videoTrackId = videoTrack.trackId;   // gets triggered   call preview function. You can set  camera  mic on/off  joining.   // perform action };  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_JOIN, onJoinListener);  const onJoinListener = ({ localPeer, remotePeers }) => {   // gets triggered  join  successful. You can navigate   screens.   // use  objects  update  local  remote peers. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_ROOM_UPDATE,   onRoomListener );  const onRoomListener = ({   room,   type,   localPeer,   remotePeers, }:{   room?: HMSRoom;   type?: HMSRoomUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   // gets triggered  room  muted  unmuted.   // use  objects  update  local  remote peers. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_PEER_UPDATE,   onPeerListener );  const onPeerListener = ({   room,   type,   remotePeers,   localPeer,   peer, }: {   room?: HMSRoom;   type?: HMSPeerUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[];   peer: HMSPeer; }) => {   // gets triggered  peer leaves, joins, peer's audio  video  muted, starts  stops speaking, role  changed  becomes dominant speaker.   // use  objects  update  local  remote peers. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_TRACK_UPDATE,   onTrackListener );  const onTrackListener = ({   track,   peer,   room,   type,   remotePeers,   localPeer, }: {   track: HMSTrack;   peer: HMSPeer;   room?: HMSRoom;   type?: HMSTrackUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   // gets triggered  track  added, removed, muted, unmuted, degraded  restored back.   // use  objects  update  local  remote peers. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_ERROR,   onErrorListener );  const onErrorListener = (data: HMSException) => {   // gets triggered whenever  error occours   error description. You can either log   navigate   error screen.   // data contains  error code  message due   error occoured. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_MESSAGE,   onMessageListener );  const onMessageListener = (data: HMSMessage) => {   // gets triggered whenever  receive  direct message, broadcasted message  role-based message.   // whenever local peer receives  message   triggered. Add  message  reducer. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_SPEAKER,   onSpeakerListener );  const onSpeakerListener = (data: HMSSpeaker[]) => {   // gets triggered whenever someone speaks   //  array  speakers  received. Use   highlight  speakers. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.RECONNECTING,   onReconnectingListener );  const onReconnectingListener = (data) => {   // triggered whenever local peer  trying  reconnect  room i.e. bad network. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.RECONNECTED,   onReconnectedListener );  const onReconnectedListener = (data) => {   // triggered  local peer  reconnected   room. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_ROLE_CHANGE_REQUEST,   onRoleChangeRequestListener );  const onRoleChangeRequestListener = (data: HMSRoleChangeRequest) => {   // triggered  someone requests  role change  local peer. We can get data.requestedBy.name, data.suggestedRole.name   // You can show  modal allowing user  accept  decline  role change request whenever   triggered. };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_REMOVED_FROM_ROOM,   onRemovedFromRoomListener );  const onRemovedFromRoomListener = (data: HMSLeaveRoomRequest) => {   // triggered whenever someone removes local peer   room   room  ended.   // You can navigate  home screen, clear  reducers  reset   states whenever   triggered };  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_CHANGE_TRACK_STATE_REQUEST,   onChangeTrackStateRequest );  const onChangeTrackStateRequest = (data: HMSChangeTrackStateRequest) => {   // triggered  someone requests  unmute  local peer. We can get data.requestedBy.name, data.trackType   // You can show  modal allowing user  accept  decline  role change request whenever   triggered. };  hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_LOCAL_AUDIO_STATS,   onChangeLocalAudioStats, );  const onChangeLocalAudioStats = (data: {   localAudioStats: HMSLocalAudioStats;   track: HMSLocalAudioTrack;   peer: HMSPeer; }) => {   // This contains stats related  local audio track. };  hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_LOCAL_VIDEO_STATS,   onChangeLocalVideoStats, );  const onChangeLocalVideoStats = (data: {   localVideoStats: HMSLocalVideoStats;   track: HMSLocalVideoTrack;   peer: HMSPeer; }) => {   // This contains stats related  local video track. };  hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_RTC_STATS,   onChangeRtcStats, );  const onChangeRtcStats = (data: {rtcStats: HMSRTCStatsReport}) => {   // This will contain  combined stats   room. };   hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_REMOTE_AUDIO_STATS,   onChangeRemoteAudioStats, );  const onChangeRemoteAudioStats = (data: {   remoteAudioStats: HMSRemoteAudioStats;   track: HMSRemoteAudioTrack;   peer: HMSPeer; }) => {   // This contains stats related  remote audio track. };  hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_REMOTE_VIDEO_STATS,   onChangeRemoteVideoStats, );  const onChangeRemoteVideoStats = (data: {   remoteVideoStats: HMSRemoteVideoStats;   track: HMSRemoteVideoTrack;   peer: HMSPeer; }) => {   // This contains stats related  remote video track. }; ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/event-listeners"
    },
    {
        "title": "hls-streaming.mdx",
        "link": "/react-native/v2/features/hls-streaming",
        "keywords": [],
        "headings": ["Starting HLS", "Default View", "Custom View", "Stopping HLS", "Tips"],
        "content": "--- title: HLS Streaming & Recording nav: 3.992 ---  HLS Streaming allows  scaling  millions  viewers  near real time. You can give  link   web-app  will  converted   HLS feed   server  can  played across devices  consumption.  Behind  scenes,  will  achieved    bot join  room  stream   sees  hears. Once  feed  ready,  server will give  URL  can  played using  HLS Player.  > Note   media server serving  content   case  owned  100ms. If  looking   way  stream  YouTube, Twitch, etc.  please   look   RTMP streaming docs [here](recording).   ## Starting HLS  Check  user  permissions ```js const hlsStreaming: boolean = peer.role.permissions.hlsStreaming; ``` HLS can  started  two ways depending   level  customization  need.  1. Default View: The simplest view  just begin  stream  default UI  parameters. 2. Custom Views: To use   UI  HLS streaming,  need  provide   web-app URL   bot  join  stream.  #### Default View  Begins  stream  default parameters.  ```js await hmsInstance.startHLSStreaming() ```  #### Custom View You can call `hmsSDK.startHLSStreaming`   `HMSHLSConfig`  either  array  `meetingURLVariants`  `hlsRecordingConfig`.  To use   browser UI  HLS,  need  pass   meeting URL. The 100ms bot will open  URL  join  room, so it must allow access without  user level interaction. In  future it'll  possible  start HLS  multiple  URLs    room.  For  purpose  API supports taking   array, although currently   first element   array will  used. To distinguish  multiple URLs  additional field `metadata` can  passed.  Here's   `HMSHLSMeetingURLVariant` looks like ```js class HMSHLSMeetingURLVariant {   meetingUrl: string;   metadata: string; } ```  To record  HLS stream  may specify  `HMSHLSRecordingConfig` within  `HMSHLSConfig`.  Here's   `HMSHLSRecordingConfig` looks like ```js class HMSHLSRecordingConfig {   singleFilePerLayer: boolean;   videoOnDemand: boolean; } ``` 1. `singleFilePerLayer`   desired end result   mp4 file per HLS layer, false  default. 2. `videoOnDemand`   desired end result   zip  m3u8    chunks, false  default.  ```js  import {   HMSHLSRecordingConfig,   HMSHLSMeetingURLVariant,   HMSHLSConfig, }  '@100mslive/react-native-hms';  const startHLSStreaming = () => {   const hmsHLSMeetingURLVariant = new HMSHLSMeetingURLVariant({     meetingUrl: 'https://yogi.app.100ms.live/preview/nih-bkn-vek?skip_preview=true',     metadata: '',   });     const hmsHLSRecordingConfig = new HMSHLSRecordingConfig({     singleFilePerLayer: false,     videoOnDemand: false,   });     const hmsHLSConfig = new HMSHLSConfig({     hlsRecordingConfig: hmsHLSRecordingConfig,     meetingURLVariants: [hlsStreamingDetails],   });     await hmsInstance.startHLSStreaming(hmsHLSConfig)     .then(d => console.log('Start Hls Success: ', d))     .catch(e => console.log('Start Hls Error: ', e)); }; ```  ## Stopping HLS You can call hmsInstance.stopHLSStreaming  stop HLS Streaming  will stop   variants.  ```js  const stopHLSStreaming = () => {    await hmsInstance.stopHLSStreaming()     .then(d => console.log('Stop Hls Success: ', d))     .catch(e => console.log('Stop Hls Error: ', e)); }; ``` Want  see   works   live project? Take  look   advanced sample app.  Current Room Status The current status   room  always reflected   `HMSRoom` object.  Here   relevant properties inside  HMSRoom object   can read  get  current hls streaming status   room `hmsInstance.room.hlsStreamingState`.  The object contains  boolean `running`  lets  know   active   room right now  well  list  active `variants`.  hlsStreamingState  instance  `HMSHLSStreamingState`,  looks like: ```js class HMSHLSStreamingState {   running: boolean;   variants: Array<HMSHLSVariant>; } ```  This represents  livestream  one   HLS URLs   container  `HMSHLSVariant`. Which looks like: ```js class HMSHLSVariant {   hlsStreamUrl: string;   meetingUrl: string;   metadata: string;   startedAt: number; } ```   The room status   checked  following two places -  1. In  onJoin({ room }: { room: HMSRoom }) callback  HMSUpdateListener The properties mentioned  will    HMSRoom object.  2. In  onRoomUpdate({ type, room }: { type: HMSRoomUpdate, room: HMSRoom }) callback  HMSUpdateListener. The HMSRoomUpdate type will  HMSRoomUpdate.HLS_STREAMING_STATE_UPDATED.  ## Tips  * If  using  dashboard web-app  100ms, please make sure  use  role    publish permissions  beam tile   show up.  * If using   web-app,  put  place retries  API calls like tokens etc. just  case  call fails. As human users  used  reloading  page   scenarios   difficult  achieve   automated case.  * Make sure   disable  logs   passed  meeting URL. This will allow  us    visibility   room, refreshing  page  join  happen within  time interval. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/hls-streaming"
    },
    {
        "title": "integration.mdx",
        "link": "/react-native/v2/features/integration",
        "keywords": [],
        "headings": [
            "Installing the dependencies",
            "Permissions",
            "For iOS",
            "For Android",
            "Proguard configuration",
            "100ms Android SDK 2.1.2 or higher",
            "Prior to Android SDK version 2.1.2",
            "100ms proguard rules",
            "Expo Setup",
            "[Github Repo](https://github.com/100mslive/react-native-hms/)",
            "[Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)"
        ],
        "content": "--- title: Integrating  SDK nav: 3.01 ---  ## Installing  dependencies  ```bash npm install --save @100mslive/react-native-hms ```  ## Permissions  ### For iOS  Add following lines  `Info.plist` file  ```xml <key>NSCameraUsageDescription</key> <string>Please allow access  Camera  enable video conferencing</string> <key>NSMicrophoneUsageDescription</key> <string>Please allow access  Microphone  enable video conferencing</string> <key>NSLocalNetworkUsageDescription</key> <string>Please allow access  network usage  enable video conferencing</string> ```  ### For Android  Add following permissions  `AndroidManifest.xml`  ```xml <uses-feature android:name=\"android.hardware.camera\"/> <uses-feature android:name=\"android.hardware.camera.autofocus\"/> <uses-permission android:name=\"android.permission.CAMERA\"/> <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/> <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/> <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/> <uses-permission android:name=\"android.permission.BLUETOOTH\"/> <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /> ```  You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.  We suggest using [react-native-permission](https://www.npmjs.com/package/react-native-permissions)  acquire permissions   platforms.  > Note: Compiling  Kotlin  compileSdkVersion 30 requires JDK 11  above  ### Proguard configuration  ##### 100ms Android SDK 2.1.2  higher If using 100ms Android SDK version 2.1.2  higher proguard configuration  bundled inside it. No additional code  required.  ##### Prior  Android SDK version 2.1.2 Prior  Android SDK version 2.1.2,  following configuration  needed  release builds.  Add    proguard-rules.pro  ```js # 100ms proguard rules -keep class org.webrtc.** { *; } -keep class live.hms.video.** { *; } ```  ### Expo Setup  100ms React Native SDK supports development  [Expo](https://expo.dev/). Following   guide  set   -  1. Install node modules ```bash npm install ```  2. Install expo-cli globally  run  Expo commands ```bash npm install --global expo-cli ```  3. Install Expo Dev Client ```bash expo install expo-dev-client ```  4. Now  can run  iOS  Android ```bash expo run: ios -d ``` ```bash expo run: android -d ```  Alternatively,  can run   IDE   choice (VS Code, Android Studio, Xcode, etc)  start  dev server  terminal (it will help running  devices). To start  server use  following command - ```bash expo start --dev-client ```   ### [Github Repo](https://github.com/100mslive/react-native-hms/) You can checkout  100ms React Native SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/react-native-hms/)     ### [Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)  In  [100ms Example App](https://github.com/100mslive/react-native-hms/tree/main/example)   shown   setup  various listeners,  data  store   redux    features  can implement.  We  also implemented multiple views   commonly used. Checkout  [videos & relevant code   Example app](https://github.com/100mslive/react-native-hms/tree/main/example#additional-features). ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/integration"
    },
    {
        "title": "join.mdx",
        "link": "/react-native/v2/features/join",
        "keywords": [],
        "headings": [
            "Setting up the HMS Instance",
            "Check Permissions",
            "Add event listeners",
            "Join the room",
            "Joining Room with Muted Audio / Video",
            "Here's an example to understand the implementation -",
            "Get Room"
        ],
        "content": "--- title: Join Room nav: 3.1 ---  Joining  room  one    basic functionalities    100ms  built  easy, developer friendly API  get  started.  A user can interact  participants   room   joining  room.  ## Setting   HMS Instance  First, create  instance  HMSManager class. Store  instance   property. We'll   call build method,  method returns  instance  HMSManager class     used  perform   operations. Ensure   SDK object  alive  memory    can receive event callbacks  SDK. Simplest way      follows -  ```js import { HMSSDK }  '@100mslive/react-native-hms';  const hmsInstance = await HMSSDK.build(); ```  ## Check Permissions  Now  can proceed  request Camera  Audio permissions  already  given.  ```js // android import { PERMISSIONS, RESULTS, requestMultiple }  'react-native-permissions';  requestMultiple([PERMISSIONS.ANDROID.CAMERA, PERMISSIONS.ANDROID.RECORD_AUDIO]).then((results) => {      (         results['android.permission.CAMERA'] === RESULTS.GRANTED &&         results['android.permission.RECORD_AUDIO'] === RESULTS.GRANTED     ) {         joinRoom();     } });  // ios joinRoom(); ```  ## Add event listeners  Add event listeners    events   onPreview, onJoin, onError etc. The actions can  found  HMSUpdateListenerActions class. The event handlers   way  handling  update happening  hms.  ```js import { HMSUpdateListenerActions }  'react-native-hms';  // instance acquired  build() method hmsInstance.addEventListener(     HMSUpdateListenerActions.ON_PREVIEW,     onPreview // function  will  called  Preview success );  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_ERROR, onError);  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_JOIN, onJoin); ```  ## Join  room  When user indicates   want  join  room,  app   -  1. User Name,  name    displayed   peers   room 2. User ID,  unique identifier   user. Usually  UUID string. 3. Room ID,  unique room identifier     generated & passed   app   backend. 4. Role, defines  set  permissions   particular user (optional parameter). 5. Authentication Token,  client side authentication token generated   Token Service. You can read    generate  token [here](https://docs.100ms.live/react-native/v2/guides/token).  Joining  room connects    remote peer  broadcasts  stream   peers,  need instance  HMSConfig  order  pass  details  room  user  join function  ```js import { HMSConfig }  '@100mslive/react-native-hms';  // instance acquired  build() method const HmsConfig = new HMSConfig({ authToken, userName });  hmsInstance.preview(HmsConfig); //  start preview // or hmsInstance.join(HmsConfig); //  join  room ```  Don't forget  add listeners  calling join  preview  receive  event callback  indicates   call   success   failure.  That's it. You  joined  room successfully. 🥳  After calling join  app will  provided  update   100ms SDK.  ✅ If successful,  `HMSUpdateListenerActions.ON_JOIN` callback  HMSUpdateListener will  invoked  information   room encapsulated   HMSRoom object.  ❌ If failure,  `HMSUpdateListenerActions.ON_ERROR` callback will  invoked  exact failure reason.   ### Joining Room  Muted Audio / Video  Many times  user prefers  join  room  muted audio & video.   By default HMSSDK keeps  microphone  camera ON   using  feature  can decide  state according   use case.  HMSSDK provides  capability using `initialState` property  Audio & Video Track Settings.  Here, `initialState` property  `HMSAudioTrackSettings`  `HMSVideoTrackSettings`   Enum  type `HMSTrackSettingsInitState`    two possible values  -  ```js enum HMSTrackSettingsInitState {         // If  track needs   kept mute  joining     MUTED,         // If  track needs   kept unmute  joining      UNMUTED } ```  #### Here's  example  understand  implementation -  For joining  room  muted audio/video  values need   set   `trackSettings` property  building  `HMSSDK` instance  -  ```js  // First, create  Track Settings object const trackSettings = getTrackSettings();  // Customize Audio & Video initial states  per user discretion const getTrackSettings = () => {      let audioSettings = new HMSAudioTrackSettings({         initialState: HMSTrackSettingsInitState.MUTED,     });      let videoSettings = new HMSVideoTrackSettings({         initialState: HMSTrackSettingsInitState.MUTED,     });      return new HMSTrackSettings({         video: videoSettings,         audio: audioSettings,     }); };  // Pass  Track Settings object   build function  const hmsInstance = await HMSSDK.build({     trackSettings }); ```   ### Get Room  The `getRoom` function  HMSSDK instance returns  currently joined room. Returns null   local peer     room.  ```js // instance acquired  build() method await hmsInstance.getRoom();  ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/join"
    },
    {
        "title": "leave.mdx",
        "link": "/react-native/v2/features/leave",
        "keywords": [],
        "headings": [],
        "content": "--- title: Leave Room nav: 3.2 ---  Once  done   call  want  exit, call leave   HMSSDK instance  created  join it. This function will return  promise  will resolve upon completion  leave process.  ```js await hmsInstance?.leave()     .then(d => console.log('Leave Success: ', d))     .catch(e => console.log('Leave Error: ', e)); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/leave"
    },
    {
        "title": "logger.mdx",
        "link": "/react-native/v2/features/logger",
        "keywords": [],
        "headings": ["Update Log level", "HMSLogLevel", "Example"],
        "content": "--- title: Logging nav: 3.97 ---  HMSLogger   logging api  lets  see    api logs    called. Instead  logging  values   app    every function  can easily monitor  debug via  logs. By default   logs  disabled. You need  call `updateLogLevel`  enable logs.  ```js import { HMSLogger, HMSLogLevel }  '@100mslive/react-native-hms';  // create HMSLogger instance  set log level const logger = new HMSLogger(); logger.updateLogLevel(HMSLogLevel.VERBOSE, true);  // instance acquired  build method build.setLogger(logger); ```  ## Update Log level ```js logger.updateLogLevel(HMSLogLevel.VERBOSE, false); logger.updateLogLevel(HMSLogLevel.WARNING, true); ```  ## HMSLogLevel  You can subscribe  different log levels  passing `HMSLogLevel` enums  `HMSLogger`  `HMSLogLevel.VERBOSE` Verbose will display basic logs   sdk   console  `HMSLogLevel.WARNING` Warnings will  displayed  screen   yellow background. These alerts  known  YellowBoxes. Click   alerts  show  information   dismiss them.  `HMSLogLevel.ERROR` In-app errors  displayed   full screen alert   red background inside  app. This screen  known   RedBox.   ## Example  ![HMSLogger Example](/docs/v2/hmsLoggerExample.png)",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/logger"
    },
    {
        "title": "mute.mdx",
        "link": "/react-native/v2/features/mute",
        "keywords": [],
        "headings": ["Mute/Unmute Status"],
        "content": "--- title: Mute & Umute nav: 3.3 ---  Mute  something  applies   audio  video.  When  mute audio,    heard   people.  When  mute video,  will   broadcasting  video   people.  It can  called  local (you) peers' audio  video tracks.  You get  reference    local peer  localPeer  HMSSDK instance.  ```js // instance acquired  build() method  hmsInstance.localPeer.localAudioTrack().setMute(true); // audio track  hmsInstance.localPeer.localVideoTrack().setMute(true); // video track ```   ### Mute/Unmute Status  Mute/Unmute can  done  local peer  well  remote peer according   mute status.   In    cases   need  render  components  basis  current mute status  peers like  mic  camera icons.   ```js isAudioMute: boolean = peer?.audioTrack?.isMute(), isVideoMute: boolean = peer?.videoTrack?.isMute(), ```   For muting remote peer refer  [Change Track State](./change-track-state) docs   muting remote peers locally refer  [Playback Allowed](./playback-allowed) docs.  ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/mute"
    },
    {
        "title": "pip-mode.mdx",
        "link": "/react-native/v2/features/pip-mode",
        "keywords": [],
        "headings": [
            "Minimum Requirements",
            "How to add PiP support",
            "Example of showing content when App is in PIP Mode",
            "Checkout Video of PIP in Action"
        ],
        "content": "--- title: PIP (Picture-In-Picture) Mode nav: 3.9993 ---  100ms React Native SDK provides support  creating Picture  Picture mode experience  video calls.  PIP Mode lets  user watch  room video   small window pinned   corner   screen  navigating  apps  browsing content   main screen.  Currently  functionality   available  Android.  ## Minimum Requirements  -   Minimum version required  support PiP  Android 8.0 (API level 26) -   Minimum `react-native-hms` SDK version required  1.0.0  ### How  add PiP support  1. You need  update  activity tag   `AndroidManifest.xml`  ```xml   <activity     ....     android:supportsPictureInPicture=\"true\"     android:configChanges=\"keyboard|keyboardHidden|orientation|screenSize|smallestScreenSize|screenLayout|uiMode\"     ... /> ```  2. Call `enablePipMode` method  \"HMS Instance\"   want  start PIP mode.  ```js   // You can also check  PIP  supported  device  not.   const isPIPSupported = await hmsInstance.isPipModeSupported();    const isEnabled = await hmsInstance.enablePipMode();    (isEnabled) {     // App  entered  PIP Mode     setPIPModeActive(true);   } ```  You can also add `aspectRatio`  Picture  Picture window.  ```js   ...   const isEnabled = await hmsInstance.enablePipMode({ aspectRatio: [16, 9] });   ... ```  Pip mode resizes  whole activity   small container. So,   hide  content    want  show.  3. Detect  App goes  \"fullscreen\"  PIP mode  ```js   import { AppState, AppStateStatus }  'react-native';    ...    const appStateRef = useRef(AppState.currentState);    useEffect(() => {     // We will register  AppState listener  App   PIP Mode      (pipModeActive) {       appStateRef.current = AppState.currentState;        const appStateListener = (nextAppState: AppStateStatus) => {          (           appStateRef.current.match(/inactive|background/) &&           nextAppState === \"active\"         ) {           // Now, App    PIP mode           setPIPModeActive(false);         }          appStateRef.current = nextAppState;       };        AppState.addEventListener('change', appStateListener);        return () => {         AppState.removeEventListener('change', appStateListener);       }     }   }, [pipModeActive]); ```  ### Example  showing content  App   PIP Mode  ```js   // Getting trackId  show  PIP mode   // getPreferredTrackId function returns trackId  preferred video track   const pipTrackId = getPreferredTrackId()    ...    // If PIP mode  active, showing  single peer    (isPipModeActive) {     return (       <HmsView         ...         trackId={pipTrackId}         ...       />     )   }     // Showing tiles    peers   return <MultiplePeers />    ... ```  ## Checkout Video  PIP  Action  <video width=\"295\" height=\"640\" controls>   <source src=\"https://user-images.githubusercontent.com/45194090/205296059-6b9b399d-9a51-4d35-99cf-4413f6368169.mp4\" type=\"video/mp4\" />   Your browser   support  video tag. </video>  👀 To see  example  Picture  Picture implementation   example app, checkout [our example project](https://github.com/100mslive/react-native-hms/tree/main/example). ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/pip-mode"
    },
    {
        "title": "playback-allowed.mdx",
        "link": "/react-native/v2/features/playback-allowed",
        "keywords": [],
        "headings": [
            "Fetch isPlaybackAllowed",
            "Set isPlaybackAllowed",
            "Local mute all remote peers audio"
        ],
        "content": "--- title: Playback Allowed nav: 3.93 ---  Mute  something  applies   audio  video   possible  mute remote peers   yourself. When  will mute audio  video,    able  hear  see  remote person   will  audible  visible  others.  ## Fetch isPlaybackAllowed  You can check  playback  allowed     certain remote peer's audio  video.  ```js const remotePeer: HMSRemotePeer; const isAudioPlaybackAllowed = remotePeer.remoteAudioTrack().isPlaybackAllowed();  const isVideoPlaybackAllowed = remotePeer.remoteVideoTrack().isPlaybackAllowed(); ```  ## Set isPlaybackAllowed  You can set playback   certain remote peer's audio  video. If  set   false  will turn   audio  video   you. You can revert  back  setting  true.  ```js const remotePeer: HMSRemotePeer; const isAudioPlaybackAllowed = remotePeer.remoteAudioTrack().setPlaybackAllowed(false); const isVideoPlaybackAllowed = remotePeer.remoteVideoTrack().setPlaybackAllowed(true); ```  ## Local mute  remote peers audio  ```js // instance acquired  build method  hmsInstance.setPlaybackForAllAudio(true)  // mute hmsInstance.setPlaybackForAllAudio(false) // unmute ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/playback-allowed"
    },
    {
        "title": "preview.mdx",
        "link": "/react-native/v2/features/preview",
        "keywords": [],
        "headings": ["Calling Preview function"],
        "content": "--- title: Preview nav: 3.4 ---  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining. 100ms SDKs provide  easy-to-use API  back  feature.  ## Calling Preview function  We can call preview method  HMSSDK Instance.   advised  attach error listener  preview listener  calling  function  order  get updates  preview got executed successfully    failed.  ```js import {   HMSSDK,   HMSUpdateListenerActions, }  '@100mslive/react-native-hms';  const hmsInstance = HMSSDK.build()  hmsInstance.addEventListener(   HMSUpdateListenerActions.ON_PREVIEW,   onPreview, // function  will  called  Preview success ); // attach room  peer update listeners  current status hmsInstance?.addEventListener(   MSUpdateListenerActions.ON_ROOM_UPDATE,   onRoomListener, ); hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_PEER_UPDATE,   onPeerListener, );  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_ERROR, onError); ```  once listeners  attached  can call preview method  shown  following snippet.  ```js import { HMSConfig }  '@100mslive/react-native-hms';  // instance acquired  build() method const HmsConfig = new HMSConfig({ authToken, username }); hmsInstance.preview(HmsConfig); //  start preview ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/preview"
    },
    {
        "title": "reconnecting-reconnected.mdx",
        "link": "/react-native/v2/features/reconnecting-reconnected",
        "keywords": [],
        "headings": ["Errors", "Best Practices"],
        "content": "--- title: Reconnecting & Reconnected Callbacks nav: 3.999 --- Reconnecting listener  triggered   SDK detects  network issue   trying  reconnect automatically   network drop, switch etc.  The Reconnected listener  triggered   SDK   successfully recovered   network drop, switch   network issue etc.  > 💡 Note: The SDK tries  reconnect automatically  60 seconds    connection  terminated   room    rejoined.  ## Errors  When  reconnecting state  SDK emits  error `Error Code: 1003, Cause: Websocket disconnected`   received  onReconnectingListener.  ```js hmsInstance?.addEventListener(HMSUpdateListenerActions.RECONNECTING, onReconnectingListener); hmsInstance?.addEventListener(HMSUpdateListenerActions.RECONNECTED, onReconnectedListener);  const onReconnectingListener = (error: HMSException) => {   // show reconnecting... toast }; const onReconnectedListener = () => {   // show reconnected toast }; ```  Once  60 seconds timeout  finished   peer   joined back   room,  error `Error Code: 4005, Cause: ICE Connection Failed due  network issue`  is emitted  onErrorListener.  ```js hmsInstance?.addEventListener(HMSUpdateListenerActions.ON_ERROR, onErrorListener);  const onErrorListener = (error: HMSException) => {   // show data?.error?.message toast }; ``` ## Best Practices  * Once  receive  onReconnectingListener try  avoid  user  interacting   APIs  onReconnectedListener  received otherwise  the APIs might   successful like join, leave, setMute etc.  * If 60 seconds timeout  passed   receive  onErrorListener, check  4005 error code  redirect back  home screen   connection   terminated   will    join  room. ```js const onErrorListener = (error: HMSException) => {    (data?.error?.code === 4005) {     // Redirect  try  rejoin  connection  established again   } }; ```  > 💡 Note: You can also measure  user's connection speed. Learn   connection quality API [here](../advanced-features/network-quality) ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/reconnecting-reconnected"
    },
    {
        "title": "recording.mdx",
        "link": "/react-native/v2/features/recording",
        "keywords": [],
        "headings": [
            "Starting Streaming / Recording",
            "Stopping Streaming / Recording",
            "Current Room Status"
        ],
        "content": "--- title: RTMP Streaming & Recording nav: 3.991 ---  Want  preserve  video call  posterity   recording? Or live stream    millions  viewers  Twitch  YouTube  whatever gives   RTMP injest URL?  Turn  RTMP Streaming  Recording!  In 100ms, recording  streaming  usually achieved    bot join  room  stream   sees  hears   file (recording)    rtmp injest url (streaming).  The topics covered   doc are:  1. How  start streaming / recording. 2. How  stop streaming / recording. 3. How  check  current status  streaming / recording.  ### Starting Streaming / Recording  Check  user  permissions  ```js const browserRecording: boolean = peer.role.permissions.browserRecording; const rtmpStreaming: boolean = peer.role.permissions.rtmpStreaming; ```  To start recording, streaming  both, create  instance  HMSRTMPConfig.  HMSRTMPConfig takes  following:  1. meetingUrl: String. The url  100ms bot user will open  join  room. It must allow access without  user level interaction. 2. rtmpUrls: `Array<String>`. If streaming  required,     one   RTMP Injest Urls   max limit  3 urls   stream  go. If  recording,  can   empty list.      - Format: `rtmp://server.com/app/STREAM_KEY`     - Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`         - \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.         - \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.  3. record: Boolean. If recording  required, set true. If recording   required, set false. This value   effect  streaming.  -   If  rtmpUrls  record = true  provided,  streaming  recording will begin. -   If  rtmpUrls  provided,  streaming will begin. -   If  record true  provided,  recording will begin.  If either one  started,     started without first stopping whatever  running. Eg: Only streaming  started. Recording   started unless streaming  stopped first.  If   required,     started together  providing  RTMP Injest Urls  recording = true.  The result   action  returned. On failure  start   error will  sent  onError listener.  ```js import { HMSRTMPConfig }  '@100mslive/react-native-hms';  const recordingDetails = HMSRTMPConfig({     record: true,     meetingURL: roomID + '/viewer?token=beam_recording',     rtmpURLs: [] });  await instance     ?.startRTMPOrRecording(recordingDetails)     .then((d) => console.log('Start Recording Success: ', d))     .catch((e) => console.log('Start Recording Error: ', e)); ```  ### Stopping Streaming / Recording  To stop streaming AND recording. It   currently possible  stop just one, whatever  running will  stopped.  Here's   stop both:  The result   action  returned. On failure  start   error will  sent  onError listener.  ```js await instance     ?.stopRtmpAndRecording()     .then((d) => console.log('Stop Recording Success: ', d))     .catch((e) => console.log('Stop Recording Error: ', e)); ```  ### Current Room Status  The current status   room  always reflected   HMSRoom object   returned   `hmsInstance.room`.  Here   relevant properties inside  HMSRoom object   can read  get  current recording/streaming status   room namely: rtmpHMSRtmpStreamingState, browserRecordingState  serverRecordingState.  Each    objects  contain  boolean running  lets  know   active   room right now  error  lets  know     error.  Apart   rtmp stream   browser recording,   ones  can start  stop,   also  serverRecording,  can  turned    room  archival purposes    currently  stopped  enabled   room   dashboard.  1. rtmpHMSRtmpStreamingState  instance  HMSRtmpStreamingState,  looks like:  ```js class HMSRtmpStreamingState(     val running : Boolean,     val error : HMSException? ) ```  This represents  livestream  one   RTMP urls.  2. browserRecordingState  instance  HMSBrowserRecordingState,  looks like:  ```js class HMSBrowserRecordingState(     val running : Boolean,     val error : HMSException? ) ```  This represents  recording  can  requested  start.  3. serverRecordingState  instance  HMSServerRecordingState,  looks like:  ```js class HMSServerRecordingState(     val running : Boolean,     val error : HMSException? ) ```  This represents   room  set   recorded    created   sessions within  will always  recorded  archival   server. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/recording"
    },
    {
        "title": "release-resources.mdx",
        "link": "/react-native/v2/features/release-resources",
        "keywords": [],
        "headings": [],
        "content": "--- title: Release Resources  nav: 3.96 ---  Releasing resources     required anymore   important part   app.  If  resources   released  acquired  time  time,  it might hamper app performance.   When  hms instance   required      new hms instance    created instead  using  previous one, `destroy`  previous instance.   ```js // instance aquired  build method  await hmsInstance?.destroy()     .then(d => console.log('Destroy Success: ', d))     .catch(e => console.log('Destroy Error: ', e)); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/release-resources"
    },
    {
        "title": "remove-peer.mdx",
        "link": "/react-native/v2/features/remove-peer",
        "keywords": [],
        "headings": ["Check if user has permissions", "Remove Peer", "Remove Peer Notification"],
        "content": "--- title: Remove Peer nav: 3.91 ---  If  local peer  removeOthers permission  can remove  peer.  ## Check  user  permissions  ```js const removeOthers: boolean = peer.role.permissions.removeOthers; ```  ## Remove Peer  ```js import { HMSPeer }  '@100mslive/react-native-hms';  const reason = 'removed  room';  // instance acquired  build() method const peer: HMSPeer = hmsInstance?.remotePeers[0]  await hmsInstance.removePeer(peer, reason)     .then(d => console.log('Remove Peer Success: ', d))     .catch(e => console.log('Remove Peer Error: ', e)); ```  ## Remove Peer Notification  Once  peer  adequate permissions calls removePeer   local peer,  local peer will receive  notification  type REMOVED_FROM_ROOM   HMSLeaveRoomRequest object   data.  ```js // import classes import { HMSUpdateListenerActions, HMSLeaveRoomRequest }  '@100mslive/react-native-hms';  const onRemovedFromRoom = (data: HMSLeaveRoomRequest) => {     // redirect  home screen };  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_REMOVED_FROM_ROOM, onRemovedFromRoom); ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/remove-peer"
    },
    {
        "title": "render-video.mdx",
        "link": "/react-native/v2/features/render-video",
        "keywords": [],
        "headings": [
            "Track Id",
            "Scale Type",
            "Mirror",
            "Is Degraded",
            "Troubleshooting in HmsView"
        ],
        "content": "--- title: Render Video nav: 3.6 --- It  comes   this. All  setup  far   done    can show live streaming video   beautiful apps.  The React Native SDK provides  Component `HmsView`  renders  video   screen.  We can pass video `trackId`, `scaleType`  `mirror`  `HmsView` component.  ```js import { HMSVideoViewMode }  '@100mslive/react-native-hms'; ... // hms instance acquired  build method const HmsView = hmsInstance.HmsView; const styles = StyleSheet.create({   hmsView: {     height: '100%',     width: '100%',   }, }); <HmsView trackId={trackId} scaleType={HMSVideoViewMode.ASPECT_FILL} style={styles.hmsView} mirror={true} /> ... ```  > Note: One `HmsView` component can   connected  one video `trackId`. To display multiple videos    create multiple instances  `HmsView` component.  - Once  requirement   `HmsView`  finshed    disposed.  - Every `HmsView`   unique,    done  passing  `key` property  value  video `trackId`.  - Recommended practice   show maximum  3  4 `HmsView`   single page/screen   app. This avoids network data consumption & video decoding resources   device.    - For listening   audio     absolutely nothing,  automatically played   join  room. To mute & unmute audio/ideo refer [here](./mute). To set volume levels refer [here](../advanced-features/set-volume).  ## Track Id It   required prop   `HmsView` component. There  2 types  peers -  `localPeer` & `remotePeer`,  extract `trackId`  peers use  following code snippet. These track IDs can directly  passed  `HmsView` component.  ```js const localTrackId = hmsInstance.localPeer.videoTrack.trackId; const remoteTrackId = hmsInstance.remotePeers[index].videoTrack.trackId; ```  Make sure  trackId passed   HMSView   null    trackId  linked  HMSView,  can   unlinked.   You can make sure  trackId   null  checking  onTrackListener type  `TRACK_ADDED`  track type  `VIDEO`   peer.   If  null trackId  passed  HMSView    unmount  HMSView component  mount    new `trackId`.  This can  done using  `key` prop  passing `trackId`   value   `HmsView` component.  ```js <HmsView key={trackId} trackId={trackId} /> ```  > Pro Tip: Try  render  2  4 videos   screen  set sink false   videos. This will stop downloading video data  tiles    visible   screen.  ## Scale Type It   optional prop   `HmsView` component. By default value  scale type  set  `HMSVideoViewMode.ASPECT_FILL`. There  3 scale types  can pass  render  video.  ```js import { HMSVideoViewMode }  '@100mslive/react-native-hms';  const ASPECT_FILL = HMSVideoViewMode.ASPECT_FILL const ASPECT_FIT = HMSVideoViewMode.ASPECT_FIT const ASPECT_BALANCED = HMSVideoViewMode.ASPECT_BALANCED ```  ## Mirror It   optional prop   `HmsView` component. You can mirror  videos  well. By default,  mirror prop  set  false. For  beautiful rendering,  can set mirror true   videos rendered   left   camera.   ## Is Degraded Sometimes people  bad internet connections  everyone deserves  good meeting. When  network   slow  support audio  video conversations together,  100ms SDK can automatically turn  downloading  peers' videos,  may improve  audio quality  avoid disconnections.   If  network quality improves,  videos will  restored automatically  well.  Show  black tile  avatar  initials  `isDegraded`  true. ```js const isDegraded: boolean = peer.videoTrack.isDegraded ```  > Pro Tip: Always use ON_PEER_UPDATE  ON_TRACK_UPDATE listeners,  listeners get updated `localPeer`  `remotePeers` whenever    event related   values.   ```js HmsInstance.addEventListener(   HMSUpdateListenerActions.ON_PEER_UPDATE,   onPeerListener ); HmsInstance.addEventListener(   HMSUpdateListenerActions.ON_TRACK_UPDATE,   onTrackListener );  const onPeerListener = ({   remotePeers,   localPeer, }: {   peer: HMSPeer;   room?: HMSRoom;   type?: HMSPeerUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   updateVideoIds(remotePeers, localPeer); //  function can  used  update local  remotePeers  React-Native side };  const onTrackListener = ({   remotePeers,   localPeer, }: {   peer: HMSPeer;   track: HMSTrack;   room?: HMSRoom;   type?: HMSTrackUpdate;   localPeer: HMSLocalPeer;   remotePeers: HMSRemotePeer[]; }) => {   updateVideoIds(remotePeers, localPeer); }; ```  ## Troubleshooting  HmsView  If  video renders   first time     appear    can  due   usage  multiple instances.  It's possible  create multiple instances  SDK   required   niche requirements.  In  cases, prefer  use  single instance  SDK. That means   call  `build` method  get  hms instance, save  instance   global state.  Do  call  `build` method again,   will return  new hms instance every time.   So   way  can ensure    single instance   SDK  created. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/render-video"
    },
    {
        "title": "rtc-stats.mdx",
        "link": "/react-native/v2/features/rtc-stats",
        "keywords": [],
        "headings": [
            "Enable RTC call stats",
            "Disable  RTC call stats",
            "HMSRTCStatsReport",
            "HMSLocalAudioStats",
            "HMSLocalVideoStats",
            "HMSRemoteAudioStats",
            "HMSRemoteVideoStats"
        ],
        "content": "--- title: RTC Call Stats nav: 3.998 ---  Sometimes  need  way  capture certain metrics related   call. This may  helpful  if  want  tailor  experience   users  debug issues. Typical metrics  interest  are audio/video bitrate, round trip time, total consumed bandwidth  packet loss. 100ms SDK  provides  data via dedicated delegate callbacks found  HMSUpdateListener. These will   called   fixed interval  one second   room   joined. You can get stats    per track basis (`on(remoteAudioStats:track:peer)`)    overall summary (`on(rtcStats:)`)  Here   full list  callbacks:  ```js import { HMSUpdateListenerActions }  '@100mslive/react-native-hms';  // hms instance aquired  build method hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_LOCAL_AUDIO_STATS,   onChangeLocalAudioStats, ); hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_LOCAL_VIDEO_STATS,   onChangeLocalVideoStats, ); hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_RTC_STATS,   onChangeRtcStats, ); hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_REMOTE_AUDIO_STATS,   onChangeRemoteAudioStats, ); hmsInstance?.addEventListener(   HMSUpdateListenerActions.ON_REMOTE_VIDEO_STATS,   onChangeRemoteVideoStats, ); ```  ## Enable RTC call stats ```js hmsInstance?.enableRTCStats(); ```  ## Disable  RTC call stats ```js hmsInstance?.disableRTCStats(); ```  ## HMSRTCStatsReport This class will contain  combined stats   room. ```js  class HMSRTCStats {     // Total bytes sent   current session.     var bytesSent: UInt64     // Total bytes received   current session.     var bytesReceived: UInt64     // Total packets received   current session.     var packetsReceived: UInt64     // Total packets lost   current session.     var packetsLost: UInt64     // Total outgoing bitrate observed since previous report.     var bitrateSent: Double     // Total incoming bitrate observed since previous report  Kb/s.     var bitrateReceived: Double     // Average round trip time observed since previous report  Kb/s.     var roundTripTime: Double }  class HMSRTCStatsReport {     // Combined audio + video values     var combined: HMSRTCStats     // Summary   audio tracks     var audio: HMSRTCStats     // Summary   video tracks     var video: HMSRTCStats } ```  ## HMSLocalAudioStats This class contains stats related  local audio track. ```js class HMSLocalAudioStats {     // Round trip time observed since previous report.     var roundTripTime: Double     // Total bytes sent   track   current session.     var bytesSent: UInt64     // Outgoing bitrate   track observed since previous report  Kb/s.     var bitrate: Double } ```  ## HMSLocalVideoStats This class contains stats related  local video track. ```js class HMSLocalVideoStats {     // Round trip time observed since previous report.     var roundTripTime: Double     // Total bytes sent   track   current session.     var bytesSent: UInt64     // Outgoing bitrate   track observed since previous report  Kb/s.     var bitrate: Double     // Resolution  video frames  sent.     var resolution: HMSVideoResolution     // Frame rate  video frames  sent (FPS).     var frameRate: Double } ``` ## HMSRemoteAudioStats This class contains stats related  remote audio track. ```js class HMSRemoteAudioStats {     // Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.     var jitter: Double     // Total bytes received   track   current session.     var bytesReceived: UInt64     // Incoming bitrate   track observed since previous report  Kb/s.     var bitrate: Double     // Total packets received   track   current session.     var packetsReceived: UInt64     // Total packets lost   track   current session.     var packetsLost: UInt64 } ```  ## HMSRemoteVideoStats This class contains stats related  remote video track. ```js class HMSRemoteVideoStats {     // Packet Jitter measured  seconds   track. Calculated  defined  section 6.4.1.  RFC3550.     var jitter: Double     // Total bytes received   track   current session.     var bytesReceived: UInt64     // Incoming bitrate   track observed since previous report  Kb/s.     var bitrate: Double     // Total packets received   track   current session.     var packetsReceived: UInt64     // Total packets lost   track   current session.     var packetsLost: UInt64     // Resolution  video frames  received.     var resolution: HMSVideoResolution     // Frame rate  video frames  received (FPS).     var frameRate: Double } ```",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/rtc-stats"
    },
    {
        "title": "screenshare.mdx",
        "link": "/react-native/v2/features/screenshare",
        "keywords": [],
        "headings": [
            "Android Setup",
            "iOS Setup",
            "Step 1 - Open project",
            "Step 2 - Add Broadcast Upload Extension",
            "Step 3 - Add App Group",
            "Step 4 - Edit Podfile",
            "Step 5 - Edit SampleHandler",
            "How to start screenshare from the app",
            "How to stop screenshare from the app",
            "How to get Screen Share Status",
            "How to display screenshare tracks"
        ],
        "content": "--- title: Screen Share nav: 3.993 ---   React SDK provides support  sharing  entire screen   device   room. Please note    peer  share  screen,  role must  screenshare enabled   dashboard. Also select  appropriate resolution   Screen share quality. 1080p  recommended  better text readability.  ![ScreenshareDashboard](/docs/v2/screenshare-dashboard.png)  ## Android Setup  Adding activity  AndroidManifest.xml Add `HmsScreenshareActivity`  manifest located  `android/app/src/main/AndroidManifest.xml`. ```js <activity   android:name=\"com.reactnativehmssdk.HmsScreenshareActivity\"   android:label=\"@string/app_name\" /> ```  ## iOS Setup  You need  create  iOS broadcast upload extension. It uses Apple's ReplayKit framework  record  device screen  delivers frame samples   broadcast extension. You can share     app  also  entire device sceeen including  apps   device.  ### Step 1 - Open project Open  iOS Xcode project `xed ios`.  ### Step 2 - Add Broadcast Upload Extension Click   project   Project Navigator  show  project settings.  Press +   bottom   target list  add  new target.  ![AddExtension](/docs/v2/RNAddExtension.png)  Select  `Broadcast Upload Extension` type   new target.  ![SelectExtension](/docs/v2/RNSelectExtension.png)  Enter  new target detail   dialog. Uncheck Include UI Extension option.  ![DetailExtension](/docs/v2/RNDetailExtension.png)  In  following dialog, activate  new scheme   new target.  ![ActivateExtension](/docs/v2/RNActivateExtension.png)  ### Step 3 - Add App Group  Click + icon  `Signing & Capabilities` section. Select `App Group`   list  Capabilities.  ![AddAppgroup](/docs/v2/RNSelectAppGroup.png)  New section   added  `Signing & Capabilities` named App Groups. Click + icon  that.  ![Appgroup](/docs/v2/RNAddAppGroup.png)  Enter App group name (create unique app group name ex: group.your.domain.name)  ![AppgroupDetail](/docs/v2/RNAddAppGroupName.png)  ### Step 4 - Edit Podfile In ios folder   react project  open `Podfile`. Paste  following code  replace  extension name  just created: ``` target 'RNHMSExampleBroadcastUpload' do   use_modular_headers!   pod 'HMSBroadcastExtensionSDK' end ``` ![Podfile](/docs/v2/RNPodfile.png)  In terminal change directory  ios  run `pod install` command.  ### Step 5 - Edit SampleHandler Expand `Runner > ExtensionName`  open SampleHandler file.  ![SampleHandler](/docs/v2/RNSampleHandler.png)  Replace  code   code   pass app group name   respected field:  ```swift import ReplayKit import HMSBroadcastExtensionSDK  class SampleHandler: RPBroadcastSampleHandler {      let screenRenderer = HMSScreenRenderer(appGroup: \"group.reactnativehms\")      override func broadcastStarted(withSetupInfo setupInfo: [String : NSObject]?) {         // User  requested  start  broadcast. Setup info   UI extension can  supplied  optional.     }      override func broadcastPaused() {         // User  requested  pause  broadcast. Samples will stop  delivered.     }      override func broadcastResumed() {         // User  requested  resume  broadcast. Samples delivery will resume.     }      override func broadcastFinished() {         // User  requested  finish  broadcast.         screenRenderer.invalidate()     }      override func processSampleBuffer(_ sampleBuffer: CMSampleBuffer,  sampleBufferType: RPSampleBufferType) {         switch sampleBufferType {         case RPSampleBufferType.video:             // Handle video sample buffer              let error = screenRenderer.process(sampleBuffer) {                  error.code == .noActiveMeeting {                     finishBroadcastWithError(NSError(domain: \"ScreenShare\",                                                      code: error.code.rawValue,                                                      userInfo: [NSLocalizedFailureReasonErrorKey : \"You     meeting.\"]))                 }             }             break         case RPSampleBufferType.audioApp:             // Handle audio sample buffer  app audio             break         case RPSampleBufferType.audioMic:             // Handle audio sample buffer  mic audio             break         @unknown default:             // Handle  sample buffer types             fatalError(\"Unknown type  sample buffer\")         }     } } ```  ## How  start screenshare   app To start screen share, app needs  call  `startScreenshare` method  `HMSSDK`.  To start screen share  iOS  need  pass App Group  Preferred Extension name  creating HMSSDK instance  follows: ```js const hmsInstance = await HMSSDK.build({     appGroup: 'group.reactnativehms',     preferredExtension: 'RHHMSExampleBroadcastUpload', }); ```  You can find `app group`  `extension` name  Xcode  `Signing  Capabilities` section  `target > yourExtensionName`.  ![Parameter](/docs/v2/RNParameter.png)  Following   snippet    use this: ```js // hms instance acquired  build method await hmsInstance?.startScreenshare()     .then(d => console.log('Start startScreenshare Success: ', d))     .catch(e => console.log('Start startScreenshare Error: ', e)); ``` ## How  stop screenshare   app To start screen share, application needs  call  `stopScreenshare` method  `HMSSDK`. Following   snippet    use this: ```js // hms instance acquired  build method await hmsInstance?.stopScreenshare()     .then(d => console.log('Stop Screenshare Success: ', d))     .catch(e => console.log('Stop Screenshare Error: ', e)); ``` ## How  get Screen Share Status Application needs  call  `isScreenShared` method  `HMSSDK`. This method returns  Boolean  will  true  inscase ScreenShare  currently active   used,  False  inactive state. ```js // hms instance acquired  build method await hmsInstance?.isScreenShared()     .then(d => console.log('Is Screenshare Success: ', d))     .catch(e => console.log('Is Screenshare Error: ', e)); ```  ## How  display screenshare tracks You can get screenshare track  two ways, one  onTrackListener   track  added    peer's auxiliaryTracks.  Get screenshare track directly  onTrackListener  display it.  ```js const HmsView = hmsInstance?.HmsView; const peerTrackNodes = [];  // Get screenshare track  onTrackListener const onTrackListener = ({   peer,   track,   type, }: {   peer: HMSPeer;   track: HMSTrack;   type: HMSTrackUpdate; }) => {   if(type === HMSTrackUpdate.TRACK_ADDED && track.source === HMSTrackSource.SCREEN && track.type === HMSTrackType.VIDEO){     peerTrackNodes.push({       id: peer.peerID + track.trackId,       peer,       track,     })   } };  <HmsView trackId={peerTrackNodes[0]?.trackId} /> ```  The peer's ScreenShare video    `peer.auxiliaryTracks`    type `HMSTrack[]`.  ```js const HmsView = hmsInstance?.HmsView; const peerTrackNodes = [];  // Get screenshare track  peer const auxiliaryTracks = hmsInstance?.remotePeers[0]?.auxiliaryTracks  auxiliaryTracks?.map(track => {   if(track.source === HMSTrackSource.SCREEN && track.type === HMSTrackType.VIDEO){     peerTrackNodes.push({       id: peer.peerID + track.trackId,       peer,       track,     })   } });  <HmsView trackId={peerTrackNodes[0]?.trackId} /> ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/features/screenshare"
    },
    {
        "title": "adaptive-bitrate.mdx",
        "link": "/react-native/v2/foundation/adaptive-bitrate",
        "keywords": [],
        "headings": [],
        "content": "--- title: Adaptive Bitrate nav: 1.7 ---  Adaptive bitrate (ABR) refers  features  enable dynamic adjustments  video quality—to optimise  end-user experience  diverse network conditions. ABR ensures  every participant  able  consume  highest possible quality video  conferencing  streaming use-cases, based   bandwidth constraints.\r \r In addition  network, ABR can also optimise   right video quality based   size   video element. For example,  video call running  active speaker layout  larger video tiles  require higher quality video track. These adjustments can  made dynamically  adaptive bitrate.\r \r Learn   100ms enables adaptive bitrate in:\r \r * [Conferencing scenarios](#abr-in-conferencing)\r * [Live streaming scenarios](#abr-in-live-streaming)\r \r ## ABR  conferencing\r \r Peers  100ms rooms can publish multiple video quality levels simultaneously. This  called “simulcast”  100ms. Peers  consume  video tracks can upgrade  downgrade video quality.\r \r You can enable simulcast   publishing role's template,  use manual  automatic layer changes   subscriber's side.\r \r ### Publisher-side configuration\r \r Simulcast configuration  opt-in  can  enabled   role's configuration inside  template. The role's publish video quality determines video quality layers  simulcast. For example,  role configured  publish  720p can simulcast 180p, 360p  720p layers.\r \r | Video publish quality  Possible simulcast layers |\r |-----------------------|---------------------------|\r | 1080p                  1080p, 540p, 270p         |\r | 720p                   720p, 360p, 180p          |\r | 480p                   480p, 240p                |\r | 360p                   360p, 180p                |\r | 240p                   240p                      |\r | 180p                   180p                      |\r \r #### Enable via dashboard\r \r Enable \"can publish simulcast\"   template page   particular role. You can also specify  many video quality layers will  simultaneously published  peers   role. The peer will publish  layers assuming network bandwidth permits.\r \r ![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r \r #### Enable via API\r \r Update role configuration using  [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2  3 layers  scale   selected publish layer.\r \r In  example below,  role  configured  publish 720p  3 simulcast layers:\r \r * `f`  full  scale  factor  1 (= 720p)\r * `h`  half  scale  factor  2 (= 360p)\r * `q`  quarter  scale  factor  4 (= 180p)  ```js {     \"publishParams\": {         ...         \"simulcast\": {             \"video\": {                 \"layers\": [                     {                         \"rid\": \"f\",                         \"scaleResolutionDownBy\": 1,                         \"maxBitrate\": 700,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"h\",                         \"scaleResolutionDownBy\": 2,                         \"maxBitrate\": 250,                         \"maxFramerate\": 30                     },                     {                         \"rid\": \"q\",                         \"scaleResolutionDownBy\": 4,                         \"maxBitrate\": 100,                         \"maxFramerate\": 30                     }                 ]             },             \"screen\": {}         }     } } ``` \r ### Subscribe-side behavior\r \r <br/>\r \r #### Manual layer selection\r \r The 100ms client-side SDKs provide methods  set  preferred quality layer   remote peer's video track. See docs   preferred platform:\r \r * [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r * [iOS](/docs/ios/v2/advanced-features/simulcast)\r * [Android](/docs/android/v2/advanced-features/simulcast)\r \r #### Automatic layer selection\r \r <br/>\r <video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r     <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r </video>\r <br/>\r \r - Based  video tile size: The SDK automatically ensures appropriate video layer  subscribed to,  demonstrated   video above. For example,   video element  360 px  width, 360p   closest layer will  selected.\r     - **JavaScript**: The `useVideo` hook   100ms React SDK auto-selects  appropriate video quality layer.\r     - **iOS**: `HMSVideoView` can auto-select video quality layer.\r     - **Android**: _Coming soon_.\r - Based  network quality: ABR will work alongside subscribe degradation  auto-downgrade video quality  peers. This  _coming soon_.\r \r ## ABR  live streaming\r \r 100ms uses  HTTP Live Streaming (HLS) protocol  live streaming scenarios. HLS supports adaptive bitrate    box,  HLS video players can automatically  manually pick appropriate video quality levels.\r \r Learn   [how HLS works   blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/adaptive-bitrate"
    },
    {
        "title": "basics.mdx",
        "link": "/react-native/v2/foundation/basics",
        "keywords": [],
        "headings": [
            "Quickstart",
            "[Github Repo](https://github.com/100mslive/react-native-hms/)",
            "[Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)"
        ],
        "content": "---\r title: Basic Concepts\r nav: 1.1\r ---\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](../guides/quickstart)\r \r \r ### [Github Repo](https://github.com/100mslive/react-native-hms/)\r You can checkout  100ms React Native SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/react-native-hms/) \r \r \r \r ### [Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)\r \r In  [100ms Example App](https://github.com/100mslive/react-native-hms/tree/main/example)   shown   setup  various listeners,  data  store   redux    features  can implement.\r \r We  also implemented multiple views   commonly used. Checkout  [videos & relevant code   Example app](https://github.com/100mslive/react-native-hms/tree/main/example#additional-features).\r ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/basics"
    },
    {
        "title": "handling-audio-video-edge-cases.mdx",
        "link": "/react-native/v2/foundation/handling-audio-video-edge-cases",
        "keywords": [],
        "headings": [],
        "content": "--- title: Handling audio-video edge cases nav: 1.4 ---  ## Introduction  100ms handles  lot  standard audio/video issues internally without  developer needing  handle  explicitly. This page describes  common issues   100ms handles them.  There  3 major issues  issues  can occur   audio/video conference  - Device capture exceptions - Network disconnection/switching network exceptions - Network bandwidth limitation/large room exceptions  ## Device failure  A common issue   failure  capture mic/camera even though  user   devices connected. Common causes include differences  OS/browser implementations  device capture APIs, permission   granted   user,   device   use  another program.  The usual recourse   exceptions   prompt  user action - \"Grant permission\", \"Please close   app using microphone\", \"Switch  Safari\"  100ms' SDKs come   [preview method](../features/preview)  can  called  joining  room. This will test  device failures, network connectivity  throw errors   recommended user action.  ## Network disconnection/Switching networks  Another set  common issues  minor network blips. Common causes    user moves  one room  another,  switches  wifi  data.  100ms will send  notification within 10s  detecting  network disconnection  will automatically retry  connection  available upto 60s. After 60s,  terminal error  thrown   client.  ## Network bandwidth limitation/large rooms  A common occurrence  large rooms,  constrained networks  dropped frames. This results  robotic voices, frozen frames, pixelated screenshare  entire pieces  audio/video   lost.  100ms will automatically prioritize connections  network limits  reached. This prioritization can  controlled  developers using  dashboard  100ms APIs.  eg. A developer can prioritize host's screenshare higher  guests' videos. In low bandwidth constraints, guests' videos will  turned off,  host's screenshare will remain.   ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/handling-audio-video-edge-cases"
    },
    {
        "title": "live-streaming.mdx",
        "link": "/react-native/v2/foundation/live-streaming",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming nav: 1.5 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   Flutter SDK [here](/react-native/v2/features/hls-streaming). ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/live-streaming"
    },
    {
        "title": "recordings.mdx",
        "link": "/react-native/v2/foundation/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.6 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/recordings"
    },
    {
        "title": "security-and-tokens.mdx",
        "link": "/react-native/v2/foundation/security-and-tokens",
        "keywords": [],
        "headings": ["Code sample: Generate app token", "Code sample: Generate management token"],
        "content": "--- title: Authentication  Tokens nav: 1.3 ---  ## Introduction  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](./../features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](/docs/server-side/v2/Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use? You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language.   #### Code sample: Generate app token  <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='client-code-token-0'>  ```javascript var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  var payload = {     access_key: app_access_key,     room_id: '<room_id>',     user_id: '<user_id>',     role: '<role>',     type: 'app',     version: 2,     iat: Math.floor(Date.now() / 1000),     nbf: Math.floor(Date.now() / 1000) };  jwt.sign(     payload,     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='client-code-token-1'>  ```python #!/usr/bin/env python3 import jwt import uuid import datetime import sys  app_access_key = \"<app_access_key>\" app_secret = \"<app_secret>\"  def generate(room_id, user_id, role):     expires = expires  24 * 3600     now = datetime.datetime.utcnow()     exp  = now+ datetime.timedelta(seconds=expires)     return jwt.encode(payload={                 \"access_key\": app_access_key,                 \"type\":\"app\",                 \"version\":2,                 \"room_id\": room_id,                 \"user_id\": user_id,                 \"role\":role,                 \"jti\": str(uuid.uuid4()),                 \"exp\": exp,                 \"iat\": now,                 \"nbf\": now,                 }, key=app_secret) if __name__ == \"__main__\":      len(sys.argv) == 3:         room_id = sys.argv[0]         user_id = sys.argv[1]         role = sys.argv[2]     print(generate(room_id=room_id, user_id=user_id, role=role)) ```  </Tab>  <Tab id='client-code-token-2'  >  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateHmsClientToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"room_id\", \"<room_id>\");     payload.put(\"user_id\", \"<user_id>\");     payload.put(\"role\", \"<role>\");     payload.put(\"type\", \"app\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id='client-code-token-3'  >  ```ruby require 'jwt' require 'securerandom'    $app_access_key = \"<app_access_key>\" $app_secret = \"app_secret\"  def generateAppToken(room_id, user_id, role)     now = Time.now     exp = now + 86400     payload = {         access_key: $app_access_key,         room_id: room_id,         user_id: user_id,         role: role,         type: \"app\",         jti: SecureRandom.uuid,         version: 2,         iat: now.to_i,         nbf: now.to_i,         exp: exp.to_i     }      token = JWT.encode(payload, $app_secret, 'HS256') end  puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"  ```  </Tab>  <Tab id='client-code-token-4'>  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $issuedAt  = new DateTimeImmutable(); $expire    = $issuedAt->modify('+24 hours')->getTimestamp(); $accessKey = \"<app_access_key>\"; $secret = \"<app_secret>\"; $version   = 2; $type      = \"app\"; $role      = \"<role>\"; $roomId    = \"<room_id>\"; $userId    = \"<user_id>\";  $payload = [     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire,     'access_key' => $accessKey,     'type' => \"app\",     'jti' =>  Uuid::uuid4()->toString()     'version' => 2,     'role' => $role,     'room_id' => $roomId,     'user_id' => $userId ];  $token = JWT::encode(     $payload,     $secret,     'HS256' ); ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure.  </Note>  #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](./../guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.   #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.   If  evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics),  can use  public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.  #### Code sample: Generate management token  <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='test-code-0'>  ```js var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  jwt.sign(     {         access_key: app_access_key,         type: 'management',         version: 2,         iat: Math.floor(Date.now() / 1000),         nbf: Math.floor(Date.now() / 1000)     },     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='test-code-1'>  ```py #!/usr/bin/env python3 import jwt import uuid import datetime  app_access_key = '<app_access_key>' app_secret = '<app_secret>'   def generateManagementToken():     expires = 24 * 3600     now = datetime.datetime.utcnow()     exp = now + datetime.timedelta(seconds=expires)     return jwt.encode(payload={         'access_key': app_access_key,         'type': 'management',         'version': 2,         'jti': str(uuid.uuid4()),         'iat': now,         'exp': exp,         'nbf': now         }, key=app_secret)  if __name__ == '__main__':     print(generateManagementToken()) ```  </Tab>  <Tab id=\"test-code-2\">  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateManagementToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"type\", \"management\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id=\"test-code-3\">  ```ruby require 'jwt' require 'securerandom'  $app_access_key = \"<app_access_key>\" $app_secret = \"<app_secret>\"  def generateManagementToken()     now = Time.now     exp = now + 86400     payload = {     access_key: $app_access_key,     type: \"management\",     version: 2,     jti: SecureRandom.uuid,     iat: now.to_i,     nbf: now.to_i,     exp: exp.to_i } token = JWT.encode(payload, $app_secret, 'HS256') return token end  puts generateManagementToken ```  </Tab>  <Tab id=\"test-code-4\">  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $app_access_key = \"<app_access_key>\"; $app_secret = \"<app_secret>\";  $issuedAt   = new DateTimeImmutable(); $expire     = $issuedAt->modify('+24 hours')->getTimestamp();  $payload = [     'access_key' => $app_access_key,     'type' => 'management',     'version' => 2,     'jti' =>  Uuid::uuid4()->toString(),     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire, ];  $token = JWT::encode($payload, $app_secret, 'HS256'); ?> ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.  </Note> ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/security-and-tokens"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/react-native/v2/foundation/templates-and-roles",
        "keywords": [],
        "headings": ["API reference"],
        "content": "--- title: Templates  Roles nav: 1.2 ---  ## Introduction  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              |   ## API reference  Apart   dashboard,  programmatic way  interact  templates  via [API](/server-side/v2/policy/template-object). ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/foundation/templates-and-roles"
    },
    {
        "title": "faq.mdx",
        "link": "/react-native/v2/guides/faq",
        "keywords": [],
        "headings": ["Could not invoke HMSSDK.build"],
        "content": "--- title: FAQ nav: 2.5 ---  ## Could  invoke HMSSDK.build  ![error](https://user-images.githubusercontent.com/56931905/174788439-53a39a54-847e-46f7-9104-7524b1547992.jpg)  This error generally appears  development mode due  hot reloading. When  peer  joined  room    app  hot reloaded   terminal,  peer  still   room    tries  join back  error occurs. To make sure  error   occur    remove  peer   room.  -   To avoid  can add `instance.leave()` function   unmounting   Home Screen,  whenever  app  hot reloaded  leads  unmounting   Home screen  leave function  called.  ```js section=CouldNotInvokeHMSManagerBuild sectionIndex=1 const onLeavePress = async () => {     await instance         ?.leave()         .then((d) => console.log('Leave Success: ', d))         .catch((e) => console.log('Leave Error: ', e)); };  useEffect(() => {     return () => {         onLeavePress();     }; }, []); ```  -   If  error occurred  can either join  web app  remove  peer   still present due  hot reloading   can kill  app  rebuild it. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/guides/faq"
    },
    {
        "title": "joining-with-preview.mdx",
        "link": "/react-native/v2/guides/joining-with-preview",
        "keywords": [],
        "headings": ["Attaching Preview and Error Listeners", "Calling Preview and Join functions"],
        "content": "--- title: Joining  Preview nav: 2.4 ---  ## Attaching Preview  Error Listeners  It  important  attach preview listener  error listener  calling  preview function  order  get updates  preview got executed successfully    failed.  ```js section=AttachingPreviewAndErrorListeners sectionIndex=1 import { HMSSDK, HMSUpdateListenerActions }  '@100mslive/react-native-hms';  const build = () => {     const hmsInstance = HMSSDK.build(); // save  hms instance      hmsInstance.addEventListener(         HMSUpdateListenerActions.ON_PREVIEW,         onPreviewListener // function  will  called  Preview success     );      hmsInstance.addEventListener(         HMSUpdateListenerActions.ON_JOIN,         onJoinListener // function  will  called  Join success     );      hmsInstance.addEventListener(         HMSUpdateListenerActions.ON_ERROR,         onErrorListener // function  will  called  Preview  Join failure     ); }; ```  ## Calling Preview  Join functions  Preview screen   frequently used UX element  allows users  check   input devices  working properly  set  initial state (mute/unmute)   audio  video tracks  joining. Once  listeners  attached  can call  preview function. After  preview function  called    wait   preview  error callback  calling  join function.  ```js section=CallingPreviewAndJoinFunctions sectionIndex=1 import { HMSException }  '@100mslive/react-native-hms';  const preview = () => {     hmsInstance.preview(config); };  const onErrorListener = (data: HMSException) => {     //  callback will  triggered  preview  join functions fails };  const onPreviewListener = () => {     //  callback will  triggered  preview  successful      call join     hmsInstance.join(config); };  const onJoinListener = () => {     //  callback will  triggered  join  successful }; ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/guides/joining-with-preview"
    },
    {
        "title": "quickstart.mdx",
        "link": "/react-native/v2/guides/quickstart",
        "keywords": [],
        "headings": [
            "Getting started",
            "Prerequisites",
            "Installing the dependencies",
            "Permissions",
            "For Android Permissions",
            "For iOS Permissions",
            "Concepts",
            "Initializing the SDK",
            "Add event listeners",
            "Joining a room",
            "Leaving the room",
            "Render video",
            "Mute/Unmute local Audio/Video tracks",
            "[Github Repo](https://github.com/100mslive/react-native-hms/)",
            "[Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)"
        ],
        "content": "--- title: React Native Quickstart Guide nav: 2.1 ---  ## Getting started  Hello there! In  guide,  build  video conferencing application using  React Native SDK. We'll  using functional components   powerful hooks provided   SDK  build  app   can  video call   friends.  ## Prerequisites  To get started    familiar  basics  [React Native](https://reactnative.dev/).  ## Installing  dependencies  ```bash section=InstallingTheDependencies sectionIndex=1 npm install --save @100mslive/react-native-hms ```  ## Permissions  ### For Android Permissions  Add following permissions  `AndroidManifest.xml`  ```xml section=ForAndroidPermissions sectionIndex=1 <uses-feature android:name=\"android.hardware.camera\"/> <uses-feature android:name=\"android.hardware.camera.autofocus\"/> <uses-permission android:name=\"android.permission.CAMERA\"/> <uses-permission android:name=\"android.permission.CHANGE_NETWORK_STATE\"/> <uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\"/> <uses-permission android:name=\"android.permission.RECORD_AUDIO\"/> <uses-permission android:name=\"android.permission.BLUETOOTH\"/> <uses-permission android:name=\"android.permission.INTERNET\"/> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/> <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /> ```  You will also need  request Camera  Record Audio permissions  runtime   join  call  display  preview. Please follow [Android Documentation](https://developer.android.com/training/permissions/requesting#request-permission)  runtime permissions.  ### For iOS Permissions  Add following lines  `Info.plist` file  ```xml section=ForIOSPermissions sectionIndex=1 <key>NSCameraUsageDescription</key> <string>Please allow access  Camera  enable video conferencing</string> <key>NSMicrophoneUsageDescription</key> <string>Please allow access  Microphone  enable video conferencing</string> <key>NSLocalNetworkUsageDescription</key> <string>Please allow access  network usage  enable video conferencing</string> ```  ## Concepts  -   Room: When  join  conference call,  participants  said     video call room. -   Peer: A participant   video call. You   local peer  others  remote peers. -   Track: Media. There  two types  track  peer can  - audio  video.  ## Initializing  SDK  Call  function given   initialise  SDK  ```js section=InitializingTheSDK sectionIndex=1 import { HMSSDK }  '@100mslive/react-native-hms';  const hmsInstance = await HMSSDK.build(); ```  This function will return  instance  HMSSDK  will  used  calling various functions  accessing data.  ## Add event listeners  Add event listeners    events  want updates    onPreview, onJoin, onError etc. The actions can  found  HMSUpdateListenerActions class.  The event handlers   way  handling  update happening  hms. It  advised  attach   event listeners    miss  update.  ```js section=AddEventListeners sectionIndex=1 import { HMSUpdateListenerActions }  'react-native-hms';  // instance acquired  build() method hmsInstance.addEventListener(     HMSUpdateListenerActions.ON_PREVIEW,     onPreview // function  will  called  Preview success );  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_ERROR, onError);  hmsInstance.addEventListener(HMSUpdateListenerActions.ON_JOIN, onJoin); ```  ## Joining  room  To join  room 3 fields  required:  -   `username`: The name   user. This   value  will  set   peer object   visible  everyone connected   room. -   `authToken`: A client-side token   used  authenticate  user. You can read    generate  token [here](https://docs.100ms.live/react-native/v2/guides/token). -   `userID`: A unique ID  will  used  identify user. -   `roomID` (optional): The ID   room   wanna join  ```js section=JoinRoom sectionIndex=1 import { HMSConfig }  'react-native-hms';  // instance acquired  build() method const HmsConfig = new HMSConfig({ authToken, userID, roomID, userName });  hmsInstance.preview(HmsConfig); //  start preview // or hmsInstance.join(HmsConfig); //  join  room ```  ## Leaving  room  Before  go ahead  adding video, let us add  way  leave  room  well. We can call  leave method  hmsActions  leave  room.  Once  done   call  want  exit, call leave   HMSSDK instance  created  join it. Also  can always acquire instance  HMS using build() method.  ```js section=LeavingRoom sectionIndex=1 hmsInstance.leave(); ```  ## Render video  Let us next add  way  show  tile  every participant   room. We use HmsView component  render video  screen. This component takes trackId  scaleType  HMSVideoTrack  renders  corresponding track. The prop scaleType can  selected  HMSVideoViewMode  required. We can also add mirror  boolean prop  true  flip videos horizontally. Here   code snippet explaining  way  link  videoTrack  HmsView.  ```js section=RenderVideo sectionIndex=1 import { HmsView, HMSVideoViewMode }  'react-native-hms';  const styles = StyleSheet.create({     hmsView: {         height: '100%',         width: '100%'     } });  <HmsView     style={styles.hmsView}     trackId={trackId}     mirror={true}     scaleType={HMSVideoViewMode.ASPECT_FILL} />; ```  There  2 types  Peers -  localPeer & remotePeers. To extract trackId  peers  can use following code snippet.  ```js section=RenderVideo sectionIndex=2 const localTrackId = hmsInstance.localPeer.videoTrack.trackId;  const remoteTrackId = hmsInstance.remotePeers[index].videoTrack.trackId; ```  These track IDs can directly  passed  HmsView component  > A Pro tip:  fastest updates  can use ON_PEER_UPDATE  ON_TRACK_UPDATE listeners,  listeners get updated localPeer  remotePeers whenever    event related   values.  ```js section=RenderVideo sectionIndex=3 HmsInstance.addEventListener(HMSUpdateListenerActions.ON_PEER_UPDATE, onPeerListener);  HmsInstance.addEventListener(HMSUpdateListenerActions.ON_TRACK_UPDATE, onTrackListener);  const onPeerListener = ({     remotePeers,     localPeer }: {     peer: HMSPeer,     room?: HMSRoom,     type?: HMSPeerUpdate,     localPeer: HMSLocalPeer,     remotePeers: HMSRemotePeer[] }) => {     updateVideoIds(remotePeers, localPeer); //  function can  used  update local  remotePeers  React-Native side };  const onTrackListener = ({     remotePeers,     localPeer }: {     peer: HMSPeer,     track: HMSTrack,     room?: HMSRoom,     type?: HMSTrackUpdate,     localPeer: HMSLocalPeer,     remotePeers: HMSRemotePeer[] }) => {     updateVideoIds(remotePeers, localPeer); }; ```  ## Mute/Unmute local Audio/Video tracks  Mute  something  applies   audio  video. When  mute audio,    heard   people. When  mute video,  will   broadcasting  video   people.  It can  invoked   local (you) peers' audio  video tracks.  You get  reference    local peer  localPeer  HMSSDK instance.  ```js section=MuteVideo sectionIndex=1 // instance acquired  build() method  hmsInstance.localPeer.localAudioTrack().setMute(true); // audio track  hmsInstance.localPeer.localVideoTrack().setMute(true); // video track ```   ### [Github Repo](https://github.com/100mslive/react-native-hms/) You can checkout  100ms React Native SDK Github repo  also contains  fully fledged [Example app implementation here](https://github.com/100mslive/react-native-hms/)     ### [Example App](https://github.com/100mslive/react-native-hms/tree/develop/example)  In  [100ms Example App](https://github.com/100mslive/react-native-hms/tree/main/example)   shown   setup  various listeners,  data  store   redux    features  can implement.  We  also implemented multiple views   commonly used. Checkout  [videos & relevant code   Example app](https://github.com/100mslive/react-native-hms/tree/main/example#additional-features). ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/guides/quickstart"
    },
    {
        "title": "token-endpoint.mdx",
        "link": "/react-native/v2/guides/token-endpoint",
        "keywords": [],
        "headings": [
            "Overview",
            "Get an app token using token endpoint",
            "Example client-side implementation",
            "Disable 100ms token endpoint",
            "Error Response"
        ],
        "content": "--- title: Auth Token Endpoint Guide nav: 2.3 ---  ## Overview  100ms provides  option  get `App Tokens` without setting   token generation backend service  simplify  integration journey  testing  [sample app](https://github.com/100mslive/100ms-web)  building integration  100ms.  You can find  token endpoint   [developer page](https://dashboard.100ms.live/developer)   100ms dashboard.  ![Token endpoint](/guides/token-endpoint-dashboard.png)  We recommend  move   token generation service   transition  app  production,   token endpoint service will  scale  production.  The \"Sample Apps\" built using 100ms client SDKs require  `App Token`  join  room  initiate  video conferencing  live streaming session. Please check  [Authentication  Tokens guide](./../foundation/security-and-tokens)  Please note    use  token endpoint  create  `Management Token`  server APIs. Refer   [Management Token section](./../foundation/security-and-tokens#management-token)  Authentication  Tokens guide   information.  ## Get  app token using token endpoint  You can use  token endpoint   100ms dashboard  building integration  100ms. This acts   tool enabling front-end developers  complete  integration without depending   backend developers  set   token generation backend service.  **URL format:** `<YOUR_TOKEN_ENDPOINT>api/token`  100ms token endpoint can generate  app token   inputs passed,   room_id, role, & user_id (optional -  internal user identifier   peer's user_id). You can use [jwt.io](https://jwt.io/)  validate whether  app token contains   input values.  <PostRequest title=\"https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://prod-in2.100ms.live/hmsapi/johndoe.app.100ms.live/api/token' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"room_id\":\"633fcdd84208780bf665346a\",     \"role\":\"host\",     \"user_id\":\"1234\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOi***************************R3tT-Yk\",     \"msg\": \"token generated successfully\",     \"status\": 200,     \"success\": true,     \"api_version\": \"2.0.192\" } ```  </ResponseBox>  ### Example client-side implementation  You can directly add    client-side implementation, check  [sample app](https://github.com/100mslive/react-native-hms/blob/7bd6420ea49d520acd881de9ac5d76b36498bb67/example/src/services/index.ts#L3)  reference.  ### Disable 100ms token endpoint  Due   security concerns,    wish  use  token endpoint  generate app tokens,   can disable    [Developers page](https://dashboard.100ms.live/developer)   dashboard  disabling  option \"Disable &lt;room_id&gt;/&lt;role&gt; link format.\"  ![Disable Token endpoint](/guides/disable-token-endpoint.png)  #### Error Response  Once  disabled    dashboard,  requests  create  app token using  100ms token endpoint will throw   error:  ```json {     \"success\": false,     \"msg\": \"Generating token using  room_id  role  disabled.\",     \"api_version\": \"2.0.192\" } ``` ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/guides/token-endpoint"
    },
    {
        "title": "token.mdx",
        "link": "/react-native/v2/guides/token",
        "keywords": [],
        "headings": [],
        "content": "--- title: Auth Token Quickstart Guide nav: 2.2 ---  ## Create  100ms account  - Create  account  [Dashboard  100ms](https://dashboard.100ms.live/)  ![Create Account](/docs/guides/token/create-account.png)  - After   created  account    Confirm  Email , check  promotions tab   Mail Box    find it.  - Login   Dashboard   will see  option  Create  first app. Click  it.  ![Create  first app](/docs/guides/token/starter-kit-initialize-first-step.png)  - Then   see  popup  multiple starter kits, hover  one   starter kits  click `Deploy`. We will choose \"Video Conferencing\"  now.  ![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)  - In  `Choose  deployment` step, select 100ms  enter  subdomain  wish   `Subdomain` field.  ![Domain details](/docs/guides/token/domain-details.png)  - After  App  set click  \"Go  Dashboard\"  [Go Here](https://dashboard.100ms.live/dashboard)  ![Dasboard](/docs/guides/token/go-to-dashboard.png)  ## Create  room  - Go   [Room  Dashboard](https://dashboard.100ms.live/rooms)  click  \"Create Room\" , While creating  room  can specify  name, roles  enable recording.  ![Create Room](/docs/guides/token/create-room.png)  - You will now see \"Room Details\" section     `room_id` created, copy  somewhere.  ![Room Id](/docs/guides/token/room-id.png)  ## Get  temporary token  100ms dashboard  Any client connecting calling 100ms' service needs  authenticate using  auth token. In production      servers generating  tokens (see  [here](/docs/javascript/v2/foundation/security-and-tokens)),    quick start  can use  dashboard  create  token  you. The token will expire  24 hours     hard-coded   production app.  - To get  temporary token click  \"Join room\" button.  ![Join Room](/docs/guides/token/join-room.png)  - In  popup  shows  click  icon   key shape next   role  want  join as.  ![Copy Token](/docs/guides/token/copy-token.png)  The token will  copied   clipboard. Use  along   `room_id`  proceed   quickstart guide. ",
        "platformName": "React Native",
        "objectID": "/react-native/v2/guides/token"
    },
    {
        "title": "end-active-room.mdx",
        "link": "/server-side/v2/active-rooms/end-active-room",
        "keywords": [],
        "headings": ["Arguments", "Why would you use this API?"],
        "content": "--- title: End  active room nav: 3.8 ---  Trigger  request  end  active room.  <PostRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>/end-room\" /> <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/active-rooms/<room_id>/end-room' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"reason\": \"Class  ended\",     \"lock\": false }' ```  </Request> <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"message\": \"session  ending\" } ```  </ResponseBox>  ## Arguments  | Name                        Type       Description                                                                                                                     Required | | :-------------------------  :--------  :-----------------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param  `string`   Unique identifier   room  wish  disable. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                              Yes      | | reason <br/> — body param   `string`   Description  indicate  reason  ending  active room.                                                                  No       | | lock <br/> — body param     `boolean`  Status   room   set. <br/>`Allowed values`: true, false. <br/>`Default`: false (ends  current active session only)  No       |  > **Warning:** If  set  lock argument  `true`,  will end  active room  users will   able  join  room later  well. You can use [enable  room API](/server-side/v2/Rooms/disable-or-enable)  [dashboard](https://dashboard.100ms.live/rooms)  enable  room again.  ## Why   use  API?  -   To disconnect  connected peers   pre-defined timestamp   wish  add  hard stop   sessions. -   Use   allow peers  join  room   daily   respective time slot.     -   Trigger  API   end   session   lock argument  `true`,     -   The next day, one minute   schedule - use  [enable  room API](/server-side/v2/Rooms/disable-or-enable)  enable  room  allow  users  join  session. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/end-active-room"
    },
    {
        "title": "object.mdx",
        "link": "/server-side/v2/active-rooms/object",
        "keywords": [],
        "headings": ["Object", "Session object", "Postman collection"],
        "content": "--- title: Active room object nav: 3.2 ---  The active room object enables   perform actions   room object.  The active room object   existing room object  additional information like  session object (with  array  peer identifiers). This    new object.  <EndpointRequest title=\"https://api.100ms.live/v2/active-rooms\" />  ## Object  | Argument     Description                                                                                    | | -----------  ---------------------------------------------------------------------------------------------- | | id           Unique identifier   room                                                                 | | name         Alias   room                                                                             | | customer_id  Unique identifier   account                                                             | | session      Object  type `session`. This object contains  array   unique identifier   peers. |  ### Session object  | Argument    Description                                                         | | ----------  ------------------------------------------------------------------- | | id          Unique identifier   session                                   | | created_at  Timestamp   session started.                                 | | peers       This object contains  array   unique identifier   peers |  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/object"
    },
    {
        "title": "overview.mdx",
        "link": "/server-side/v2/active-rooms/overview",
        "keywords": [],
        "headings": [
            "When does a room become active?",
            "Active room APIs",
            "When should I use room APIs and Active room APIs?",
            "What can I build?",
            "Postman collection"
        ],
        "content": "--- title: Overview nav: 3.1 ---  ## When   room become active?  A room becomes active  one   peers join  room  start real-time video/audio interactions   video conferencing  live streaming session.  ![Active room](/docs/v2/active-room.png)  ## Active room APIs  Use Active Room APIs  perform server-to-server actions  automate  business logic  100ms rooms. These actions can  used  control peer behavior  build interactivity scenarios  -   Control peers  [changing roles](/server-side/v2/active-rooms/update-a-peer), [removing peers](/server-side/v2/active-rooms/remove-peers),  [ending  room](/server-side/v2/active-rooms/end-active-room) -   Build interactivity scenarios  [updating peer metadata](/server-side/v2/active-rooms/update-a-peer)  [sending broadcast/direct messages](/server-side/v2/active-rooms/send-message) -   [Retrieving  details   active room](/server-side/v2/active-rooms/retrieve-active-room)  [a specific peer](/server-side/v2/active-rooms/retrieve-peer) will act  supporting pillars  implement   mentioned actions.  ### When  I use room APIs  Active room APIs?  -   **Room APIs**: You can use room APIs  create  room, link  template,  update room properties   recording configuration  server region. -   **Active room APIs**: You can use  APIs  control peer behavior  build interactivity scenarios   active room.  ### What can I build?  We  drafted  examples  help  understand  active room APIs will enable   control peer behavior  build interactivity scenarios:  -   [Fetch  list  peers](/server-side/v2/active-rooms/retrieve-active-room)   active room  perform actions like:     -   Nudge  specific peer   [video  turned off](/server-side/v2/active-rooms/retrieve-peer#why-would-you-use-this-api).     -   Send  broadcast message   peers  inform  speaker's unavailability. For [example](/server-side/v2/active-rooms/send-message#why-would-you-use-this-api), send  message    students   teacher  join  session   last minute.     -   [Kick  peer](/server-side/v2/active-rooms/remove-peers#why-would-you-use-this-api)  case   misconduct(abusive chat). -   To build real-time interactivity, like [updating  custom avatar](/server-side/v2/active-rooms/update-a-peer#why-would-you-use-this-api)   video tile, [virtual poker handler](/server-side/v2/active-rooms/send-message#example2-poker-handler)   multiplayer game,  more.  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/overview"
    },
    {
        "title": "remove-peers.mdx",
        "link": "/server-side/v2/active-rooms/remove-peers",
        "keywords": [],
        "headings": ["Arguments", "Why would you use this API?"],
        "content": "--- title: Remove peers nav: 3.7 ---  You can use  API  remove/disconnect  connected peer   active room. 100ms provides options  disconnect  peer either   peer_id  role.  1. If `peer_id`  specified -- respective connected peer will  disconnected   active room. 2. If  `role`  specified --   connected peers assigned   particular role will  disconnected   active room. 3. If  `peer_id`  `role`  specified -- preference will  given   peer_id   respective peer will  disconnected   active room. 4. If  `peer_id`  `role`   specified --  must specify peer_id  role   request.  <PostRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>/remove-peers\" /> <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/active-rooms/<room_id>/remove-peers' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"peer_id\": \"fd9e87d8-5c7b-4750-932f-d8d2ff18b70b\",     \"role\": \"host\",     \"reason\": \"\" }' ```  </Request> <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"message\": \"peer remove request submitted\" } ```  </ResponseBox>  ## Arguments  | Name                        Type      Description                                                                                                                                               Required    | | :-------------------------  :-------  :-------------------------------------------------------------------------------------------------------------------------------------------------------  :---------- | | room_id <br/> — path param  `string`  Unique identifier   room    peer  connected. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                                             Yes         | | peer_id <br/> — body param  `string`  Unique identifier   connected peer/participant  wish  remove   active room. <br/><br/>**Example**: fd9e87d8-5c7b-4750-932f-d8d2ff18b70b  Conditional | | role <br/> — body param     `string`  You can use   remove  list  connected peers   specified role type   active room.                                                   Conditional | | reason <br/> — body param   `string`  You can specify  message   passed   connected peers   active room.                                                                     No          |  > **Note: Conditional Arguments** <br/><br/> You  define either   arguments (peer_id  role)   payload   request   successful.  ## Why   use  API?  -   Use  API  remove  peer   active room  misconduct (e.g., abusive chat). This can  combined  custom logic   generate app tokens   user  block   future joins. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/remove-peers"
    },
    {
        "title": "retrieve-active-room.mdx",
        "link": "/server-side/v2/active-rooms/retrieve-active-room",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Retrieve  specific active room nav: 3.3 ---  Retrieves  details   specific active room. 100ms allows   retrieve details   active room   ID.  -   You can use  API  check   room  currently active  not. -   You can also use   conjunction  [retrieve peer API](/server-side/v2/active-rooms/retrieve-peer)  perform actions   [updating peers](/server-side/v2/active-rooms/update-a-peer), [sending messages](/server-side/v2/active-rooms/send-message),  [removing peers](/server-side/v2/active-rooms/remove-peers) based   use case requirements.  If  need  get  list   active sessions,  can use  [list sessions API](/server-side/v2/Sessions/list-sessions)   filter `active`  `true`.  <GetRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/active-rooms/<room_id>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"id\": \"631a0f990e6ffae22efa610c\",     \"name\": \"5d971abb-8e51-4c86-9d35-8e619c3d8877\",     \"customer_id\": \"627cdddff2e4e30487862ad1\",     \"session\": {         \"id\": \"633c22b420636a0cb361dea0\",         \"created_at\": \"2022-10-04T12:10:28.939011796Z\",         \"peers\": [             \"c0bbae7e-fbc0-48c3-89aa-83f85427acbf\",             \"161d2478-1535-49a0-b48b-326aaa26dcd0\",             \"5e2c13af-dd3d-4a46-8265-f4648a0d68ef\"         ]     } } ```  </ResponseBox>  ## Arguments  | Name                        Type      Description                                                                                                          Required | | :-------------------------  :-------  :------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param  `string`  Unique identifier   active room  wish  fetch details for. <br/><br/>**Example**: 631a0f990e6ffae22efa610c  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/retrieve-active-room"
    },
    {
        "title": "retrieve-peer.mdx",
        "link": "/server-side/v2/active-rooms/retrieve-peer",
        "keywords": [],
        "headings": ["Arguments", "Why would you use this API?"],
        "content": "--- title: Retrieve  specific peer nav: 3.4 ---  Retrieves  details   specific peer   active room. You can use  peer_id  retrieve  details   peer. Use [retrieve active room state API](/server-side/v2/active-rooms/retrieve-active-room)  get  list  connected peers   active room.  > **Note:** You can leverage  API  retrieve  details  connected peers   active room only. To retrieve details   peers  left  session already, use  [Retrieve  specific session API](/server-side/v2/Sessions/retrieve-a-session)  <GetRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>/peers/<peer_id>\" /> <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/active-rooms/<room_id>/peers/<peer_id>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"2e8fc83e-6aef-4ca8-9124-bedc253f3529\",     \"name\": \"nixon-test2\",     \"user_id\": \"4c661446-f6f2-49c2-a317-16892756a2fa\",     \"metadata\": {         \"Lower_hand\": true,         \"business_user_id\": \"XYZ_1234\"     },     \"role\": \"backstage\",     \"joined_at\": \"2022-10-06T05:22:41.635589462Z\",     \"tracks\": {         \"780a28e0-f2df-450b-9954-70307a440530\": {             \"id\": \"780a28e0-f2df-450b-9954-70307a440530\",             \"stream_id\": \"2cc4afed-20ba-4793-a223-d4c76c331456\",             \"mute\": false,             \"type\": \"video\",             \"source\": \"regular\",             \"started_at\": \"2022-10-06T05:22:41.752327705Z\",             \"description\": \"\"         },         \"d6831044-3584-42aa-92be-efd051cae353\": {             \"id\": \"d6831044-3584-42aa-92be-efd051cae353\",             \"stream_id\": \"2cc4afed-20ba-4793-a223-d4c76c331456\",             \"mute\": true,             \"type\": \"audio\",             \"source\": \"regular\",             \"started_at\": \"2022-10-06T05:22:41.752327705Z\",             \"description\": \"\"         }     } } ```  </ResponseBox>  ## Arguments  | Name                         Type      Description                                                                                                                           Required | | :--------------------------  :-------  :-----------------------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param   `string`  Unique identifier   room   peer  active. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                               Yes      | | peer_id <br/> — path param  `string`  Unique identifier   peer/participant  wish  fetch details for. <br/><br/>**Example**: 1038fa72-9345-4651-beab-436f9242ebf4  Yes      |  ## Why   use  API?  -   To check   specific peer  enabled/disabled  audio/video/screen-share   given time   active room. -   To check   specific peer  on-stage  backstage   particular time. -   You can also use  API  store peer metadata   database  retrieve    abruptly disconnected peer   join  session again. For example,  enable  user  resume playing  multiplayer game. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/retrieve-peer"
    },
    {
        "title": "send-message.mdx",
        "link": "/server-side/v2/active-rooms/send-message",
        "keywords": [],
        "headings": [
            "Arguments",
            "Why would you use this API?",
            "Example1 - Inform unavailability of teacher",
            "Example2 - Poker handler"
        ],
        "content": "--- title: Send message nav: 3.6 ---  You can use  API  send messages   single peer,  set  peers (a particular role),   connected peers   active room. This API supports arguments   `peer_id`  `role`  implement this.  1. If `peer_id`  specified -- message will  sent    specified connected peer. 2. If  `role`  specified -- message will  sent    connected peers assigned   particular role. 3. If  `peer_id`  `role`  specified -- preference will  given   peer_id   message will  sent    specified connected peer. 4. If  `peer_id`  `role`   specified -- message(broadcast) will  sent    connected peers.  <PostRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>/send-message\" />  <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/active-rooms/<room_id>/send-message' \\ --header 'Authorization: Bearer <management_token>' \\     --header 'Content-Type: application/json' \\ --data-raw '{     \"peer_id\":\"018b84da-0786-48c5-a3a6-02961d9eac03\",     \"role\":\"\",     \"message\": \"hi\",     \"type\":\"chat\" }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"message\": \"message sent\" } ```  </ResponseBox>  ## Arguments  | Name                        Type      Description                                                                                                                                    Required | | :-------------------------  :-------  :--------------------------------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param  `string`  Unique identifier   room   peer  active. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                                        Yes      | | message <br/> — body param  `string`  Actual message   sent.                                                                                                                     Yes      | | peer_id <br/> — body param  `string`  Unique identifier   peer/participant    wish  send  message. <br/><br/>**Example**: 1038fa72-9345-4651-beab-436f9242ebf4  No       | | role <br/> — body param     `string`  You can use   send  message   set  peers (a particular role).                                                                    No       | | type <br/> — body param     `string`  Indicates  type  message sent,  example, chat  emoji.                                                                                No       |  ## Why   use  API?  -   Based   requirements,  can use  API  send  broadcast message, private message,  reactions like emojis.  ### Example1 - Inform unavailability  teacher  -   Suppose  teacher  attend  virtual classroom session   last minute;  can inform   connected peers (students)  sending  broadcast message  inform  teacher's unavailability.  ### Example2 - Poker handler  -   You can build  handler   multiplayer game like Poker using  API  conjunction   \"peer.join.success\" [webhook event](/server-side/v2/introduction/webhook#peer-join-success). Let's consider  scenario: -   Four users join  game  start playing --  app server stores  user_id   user. -   Total bet amount -- create  custom event  show  data    particular player.     **Example payload**:     ```json     {         \"peer_id\": \"018b84da-0786-48c5-a3a6-02961d9eac03\", // will send  data   peer_id specified.         \"message\": \"<TOTAL_BET_AMOUNT>\",         \"type\": \"custom_event\"     }     ``` -   Showdown -- create  custom event  show  data    players.     **Example payload**:     ```json     {         \"message\": \"<ACTUAL_CARD_REVEAL_DATA>\", // will send  data    peers   active room  peer_id  role   specified.         \"type\": \"custom_event\"     }     ``` ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/send-message"
    },
    {
        "title": "update-a-peer.mdx",
        "link": "/server-side/v2/active-rooms/update-a-peer",
        "keywords": [],
        "headings": ["Arguments", "Why would you use this API?"],
        "content": "--- title: Update  peer nav: 3.5 ---  You can use  API  update  details   connected peer,   name, role,  metadata (custom/additional information  build real-time interactivity scenarios).  <PostRequest title=\"https://api.100ms.live/v2/active-rooms/<room_id>/peers/<peer_id>\" /> <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/active-rooms/<room_id>/peers/<peer_id>' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"nixon-test2\",     \"metadata\": \"{\\\"isHandRaised\\\":false,\\\"isBRBOn\\\":true}\" }' ```  </Request> <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"2b8bee10-5733-43af-a2f3-ecce623cbb90\",     \"name\": \"nixon-test2\",     \"user_id\": \"4f33d87f-e86b-4f58-97c6-d07fc476d936\",     \"metadata\": \"{\\\"isHandRaised\\\":false,\\\"isBRBOn\\\":true}\",     \"role\": \"host\",     \"joined_at\": \"2022-10-12T12:56:17.759148635Z\",     \"tracks\": {         \"a22befac-b77c-49bf-82ff-7b93c9f49fef\": {             \"id\": \"a22befac-b77c-49bf-82ff-7b93c9f49fef\",             \"stream_id\": \"b90ef533-2af9-412c-9442-52cd70e758b6\",             \"mute\": true,             \"type\": \"audio\",             \"source\": \"regular\",             \"started_at\": \"2022-10-12T12:56:17.932404678Z\",             \"description\": \"\"         },         \"a8cfe2d3-9fd8-47a0-b5ca-3203fd84bbd7\": {             \"id\": \"a8cfe2d3-9fd8-47a0-b5ca-3203fd84bbd7\",             \"stream_id\": \"b90ef533-2af9-412c-9442-52cd70e758b6\",             \"mute\": true,             \"type\": \"video\",             \"source\": \"regular\",             \"started_at\": \"2022-10-12T12:56:17.932404678Z\",             \"description\": \"\"         }     } } ```  </ResponseBox>  ## Arguments  | Name                         Type      Description                                                                                                                                              Required | | :--------------------------  :-------  :------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param   `string`  Unique identifier   room   peer  active. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                                                  Yes      | | peer_id <br/> — path param   `string`  Unique identifier   peer/participant    wish  update details. <br/><br/>**Example**: 1038fa72-9345-4651-beab-436f9242ebf4              Yes      | | name <br/> — body param      `string`  The name   peer used   active session.                                                                                                         No       | | role <br/> — body param      `string`  You can use   update  role type   peer. For example,  take  peer   breakout room.                                                  No       | | metadata <br/> — body param  `object`  You can use  stringified JSON  update various custom/additional information   peer   business_user_id, raise_hand/lower_hand info,    No       |  ## Why   use  API?  -   You can use  APIs  update various properties   connected peer,   avatar, BRB status, hand-raise status, etc. -   **Custom Avatar:**     -   A user updates  profile information   app/ongoing session;  data  stored   data store.     -   Use Update peer API  pass  profile picture data   data store   client app  display    respective connected peer's avatar (based  user_id mapping). ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/active-rooms/update-a-peer"
    },
    {
        "title": "release-notes.mdx",
        "link": "/server-side/v2/changelog/release-notes",
        "keywords": [],
        "headings": [
            "November 23, 2022.",
            "Additions",
            "November 18, 2022.",
            "Additions",
            "November 03, 2022.",
            "Additions",
            "Developer experience",
            "October 06, 2022.",
            "Additions",
            "Developer experience",
            "Deprecations",
            "September 24, 2022.",
            "Server update",
            "Additions",
            "API Improvements",
            "Developer experience",
            "Deprecations"
        ],
        "content": "--- title: Release Notes nav: 7.1 ---  This Changelog highlights notable changes   100ms server-side API,   API additions, improvements,  deprecations. Also,  included developer experience improvements   page  keep   track  items  will enhance  integration journey.  ## November 23, 2022.  #### Additions  -   Added  new event [role.change.failure](./../introduction/webhook#role-change-failure)  notify role change failures.  ## November 18, 2022.  #### Additions  -   Added new fields  HLS, beam, recording, role change, peer leave  session close webhook events.  | Event                                                                       Fields                                                                                                                         | | :-------------------------------------------------------------------------  :----------------------------------------------------------------------------------------------------------------------------- | | [hls.recording.success](./../introduction/webhook#hls-recording-success)    `recording_path`, <br/>`recording_presigned_url`, <br/>`hls_vod_recording_path`, <br/>`hls_vod_recording_presigned_url`. <br/> | | [hls.failure](./../introduction/webhook#hls-failure)                        `recording_single_file_per_layer_enabled`, <br/>`recording_vod_playlist_enabled`. <br/>                                        | | [hls.stopped.success](./../introduction/webhook#hls-stopped-success)        `recording_single_file_per_layer_enabled`, <br/>`recording_vod_playlist_enabled`. <br/>                                        | | [hls.started.success](./../introduction/webhook#hls-started-success)        `recording_single_file_per_layer_enabled`, <br/>`recording_vod_playlist_enabled`, <br/>`max_width`, <br/>`max_height`. <br/>   | | [beam.recording.success](./../introduction/webhook#beam-recording-success)  `recording_path` <br/>`recording_presigned_url`. <br/>                                                                         | | [beam.started.success](./../introduction/webhook#beam-started-success)      `max_width`, <br/>`max_height`. <br/>                                                                                          | | [recording.failed](./../introduction/webhook#recording-failed)              `session_stopped_at`.                                                                                                          | | [recording.success](./../introduction/webhook#recording-success)            `recording_path`, <br/>`recording_presigned_url`, <br/>`session_stopped_at`. <br/>                                             | | [role.change.success](./../introduction/webhook#role-change-success)        `previous_role`, <br/>`role_changed_at`. <br/>                                                                                 | | [peer.leave.failure](./../introduction/webhook#peer-leave-failure)          `joined_at`,                                                                                                                   | | [peer.leave.success](./../introduction/webhook#peer-leave-success)          `joined_at`,                                                                                                                   | | [session.close.success](./../introduction/webhook#session-close-success)    `session_duration`.                                                                                                            |  ## November 03, 2022.  #### Additions  -   Added support  securing webhooks  whitelisting 100ms [NAT gateway IP addresses](/server-side/v2/introduction/webhook#ip-whitelisting). -   Added new fields  [Beam events](/server-side/v2/introduction/webhook#rtmp-streaming-and-browser-recording-events): `recording_enabled`, `max_width`,  `max_height` -   Added new fields  [HLS events](/server-side/v2/introduction/webhook#hls-streaming-events): `recording_single_file_per_layer_enabled`  `recording_vod_playlist_enabled` -   Added `hlsDestination` response object  [retrieve  specific template API](/server-side/v2/policy/retrieve-a-template)  #### Developer experience  -   Documentation improvements  [webhooks guide](/server-side/v2/introduction/webhook) -- merged description  example columns  provide better readability.  ## October 06, 2022.  #### Additions  -   A new set  [Active room APIs](/server-side/v2/active-rooms/object) enables   remotely control  active rooms  performing actions   [retrieving details   active session](/server-side/v2/active-rooms/retrieve-active-room), [retrieving](/server-side/v2/active-rooms/retrieve-peer)/[updating](/server-side/v2/active-rooms/update-a-peer) peer information, [sending messages](/server-side/v2/active-rooms/send-message), [removing peers](/server-side/v2/active-rooms/remove-peers),  [ending  active session](/server-side/v2/active-rooms/end-active-room).  #### Developer experience  -   **Simplified generation  management token within Postman collection** --  added  pre-request script   collection  help  generate  management token without creating  token management service   end  testing. Refer   [Postman guide](/server-side/v2/introduction/postman-guide#add-management-token)   details. -   As environment variables created  confusion,  removed  environment   Postman collection. We recommend  use  collection variables going forward. Refer   [Postman guide](/server-side/v2/introduction/postman-guide#add-management-token)   details. -   Added  [API reference documentation](</server-side/v2/legacy-api%20(v1)/room>)  legacy APIs(V1).  #### Deprecations  -   Removed `active` field  [room object](/server-side/v2/Rooms/object)  `enabled` field  already available  indicate whether  room   enabled  disabled state.  ## September 24, 2022.  #### Server update  -   The API  now available   production environment, using  following base URL:     `https://api.100ms.live/v2/`  #### Additions  -   A new set  [Room APIs](/server-side/v2/Rooms/object) -   A new set  [Session APIs](/server-side/v2/Sessions/object) -   A new set  [Policy APIs](/server-side/v2/policy/template-object) -   [Destinations object](/server-side/v2/policy/create-template-via-api#destinations-object)  added   template object.  #### API Improvements  -   **RESTful adherence** - params  now URL params   query params. -   **Extended pagination   endpoints** -- We paginate  responses   list  objects ranging  10  100  ensure   easier  handle.  #### Developer experience  -   **Virtual controlled Postman collection** --  can fork  [Postman collection](/server-side/v2/introduction/postman-guide)  stay   date   latest API improvements. This will enable   get familiar   interact  seamlessly   product. -   **Detailed API reference** -- We  improved  [documentation](/server-side/v2/introduction/basics),   easier  get started  stay   date   latest API improvements.  #### Deprecations  -   In  template object,  fields \\_id,  customer, supported   [Legacy API (V1)](</server-side/v2/legacy-api%20(v1)/templates-and-roles>),  deprecated. You can continue  use   id  customer_id   new API. Refer   [template object section](/server-side/v2/policy/template-object#template-object)   information. -   In  room object,  field template supported   template name   [Legacy API (V1)](</server-side/v2/legacy-api%20(v1)/room>) will   supported   new API. Instead,  can use  [template_id](/server-side/v2/Rooms/create-via-api#main-arguments) field.  > **Note**: The Legacy API (V1) will remain fully functional. However,  recommend  use  new API  leverage  new functionalities  features  stay   date  future releases;  can continue  check  docs   Legacy API (V1)s [here](</server-side/v2/legacy-api%20(v1)/room>). ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/changelog/release-notes"
    },
    {
        "title": "live-streaming-via-dashboard.mdx",
        "link": "/server-side/v2/Destinations/live-streaming-via-dashboard",
        "keywords": [],
        "headings": [],
        "content": "--- title: Interactive Live Streaming via dashboard nav: 6.3 ---  ## Overview  Live video interactions can span various levels  interactivity. For example,   virtual event,  participants can   stage talking   other, whereas participants   audience can  listening  them.  At 100ms,  think     **3 levels  interactivity**. 100ms enables   build live video use-cases  mixing  matching  3 levels  get   ideal solution.  * **Level 1**: Full duplex audio/video  real-time      Level 1 participants publish  audio/video,  interact  others  sub-second latency. This  real-time video conferencing, similar  Zoom  Google Meet.      * **Level 2**: Webinar-style audience  real-time      Level 2 participants consume audio/video  level 1 participants  sub-second latency, without publishing   audio/video. Level 2 participants can engage  level 1  messaging (chat, emojis, custom events). This  similar   Zoom webinar.      Levels 1  2  enabled using WebRTC.      * **Level 3**: Live stream audience consuming  near real-time      Level 3 participants consume  composite live stream  near real-time (<10 secs  latency) without publishing  audio/video. They can interact   participants via messaging. This  similar  viewers  Twitch  YouTube Live,   enabled via **100ms Interactive Live Streaming**.      Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide)  achieve near real-time latency  scale.  The [roles primitive](templates-and-roles) can  used  define capabilities   participant  associate    interaction level. A participant can move  levels using  single API call  change roles.  ## Try Interactive Live Streaming  Use  [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit)  try   experience   write  line  code.  ### Step 1: Create  new app  ![Live Streaming Starter Kit](/docs/docs/v2/live-streaming-starter-kit.png)  1. Make sure    [an account  100ms](https://dashboard.100ms.live/register)  can access  [100ms dashboard](https://dashboard.100ms.live/) 1. On  dashboard, create  new app using  Live Streaming Starter Kit 1. Specify  subdomain  region  deploy  app  ### Step 2: Understand roles  ![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)  This starter kit configures  new app  [two roles](templates-and-roles):  * `broadcaster`: This role represents  streamer  publishes  audio/video. There can  multiple peers  join  broadcasters * `hls-viewer`: This role represents  circle 3 audience,  subscribes   composite live stream  can interact using messaging  ### Step 3: Go live  ![Go live](/docs/docs/v2/live-streaming-go-live.gif)  1. To go live   first time, join  room   `broadcaster`  start  live stream 2. Once  stream  started, join  room   `hls-viewer` — you   able  see  ongoing live stream 3. Use chat messages  interact   viewer   broadcaster  ### Step 4: Customize  stream  ![Go live](/docs/docs/v2/live-streaming-customise.png)  By default,  live stream  composed  landscape mode  desktop viewers (with  aspect ratio  16:9). You can customise  live stream  viewers  mobile   support multiple broadcaster tiles.  1. On  100ms dashboard, click  gear icon   app  open configuration settings 2. Go  \"destinations\"  scroll   find live stream (HLS) configuration 3. Update  configuration based   needs:     * If  viewers   mobile, change  video aspect ratio  9:16     * If   multiple broadcasters joining in, choose grid  active speaker based   needs     * In case  grid layout, choose  tile size  fits  use-case. For example,  stream  2 streamers looks better  1:1 tiles.  ## Integrate   app  To integrate 100ms Interactive Live Streaming   app, follow  steps:  1. [Enable live streaming destination](#enable-destination) 1. [Integrate  100ms SDK   app](#sdk-integration)  ### Enable destination  ![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)  If  app  based   Live Streaming Starter Kit (as shown above),  live streaming destination  enabled out-of-the-box.  For custom apps,  can enable  live streaming destination manually:  1. Open configuration   existing app using  100ms dashboard 1. In  \"destinations\" tab, enable \"Live Streaming  HLS\" 1. Ensure    roles   broadcaster (who can publish  audio/video)   viewer (who  publish audio/video)  ### SDK integration   Use  100ms client-side SDKs  integrate streaming   application. See code snippets   web SDK [here](/javascript/v2/features/hls). ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Destinations/live-streaming-via-dashboard"
    },
    {
        "title": "recording.mdx",
        "link": "/server-side/v2/Destinations/recording",
        "keywords": [],
        "headings": [
            "Introduction",
            "Types of SFU recording",
            "Individual recording",
            "Composite recording",
            "How to enable SFU recording",
            "Using Dashboard",
            "First way (recommended)",
            "Second way",
            "Using API",
            "Uploading destination configuration"
        ],
        "content": "--- title: SFU Recording nav: 6.1 ---  ## Introduction  SFU recording can  used  save audio/video calls  offline viewing. SFU recording supports  individual  composite recordings.  ## Types  SFU recording  ### Individual recording  Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  ### Composite recording  Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  ## How  enable SFU recording  ### Using Dashboard  There  two ways  enable SFU recording   room.  #### First way (recommended)  This requires two steps-  1. Provide upload info   template  enable  SFU recording.      ![Enable recording   template](/docs/v2/recording.png)  2. Choose `Auto`  recording  creating  room.      ![Choose auto recording  creating  room](/docs/v2/create-a-room-recording-auto.png)      > **Note**: Choosing `Auto`  recording will make room's recording settings depends  template.     > That means -     >     > - Enabling/Disabling SFU recording  template will also enable/disable    room.     > - Changes made  upload settings  template, will also  reflected   room.  #### Second way  Another way  enable SFU recording   room   choose `Enabled`  recording settings  creating it.  ![Enable recording  creating  room](/docs/v2/create-a-room-recording-enabled.png)  > **Note**: Choosing `Enabled/Disabled` explicitly  recording  creating  room, will make  recording settings  room  depend  template. > That means- > > -   Enabling/Disabling SFU recording  template will   effect  template. > -   Room will    upload info. By default,  will  uploaded  100ms storage. More   below.  ### Using API  -   [See detailed API](/server-side/v2/Rooms/create-via-api)  ### Uploading destination configuration  By default recordings will  uploaded  100ms storage   pre-signed URL    will  provided  customers via  webhook. The pre-signed URL will expire  12 hours. Customers can also configure  recordings   stored   cloud storage. Following   configurations   same.  | Name         Type      Description                                                                                            Required | | :----------  :-------  :----------------------------------------------------------------------------------------------------  :------- | | type         `string`  Upload Destination type. Currently,  `s3`  supported                                             Yes      | | location     `string`  Name   AWS s3 bucket    want  store  recordings                                    Yes      | | prefix       `string`  Upload prefix path                                                                                     No       | | options      `object`  Additional configurations  type `Options`   used  uploading                                   No       | | credentials  `object`  Object  type `Credentials`. This  used  share AWS credentials  access  s3 bucket specified  No       |  Where `Options` is  | Name    Type      Description                                                                                                               Required | | :-----  :-------  :-----------------------------------------------------------------------------------------------------------------------  :------- | | region  `string`  Region   AWS account hosting  s3 bucket  storing recordings. If  provided   assumed   `ap-south-1`  No       |  Where `Credentials` is  | Name    Type      Description                                                                  Required | | :-----  :-------  :--------------------------------------------------------------------------  :------- | | key     `string`  Access Key   AWS account hosting  s3 bucket  storing recordings  Yes      | | secret  `string`  Secret   AWS account hosting  s3 bucket  storing recordings      Yes      |  Composite recording mp4 will  placed  - `s3://<location>/<prefix>/<room_id>/<start_date>/<session_id>/Rec-<session_id>-<epoch>.mp4`. Example `s3://test-bucket/test-prefix/61101349d0f56e684b608c08/20210721/5fccb7dc72909272bf999014/Rec-5fccb7dc72909272bf999014-1626898422000.mp4`  Individual recording mp4s will  placed  - `s3://<location>/<prefix>/<room_id>/<start_date>/<session_id>/<peer_id>/<stream-id>/<stream-id>.mp4`. Example `s3://test-bucket/test-prefix/61101349d0f56e684b608c08/20210721/5fccb7dc72909272bf999014/76539d6b-d10d-4790-bdd2-ab57fa7facb0/9aeec8db-524d-4129-874d-7a71d340bdec/9aeec8db-524d-4129-874d-7a71d340bdec.mp4` ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Destinations/recording"
    },
    {
        "title": "rtmp-streaming-and-browser-recording.mdx",
        "link": "/server-side/v2/Destinations/rtmp-streaming-and-browser-recording",
        "keywords": [],
        "headings": [
            "Introduction",
            "Pre-requisites",
            "APIs",
            "Start Streaming/Recording",
            "Headers",
            "Body Parameters",
            "meeting_url",
            "rtmp_urls",
            "resolution",
            "Stop Streaming/Recording",
            "Headers",
            "Body Paramters",
            "Error messages in RTMP API",
            "Recording upload destination",
            "Postman Collection"
        ],
        "content": "--- title: RTMP Streaming & Browser Recording nav: 6.2 ---  ## Introduction  RTMP Streaming can  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. Browser Recording can  used  record  video conferencing apps   file,  subsequent access. You can start either RTMP Streaming  Browser Recording     room  ## Pre-requisites  1. Management token      - [Click   see   generate management token](/server-side/v2/introduction/authentication-and-tokens)  2. Single click meeting URL  directly enter  room  3. 100ms SDK logs   logged  console   web-app URL provided above. The SDK logs will  analysed  detect  room join failures  retries will  attempted  fix  same. If SDK logs   enabled   server will stop recording/streaming  return error (after fixed number  retries).  ## APIs  ### Start Streaming/Recording  <PostRequest title=\"https://prod-in2.100ms.live/api/v2/beam\" />  <Request id=\"req-0\">  ```bash curl \\     --location \\     --request POST 'https://prod-in2.100ms.live/api/v2/beam' \\     --header 'Content-Type: application/json' \\     --header 'Authorization: Bearer <management_token>' \\     --data-raw '{         \"operation\": \"start\",         \"room_id\": <rooom_id>,         \"meeting_url\": <meeting_url>,         \"rtmp_urls\": [<rtmp_url_1>, <rtmp_url_2>],         \"record\": true,         \"resolution\" : {\"width\": 1280, \"height\": 720}     }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\" resText=\"Beam  started successfully\" />  > **Note**: Please use `https://prod-us2.100ms.live/api/v2/beam`  `https://prod-eu2.100ms.live/api/v2/beam`  API endpoint   room's region  US  EU.  <div id=\"start-0\">  #### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Content-type <br/>   application/json             Yes      | | Authorization <br/>  Bearer `<management token>`  Yes      |  #### Body Parameters  | Name               Type      Description                                                                                                                                                                Required | | :----------------  :-------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | operation <br/>    `string`  Must  \"start\"                                                                                                                                                            Yes      | | room_id <br/>      `string`  The room id   room   need  start streaming/recording                                                                                                         Yes      | | meeting_url <br/>  `string`  Single click meeting URL   need  start streaming/recording (see    details)                                                                           Yes      | | rtmp_urls <br/>    `array`   List  RTMP output URLs    meeting will  streamed. <br/> Required  RTMP streaming needs   started. <br/> Supports upto 3 `rtmp://` / `rtmps://` urls  No       | | record <br/>       `bool`    Flag  enable browser recording                                                                                                                                           No       | | resolution <br/>   `object`  Video resolution  streaming/recording                                                                                                                                   No       |  ##### meeting_url  This   URL  lands   meeting directly. If   using 100ms apps   will  like - `https://<domain>.app.100ms.live/preview/<room_id>/<role>?skip_preview=true`.  There  also   additional query params  can  used   100ms app link -  -   `auth_token=token1234`:  can  used  pass auth token generated   side   recording web-app -   `ui_mode=activespeaker`:  can  used  open active speaker mode  default  recording. In active speaker mode,      current speaker will show   center,  rest   peers will show    sidebar.  Example - `https://myname.app.100ms.live/preview/61101349d0f56e684b608c08/__internal_recorder?skip_preview=true&auth_token=token1234&ui_mode=activespeaker`  ##### rtmp_urls  This URL   combination  RTMP server URL  stream key. You can add upto 3 RTMP URLs (as array  strings)   argument.  -   Format: `rtmp://server.com/app/STREAM_KEY` -   Example: `rtmp://a.rtmp.youtube.com/live2/k0jv-329m-1y7f-ktth-ck48`     -   \"rtmp://a.rtmp.youtube.com/live2/\" - RTMP stream URL.     -   \"k0jv-329m-1y7f-ktth-ck48\" - RTMP stream key.  ##### resolution  Minimum Resolution supported  500x480 (in landscape mode)  500x500 (in portrait mode) Maximum Resolution supported upto 1920x1080 (in landscape mode)  1080x1920 (in portrait mode)  | Name          Type   Description                                                                                              Required | | :-----------  :----  :------------------------------------------------------------------------------------------------------  :------- | | width <br/>   `int`  Width   video. <br/> Range: `500`-`1920`. If height>1080  max width=1080. <br/>Default: `1280`  Yes      | | height <br/>  `int`  Height   video. <br/> Range: `480`-`1920`. If width>1080  max height=1080. <br/>Default: `720`  Yes      |  </div>  ---  ### Stop Streaming/Recording  <PostRequest title=\"https://prod-in2.100ms.live/api/v2/beam\" />  <Request id=\"req-1\">  ```bash curl \\     --location \\     --request POST 'https://prod-in2.100ms.live/api/v2/beam' \\     --header 'Content-Type: application/json' \\     --header 'Authorization: Bearer <management_token>' \\     --data-raw '{         \"operation\": \"stop\",         \"room_id\": <rooom_id>     }' ```  </Request>  <ResponseBox id=\"res-1\" status=\"200 OK\" resText=\"Beam  stopped successfully\" />  <div id=\"stop-0\">  #### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Content-type <br/>   application/json             Yes      | | Authorization <br/>  Bearer `<management token>`  Yes      |  #### Body Paramters  | Name             Type      Description                                                            Required | | :--------------  :-------  :--------------------------------------------------------------------  :------- | | operation <br/>  `string`  Must  \"stop\"                                                         Yes      | | room_id <br/>    `string`  The room id   room    need  stop streaming/recording  Yes      |  </div>  ### Error messages  RTMP API  | Message                                                    Code  Description                                              | | :--------------------------------------------------------  :---  :------------------------------------------------------- | | Error: beam already started                                1     RTMP streaming  Recording already running   room | | Error: internal server error                               2     server error                                             | | Error: room_id missing                                     3     room id  missing   request payload                | | Error: room_id invalid                                     4     Room id provided  invalid                              | | Error: rtmp_url  record missing                         5     RTMP URLs  record flag  required                     | | Error: meeting_url missing                                 6     Meeting URL  missing   request payload            | | Error: meeting_url invalid                                 7     Meeting URL  invalid                                   | | Error: operation invalid                                   8     Operation provided  invalid                            | | Error: operation missing                                   9     Operation field  missing   request payload        | | Error:  active beam found   passed  identifiers  10    No Active beam running   room                       | | Error: Resolution  supported                            11    Input Resolution  Supported                           |  ## Recording upload destination  By default recordings will  uploaded  100ms storage   pre-signed URL    will  provided  customers via  webhook. The pre-signed URL will expire  12hours. Customers can also configure  recordings   stored   cloud storage. The configuration    can  provided  creating  room.  [Create Room](/server-side/v2/Rooms/create-via-api)  Recording mp4 will  placed  - `s3://<location>/<prefix>/beam/<room_id>/<start_date>/Rec-<room_id>-<epoch>.mp4`. Example `s3://test-bucket/test-prefix/beam/61101349d0f56e684b608c08/20210721/Rec-61101349d0f56e684b608c08-1626898422000.mp4`  ## Postman Collection  <DownloadCollection type=\"rtmp\" /> ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Destinations/rtmp-streaming-and-browser-recording"
    },
    {
        "title": "authentication-and-tokens.mdx",
        "link": "/server-side/v2/introduction/authentication-and-tokens",
        "keywords": [],
        "headings": [
            "App Token",
            "How to use?",
            "Set up your own authentication endpoint",
            "Code sample: Generate app token",
            "Get app tokens from the token endpoint",
            "Get app tokens from the dashboard",
            "Management Token",
            "Code sample: Generate management token"
        ],
        "content": "--- title: Authentication  tokens nav: 1.3 ---  In 100ms, two types  tokens  used  authenticate requests coming   `Client apps`  `Backend application server`   100ms platform.  -   [App token](#app-token) : Used  authenticate  allow end-users (peers)  join 100ms rooms. An App Token controls `Peer identity`  `Room permissions`   real-time  Interactive live-streaming video application. -   [Management token](#management-token) : Used  authenticate   requests  100ms REST API.  You can set  expiry    tokens;   follow  code samples   guide,  expiry will  set  24 hours. However,  best practice   set  expiry  short  feasible   application.  You must host  server  generate  tokens  transitioning  app  production.  ## App Token  100ms _client-side SDKs_ use App Tokens  authenticate  peer (participant)  [joining  room](/javascript/v2/features/join). Generate  token   server side  make  available   client-side apps  use  100ms SDKs.  To create  App Token,  need  use `app_access_key`, `app_secret`, `room_id`,  `user_id`.  -   You can get  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. -   **room_id**: This   unique identifier   room. You can get    [rooms page](https://dashboard.100ms.live/rooms)   dashboard    response payload   [create room server-side API](./../Rooms/create-via-api). -   **user_id**: This identifier can  used  map  100ms peer    internal user object  business logic. Specify  internal user identifier   peer's user_id. If  available, use  random string.  ### How  use?  You can get App tokens using  couple  approaches based   app's lifecycle stage. Please check   sections   information:  -   [Set    authentication endpoint](#set-up-your-own-authentication-endpoint) -   [Get app tokens   token endpoint](#get-app-tokens-from-the-token-endpoint) -   [Get app tokens   dashboard](#get-app-tokens-from-the-dashboard)  #### Set    authentication endpoint  When   completed  integration  100ms,   transitioning  app  production,  recommend  create  backend service  app token generation; use  code snippet   set   token generation service  per  preferred programming language.  #### Code sample: Generate app token  <Tabs id=\"client-code-token\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='client-code-token-0'>  ```javascript var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  var payload = {     access_key: app_access_key,     room_id: '<room_id>',     user_id: '<user_id>',     role: '<role>',     type: 'app',     version: 2,     iat: Math.floor(Date.now() / 1000),     nbf: Math.floor(Date.now() / 1000) };  jwt.sign(     payload,     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='client-code-token-1'>  ```python #!/usr/bin/env python3 import jwt import uuid import datetime import sys  app_access_key = \"<app_access_key>\" app_secret = \"<app_secret>\"  def generate(room_id, user_id, role):     expires = expires  24 * 3600     now = datetime.datetime.utcnow()     exp  = now+ datetime.timedelta(seconds=expires)     return jwt.encode(payload={                 \"access_key\": app_access_key,                 \"type\":\"app\",                 \"version\":2,                 \"room_id\": room_id,                 \"user_id\": user_id,                 \"role\":role,                 \"jti\": str(uuid.uuid4()),                 \"exp\": exp,                 \"iat\": now,                 \"nbf\": now,                 }, key=app_secret) if __name__ == \"__main__\":      len(sys.argv) == 3:         room_id = sys.argv[0]         user_id = sys.argv[1]         role = sys.argv[2]     print(generate(room_id=room_id, user_id=user_id, role=role)) ```  </Tab>  <Tab id='client-code-token-2'  >  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateHmsClientToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"room_id\", \"<room_id>\");     payload.put(\"user_id\", \"<user_id>\");     payload.put(\"role\", \"<role>\");     payload.put(\"type\", \"app\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id='client-code-token-3'  >  ```ruby require 'jwt' require 'securerandom'    $app_access_key = \"<app_access_key>\" $app_secret = \"app_secret\"  def generateAppToken(room_id, user_id, role)     now = Time.now     exp = now + 86400     payload = {         access_key: $app_access_key,         room_id: room_id,         user_id: user_id,         role: role,         type: \"app\",         jti: SecureRandom.uuid,         version: 2,         iat: now.to_i,         nbf: now.to_i,         exp: exp.to_i     }      token = JWT.encode(payload, $app_secret, 'HS256') end  puts generateAppToken \"<room_id>\", \"<user_id>\", \"<role>\"  ```  </Tab>  <Tab id='client-code-token-4'>  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $issuedAt  = new DateTimeImmutable(); $expire    = $issuedAt->modify('+24 hours')->getTimestamp(); $accessKey = \"<app_access_key>\"; $secret = \"<app_secret>\"; $version   = 2; $type      = \"app\"; $role      = \"<role>\"; $roomId    = \"<room_id>\"; $userId    = \"<user_id>\";  $payload = [     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire,     'access_key' => $accessKey,     'type' => \"app\",     'jti' =>  Uuid::uuid4()->toString()     'version' => 2,     'role' => $role,     'room_id' => $roomId,     'user_id' => $userId ];  $token = JWT::encode(     $payload,     $secret,     'HS256' ); ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure.  </Note>  #### Get app tokens   token endpoint  If   building integration  100ms,  can get app tokens   100ms token endpoint without hosting  token generation backend service. Refer  [this guide](/javascript/v2/guides/token-endpoint#get-a-token-using-100ms-token-endpoint)   information.  #### Get app tokens   dashboard  If   building  first app  following one   [quickstart guides](/javascript/v2/guides/javascript-quickstart),  can get  app token directly  100ms dashboard  join  room   first time. Refer  [this guide](/javascript/v2/guides/token#get-a-temporary-token-from-100ms-dashboard)   information.  ## Management Token  100ms uses management tokens  authenticate REST APIs.  If  evaluating 100ms [server APIs](./basics),  can use  public [Postman collection](./postman-guide#fork-the-collection),   require   create  management token   managed  using  [pre-request script](./postman-guide#simplified-token-generation) within  collection.  If  transitioning  app  production,  recommend  create  backend service  management token generation. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token.  #### Code sample: Generate management token  <Tabs id=\"test-code\" items={['Node.js', 'Python', 'Java', 'Ruby', 'PHP']} />  <Tab id='test-code-0'>  ```js var jwt = require('jsonwebtoken'); var uuid4 = require('uuid4');  var app_access_key = '<app_access_key>'; var app_secret = '<app_secret>';  jwt.sign(     {         access_key: app_access_key,         type: 'management',         version: 2,         iat: Math.floor(Date.now() / 1000),         nbf: Math.floor(Date.now() / 1000)     },     app_secret,     {         algorithm: 'HS256',         expiresIn: '24h',         jwtid: uuid4()     },     function (err, token) {         console.log(token);     } ); ```  </Tab>  <Tab id='test-code-1'>  ```py #!/usr/bin/env python3 import jwt import uuid import datetime  app_access_key = '<app_access_key>' app_secret = '<app_secret>'   def generateManagementToken():     expires = 24 * 3600     now = datetime.datetime.utcnow()     exp = now + datetime.timedelta(seconds=expires)     return jwt.encode(payload={         'access_key': app_access_key,         'type': 'management',         'version': 2,         'jti': str(uuid.uuid4()),         'iat': now,         'exp': exp,         'nbf': now         }, key=app_secret)  if __name__ == '__main__':     print(generateManagementToken()) ```  </Tab>  <Tab id=\"test-code-2\">  ```java import java.time.Instant; import java.util.Date; import java.util.HashMap; import java.util.Map; import java.util.UUID; import io.jsonwebtoken.Jwts; import io.jsonwebtoken.SignatureAlgorithm;  private void generateManagementToken() {     Map<String, Object> payload = new HashMap<>();     payload.put(\"access_key\", \"<app_access_key>\");     payload.put(\"type\", \"management\");     payload.put(\"version\", 2);     String token = Jwts.builder().setClaims(payload).setId(UUID.randomUUID().toString())         .setExpiration(new Date(System.currentTimeMillis() + 86400 * 1000))         .setIssuedAt(Date.from(Instant.ofEpochMilli(System.currentTimeMillis() - 60000)))         .setNotBefore(new Date(System.currentTimeMillis()))         .signWith(SignatureAlgorithm.HS256, \"<app_secret>\".getBytes()).compact();   } ```  </Tab>  <Tab id=\"test-code-3\">  ```ruby require 'jwt' require 'securerandom'  $app_access_key = \"<app_access_key>\" $app_secret = \"<app_secret>\"  def generateManagementToken()     now = Time.now     exp = now + 86400     payload = {     access_key: $app_access_key,     type: \"management\",     version: 2,     jti: SecureRandom.uuid,     iat: now.to_i,     nbf: now.to_i,     exp: exp.to_i } token = JWT.encode(payload, $app_secret, 'HS256') return token end  puts generateManagementToken ```  </Tab>  <Tab id=\"test-code-4\">  ```php <?php  use Firebase\\JWT\\JWT; use Ramsey\\Uuid\\Uuid;  $app_access_key = \"<app_access_key>\"; $app_secret = \"<app_secret>\";  $issuedAt   = new DateTimeImmutable(); $expire     = $issuedAt->modify('+24 hours')->getTimestamp();  $payload = [     'access_key' => $app_access_key,     'type' => 'management',     'version' => 2,     'jti' =>  Uuid::uuid4()->toString(),     'iat'  => $issuedAt->getTimestamp(),     'nbf'  => $issuedAt->getTimestamp(),     'exp'  => $expire, ];  $token = JWT::encode($payload, $app_secret, 'HS256'); ?> ```  </Tab>  <Note>  **Warning**  Your app key  secret carry many privileges, please ensure  keep  secure. All requests must  made  HTTPS. Requests made  plain HTTP  without  management token will fail.  </Note> ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/authentication-and-tokens"
    },
    {
        "title": "basics.mdx",
        "link": "/server-side/v2/introduction/basics",
        "keywords": [],
        "headings": ["100ms API collection", "Authentication", "Quickstart", "API Overview"],
        "content": "---\r title: Basics\r nav: 1.1\r ---\r \r ## 100ms API collection\r \r TL;DR - You can directly use  Postman collection  start exploring 100ms APIs. \r \r [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)\r \r Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. \r \r ### Authentication\r 100ms uses management tokens  authenticate REST APIs. The service required  generate  token   hosted   server. You must use  `app_access_key`  `app_secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard  create  management token. Refer   [authentication  tokens guide](/server-side/v2/introduction/authentication-and-tokens#code-sample-generate-management-token)   information  generating  management token.\r \r ## Architecture  100ms   cloud platform  allows developers  add video  audio conferencing  Web, Android  iOS applications.  The platform provides REST APIs, SDKs,   dashboard  makes  simple  capture, distribute, record,  render live interactive audio, video.  Any application built using 100ms' SDK  2 components.  -   **Client:** Use 100ms android, iOS, Web SDKs  manage connections, room states, render audio/video.  -   **Server:** Use 100ms' APIs  dashboard  create rooms, setup room templates, trigger recording  RTMP streaming, access events.  ![Architecture](/docs/docs/v2/arch.png)  ## Basic Concepts  -   `Room` A room   basic object  100ms SDKs return  successful connection. This contains references  peers, tracks  everything  need  render  live a/v  live streaming app. -   `Peer` A peer   object returned  100ms SDKs  contains  information   user - name, role, video track etc. -   `Session` A session depicts activity   room. A session  created  one   peers join  room  communicate   other. A single room can  multiple sessions;  unique ID will  assigned   session. The maximum allowed duration   session   100ms platform  12 hours. -   `Track` A track   segment  media (audio/video) captured   peer's camera  microphone. Peers   session publish local tracks  subscribe  remote tracks   peers. -   `Role` A role defines  can  peer see/hear,  quality    publish  video, whether   permissions  publish video/screenshare, mute someone, change someone's role. -   `Template` A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template. -   `Destinations` Destinations  used  save audio/video calls  offline viewing. 100ms supports 2 kinds  recording - SFU recording  Browser recording. Also, `HLS enabled` configuration will allow   live stream  room  HLS. -   `RTMP` RTMP streaming  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc. -   `Webhooks` Webhook   HTTP(S) endpoint used  pushing  notifications   application. It will  invoked  100ms servers  notify events   room. -   `Workspace` A workspace   isolated environment  contains account data like templates, rooms, room  session history, etc. You can use workspaces  represent environments like “Production”  “Development”  invite team members   workspace.  ## What   steps  build  live app  100ms? 1. Sign   100ms using  **Try For Free** button   top navbar.  ![Signup  100ms account](/docs/docs/v2/signup.png)  2. Once  logged    dashboard, click  `Create Your First App`  ![Signup  100ms account](/docs/docs/v2/create-your-first-app.png)  3. **Hover**  one   Starter Kits. Deploy one  them. (We will use  **Video Conference Starter Kit**   example)  ![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)  4. Select  account type  fill   details  ![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)  5. Choose  deployment option. This   100ms  Vercel (based   Starter Kit   deploying)  ![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)  6. Enter  subdomain   choice. Please avoid entering https/http/www  dots  entering  subdomain. Select  region closest    hit Continue.  ![choose subdomain](/docs/docs/v2/choose-subdomain.png)  7. Join  Invite someone   deployed app  one   roles:   ![join  invite](/docs/docs/v2/demo-your-app.png)  ## Where  I start? \r \r ### Quickstart\r \r If  want  see 100ms' SDKs  action   5 minutes, run one   quickstart [apps](/javascript/v2/guides/javascript-quickstart)\r \r ## API Overview\r \r Create rooms, configure  maintain room policies  templates, start recording  RTMP streaming,  access events via 100ms' APIs. These APIs use standard HTTP verbs  HTTP status codes  make  simple  incorporate video   code. We serve  API  HTTPS  secure  requests   servers.\r \r <BaseRequest\r     title=\"https://api.100ms.live/{version}/\"\r />\r \r > **Note**:  current version  v2.\r \r [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)\r \r Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/basics"
    },
    {
        "title": "firewall-and-ports.mdx",
        "link": "/server-side/v2/introduction/firewall-and-ports",
        "keywords": [],
        "headings": [
            "Domains",
            "Ports",
            "Minimum requirement",
            "Requirements for best experience",
            "NAT gateway IP address whitelisting for webhooks"
        ],
        "content": "--- title: Domain  Port Whitelisting nav: 1.5 tags:     - domains     - ports     - firewall     - whitelisting ---     For smooth call experience add following domains  ports   firewall whitelist  ## Domains  `*.100ms.live`  ## Ports  ### Minimum requirement  | Ports    Protocol  Description              | | :------  :-------  :----------------------- | | 80, 443  TCP       API, WebSocket, TURN/TLS |  ### Requirements  best experience  | Ports                   Protocol  Description                  | | :---------------------  :-------  :--------------------------- | | 80, 443, 3478           TCP       API, WebSocket, TURN/TLS     | | 443, 3478, 41000-65535  UDP       TURN/UDP, ICE, Media traffic |  ### NAT gateway IP address whitelisting  webhooks  Please refer  [how  secure webhooks section](/server-side/v2/introduction/webhook#how-to-secure-webhooks)  webhooks guide fore  details. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/firewall-and-ports"
    },
    {
        "title": "postman-guide.mdx",
        "link": "/server-side/v2/introduction/postman-guide",
        "keywords": [],
        "headings": [
            "Fork the collection",
            "Authentication",
            "Simplified token generation",
            "Manage authentication for multiple 100ms workspaces in Postman",
            "Example: Create a room",
            "API Reference",
            "Stay up to date"
        ],
        "content": "--- title: Postman Guide nav: 1.6 ---  100ms collection includes API  rooms, sessions, policies, etc., packaged  ready  use  Postman, along  documentation   API  help  learn  them. You can import/fork  APIs  start using  instantly.  The API collection comes  predefined collection variables   pre-request script  generates  management token  help  get started immediately.  ## Fork  collection  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  You can click   button  fork  100ms API collection.  ## Authentication  100ms uses management tokens  authenticate REST APIs. To create  management token,  must use  `App Access Key`  `App Secret`   [developer section](https://dashboard.100ms.live/developer)   100ms dashboard. This key  secret differ across workspaces  please ensure     intended workspace  copying  credentials.  ![Copy app secret  key](/docs/v2/app-key-secret.png)  ### Simplified token generation  We  simplified  process  management token generation   within  collection:  -   All      update  **collection variables** `APP_ACCESS_KEY`  `APP_SECRET`; -   We  added  pre-request script within  collection,  will generate  management token  set     `collection variable` (TOKEN)   forked Postman collection. -   Automatically,  will  used  authentication    APIs   100ms collection.  ![Add-token](/docs/v2/token.png)  > **Note:** Refer   [authentication  tokens guide](https://100ms.live/docs/server-side/v2/introduction/authentication-and-tokens#code-sample-generate-management-token)   generating  management token   preferred programming language   development/production environment.  ### Manage authentication  multiple 100ms workspaces  Postman  You can use  environment variables  Postman  maintain authentication  multiple 100ms workspaces. An example use case  managing API authentication  Development, QA,  Production workspaces. You can learn   environment variables  Postman [here](https://learning.postman.com/docs/sending-requests/variables/).  You can setup environment variables using  steps below:  1. Hover   Environments   Postman sidebar. Click  `Create  Environment`. 2. Name  Environment (for example, Dev Env)  add two variables `APP_ACCESS_KEY`  `APP_SECRET`. 3. Go   [Developer section](https://dashboard.100ms.live/developer)   workspace, copy `APP_ACCESS_KEY`  `APP_SECRET`, paste  values   `INITIAL VALUE` column,  Save  Environment. 4. Head   \"100ms API collection\"  switch  Environment  `Dev Env`  send API requests   respective 100ms workspace. 5. Similarly,  create  environments (for example, QA  Production)  different workspaces  maintain ease  authentication access.  <video loop=\"true\" autoplay=\"autoPlay\" controls=\"controls\" id=\"vid\" muted>     <source src=\"/docs/guides/env-vars.mp4\" type=\"video/mp4\" /> </video> <br />  > **Note:** These environments exist across  Postman workspaces    visible   dropdown   collections.  ## Example: Create  room  Let's try  create  room  see   100ms collection works. From  forked REST API collection, select  folder named **Room APIs **and select  request  `create room`. Replace  placeholders like name, description, template_id, etc   desired values. Click  `Send` button  done.  ## API Reference  You can refer   detailed[ API reference](/server-side/v2/Rooms/object)  understand  request/response structure better, request arguments, response variables, webhooks, etc.  ## Stay   date  Similar    forked repository  GitHub works,  can stay   date   100ms master collection  pulling  changes.  In  forked collection   Postman instance, Click   'three-dots(...) menu' next   'Save' button   top right section  select `Pull changes`   drop-down menu.  ![pulling  changes](/docs/v2/pull-changes.png) ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/postman-guide"
    },
    {
        "title": "recordings.mdx",
        "link": "/server-side/v2/introduction/recordings",
        "keywords": [],
        "headings": [],
        "content": "--- title: Recordings nav: 1.7 ---  Recordings   important part   live video stack   convert live, ephemeral content   long-term asset. But  use   asset varies  business  business depending   respective use case.  For example, one   common use cases  recording   archival purposes versus,  some,  content   publicized.  Based   end goal,  can choose one   recording types   implementation. You can understand  key differences using  comparison table below.  ## Recording types  - [Recording types](#recording-types)   - [Quick Comparison](#quick-comparison)   - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)   - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)   - [Recordings  Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)     - [Video-on-demand Recording](#video-on-demand-recording)     - [Multiresolution Recording](#multiresolution-recording) - [Configure storage](#configure-storage)   - [How  configure recording storage?](#how-to-configure-recording-storage)  ### Quick Comparison  | Recording Features                    Browser Recording [Recommended]  SFU Recording [Advanced]         | | ------------------------------------  -------------------------------  -------------------------------- | | Resolution                            Upto 1080p                       Only 720p                        | | Participant-level Audio/Video Tracks  Not Available                    Available                        | | Portrait/Landscape Mode               Available                        Not Available                    | | Start/Stop Recording                  On-demand                        Auto start/stop   session | | Custom Layout                         Available                        Not Available                    | | Role-Specific Recording               Available                        Not Available                    | | Recording Output                      MP4                              MP4, WebM                        |   ### Browser Recording [Recommended]  Browser recording  built  give users  participant-first recording experience. When enabled,  browser-based bot Beam joins  room  record  viewport like   participant. The output   MP4 file  captures  room's published audio/video tracks together  one single file. This option removes  complexity  syncing various audio/video tracks  offers  intuitive, participant-first recording experience. An example use case   record  sales meeting  later usage.  **Resources**  -  [How  implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)  ### SFU Recording [Advanced]  SFU recording  built  advanced use cases,  require individual audio  video tracks   participant. This recording option allows   isolate recording   participant level. Track recording allows   record audio  video streams separately, making  easier  edit, layer,  reuse   them. An example use case   record  live podcast  later edit   publishing.  You can get track recordings  two forms:  -   Individual: Media   peer  provided   separate mp4 file. This file will   audio  video   peer. These files can  used  offline review   implementing custom composition.  -   Composite [currently  beta]: Audio  video   peers  composed  per  joining/leaving  meeting  provided   single mp4. This file can  used  offline viewing   meeting.  **Resources**  -   [How  implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)  ### Recordings  Live Streaming Use-cases These   types  live streaming recordings:  #### Video-on-demand Recording  Video-on-demand recording  available   Interactive Live Streaming capability. This recording will   file   M3U8 file (same playback format  HLS),  can  used  replaying  HLS stream. This option   suitable  Video-on-Demand use cases. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).  #### Multiresolution Recording  A multi-resolution recording  available  Interactive Live Streaming capability. This type  recording will   multi-file structure   available resolutions   stream. The output will  multiple MP4 files   resolutions: 240p, 480p, 720p,  1080p. For  implementation   type  recording, please [contact us](https://www.100ms.live/contact).   ## Configure storage  You can specify  cloud storage location   recording files   template. Our current offering allows   store  recordings  Amazon S3 buckets. Once  configure  S3 config   bucket   template,  respective recordings  sessions created via  templates will  sent   configured bucket. This holds true   types  aforementioned recordings.  ### How  configure recording storage?  1. Generate  credentials;   example,  can check   [guide  AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip  step   already  credentials. Please note     running  Browser recording,  need  give upload permission   key,     running  SFU recording,  need  give  upload  download permission.  2. Go  100ms Dashboard  go  template **configuration  selecting  configure icon**.  ![Create  first app](/docs/docs/v2/recording-storage-settings-step2.png)  3. Head    **Destinations** tab.  ![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)  1. Key   credentials (using  example   S3 bucket here):      - Access Key: Access Key generated  AWS IAM Console     - Secret Key: Secret Key generated  AWS IAM Console     - Bucket: Name   bucket  S3     - Region: Name   region,  example, ap-south1     - Prefix  Upload Path: Define  directory name (optional)  ![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)  5. Use  **Validate Config** button  test  storage setup.  ![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)  6. You will see  message   AWS **configuration  successfully validated**.  ![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)  The  message ensures   configuration  successful now,    recordings will start collecting   configured destination.  ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/recordings"
    },
    {
        "title": "request-and-response.mdx",
        "link": "/server-side/v2/introduction/request-and-response",
        "keywords": [],
        "headings": [
            "Request",
            "Content type",
            "Headers",
            "Response",
            "HTTP status codes",
            "Errors",
            "Example:",
            "Pagination",
            "List API response variables",
            "Params used for pagination"
        ],
        "content": "--- title: Request/Response nav: 1.2 ---  ## Request  Our REST APIs enable   access various capabilities  complete  integration based   requirements   use case.  <BaseRequest title=\"https://api.100ms.live/v2/\" />  You can leverage  requests using  common HTTP methods:  1. **GET** - retrieves data  100ms server. **Example**: Retrieve details   specific room 2. **POST** - sends new data  100ms server. **Example**: Create  room 3. **DELETE** - removes existing data  100ms server. **Example**: Delete  role   template.  ### Content type  The input   request     type application/json. The payload   POST requests   passed   JSON object   Content-Type  `application/json`.  Most   GET request arguments must  passed   path param whereas    APIs accept    query param.  DELETE request arguments   passed   path param.  #### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Content-type <br/>   application/json             Yes      | | Authorization <br/>  Bearer `<management token>`  Yes      |  ## Response  100ms API responds   requests   response  JSON format along   HTTP status code  indicate whether  request  successful.  ### HTTP status codes  All requests return one   standard HTTP status codes  | Code                Description                                                       | | ------------------  ----------------------------------------------------------------- | | 200 - OK            The request  succeeded.                                        | | 204 - No Content    Resource deleted.                                                 | | 401 - Unauthorized  No valid API management token provided.                           | | 403 - Forbidden     The API management token provided   enough permission. | | 404 - Not Found     The request resource   found.                               | | 500 - Server Error  Something went wrong  100ms servers. (These  rare).        |  ### Errors  -   API responses  `4XX`  `5XX HTTP status codes` indicate   request  failed. -   `4XX`: This can  either 401  403  404. You can refer   [status codes section](#http-status-codes)   information. Also,  response body will contain  error message  will help  resolve  error  resend  request.      #### Example:      ```json     {         \"code\": 404,         \"message\": \"Error: Room  found\",         \"data\": {             \"description\": \"Error: Room  found\"         }     }     ```  -   `5XX`: Server errors. This happens  something  wrong  100ms servers(these  rare).  ## Pagination  All API resources support bulk fetches via “list” API methods (For example, list  rooms). These APIs use query parameters - limit, start,  last -  support pagination.  To fetch  first page  10 objects, set `limit=10`   query param. This API will respond   list  objects  key `data`. The response also  key `last`   unique identifier   last object  `data`.  To fetch  second page  10 objects (11  20), pass  previous `last` value   `start` query param. Set `limit = 10`  `start = &lt;last value  previous response&gt;`.  ### List API response variables  | Name         Type        Description                                                                                                            | | :----------  :---------  :--------------------------------------------------------------------------------------------------------------------- | | limit <br/>  `int`       Number  objects  API tried  find. If returned array  lesser number  results,   number  found. | | data <br/>   `array`     Array  objects.                                                                                                      | | last <br/>   `ObjectID`  The last object   list  objects   response. Can  used  `start`  subsequent request.                 |  ### Params used  pagination  | Name   Type      Description                                                                                            | | :----  :-------  :----------------------------------------------------------------------------------------------------- | | limit  `int`     A limit   number  objects   returned.<br/> `Default value`: 10<br/> `Allowed range`: 10-100 | | start  `object`  Determines  starting point   list  objects   returned   response.                   | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/request-and-response"
    },
    {
        "title": "webhook.mdx",
        "link": "/server-side/v2/introduction/webhook",
        "keywords": [],
        "headings": [
            "Introduction",
            "Requirements",
            "How to secure webhooks",
            "IP whitelisting",
            "Specifying headers",
            "How to configure Webhook",
            "Events",
            "Event Attributes",
            "Sample Event Payload",
            "List of events",
            "Session Events",
            "session.open.success",
            "Attributes",
            "Sample `session.open.success` event",
            "session.close.success",
            "Attributes",
            "Sample `session.close.success` event",
            "Peer Events",
            "peer.join.success",
            "Attributes",
            "Sample `peer.join.success` event",
            "peer.leave.success",
            "Attributes",
            "Peer Leave Reason",
            "Sample `peer.leave.success` event",
            "peer.join.failure",
            "Attributes",
            "Peer join failure Reason",
            "Sample `peer.join.failure` event",
            "peer.leave.failure",
            "Attributes",
            "Peer leave failure Reason",
            "Sample `peer.leave.failure` event",
            "Room Events",
            "room.end.success",
            "Attributes",
            "Sample `room.end.success` event",
            "room.end.failure",
            "Attributes",
            "Sample `room.end.success` event",
            "Role change Events",
            "role.change.success",
            "Attributes",
            "Sample `role.change.success` event",
            "role.change.failure",
            "Attributes",
            "Sample `role.change.failure` event",
            "SFU Recording Events",
            "recording.success",
            "Attributes",
            "Sample `recording.success` event",
            "recording.failed",
            "Attributes",
            "Sample `recording.failed` event",
            "RTMP Streaming & Browser Recording Events",
            "beam.started.success",
            "Attributes",
            "Sample `beam.started.success` event",
            "beam.stopped.success",
            "Attributes",
            "Sample `beam.stopped.success` event",
            "beam.recording.success",
            "Attributes",
            "Sample `beam.recording.success` event",
            "beam.failure",
            "Attributes",
            "Sample `beam.failure` event",
            "HLS Streaming Events",
            "hls.started.success",
            "Attributes",
            "Sample `hls.started.success` event",
            "hls.stopped.success",
            "Attributes",
            "Sample `hls.stopped.success` event",
            "hls.failure",
            "Attributes",
            "Sample `hls.failure` event",
            "hls.recording.success",
            "Attributes",
            "Sample `hls.recording.success` event"
        ],
        "content": "--- title: Webhook nav: 1.4 ---  ## Introduction  Webhook   HTTP(S) endpoint used  pushing  notifications   application. Event-based webhooks/user-defined HTTP webhooks, can  used  track  events   room  build business logic, allowing   create analytics   traffic. Create  attendance system,  instance. Every session, 100ms sends  list  events   URL  specify   webhook configuration. For analytics and/or debugging,  can store  data   server.  To handle  webhook,  must create  listener  accept  HTTP requests  100ms.  ## Requirements  -   Webhook MUST implement `POST` HTTP method  receiving notifications. 100ms notifications   JSON format     handled accordingly. -   To handle webhooks   app,  endpoint should:     -   Capture HTTP requests     -   Respond   requests -   When 100ms sends  HTTP request callbacks   webhook   event,   capture  request  respond   200 OK response. You can store  webhook data   database  later processing.     > **Note:** 100ms automatically retries webhooks three times   server   return  HTTP 200 status code.     >     > -   First  1 second   original attempt.     > -   Second  3 seconds   first retry attempt.     > -   Third  10 seconds   second retry attempt.  ## How  secure webhooks  You can secure webhooks  two ways:  1. Whitelisting 100ms NAT gateway IP addresses, 2. Specifying unique headers  configuring webhook endpoint  100ms.  ### IP whitelisting  Your infrastructure might  secured   firewall  monitors  filters incoming requests. To ensure   firewall   block  event-based webhooks sent  100ms, allow traffic   100ms NAT gateway IP addresses   webhook endpoint.  ``` 34.100.213.146/32 35.200.143.211/32 34.100.191.162/32 34.100.132.35/32 34.93.93.114/32 34.131.109.150/32 34.131.52.47/32 34.131.200.41/32 34.131.13.182/32 34.131.24.136/32 34.138.143.222/32 35.242.196.203/32 35.200.222.156/32 34.93.74.33/32 34.93.142.55/32 34.93.176.177/32 34.93.210.177/32 34.93.175.47/32 ```  ### Specifying headers  Additionally,  can specify headers  will  passed transparently   webhook endpoint. This can  used  securing  tracing  origin   request.  ## How  configure Webhook  Webhook can  configured using [Developer](https://dashboard.100ms.live/developer) section  [100ms Dashboard](https://dashboard.100ms.live/). Each workspace can    webhook configuration.   ## Events  Event   JSON dictionary    following keys.  ### Event Attributes  | Name         Type                  Description                                                                                                        | | :----------  :-------------------  :----------------------------------------------------------------------------------------------------------------- | | version      `string`              Version   event <br/><br/> _Example: 2.0_                                                                     | | id           `string`              Id   event <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4_                                         | | app_id       `string`              App ID    event  generated <br/><br/> _Example: 5ff5881b80b66969e1fb35f6_                           | | account_id   `string`              Customer ID    event  generated <br/><br/> _Example: 5ff5881b80b66969e1fb35f4_                      | | template_id  `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg_                                             | | timestamp    `timestamp (in UTC)`  Timestamp   event <br/><br/> _Example: 2020-11-11T16:32:17Z_                                                  | | type         `string`              Type   event <br/><br/> _Example: peer.join.success_                                                          | | data         `dict`                Event data. Its keys will  different  different type  event.<br/><br/> _Example: < See description  >_ |  ### Sample Event Payload  ```json {     \"version\": \"2.0\",     \"id\": \"6c75de35-b778-4fb0-88ae-114c28dc285f\",     \"account_id\": \"60b8e13a6eb86d8101b57354\",     \"timestamp\": \"2021-08-08T07:04:15Z\",     \"type\": \"peer.join.success\",     \"data\": {         \"joined_at\": \"2021-08-08T07:04:15.001380432Z\",         \"peer_id\": \"83b869e1-9a4b-4037-84b2-913cf76e4392\",         \"role\": \"host\",         \"room_id\": \"60b8e13a6eb86d8101b57354\",         \"room_name\": \"test room\",         \"session_id\": \"610f81ee870dde099a249948\",         \"template_id\": \"66112497abcd52312556c4gg\",         \"user_id\": \"user.001\",         \"user_name\": \"test user\"     } } ```  ### List  events  Here's  list  events available   100ms platform.  | Event name                          Description                                                                                                                                                                                                                                                                                  | | :---------------------------------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | session                             Triggered   start  end   session. <br/><br/>**Events:** [session.open.success](#session-open-success), [session.close.success](#session-close-success)                                                                                                                        | | peer                                Triggered   peer join/leave succeeds/fails. <br/><br/>**Events:** [peer.join.success](#peer-join-success), [peer.leave.success](#peer-leave-success), [peer.join.failure](#peer-join-failure), [peer.leave.failure](#peer-leave-failure)                                                | | room                                Triggered   room ends. <br/><br/>**Events:** [room.end.success](#room-end-success)                                                                                                                                                                                                      | | SFU recording                       Triggered   start, end,  failure   SFU recording. <br/><br/>**Events:** [recording.success](#recording-success), [recording.failed](#recording-failed)                                                                                                                        | | RTMP Streaming & Browser Recording  Triggered   start, end,  failure  RTMP streaming and/or browser recording.<br/><br/>**Events:** [beam.started.success](#beam-started-success), [beam.stopped.success](#beam-stopped-success), [beam.recording.success](#beam-recording-success), [beam.failure](#beam-failure) | | HLS Streaming Events                Triggered   start, end,  failure  HLS streaming and/or HLS recording.<br/><br/>**Events:** [hls.started.success](#hls-started-success), [hls.stopped.success](#hls-stopped-success), [hls.recording.success](#hls-recording-success), [hls.failure](#hls-failure)              | | Role change Events                  Triggered   role  updated. <br/><br/>**Events:** [role.change.success](#role-change-success)                                                                                                                                                                                          |  ## Session Events  ### session.open.success  This event will  sent  session opens successfully.  #### Attributes  | Name                Type                  Description                                                                              | | :-----------------  :-------------------  :--------------------------------------------------------------------------------------- | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df_                    | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _               | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df_ | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg_                   | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _               |  #### Sample `session.open.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"app_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:49Z\",     \"type\": \"session.open.success\",     \"data\": {         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### session.close.success  This event will  sent  session closes successfully.  #### Attributes  | Name                Type                  Description                                                                              | |:-------------------|:---------------------|:-----------------------------------------------------------------------------------------| | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df_                    | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _               | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df_ | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg_                   | | session_duration    `int`                 Duration  user spent   room  seconds <br/><br/> _Example: 36000 _              | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _               | | session_stopped_at  `timestamp (in UTC)`  Timestamp  session ended <br/><br/> _Example: 2020-11-11T16:32:17Z _                 |  #### Sample `session.close.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"app_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:49Z\",     \"type\": \"session.close.success\",     \"data\": {         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"session_duration\": 600,         \"session_started_at\": \"2021-11-30T12:48:49.97291247Z\",         \"session_stopped_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ## Peer Events  ### peer.join.success  This event will  sent   peer joins  room successfully  #### Attributes  | Name                Type                  Description                                                                                                | | :-----------------  :-------------------  :--------------------------------------------------------------------------------------------------------- | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | user_name           `string`              User name   joining user <br/><br/> _Example: Test user _                                             | | user_data           `string`              User data   joining user <br/><br/> _Example: {\"isHandRaised\":true} _                                 | | role                `string`              Role   joining user <br/><br/> _Example: host _                                                       | | joined_at           `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                     | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 |  #### Sample `peer.join.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:49Z\",     \"type\": \"peer.join.success\",     \"data\": {         \"joined_at\": \"2021-11-30T12:58:49.97291247Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### peer.leave.success  This event will  sent  peer leaves  room  #### Attributes  | Name                Type                  Description                                                                                                              | |:-------------------|:---------------------|:-------------------------------------------------------------------------------------------------------------------------| | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                   | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                               | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _               | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                                         | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                  | | user_name           `string`              User name   user <br/><br/> _Example: Test user _                                                                   | | user_data           `string`              User data   user <br/><br/> _Example: {\"isHandRaised\":true} _                                                       | | role                `string`              Role   user <br/><br/> _Example: host _                                                                             | | left_at             `timestamp (in UTC)`  Timestamp  user left <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                     | | duration            `int`                 Duration  user spent   room  seconds <br/><br/> _Example: 36000 _                                              | | reason              `string`              Reason   peer leaving, see  details  <br/><br/> _Example: client request _                                | | message             `string`              Reason specified  kicking peer   room, see  details  <br/><br/> _Example: removed due  misconduct _ | | joined_at           `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                   | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                               |  #### Peer Leave Reason  1. `client request` 2. `peer kicked` 3. `websocket closed` 4. `ice connection state closed`  Note:  1. In case  peer  kicked / room  ended     - Client  initiates  peer leave  receiving  signal. In  cases, reason will  `client request`     - Also, server starts  timer   same. If peer leave   received  client   timer ends,  server  kicks  peer itself. In  cases, reason will  `peer kicked` 2. All  reasons except `client request`  `peer kicked` denote   peer  left unexpectedly.  #### Sample `peer.leave.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:58Z\",     \"type\": \"peer.leave.success\",     \"data\": {         \"duration\": 40,         \"joined_at\": \"2021-11-30T12:58:49.97291247Z\",         \"left_at\": \"2021-11-30T12:58:58.500451704Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"reason\": \"client request\",         \"message\": \"removed due  misconduct\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### peer.join.failure  This event will  sent   peer fails  join  room. This can occur when,  1. Server  overloaded  results  timeout 2. Network disconnection  #### Attributes  | Name           Type                  Description                                                                                                | | :------------  :-------------------  :--------------------------------------------------------------------------------------------------------- | | room_id        `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name      `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | peer_id        `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id        `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | template_id    `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | user_name      `string`              User name   user <br/><br/> _Example: Test user _                                                     | | user_data      `string`              User data   user <br/><br/> _Example: {\"isHandRaised\":true} _                                         | | role           `string`              Role   user <br/><br/> _Example: host _                                                               | | joined_at      `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                     | | error_message  `string`              Reason  failure <br/><br/> _Example: Peer  joined _                                                  |  #### Peer join failure Reason  1. `role  allowed` 2. `network disconnection` 3. `duplicate peer id`  #### Sample `peer.join.failure` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-25T09:10:35Z\",     \"type\": \"peer.join.failure\",     \"data\": {         \"joined_at\": \"0001-01-01T00:00:00Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"user_id\": \"************************\",         \"template_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"error_message\": \"role  allowed\"     } } ```  ### peer.leave.failure  This event will  sent   peer leave fails. This can occur when,  1. peer.leave  called twice 2. peer.leave  called  peer.join   peer.join  failed 3. peer.leave  called  peer  kicked   room / room  ended  #### Attributes  | Name           Type                  Description                                                                                                | |:--------------|:---------------------|:-----------------------------------------------------------------------------------------------------------| | room_id        `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name      `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | peer_id        `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id        `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | template_id    `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | user_name      `string`              User name   user <br/><br/> _Example: Test user _                                                     | | user_data      `string`              User data   user <br/><br/> _Example: {\"isHandRaised\":true} _                                         | | role           `string`              Role   user <br/><br/> _Example: host _                                                               | | left_at        `timestamp (in UTC)`  Timestamp  user left <br/><br/> _Example: 2020-11-11T17:32:17Z _                                       | | duration       `int`                 Duration  user spent   room  seconds <br/><br/> _Example: 36000 _                                | | error_message  `string`              Reason  failure <br/><br/> _Example: Peer  joined _                                                  | | joined_at      `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                     |  #### Peer leave failure Reason  1. `peer  joined`  #### Sample `peer.leave.failure` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:55:51Z\",     \"type\": \"peer.leave.failure\",     \"data\": {         \"duration\": 0,         \"left_at\": \"0001-01-01T00:00:00Z\",         \"joined_at\": \"2021-11-30T12:58:49.97291247Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"user_id\": \"************************\",         \"template_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"error_message\": \"Peer  joined\"     } } ```  ## Room Events  ### room.end.success  This event will  sent  room end  called     successful.  #### Attributes  | Name                Type                  Description                                                                                                | | :-----------------  :-------------------  :--------------------------------------------------------------------------------------------------------- | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | user_name           `string`              User name   user <br/><br/> _Example: Test user _                                                     | | role                `string`              Role   user <br/><br/> _Example: host _                                                               | | lock_room           `bool`                Flag  indicate   room  lock <br/><br/> _Example: false _                                         | | reason              `string`              Reason specified  end room call <br/><br/> _Example: End Room  admin _                               | | source              `string`              Source  end room api call <br/><br/> _Example: peer _                                                    | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 |  #### Sample `room.end.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-25T09:10:35Z\",     \"type\": \"room.end.success\",     \"data\": {         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"lock_room\": false,         \"reason\": \"****************\",         \"source\": \"peer\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### room.end.failure  This event will  sent  room end  called     unsuccessful.  #### Attributes  | Name                Type                  Description                                                                                                | | :-----------------  :-------------------  :--------------------------------------------------------------------------------------------------------- | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | user_name           `string`              User name   user <br/><br/> _Example: Test user _                                                     | | role                `string`              Role   user <br/><br/> _Example: host _                                                               | | lock_room           `bool`                Flag  indicate   room  lock <br/><br/> _Example: false _                                         | | reason              `string`              Reason specified  end room call <br/><br/> _Example: End Room  admin _                               | | source              `string`              Source  end room api call <br/><br/> _Example: peer _                                                    | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 | | error_message       `string`              Error message  indicate  reason  failure <br/><br/> _Example: session  found _                   | | error_code          `int`                 Error code  failure <br/><br/> _Example: 404 _                                                          |  #### Sample `room.end.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-25T09:10:35Z\",     \"type\": \"room.end.success\",     \"data\": {         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"lock_room\": false,         \"reason\": \"****************\",         \"source\": \"peer\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\",         \"error_code\": 404,         \"error_message\": \"session  found\"     } } ```  ## Role change Events  ### role.change.success  This event will  sent   role change   peer  successful.  #### Attributes  | Name                Type                  Description                                                                                                | |:-------------------|:---------------------|:-----------------------------------------------------------------------------------------------------------| | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | user_name           `string`              User name   user <br/><br/> _Example: Test user _                                                     | | user_data           `string`              User data   user <br/><br/> _Example: {\"isHandRaised\":true} _                                         | | previous_role       `string`              Previous role   peer <br/><br/> _Example: host _                                                      | | role                `string`              New role   user <br/><br/> _Example: host _                                                           | | joined_at           `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                     | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 | | role_changed_at     `timestamp (in UTC)`  Timestamp  role changed <br/><br/> _Example: 2020-10-11T16:32:17Z _                                    |  #### Sample `role.change.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"app_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:49Z\",     \"type\": \"role.change.success\",     \"data\": {         \"joined_at\": \"2021-11-30T12:58:49.97291247Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"previous_role\": \"********\",         \"session_started_at\": \"2021-11-30T12:48:49.97291247Z\",         \"role_changed_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### role.change.failure  This event will  sent   role change   peer fails. For example:  1. When   attempt  change peer's role   specific role whose limit  already  reached.  #### Attributes  | Name                Type                  Description                                                                                                | |:-------------------|:---------------------|:-----------------------------------------------------------------------------------------------------------| | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | room_name           `string`              Room name provided  creating  room <br/><br/> _Example: Test Room _                                 | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | user_id             `string`              User id assigned   customer <br/><br/> _Example: user.001 _                                           | | user_name           `string`              User name   user <br/><br/> _Example: Test user _                                                     | | user_data           `string`              User data   user <br/><br/> _Example: {\"isHandRaised\":true} _                                         | | role                `string`              New role   user <br/><br/> _Example: host _                                                           | | joined_at           `timestamp (in UTC)`  Timestamp  user joined <br/><br/> _Example: 2020-11-11T16:32:17Z _                                     | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 | | error_message       `string`              Role change error message (description) <br/><br/> _Example: role limit reached _                          |  #### Sample `role.change.failure` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"app_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:49Z\",     \"type\": \"role.change.failure\",     \"data\": {         \"peer_id\": \"********-****-****-****-***********\",         \"role\": \"********\",         \"room_id\": \"************************\",         \"room_name\": \"**********\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"user_id\": \"************************\",         \"user_name\": \"********\",         \"user_data\": \"\",         \"session_started_at\": \"2021-11-30T12:48:49.97291247Z\",         \"joined_at\": \"2021-11-30T12:58:49.97291247Z\",         \"error_message\": \"role limit reached\"     } } ```  ## SFU Recording Events  ### recording.success  This event will  sent  final composed recording  generated  uploaded   destination  #### Attributes  | Name                     Type                  Description                                                                                                                                              | |:------------------------|:---------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------| | room_id                  `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                                                   | | room_name                `string`              Room name assigned    creating room <br/><br/> _Example: class-9-batch-2 _                                                                      | | session_id               `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                                                | | template_id              `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                                                  | | location                 `string`              (Deprecated, use recording_path) s3 URI   recorded video <br/><br/> _Example: s3://bucket/prefix/ac.mp4 _                                           | | URL                      `string`              (Deprecated, use recording_presigned_url) Presigned s3 URL   recorded video,  download <br/><br/> _Example: https://s3-location/bucket/ac.mp4 _ | | duration                 `int`                 Duration  user spent   room  seconds <br/><br/> _Example: 3600 _                                                                               | | recording_path           `string`              Upload path   recorded video   s3 URI <br/><br/> _Example: s3://bucket/prefix/ac.mp4 _                                                        | | recording_presigned_url  `string`              Presigned s3 URL   recorded video,  download. Valid  24 hours <br/><br/> _Example: https://s3-location/bucket/ac.mp4 _                       | | size                     `int`                 Size   recorded video (in bytes) <br/><br/> _Example: 10024 _                                                                                       | | session_started_at       `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                               | | session_stopped_at       `timestamp (in UTC)`  Timestamp  session ended <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                                 |  #### Sample `recording.success` event  ```json {     \"version\": \"1.0\",     \"id\": \"********-****-****-****-***********\",     \"app_id\": \"************************\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T20:12:35Z\",     \"type\": \"recording.success\",     \"data\": {         \"duration\": 600,         \"room_id\": \"************************\",         \"room_name\": \"TestRoom1\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"recording_path\": \"s3://<file-bucket-address>.mp4\",         \"recording_presigned_url\": \"https://<file-access-url>?<signature>\",         \"size\": 13933649,         \"session_started_at\": \"2021-11-30T12:48:49.97291247Z\",         \"session_stopped_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### recording.failed  This event will  sent  failure occurs  final recording composition  upload  storage  #### Attributes  | Name                Type                  Description                                                                               | | :-----------------  :-------------------  :---------------------------------------------------------------------------------------- | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                    | | room_name           `string`              Room name assigned    creating room <br/><br/> _Example: class-9-batch-2 _       | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _ | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                   | | error               `string`              Error message <br/><br/> _Example: Upload Failure _                                       | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                | | session_stopped_at  `timestamp (in UTC)`  Timestamp  session ended <br/><br/> _Example: 2020-11-11T16:32:17Z _                 |  #### Sample `recording.failed` event  ```json {     \"version\": \"1.0\",     \"id\": \"********-****-****-****-***********\",     \"app_id\": \"************************\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-23T09:04:25Z\",     \"type\": \"recording.failed\",     \"data\": {         \"error\": \"Upload Failure\",         \"room_id\": \"************************\",         \"room_name\": \"TestRoom1\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"session_started_at\": \"2021-11-30T12:48:49.97291247Z\",         \"session_stopped_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ## RTMP Streaming & Browser Recording Events  ### beam.started.success  This event  sent  RTMP streaming and/or browser recording  successfully triggered  #### Attributes  | Name                Type                  Description                                                                                               | |:-------------------|:---------------------|:----------------------------------------------------------------------------------------------------------| | beam_id             `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83_                                             | | job_id              `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359_                                                | | recording_enabled   `bool`                Indicates whether recording  enabled   <br/><br/> _Example: true_                                  | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df_                                     | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4_ | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df_                  | | metadata_id         `string`              ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/webhook-left"
    },
    {
        "title": "webhook.mdx",
        "link": "/server-side/v2/introduction/webhook",
        "keywords": [],
        "headings": [
            "Introduction",
            "Requirements",
            "How to secure webhooks",
            "IP whitelisting",
            "Specifying headers",
            "How to configure Webhook",
            "Events",
            "Event Attributes",
            "Sample Event Payload",
            "List of events",
            "Session Events",
            "session.open.success",
            "Attributes",
            "Sample `session.open.success` event",
            "session.close.success",
            "Attributes",
            "Sample `session.close.success` event",
            "Peer Events",
            "peer.join.success",
            "Attributes",
            "Sample `peer.join.success` event",
            "peer.leave.success",
            "Attributes",
            "Peer Leave Reason",
            "Sample `peer.leave.success` event",
            "peer.join.failure",
            "Attributes",
            "Peer join failure Reason",
            "Sample `peer.join.failure` event",
            "peer.leave.failure",
            "Attributes",
            "Peer leave failure Reason",
            "Sample `peer.leave.failure` event",
            "Room Events",
            "room.end.success",
            "Attributes",
            "Sample `room.end.success` event",
            "room.end.failure",
            "Attributes",
            "Sample `room.end.success` event",
            "Role change Events",
            "role.change.success",
            "Attributes",
            "Sample `role.change.success` event",
            "role.change.failure",
            "Attributes",
            "Sample `role.change.failure` event",
            "SFU Recording Events",
            "recording.success",
            "Attributes",
            "Sample `recording.success` event",
            "recording.failed",
            "Attributes",
            "Sample `recording.failed` event",
            "RTMP Streaming & Browser Recording Events",
            "beam.started.success",
            "Attributes",
            "Sample `beam.started.success` event",
            "beam.stopped.success",
            "Attributes",
            "Sample `beam.stopped.success` event",
            "beam.recording.success",
            "Attributes",
            "Sample `beam.recording.success` event",
            "beam.failure",
            "Attributes",
            "Sample `beam.failure` event",
            "HLS Streaming Events",
            "hls.started.success",
            "Attributes",
            "Sample `hls.started.success` event",
            "hls.stopped.success",
            "Attributes",
            "Sample `hls.stopped.success` event",
            "hls.failure",
            "Attributes",
            "Sample `hls.failure` event",
            "hls.recording.success",
            "Attributes",
            "Sample `hls.recording.success` event"
        ],
        "content": "Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600_                            | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg_                                    | | metadata_timestamp  `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z_                             | | start_delay         `int`                 Time taken  beam  start recording <br/><br/> _Example: 12_                                            | | state_name          `string`              Beam state identifier <br/><br/> _Example: Started_                                                       | | state_timestamp     `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z_                          | | max_width           `int`                 Maximum width   screen supported  streaming / recording  pixels <br/><br/> _Example: 1280 _     | | max_height          `int`                 Maximum height   screen supported  streaming / recording  pixels <br/><br/> _Example: 720 _     | | meeting_url         `string`              meeting_url provided  rtmp start <br/><br/> Example: \"https://app.100ms.live/room_id\"                   | | rtmp                `array`               List  RTMP objects provided  rtmp start <br/><br/> _Example: [{\"url\": \"http://test.com\"}]_            | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z_                                 |  #### Sample `beam.started.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:46Z\",     \"type\": \"beam.started.success\",     \"data\": {         \"beam_id\": \"************************\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T12:58:46.400759043Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_enabled\": true,         \"room_id\": \"************************\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"start_delay\": 12,         \"state_name\": \"Started\",         \"state_timestamp\": \"2021-11-30T12:58:46.385555859Z\",         \"max_width\": 1280,         \"max_height\": 720,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"rtmp\": [{ \"url\": \"http://test.com\" }],         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### beam.stopped.success  This event  sent  RTMP streaming and/or browser recording  successfully stopped  #### Attributes  | Name                Type                  Description                                                                                                | |:-------------------|:---------------------|:-----------------------------------------------------------------------------------------------------------| | beam_id             `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                             | | job_id              `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359 _                                                | | recording_enabled   `bool`                Indicates whether recording  enabled   <br/><br/> _Example: true_                                   | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | metadata_id         `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                            | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | metadata_timestamp  `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                             | | state_name          `string`              Beam state identifier <br/><br/> _Example: Stopped _                                                       | | state_timestamp     `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z _                          | | duration            `int`                 Duration  RTMP streaming / recording  seconds <br/><br/> _Example: 12 _                                | | max_width           `int`                 Maximum width   screen supported  streaming / recording  pixels <br/><br/> _Example: 1280 _      | | max_height          `int`                 Maximum height   screen supported  streaming / recording  pixels <br/><br/> _Example: 720 _      | | meeting_url         `string`              meeting_url provided  rtmp start <br/><br/> Example: \"https://app.100ms.live/room_id\"                    | | rtmp                `array`               List  RTMP objects provided  rtmp start <br/><br/> _Example: [{\"url\": \"http://test.com\"}] _            | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 |  #### Sample `beam.stopped.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:59:57Z\",     \"type\": \"beam.stopped.success\",     \"data\": {         \"beam_id\": \"************************\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T12:59:57.797972469Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_enabled\": true,         \"room_id\": \"************************\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"state_name\": \"Stopped\",         \"state_timestamp\": \"2021-11-30T12:59:57.685503281Z\",         \"duration\": 56,         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"rtmp\": [{ \"url\": \"http://test.com\" }],         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### beam.recording.success  This event  sent  beam successfully records  room  uploads  video  storage  #### Attributes  | Name                     Type                  Description                                                                                                                                        | |:------------------------|:---------------------|:---------------------------------------------------------------------------------------------------------------------------------------------------| | beam_id                  `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                                                                     | | room_id                  `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                                             | | peer_id                  `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _                                         | | metadata_id              `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                                                                    | | metadata_timestamp       `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                                     | | session_id               `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                                          | | template_id              `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                                            | | created_at               `timestamp (in UTC)`  Timestamp   recording  created <br/><br/> _Example: 2020-11-11T17:12:17Z _                                                               | | duration                 `int`                 Duration  beam recording (seconds) <br/><br/> _Example: 79 _                                                                                     | | location                 `string`              (Deprecated, use recording_presigned_url) HTTPS url  recorded session file  S3 bucket <br/><br/> _Example: https://s3-loc/bucket/beam/ac.mp4 _ | | started_at               `timestamp (in UTC)`  Beam recording started  <br/><br/> _Example: 2020-11-11T17:12:27Z _                                                                              | | stopped_at               `timestamp (in UTC)`  Beam recording stopped  <br/><br/> _Example: 2020-11-11T17:32:15Z _                                                                              | | max_width                `int`                 Maximum width   screen supported  recording  pixels <br/><br/> _Example: 1280 _                                                          | | max_height               `int`                 Maximum height   screen supported  recording  pixels <br/><br/> _Example: 720 _                                                          | | recording_path           `string`              Upload path   recorded video   s3 URI <br/><br/> _Example: s3://bucket/prefix/ac.mp4 _                                                  | | recording_presigned_url  `string`              Presigned s3 URL   recorded video,  download <br/><br/> _Example: https://s3-location/bucket/ac.mp4 _                                     | | meeting_url              `string`              meeting_url provided  rtmp start <br/><br/> Example: \"https://app.100ms.live/room_id\"                                                            | | rtmp                     `array`               List  RTMP objects provided  rtmp start <br/><br/> _Example: [{\"url\": \"http://test.com\"}] _                                                    | | session_started_at       `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                         |  #### Sample `beam.recording.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:59:57Z\",     \"type\": \"beam.recording.success\",     \"data\": {         \"beam_id\": \"************************\",         \"created_at\": \"2021-11-30T12:59:57.672493658Z\",         \"duration\": 79,         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T12:59:57.679491494Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_path\": \"s3://bucket/prefix/ac.mp4\",         \"recording_presigned_url\": \"https://<file access URL>\",         \"room_id\": \"************************\",         \"started_at\": \"2021-11-30T12:58:34.051Z\",         \"stopped_at\": \"2021-11-30T12:59:56.778Z\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"rtmp\": [{ \"url\": \"http://test.com\" }],         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### beam.failure  This event will  sent    failures  RTMP streaming and/or browser recording. This can occur when,  1. Invalid RTMP URL 2. Browser failed  load  web-app 3. Incorrect storage (S3) credentials 4. Other unexpected errors  #### Attributes  | Name                Type                  Description                                                                                                | |:-------------------|:---------------------|:-----------------------------------------------------------------------------------------------------------| | beam_id             `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                             | | job_id              `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359 _                                                | | recording_enabled   `bool`                Indicates whether recording  enabled   <br/><br/> _Example: true_                                   | | room_id             `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                     | | peer_id             `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _ | | session_id          `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                  | | template_id         `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                    | | error_code          `int`                 Beam error code <br/><br/> _Example: 1 _                                                                   | | error_message       `string`              Beam error message (description) <br/><br/> _Example: Failed  resolve hostname _                         | | error_type          `string`              Beam error type <br/><br/> _Example: BeamFailed _                                                          | | metadata_id         `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                            | | metadata_timestamp  `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                             | | state_name          `string`              Beam state identifier <br/><br/> _Example: Failed _                                                        | | state_timestamp     `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z _                          | | duration            `int`                 Duration  RTMP streaming / recording  seconds <br/><br/> _Example: 12 _                                | | max_width           `int`                 Maximum width   screen supported  streaming / recording  pixels <br/><br/> _Example: 1280 _      | | max_height          `int`                 Maximum height   screen supported  streaming / recording  pixels <br/><br/> _Example: 720 _      | | meeting_url         `string`              meeting_url provided  rtmp start <br/><br/> Example: \"https://app.100ms.live/room_id\"                    | | rtmp                `array`               List  RTMP objects provided  rtmp start <br/><br/> _Example: [{\"url\": \"http://test.com\"}] _            | | session_started_at  `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                 |  #### Sample `beam.failure` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T20:36:55Z\",     \"type\": \"beam.failure\",     \"data\": {         \"beam_id\": \"************************\",         \"error_code\": 1,         \"error_message\": \"[tcp @ 0x55f6cc5f5780] Failed  resolve hostname rvs-isr: Name  service  known\",         \"error_type\": \"BeamFailed\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T20:36:55.807155801Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_enabled\": true,         \"room_id\": \"************************\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"state_message\": \"[tcp @ 0x55f6cc5f5780] Failed  resolve hostname rvs-isr: Name  service  known\",         \"state_name\": \"Failed\",         \"state_timestamp\": \"2021-11-30T20:36:55.799192444Z\",         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"rtmp\": [{ \"url\": \"http://test.com\" }],         \"duration\": 56,         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ## HLS Streaming Events  ### hls.started.success  This event  sent  HLS streaming  successfully triggered  #### Attributes  | Name                                     Type                  Description                                                                                                                                                                           | |:----------------------------------------|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | beam_id                                  `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                                                                                                        | | job_id                                   `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359 _                                                                                                                           | | recording_single_file_per_layer_enabled  `bool`                Indicates whether HLS recording   available  separate files  various dimensions supported. Output will  Individual mp4 file per HLS layer. <br/><br/> _Example: false_ | | recording_vod_playlist_enabled           `bool`                Indicates whether Video  Demand  enabled  not. Output will   ZIP file  m3u8 format    chunks. <br/><br/> _Example: false_                                        | | room_id                                  `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                                                                                | | peer_id                                  `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _                                                                            | | session_id                               `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                                                                             | | template_id                              `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                                                                               | | meeting_url                              `string`              meeting_url provided  HLS start <br/><br/> Example: \"https://app.100ms.live/room_id\"                                                                                                | | metadata_id                              `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                                                                                                       | | metadata_timestamp                       `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                                                                        | | start_delay                              `int`                 Time taken  beam  start streaming <br/><br/> _Example: 12 _                                                                                                                       | | state_name                               `string`              Beam state identifier <br/><br/> _Example: HLSStarted _                                                                                                                               | | state_timestamp                          `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                     | | max_width                                `int`                 Maximum width   screen supported  streaming / recording  pixels <br/><br/> _Example: 1280 _                                                                                             | | max_height                               `int`                 Maximum height   screen supported  streaming / recording  pixels <br/><br/> _Example: 720 _                                                                                             | | url                                      `string`              HLS live streaming url <br/><br/> _Example: https://100ms-live.m3u8 _                                                                                                                 | | started_at                               `timestamp (in UTC)`  Timestamp   HLS started <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                            | | session_started_at                       `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                                                            |  #### Sample `hls.started.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:58:46Z\",     \"type\": \"hls.started.success\",     \"data\": {         \"beam_id\": \"************************\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T12:58:46.400759043Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_single_file_per_layer_enabled\": false,         \"recording_vod_playlist_enabled\": false,         \"room_id\": \"************************\",         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"start_delay\": 12,         \"state_name\": \"HLSStarted\",         \"state_timestamp\": \"2021-11-30T12:58:46.385555859Z\",         \"max_width\" : 1280,         \"max_height\": 720,         \"url\": \"https://100ms-live.m3u8\",         \"started_at\": \"2021-11-30T12:58:46.400759043Z\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### hls.stopped.success  This event  sent  HLS streaming  successfully stopped  #### Attributes  | Name                                     Type                  Description                                                                                                                                                                           | |:----------------------------------------|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | beam_id                                  `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                                                                                                        | | job_id                                   `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359 _                                                                                                                           | | recording_single_file_per_layer_enabled  `bool`                Indicates whether HLS recording   available  separate files  various dimensions supported. Output will  Individual mp4 file per HLS layer. <br/><br/> _Example: false_ | | recording_vod_playlist_enabled           `bool`                Indicates whether Video  Demand  enabled  not. Output will   ZIP file  m3u8 format    chunks. <br/><br/> _Example: false_                                        | | room_id                                  `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                                                                                | | peer_id                                  `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _                                                                            | | session_id                               `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                                                                             | | template_id                              `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                                                                               | | max_width                                `int`                 Maximum width   screen supported  HLS streaming / recording  pixels <br/><br/> _Example: 1280 _                                                                             | | max_height                               `int`                 Maximum height   screen supported  HLS streaming / recording  pixels <br/><br/> _Example: 720 _                                                                             | | meeting_url                              `string`              meeting_url provided  HLS start <br/><br/> Example: \"https://app.100ms.live/room_id\"                                                                                                | | metadata_id                              `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                                                                                                       | | metadata_timestamp                       `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                                                                        | | state_name                               `string`              Beam state identifier <br/><br/> _Example: HLSStopped _                                                                                                                               | | state_timestamp                          `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                     | | url                                      `string`              HLS live streaming url <br/><br/> _Example: https://100ms-live.m3u8 _                                                                                                                 | | duration                                 `int`                 Duration  HLS streaming  seconds <br/><br/> _Example: 12 _                                                                                                                        | | started_at                               `timestamp (in UTC)`  Timestamp   HLS started <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                            | | stopped_at                               `timestamp (in UTC)`  Timestamp   HLS stopped <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                            | | session_started_at                       `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                                                            |  #### Sample `hls.stopped.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T12:59:57Z\",     \"type\": \"hls.stopped.success\",     \"data\": {         \"beam_id\": \"************************\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T12:59:57.797972469Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_single_file_per_layer_enabled\": false,         \"recording_vod_playlist_enabled\": false,         \"room_id\": \"************************\",         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"state_name\": \"HLSStopped\",         \"state_timestamp\": \"2021-11-30T12:59:57.685503281Z\",         \"duration\": 56,         \"started_at\": \"2021-11-30T12:59:57.797972469Z\",         \"stopped_at\": \"2021-11-30T12:59:57.797972469Z\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### hls.failure  This event will  sent    failures  HLS streaming and/or recording. This can occur when,  1. The meeting_url  invalid 2. Other unexpected errors  HLS streaming / recording.  #### Attributes  | Name                                     Type                  Description                                                                                                                                                                           | |:----------------------------------------|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | beam_id                                  `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                                                                                                        | | job_id                                   `string`              Beam job id <br/><br/> _Example: 60b8e1d96eb86d8101b57359 _                                                                                                                           | | recording_single_file_per_layer_enabled  `bool`                Indicates whether HLS recording   available  separate files  various dimensions supported. Output will  Individual mp4 file per HLS layer. <br/><br/> _Example: false_ | | recording_vod_playlist_enabled           `bool`                Indicates whether Video  Demand  enabled  not. Output will   ZIP file  m3u8 format    chunks. <br/><br/> _Example: false_                                        | | room_id                                  `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                                                                                | | peer_id                                  `string`              100ms assigned id  identify  joining user <br/><br/> _Example: bd0c76fd-1ab1-4d7d-ab8d-bbfa74b620c4 _                                                                            | | session_id                               `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                                                                             | | template_id                              `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                                                                               | | max_width                                `int`                 Maximum width   screen supported  HLS streaming / recording  pixels <br/><br/> _Example: 1280 _                                                                             | | max_height                               `int`                 Maximum height   screen supported  HLS streaming / recording  pixels <br/><br/> _Example: 720 _                                                                             | | meeting_url                              `string`              meeting_url provided  HLS start <br/><br/> Example: \"https://app.100ms.live/room_id\"                                                                                                | | error_code                               `int`                 Beam error code <br/><br/> _Example: 1 _                                                                                                                                              | | error_message                            `string`              Beam error message (description) <br/><br/> _Example: Beam failed  unknown error _                                                                                                | | error_type                               `string`              Beam error type <br/><br/> _Example: BeamFailed _                                                                                                                                     | | metadata_id                              `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                                                                                                       | | metadata_timestamp                       `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                                                                        | | state_name                               `string`              Beam state identifier <br/><br/> _Example: HLSFailed _                                                                                                                                | | state_timestamp                          `timestamp (in UTC)`  Timestamp   beam state changed <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                                                                     | | duration                                 `int`                 Duration  HLS streaming  seconds <br/><br/> _Example: 12 _                                                                                                                        | | session_started_at                       `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                                                                            |  #### Sample `hls.failure` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T20:36:55Z\",     \"type\": \"hls.failure\",     \"data\": {         \"beam_id\": \"************************\",         \"error_code\": 1,         \"error_message\": \"Beam failed  unknown error\",         \"error_type\": \"BeamFailed\",         \"job_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T20:36:55.807155801Z\",         \"peer_id\": \"********-****-****-****-***********\",         \"recording_single_file_per_layer_enabled\": false,         \"recording_vod_playlist_enabled\": false,         \"room_id\": \"************************\",         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"state_name\": \"HLSFailed\",         \"state_timestamp\": \"2021-11-30T20:36:55.799192444Z\",         \"duration\": 56,         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ```  ### hls.recording.success  This event will  sent  HLS recordings  successful  uploaded   storage  #### Attributes  | Name                                 Type                  Description                                                                                                                     | |:------------------------------------|:---------------------|:--------------------------------------------------------------------------------------------------------------------------------| | beam_id                              `string`              Unique beam id <br/><br/> _Example: 61d3def54b616982bd80ed83 _                                                                  | | room_id                              `string`              100ms assigned room id <br/><br/> _Example: 5f9edc6ac238215aec2312df _                                                          | | metadata_id                          `string`              Webhook metadata ID <br/><br/> _Example: 14f350f5-18c4-46ca-8a33-71cbcc836600 _                                                 | | metadata_timestamp                   `timestamp (in UTC)`  Webhook message creation timestamp <br/><br/> _Example: 2020-11-11T17:32:17Z _                                                  | | duration                             `int`                 Duration  HLS recording  seconds <br/><br/> _Example: 12 _                                                                  | | session_id                           `string`              100ms assigned id  identify  session <br/><br/> _Example: 5f9edc6bd238215aec7700df _                                       | | template_id                          `string`              Template ID   room <br/><br/> _Example: 66112497abcd52312556c4gg _                                                         | | hls_vod_recording_path               `string`              Upload path   HLS vod playlist   s3 URI <br/><br/> _Example: s3://bucket/prefix/ac.mp4 _                             | | hls_vod_recording_presigned_url      `string`              Pre signed url  HLS vod playlist url <br/><br/> _Example: https://s3-location/bucket/hls-vod.zip _                           | | max_width                            `int`                 Maximum width   screen supported  HLS recording  pixels <br/><br/> _Example: 1280 _                                   | | max_height                           `int`                 Maximum height   screen supported  HLS recording  pixels <br/><br/> _Example: 720 _                                   | | meeting_url                          `string`              meeting_url provided  HLS start <br/><br/> Example: \"https://app.100ms.live/room_id\"                                          | | recording_created_at                 `timestamp (in UTC)`  Timestamp   recording  created <br/><br/> _Example: 2020-11-11T17:12:17Z _                                            | | started_at                           `timestamp (in UTC)`  Timestamp   HLS started <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                      | | stopped_at                           `timestamp (in UTC)`  Timestamp   HLS stopped <br/><br/> _Example: 2020-11-11T17:32:18Z _                                                      | | recording_single_files               `array`               List  recording details per layer. layer=\"0\"   highest quality layer <br/><br/> _Example: < see  > _                | | recording_hls_vod_playlist_location  `string`              (Deprecated, use hls_vod_recording_presigned_url) Pre signed url  HLS vod playlist url. <br/><br/> _Example: < see  > _ | | recording_thumbnails                 `array`               List  thumbnails generated <br/><br/> _Example: < see  > _                                                               | | session_started_at                   `timestamp (in UTC)`  Timestamp  session started <br/><br/> _Example: 2020-11-11T16:32:17Z _                                                      |  #### Sample `hls.recording.success` event  ```json {     \"version\": \"2.0\",     \"id\": \"********-****-****-****-***********\",     \"account_id\": \"************************\",     \"timestamp\": \"2021-11-30T20:36:55Z\",     \"type\": \"hls.recording.success\",     \"data\": {         \"beam_id\": \"************************\",         \"session_id\": \"************************\",         \"template_id\": \"************************\",         \"metadata_id\": \"********-****-****-****-***********\",         \"metadata_timestamp\": \"2021-11-30T20:36:55.807155801Z\",         \"room_id\": \"************************\",         \"duration\": 56,         \"max_height\": 720,         \"max_width\": 1280,         \"meeting_url\": \"https://app.100ms.live/preview/rpe-pwl-akt?token=beam_recording\",         \"hls_vod_recording_path\": \"s3://<hls-vod-bucket-address>.zip\",         \"hls_vod_recording_presigned_url\": \"https://<hls-vod-access-url>?<signature>\",         \"recording_single_files\": [             {                 \"layer\": \"0\",                 \"recording_path\": \"s3://<file-0-bucket-address>.mp4\",                 \"recording_presigned_url\": \"https://<file-0-access-url>?<signature-0>\"             },             {                 \"layer\": \"1\",                 \"recording_path\": \"s3://<file-1-bucket-address>.mp4\",                 \"recording_presigned_url\": \"https://<file-1-access-url>?<signature-1>\"             },             {                 \"layer\": \"2\",                 \"recording_path\": \"s3://<file-2-bucket-address>.mp4\",                 \"recording_presigned_url\": \"https://<file-2-access-url>?<signature-2>\"             },             {                 \"layer\": \"3\",                 \"recording_path\": \"s3://<file-3-bucket-address>.mp4\",                 \"recording_presigned_url\": \"https://<file-3-access-url>?<signature-3>\"             }         ],         \"recording_thumbnails\": [             {                 \"width\": 1280,                 \"height\": 720,                 \"offset\": 60,                 \"location\": \"s3://<thumbnail-file-bucket-address>.png\",                 \"url\": \"https://<thumbnail-access-url>?<signature3>\"             }         ],         \"recording_created_at\": \"2021-11-30T12:59:57.672493658Z\",         \"started_at\": \"2021-11-30T12:59:57.797972469Z\",         \"stopped_at\": \"2021-11-30T12:59:57.797972469Z\",         \"session_started_at\": \"2021-11-30T12:58:49.97291247Z\"     } } ``` ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/introduction/webhook-right"
    },
    {
        "title": "room.mdx",
        "link": "/server-side/v2/legacy-api%20(v1)/room",
        "keywords": [],
        "headings": [
            "Create Room using API",
            "Headers",
            "Body Paramters",
            "recording_info",
            "upload_info",
            "Options",
            "Credentials",
            "Disable Room",
            "Headers",
            "Body Paramters"
        ],
        "content": "--- title: Room nav: 8.1 ---  > **Note**: The Legacy API (V1) will remain fully functional. However,  recommend  use  [new API](/server-side/v2/Rooms/object)  leverage  new functionalities  features  stay   date  future releases;  can continue  check  docs   Legacy API (V1)s [here](/server-side/v2/deprecated/templates-and-roles).  ## Create Room using API  You can create room using API. This provides   scalable way  creating room.  <PostRequest     title=\"Create Room API\"     desp=\"This endpoint  used  create Room. \"     url=\"https://prod-in2.100ms.live/api/v2/rooms\" />  <Tabs items={['Request', 'Response']} id=\"req\" />  <Tab id=\"req-0\">  ```bash curl https://prod-in2.100ms.live/api/v2/rooms -H 'Authorization: Bearer  <management_token>' -X POST -H 'Content-Type: application/json' -d '{\"name\": \"test-room\", \"description\": \"This   test room\", \"recording_info\": {\"enabled\": true, \"upload_info\": {\"type\": \"s3\", \"location\": \"test-bucket\", \"prefix\": \"test-prefix\", \"options\": {\"region\": \"ap-south-1\"}, \"credentials\": {\"key\": \"aws-access-key\", \"secret\": \"aws-secret-key\"}}}}' ```  </Tab> <Tab id=\"req-1\">  <Response res=\"200: OK\" />  ```json {     \"id\": \"61101349d0f56e684b608c08\",     \"name\": \"test-room\",     \"description\": \"This   test room\",     \"active\": true,     \"recording_info\": {         \"enabled\": true,         \"upload_info\": {             \"type\": \"s3\",             \"location\": \"test-bucket\",             \"prefix\": \"test-prefix\",             \"credentials\": {                 \"key\": \"aws-access-key\",                 \"secret\": \"aws-secret-key\"             },             \"options\": {                 \"region\": \"ap-south-1\"             }         }     },     \"user\": \"60b8e13a6eb86d8101b57353\",     \"customer\": \"60b8e13a6eb86d8101b57354\",     \"created_at\": \"2021-08-08T17:24:25.682362823Z\",     \"updated_at\": \"0001-01-01T00:00:00Z\" } ```  </Tab>  ### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Content-type <br/>   application/json             Yes      | | Authorization <br/>  Bearer `<management token>`  Yes      |  ### Body Paramters  | Name                  Type      Description                                                                                                                                                                                                                                                                                                                                                                                                                                                  Required | | :-------------------  :-------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>            `string`  A unique identifier  can assign  100ms rooms. This  `case-insensitive`. Accepted characters  `a-z, A-Z, 0-9,  . - : _`. If  provided,   generated automatically. <br/><br/> **Note**: <br/><br/> (1) If `create Room`  called   existing room name,   corresponding room ID  returned <br/><br/> (2) Providing room name will  helpful   want  disable  room later (disable room API requires room name)  No       | | description <br/>     `string`  A string  describe  room's usage. E.g. \"9PM English Class Batch 2\"                                                                                                                                                                                                                                                                                                                                                                                     No       | | template <br/>        `string`  [Template](../foundation/templates-and-roles)   room. You can get template name  room details section  dashboard                                                                                                                                                                                                                                                                                                                                  No       | | recording_info <br/>  `object`  Object  type `recording_info`. This object contains information  enabling recording/setting storage location  recordings.                                                                                                                                                                                                                                                                                                                            No       | | region <br/>          `string`  Region    want  create room. <br/><br/> `in` - India <br/><br/> `us` - United States <br/><br/> `eu` - European Union <br/><br/> `auto` Automatic region selection (default,   case  parameter   provided)                                                                                                                                                                                                                         No       |  ---  ### recording_info  | Name         Type       Description                                                                                                                                                                                      Required | | :----------  :--------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | enabled      `boolean`  Enable SFU recording. Disabled  default                                                                                                                                                        No       | | upload_info  `object`   Object  type `upload_info`. This object contains information  recordings storage location. If  want  store recording  100ms,   use   s3,  add    object  No       |  `recording_info`  room acts   atomic property. Following describes  way `recording_info` depends  recording settings defined   template.  - If `recording_info` key  **not** provided   api,  room will fill   recording settings  template. And  response body will include `recording_source_template: true`. This means, whenever recording info  changed  template,  will also  reflected  room's recording settings. - If `recording_info` key  provided   api,  room's recording settings will  depend  template  all.  To know   recording please visit [Recording](./recording)  ### upload_info  | Name         Type      Description                                                                                             Required | | :----------  :-------  :-----------------------------------------------------------------------------------------------------  :------- | | type         `string`  Upload Destination type. Currently,  `s3`  supported                                              Yes      | | location     `string`  Name   AWS s3 bucket    want  store  recordings                                     Yes      | | prefix       `string`  Upload prefix path                                                                                      No       | | options      `object`  Additional configurations  type `Options`   used  uploading                                    No       | | credentials  `object`  Object  type `Credentials`. This  used  share AWS credentials  access  s3 bucket specified.  No       |  ### Options  | Name    Type      Description                                                                                                               Required | | :-----  :-------  :-----------------------------------------------------------------------------------------------------------------------  :------- | | region  `string`  Region   AWS account hosting  s3 bucket  storing recordings. If  provided   assumed   `ap-south-1`  No       |  ### Credentials  | Name    Type      Description                                                                           Required | | :-----  :-------  :-----------------------------------------------------------------------------------  :------- | | key     `string`  `access key ID`   AWS account hosting  s3 bucket  storing recordings      Yes      | | secret  `string`  `secret access key`   AWS account hosting  s3 bucket  storing recordings  Yes      |  The access keys   read(GetObject)  write(PutObject) permissions   s3 bucket. For  details check - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  ## Disable Room  This API can  used  disable  room   use  <PostRequest     title=\"Disable Room API\"     desp=\"This endpoint  used  disable  Room. \"     url=\"https://prod-in2.100ms.live/api/v2/rooms\" />  <Tabs items={['Request', 'Response']} id=\"dis\" />  <Tab id=\"dis-0\">  ```bash curl https://prod-in2.100ms.live/api/v2/rooms -H 'Authorization: Bearer  <management_token>' -X POST -H 'Content-Type: application/json' -d '{\"name\": \"test-room\", \"active\": false}' ```  </Tab>  <Tab id=\"dis-1\">  <Response res=\"200: OK\" />  ```json {     \"id\": \"61101349d0f56e684b608c08\",     \"name\": \"test-room\",     \"description\": \"This   test room\",     \"active\": false,     \"recording_info\": {         \"enabled\": true,         \"upload_info\": {             \"type\": \"s3\",             \"location\": \"test-bucket\",             \"prefix\": \"test-prefix\",             \"credentials\": {                 \"key\": \"aws-access-key\",                 \"secret\": \"aws-secret-key\"             },             \"options\": {                 \"region\": \"ap-south-1\"             }         }     },     \"user\": \"60b8e13a6eb86d8101b57353\",     \"customer\": \"60b8e13a6eb86d8101b57354\",     \"created_at\": \"2021-08-08T17:24:25.682362823Z\",     \"updated_at\": \"0001-01-01T00:00:00Z\" } ```  </Tab>  ### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Content-type <br/>   application/json             Yes      | | Authorization <br/>  Bearer `<management token>`  Yes      |  ### Body Paramters  | Name          Type      Description                                                       Required | | :-----------  :-------  :---------------------------------------------------------------  :------- | | name <br/>    `string`  Room name  given  creation   room                    Yes      | | active <br/>  `bool`    Flag  indicate disabling   room,   set  `false`  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/legacy-api%20(v1)/room"
    },
    {
        "title": "session.mdx",
        "link": "/server-side/v2/legacy-api%20(v1)/session",
        "keywords": [],
        "headings": [
            "Overview",
            "Get Session Data using API",
            "Headers",
            "URL Parameters",
            "Response",
            "How to calculate session duration",
            "Postman Collection"
        ],
        "content": "--- title: Session nav: 8.2 ---  > **Note**: The Legacy API (V1) will remain fully functional. However,  recommend  use  [new API](/server-side/v2/Sessions/object)  leverage  new functionalities  features  stay   date  future releases;  can continue  check  docs   Legacy API (V1)s [here](/server-side/v2/deprecated/templates-and-roles).  ## Overview  Session   single continuous call   [room](room). To allow users  join  100ms video conferencing session inside  app,  first need  create  `room`. A single room can  multiple sessions. You will need  [management token](../foundation/authentication-and-tokens)   bearer token   requests.  ## Get Session Data using API  You can query session data using API.  <GetRequest     title=\"Get Session API\"     desp=\"This endpoint  used  get sessions. \"     url=\"https://api.100ms.live/v2/sessions\" />  <Tabs items={['Request', 'Response']} id=\"req\" />  <Tab id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/sessions?room_id=61652b404e556e35f2179759' -H 'Authorization: Bearer {{management_token}}' ```  </Tab> <Tab id=\"req-1\">  <Response res=\"200: OK\" />  ```json {     \"limit\": 10,     \"data\": [         {             \"id\": \"6205e9826d83bc36e6e761e2\",             \"room_id\": \"61652b404e556e35f2179759\",             \"customer_id\": \"60b8e1d96eb86d8101b5735a\",             \"user_id\": \"60b8e1d96eb86d8101b57359\",             \"active\": true,             \"peers\": {                 \"860aa563-6f18-4a04-b7ad-a2cb41ba883e\": {                     \"name\": \"Sagar\",                     \"role\": \"host\",                     \"joined_at\": \"2022-02-11T04:43:46.306Z\"                 }             },             \"created_at\": \"2022-02-11T04:43:46.294Z\",             \"updated_at\": \"2022-02-11T04:43:46.75Z\"         },         {             \"id\": \"6205e9376d83bc36e6e761e1\",             \"room_id\": \"6204fea00c108fa49d599d79\",             \"customer_id\": \"60c1ea9a6eb86d8101b57570\",             \"user_id\": \"60c1ea9a6eb86d8101b5756f\",             \"active\": false,             \"peers\": {                 \"210e5175-4816-4c65-a985-07b366f571cc\": {                     \"name\": \"Deep2\",                     \"role\": \"teacher\",                     \"joined_at\": \"2022-02-11T04:42:36.595Z\",                     \"left_at\": \"2022-02-11T04:42:42.126Z\"                 },                 \"2d3ab4d3-cc04-426e-b7aa-6f7952169509\": {                     \"name\": \"Deep2\",                     \"role\": \"teacher\",                     \"joined_at\": \"2022-02-11T04:42:31.027Z\",                     \"left_at\": \"2022-02-11T04:42:42.738Z\"                 }             },             \"created_at\": \"2022-02-11T04:42:31.018Z\",             \"updated_at\": \"2022-02-11T04:42:42.785Z\"         }     ],     \"last\": \"6205e9376d83bc36e6e761e1\" } ```  </Tab>  ### Headers  | Name                 Value                        Required | | :------------------  :--------------------------  :------- | | Authorization <br/>  Bearer `<management token>`  Yes      |  ### URL Parameters  | Name           Type      Description                                                                                                              Required | | :------------  :-------  :----------------------------------------------------------------------------------------------------------------------  :------- | | id <br/>       `string`  ID   session  known.                                                                                              No       | | room_id <br/>  `string`  Room ID   session  known.                                                                                         No       | | active <br/>   `bool`    Session  currently going   not.                                                                                    No       | |  <br/>   `time`    Timestamp before(inclusive)  session  created  RFC3339 format e.g. `2022-02-09T05:53:23.375Z`.                  No       | |  <br/>    `time`    Timestamp after(inclusive)  session  created  RFC3339 format e.g. `2022-02-09T05:53:23.375Z`.                   No       | | limit <br/>    `int`     Number  sessions returned  response. Range `10`-`20`                                                                 No       | | start <br/>    `string`  ID   session    start  response. Sessions  returned  decreasing IDs  `created_at` timestamp.  No       |  ### Response  | Name         Type        Description                                                                                                                       Required | | :----------  :---------  :-------------------------------------------------------------------------------------------------------------------------------  :------- | | limit <br/>  `int`       Number  sessions  API tried  find. If returned array  lesser number  results,   number  found.           No       | | data <br/>   `array`     Array  sessions  `null`   session  found.                                                                              No       | | last <br/>   `ObjectID`  Sessions  returned  decreasing IDs  `created_at` timestamp. Last represent  earliest session returned   response.  No       |  ### How  calculate session duration  You can calculate additional information  session data using given information. Redundant information like peer duration/ session duration   provided since  can  calculated  provided response. You can calculate `peer duration`  subtracting `joined_at` timestamp  `left_at`   given peer. Similarly  can calculate `session duration`  adding  peers' duration.  ## Postman Collection  <DownloadCollection type=\"rooms\" /> ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/legacy-api%20(v1)/session"
    },
    {
        "title": "templates-and-roles.mdx",
        "link": "/server-side/v2/legacy-api%20(v1)/templates-and-roles",
        "keywords": [],
        "headings": [
            "Create Template API",
            "Body Parameters",
            "roleObject",
            "publishParams",
            "audio",
            "video",
            "screen",
            "subscribeParams",
            "subscribeDegradation",
            "permissions",
            "settings",
            "recording",
            "upload",
            "options",
            "Credentials",
            "Create/Modify Role API",
            "Body Parameters",
            "Update Settings API",
            "Body Parameters",
            "Get Templates API",
            "URL Parameters",
            "Get Role API",
            "Get Settings API",
            "Modify Template API",
            "Body Parameters",
            "Delete Role API"
        ],
        "content": "--- title: Templates  Roles nav: 8.3 ---  > **Note**: The Legacy API (V1) will remain fully functional. However,  recommend  use  [new API](/server-side/v2/policy/template-object)  leverage  new functionalities  features  stay   date  future releases;  can continue  check  docs   Legacy API (V1)s [here](/server-side/v2/deprecated/templates-and-roles).  ## Create Template API  <PostRequest title=\"/policy/v1/templates\" /> <Request id=\"req-comp-0\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates' -H 'Authorization: Bearer {{management_token}}' -X POST -H 'Content-Type: application/json' -d '{ \"name\": \"test-template\", \"default\": true, \"roles\":{ \"student\": {}, \"teacher\": {}, \"admin\": {} } }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"_id\": \"615e61b0ba65e77a89ba75c1\",     \"name\": \"test-template\",     \"customer\": \"60f7cc95f88117b9e47bf618\",     \"default\": true,     \"roles\": {         \"admin\": {             \"name\": \"admin\",             \"publishParams\": {                 \"allowed\": [\"video\", \"screen\", \"audio\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 250,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 270                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 }             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"guest\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {}             },             \"permissions\": {}         },         \"student\": {             \"name\": \"student\",             \"publishParams\": {                 \"allowed\": [\"video\", \"screen\", \"audio\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 250,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 270                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 }             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"guest\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {}             },             \"permissions\": {}         },         \"teacher\": {             \"name\": \"teacher\",             \"publishParams\": {                 \"allowed\": [\"video\", \"screen\", \"audio\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 250,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 270                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 }             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"guest\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {}             },             \"permissions\": {}         }     } } ```  </ResponseBox>  #### Body Parameters  | Name            Type       Description                                                                                                                                                                                                                                                                                                                                                                                                 Required | | :-------------  :--------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>      `string`   A unique identifier  can assign  100ms templates. Accepted characters  `a-z, A-Z, 0-9,  . - : _`. If  provided,   generated automatically. <br/><br/> **Notes**: <br/>(1) If `create Template`  called   existing template name,   template will  overwritten.<br/>(2) Providing template name will  helpful   want  modify/delete  template using name.  No       | | default <br/>   `boolean`  Whether   default template   customer. Default template   customer  used   template  provided  `create Room` api.                                                                                                                                                                                                                                                                 No       | | roles <br/>     `object`   Map  `{roleName:roleObject}`. Some sane defaults  set  values    provided   roles object.                                                                                                                                                                                                                                                                                            No       | | settings <br/>  `object`   Global settings   template.                                                                                                                                                                                                                                                                                                                                                                          No       |  #### roleObject  | Name             Type      Description                                                            Required | | :--------------  :-------  :--------------------------------------------------------------------  :------- | | publishParams    `object`  Publish parameters   role.                                      No       | | subscribeParams  `object`  Subscribe parameters   role.                                    No       | | permissions      `object`  Permissions   role.                                             No       | | priority         `int`     Priority   role  subscription/publishing.<br/>Range: `1`-`10`  No       |  #### publishParams  | Name     Type      Description                                                Required | | :------  :-------  :--------------------------------------------------------  :------- | | allowed  `array`   Allowed tracks. Subarray  [`audio`, `video`, `screen`].  No       | | audio    `object`  Audio publish parameters.                                  No       | | video    `object`  Video publish parameters.                                  No       | | screen   `object`  Screenshare publish parameters.                            No       |  #### audio  | Name     Type      Description                                                                        Required | | :------  :-------  :--------------------------------------------------------------------------------  :------- | | bitRate  `int`     Audio Max bitrate  audio track  kbps.<br/>Range: `16`-`128`<br/>Default: `32`  No       | | codec    `string`  Codec   audio track.<br/>Options: [`opus`] <br/>Default: `opus`              No       |  #### video  | Name       Type      Description                                                                    Required | | :--------  :-------  :----------------------------------------------------------------------------  :------- | | bitRate    `int`     Max bitrate  video track  kbps.<br/>Range: `30`-`2000`<br/>Default: `256`  No       | | codec      `string`  Codec   video track.<br/>Options: [`vp8`]<br/>Default: `vp8`             No       | | frameRate  `int`     Max number  video frames per second.<br/>Range: `1`-`30`<br/>Default: `25`   No       | | height     `int`     Height   video track.<br/>Range: `50`-`1080`<br/>Default: `180`           No       | | width      `int`     Width   video track.<br/>Range: `50`-`1920`<br/>Default: `320`            No       |  #### screen  | Name       Type      Description                                                                   Required | | :--------  :-------  :---------------------------------------------------------------------------  :------- | | bitRate    `int`     Max bitrate  screen track  kbps.<br/>Range: `>=500` <br/>Default: `1024`  No       | | codec      `string`  Codec   screen track.<br/>Options: [`vp8`]<br/>Default: `vp8`           No       | | frameRate  `int`     Max number  screen frames per second<br/>Range: `1`-`30`<br/>Default: `10`  No       | | height     `int`     Height   screen track.<br/>Range: `270`-`1080`<br/>Default: `720`        No       | | width      `int`     Width   screen track.<br/>Range: `480`-`1920`<br/>Default: `1280`        No       |  #### subscribeParams  | Name                  Type      Description                                                               Required | | :-------------------  :-------  :-----------------------------------------------------------------------  :------- | | maxSubsBitRate        `int`     Maximum bitrate (in kbps)  can subscribed.                            No       | | subscribeToRoles      `array`   List  roles  can  subscribed to.                                 No       | | subscribeDegradation  `object`  Subscribe degradation parameters (adding  enables screen simulcast).  No       |  #### subscribeDegradation  | Name                       Type   Description                                                              Required | | :------------------------  :----  :----------------------------------------------------------------------  :------- | | packetLossThreshold        `int`  Threshold  packet loss.<br/>Range: `1`-`100`<br/>Default: `50`        No       | | degradeGracePeriodSeconds  `int`  Degrade grace period (in seconds).<br/>Range: `1`-`10`<br/>Default: `1`  No       | | recoverGracePeriodSeconds  `int`  Recover grace period (in seconds).<br/>Range: `1`-`10`<br/>Default: `4`  No       |  #### permissions  | Name          Type       Description                                         Required | | :-----------  :--------  :-------------------------------------------------  :------- | | endRoom       `boolean`  Permission  end room  all.                     No       | | removeOthers  `boolean`  Permission  remove others   room.          No       | | mute          `boolean`  Permission  request others  mute them.          No       | | unmute        `boolean`  Permission  request others  unmute them.        No       | | changeRole    `boolean`  Permission  request others  change  role.  No       |  #### settings  | Name       Type      Description                                                                                                                            Required | | :--------  :-------  :------------------------------------------------------------------------------------------------------------------------------------  :------- | | region     `string`  Region    room will  hosted  default. Possible values   `in`, `us`, `eu`  `auto` (automatic region selection).  No       | | recording  `object`  Object  type `recording`. This object contains information  enabling recording/setting storage location  recordings.           No       |  #### recording  | Name     Type       Description                                                                                                                                                                                 Required | | :------  :--------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | enabled  `boolean`  Enable  SFU recording   rooms. Disabled  default.                                                                                                                                No       | | upload   `object`   Object  type `upload`. This object contains information  recordings storage location. If  want  store recording  100ms,   use   s3,  add    object  No       |  #### upload  | Name         Type      Description                                                                                             Required | | :----------  :-------  :-----------------------------------------------------------------------------------------------------  :------- | | type         `string`  Upload Destination type. Currently,  s3  supported.                                               Yes      | | location     `string`  Name   AWS s3 bucket    want  store  recordings                                     Yes      | | prefix       `string`  Upload prefix path                                                                                      Yes      | | options      `object`  Additional configurations  type Options   used  uploading                                      No       | | credentials  `object`  Object  type `Credentials`. This  used  share AWS credentials  access  s3 bucket specified.  No       |  #### options  | Name    Type      Description                                                                                        Required | | :-----  :-------  :------------------------------------------------------------------------------------------------  :------- | | region  `string`  Region   AWS account hosting  s3 bucket. If  provided   assumed   `ap-south-1`  No       |  #### Credentials  | Name    Type      Description                                                                           Required | | :-----  :-------  :-----------------------------------------------------------------------------------  :------- | | key     `string`  `access key ID`   AWS account hosting  s3 bucket  storing recordings      Yes      | | secret  `string`  `secret access key`   AWS account hosting  s3 bucket  storing recordings  Yes      |  ## Create/Modify Role API  <PostRequest title=\"/policy/v1/templates/:id/roles/:name\" /> <Request id=\"req-comp-1\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/roles/{{roleName}}' -H 'Authorization: Bearer {{management_token}}' -X POST -H 'Content-Type: application/json' -d '{ \"name\": \"listener3\", \"publishParams\": { \"allowed\":  \"video\", \"screen\", \"audio\" ], \"audio\": { \"bitRate\": 40, \"codec\": \"opus\" }, \"video\": { \"bitRate\": 400, \"codec\": \"vp8\", \"frameRate\": 30, \"width\": 480, \"height\": 360 }, \"screen\": { \"codec\": \"vp8\", \"frameRate\": 10, \"width\": 1920, \"height\": 1080 } }, \"subscribeParams\": { \"subscribeToRoles\":  \"speaker\", \"moderator\", \"new-role-9880\" ], \"maxSubsBitRate\": 3200, \"subscribeDegradation\": {} }, \"permissions\": {}, \"priority\": 1 }' ```  </Request> <ResponseBox id=\"resp-1\" status=\"200 OK\">  ```json {     \"name\": \"listener3\",     \"publishParams\": {         \"allowed\": [\"video\", \"screen\", \"audio\"],         \"audio\": {             \"bitRate\": 40,             \"codec\": \"opus\"         },         \"video\": {             \"bitRate\": 400,             \"codec\": \"vp8\",             \"frameRate\": 30,             \"width\": 480,             \"height\": 360         },         \"screen\": {             \"codec\": \"vp8\",             \"frameRate\": 10,             \"width\": 1920,             \"height\": 1080         }     },     \"subscribeParams\": {         \"subscribeToRoles\": [\"speaker\", \"moderator\", \"new-role-9880\"],         \"maxSubsBitRate\": 3200,         \"subscribeDegradation\": {}     },     \"permissions\": {},     \"priority\": 1 } ```  </ResponseBox>  #### Body Parameters  | Name              Type      Description                                                                                                                      Required | | :---------------  :-------  :------------------------------------------------------------------------------------------------------------------------------  :------- | | roleObject <br/>  `object`  Role object correspoding   given role.                                                                                      Yes      | | name <br/>        `string`  Providing  `name` renames  role   provided name. If role   `name` already exists,  gives  overwrite error.  No       |  ## Update Settings API  <PostRequest title=\"/policy/v1/templates/:id/settings\" /> <Request id=\"req-comp-2\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/settings' -H 'Authorization: Bearer {{management_token}}' -X POST -H 'Content-Type: application/json' -d '{ \"region\": \"us\" }' ```  </Request> <ResponseBox id=\"resp-2\" status=\"200 OK\">  ```json {     \"region\": \"us\" } ```  </ResponseBox>  #### Body Parameters  | Name          Type      Description                                                                       Required | | :-----------  :-------  :-------------------------------------------------------------------------------  :------- | | region <br/>  `string`  Region    room will  hosted  default - `in`, `eu`, `us`  `auto`.  No       |  ## Get Templates API  <GetRequest title=\"/policy/v1/templates?id=ID\" /> <Request id=\"req-3\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates?id={{templateID}}' -H 'Authorization: Bearer {{management_token}}' ```  </Request>  <ResponseBox id=\"res-3\" status=\"200 OK\">  ```json {     \"limit\": 10,     \"data\": [         {             \"_id\": \"615dbca1ba65e77a89a8e2b8\",             \"name\": \"test-template10\",             \"customer\": \"60f7cc95f88117b9e47bf618\",             \"roles\": {                 \"student\": {                     \"name\": \"student\",                     \"publishParams\": {                         \"allowed\": [\"screen\", \"audio\"],                         \"audio\": {                             \"bitRate\": 42,                             \"codec\": \"opus\"                         },                         \"video\": {                             \"bitRate\": 250,                             \"codec\": \"vp8\",                             \"frameRate\": 30,                             \"width\": 480,                             \"height\": 270                         },                         \"screen\": {                             \"codec\": \"vp8\",                             \"frameRate\": 10,                             \"width\": 1920,                             \"height\": 1086                         }                     },                     \"subscribeParams\": {                         \"subscribeToRoles\": [\"teacher\", \"student\"],                         \"maxSubsBitRate\": 2000,                         \"subscribeDegradation\": {}                     },                     \"permissions\": {},                     \"priority\": 1                 }             },             \"settings\": {                 \"region\": \"in\"             }         }     ],     \"last\": \"615dbca1ba65e77a89a8e2b8\" } ```  </ResponseBox>  #### URL Parameters  | Name           Type       Description                                                                                                                         Required | | :------------  :--------  :---------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>     `string`   Name   template.                                                                                                               No       | | id <br/>       `string`   ID   template.                                                                                                                 No       | | start <br/>    `string`   Returned dataset  sorted  decreasing order  IDs. Provide  ID   last result set  start  reverse order  there.  No       | | limit <br/>    `int`      Number  templates  return (max `20`).                                                                                           No       | | default <br/>  `boolean`  Whether template  default  not.                                                                                                 No       |  ## Get Role API  <GetRequest title=\"/policy/v1/templates/:id/roles/:name\" /> <Request id=\"req-4\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/roles/{{roleName}}' -H 'Authorization: Bearer {{management_token}}' ```  </Request>  <ResponseBox id=\"res-4\" status=\"200 OK\">  ```json {     \"name\": \"student\",     \"publishParams\": {         \"allowed\": [\"screen\", \"audio\"],         \"audio\": {             \"bitRate\": 42,             \"codec\": \"opus\"         },         \"video\": {             \"bitRate\": 250,             \"codec\": \"vp8\",             \"frameRate\": 30,             \"width\": 480,             \"height\": 270         },         \"screen\": {             \"codec\": \"vp8\",             \"frameRate\": 10,             \"width\": 1920,             \"height\": 1086         }     },     \"subscribeParams\": {         \"subscribeToRoles\": [\"teacher\", \"student\"],         \"maxSubsBitRate\": 2000,         \"subscribeDegradation\": {}     },     \"permissions\": {},     \"priority\": 1 } ```  </ResponseBox>  ## Get Settings API  <GetRequest title=\"/policy/v1/templates/:id/settings\" /> <Request id=\"req-5\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/settings' -H 'Authorization: Bearer {{management_token}}' ```  </Request>  <ResponseBox id=\"res-5\" status=\"200 OK\">  ```json {     \"region\": \"in\" } ```  </ResponseBox>  ## Modify Template API  <PostRequest     title=\"/policy/v1/templates?id=ID\"     desp=\"This endpoint  used  modify  Template. You can also use  URL parameter name instead  id  modify  template  name. Providing   name   previous template overrides  template. You need  provide  options  roles  settings   want  apply.\"     url=\"https://prod-policy.100ms.live/policy/v1/templates?id={{tempalateID}}\" /> <Request id=\"req-6\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates?id={{templateID}}' -H 'Authorization: Bearer {{management_token}}' -X POST -H 'Content-Type: application/json' -d '{ \"roles\":{ \"student\":{ \"name\":\"student\", \"publishParams\":{ \"allowed\":[ \"screen\", \"audio\" ], \"audio\":{ \"bitRate\":42, \"codec\":\"opus\" }, \"video\":{ \"bitRate\":250, \"codec\":\"vp8\", \"frameRate\":30, \"width\":480, \"height\":270 }, \"screen\":{ \"codec\":\"vp8\", \"frameRate\":10, \"width\":1920, \"height\":1086 } }, \"subscribeParams\":{ \"subscribeToRoles\":[ \"teacher\", \"student\" ], \"maxSubsBitRate\":2000 }, \"priority\":1 } }, \"settings\":{ \"region\":\"eu\" } }' ```  </Request> <ResponseBox id=\"res-6\" status=\"200 OK\">  ```json {     \"_id\": \"615dbca1ba65e77a89a8e2b8\",     \"name\": \"test-template10\",     \"customer\": \"60f7cc95f88117b9e47bf618\",     \"roles\": {         \"student\": {             \"name\": \"student\",             \"publishParams\": {                 \"allowed\": [\"screen\", \"audio\"],                 \"audio\": {                     \"bitRate\": 42,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 250,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 270                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1086                 }             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"teacher\", \"student\"],                 \"maxSubsBitRate\": 2000,                 \"subscribeDegradation\": {}             },             \"permissions\": {},             \"priority\": 1         }     },     \"settings\": {         \"region\": \"eu\"     } } ```  </ResponseBox>  #### Body Parameters  | Name            Type       Description                                                                                                                                                             Required | | :-------------  :--------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>      `string`   If   provide  `name`, earlier provided name  used. Trying  modify  template's name  match another existing template's name produces overwrite error.  No       | | default <br/>   `boolean`  Whether   default template  customer. The default template   customer  used   template  provided  create room API.                             No       | | roles <br/>     `object`   Modified map  `{roleName:roleObject}`. Since    POST request,  need  provide  whole roles object  modify/persist/override it.                        Yes      | | settings <br/>  `object`   Modified settings. Since    POST request,  need  provide  whole settings object  modify/persist/override it.                                           Yes      |  ## Delete Role API  <DeleteRequest     title=\"/policy/v1/templates/:id/roles/:name\"     desp=\"This endpoint  used  delete  role. Subsequent requests  deleting role    exist gives 404.\"     url=\"https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/roles/{{roleName}}\" />  <Request id=\"req-7\">  ```bash curl 'https://prod-policy.100ms.live/policy/v1/templates/{{templateID}}/roles/{{roleName}}' -H 'Authorization: Bearer {{management_token}}' -X DELETE -H 'Content-Type: application/json' ```  </Request> <ResponseBox id=\"res-7\" status=\"204 No Content\"></ResponseBox>",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/legacy-api%20(v1)/templates-and-roles"
    },
    {
        "title": "create-template-via-api.mdx",
        "link": "/server-side/v2/policy/create-template-via-api",
        "keywords": [],
        "headings": [
            "Understand sub-objects hierarchy",
            "Main arguments",
            "roles object",
            "publishParams object",
            "audio object",
            "video object",
            "screen object",
            "subscribeParams object",
            "subscribeDegradation object",
            "permissions object",
            "settings object",
            "recording object",
            "upload object",
            "options object",
            "credentials object",
            "roomState object",
            "destinations object",
            "browserRecordings object",
            "rtmpDestinations object",
            "hlsDestinations object",
            "HLS - recording object"
        ],
        "content": "--- title: Create  template via API nav: 5.2 ---  This endpoint  used  create  template. A recommended way   provide  list  roles  empty objects  get default values  various options corresponding   roles,  update  roles  modifying  using create/update role API.  ## Understand sub-objects hierarchy  ![Template sub-objects hierarchy](/docs/v2/template-object-hierarchy.png)  <PostRequest title=\"https://api.100ms.live/v2/templates\" />  <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/templates' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"new-template-{{$timestamp}}\",     \"default\": false,     \"roles\": {         \"guest\": {             \"name\": \"guest\",             \"publishParams\": {                 \"allowed\": [                     \"audio\",                     \"video\",                     \"screen\"                 ],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [                     \"host\",                     \"guest\"                 ],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"host\": {             \"name\": \"host\",             \"publishParams\": {                 \"allowed\": [                     \"audio\",                     \"video\",                     \"screen\"                 ],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [                     \"guest\",                     \"host\"                 ],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"endRoom\": true,                 \"removeOthers\": true,                 \"mute\": true,                 \"unmute\": true,                 \"changeRole\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         }     },     \"settings\": {         \"region\": \"in\",         \"subscribeDegradation\": {},         \"recording\": {             \"enabled\": true,             \"upload\": {                 \"type\": \"s3\",                 \"location\": \"<Name   AWS s3 bucket>\",                 \"prefix\": \"<Upload prefix path>\",                 \"options\": {                     \"region\": \"<region   s3 bucket>\"                 },                 \"credentials\": {                     \"key\": \"<access key ID   AWS account/S3 bucket>\",                     \"secretKey\": \"<secret access key   AWS account/S3 bucket>\"                 }             }         },         \"screenSimulcastLayers\": {},         \"videoSimulcastLayers\": {},         \"roomState\": {             \"messageInterval\": 5,             \"sendPeerList\": false,             \"stopRoomStateOnJoin\": true,             \"enabled\": false         }     },     \"destinations\": {         \"browserRecordings\": {             \"test\": {                 \"name\": \"test\",                 \"width\": 1920,                 \"height\": 1080,                 \"maxDuration\": 1800,                 \"thumbnails\": {                     \"width\": 0,                     \"height\": 0                 },                 \"presignDuration\": 3600             }         },         \"rtmpDestinations\": {             \"test\": {                 \"name\": \"test\",                 \"width\": 1080,                 \"height\": 1920,                 \"maxDuration\": 1800,                 \"rtmpUrls\": [                     \"url\",                     \"ashdas\",                     \"ddsfsdf\"                 ],                 \"recordingEnabled\": true             }         },         \"hlsDestinations\": {             \"test\": {                 \"name\": \"test\",                 \"maxDuration\": 28800,                 \"layers\": [                     {                         \"width\": 1080,                         \"height\": 720,                         \"videoBitrate\": 1100,                         \"audioBitrate\": 32                     },                     {                         \"width\": 720,                         \"height\": 720,                         \"videoBitrate\": 600                     },                     {}                 ],                 \"playlistType\": \"event\",                 \"numPlaylistSegments\": 12,                 \"videoFrameRate\": 25,                 \"enableMetadataInsertion\": true,                 \"enableStaticUrl\": true,                 \"recording\": {                     \"hlsVod\": true,                     \"singleFilePerLayer\": true,                     \"layers\": [                         {                             \"width\": 720,                             \"height\": 1920,                             \"videoBitrate\": 2000,                             \"audioBitrate\": 64                         }                     ],                     \"thumbnails\": {                         \"enabled\": true,                         \"width\": 720,                         \"height\": 1920,                         \"offsets\": [                             2                         ],                         \"fps\": 60                     },                     \"presignDuration\": 604800                 }             }         }     } }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"6324661c4da877930beaecaa\",     \"name\": \"new-template-1663329820\",     \"customerId\": \"627cda54ff688c037a39291b\",     \"roles\": {         \"guest\": {             \"name\": \"guest\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"host\", \"guest\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"host\": {             \"name\": \"host\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"guest\", \"host\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"endRoom\": true,                 \"removeOthers\": true,                 \"mute\": true,                 \"unmute\": true,                 \"changeRole\": true,                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         }     },     \"settings\": {         \"region\": \"in\",         \"subscribeDegradation\": {},         \"recording\": {             \"enabled\": true,             \"upload\": {                 \"location\": \"<Name   AWS s3 bucket>\",                 \"type\": \"s3\",                 \"prefix\": \"<Upload prefix path>\",                 \"credentials\": {                     \"key\": \"<access key ID   AWS account/S3 bucket>\",                     \"secretKey\": \"<secret access key   AWS account/S3 bucket>\"                 },                 \"options\": {                     \"region\": \"<region   s3 bucket>\"                 }             }         },         \"roomState\": {             \"messageInterval\": 5,             \"sendPeerList\": false,             \"stopRoomStateOnJoin\": true,             \"enabled\": false         },         \"retry\": {}     },     \"destinations\": {         \"browserRecordings\": {             \"test\": {                 \"name\": \"test\",                 \"width\": 1920,                 \"height\": 1080,                 \"maxDuration\": 1800,                 \"thumbnails\": {                     \"width\": 0,                     \"height\": 0                 },                 \"presignDuration\": 3600             }         },         \"rtmpDestinations\": {             \"test\": {                 \"name\": \"test\",                 \"width\": 1080,                 \"height\": 1920,                 \"maxDuration\": 1800,                 \"rtmpUrls\": [\"url\", \"ashdas\", \"ddsfsdf\"],                 \"recordingEnabled\": true             }         },         \"hlsDestinations\": {             \"test\": {                 \"name\": \"test\",                 \"maxDuration\": 28800,                 \"layers\": [                     {                         \"width\": 1080,                         \"height\": 720,                         \"videoBitrate\": 1100,                         \"audioBitrate\": 32                     },                     {                         \"width\": 720,                         \"height\": 720,                         \"videoBitrate\": 600                     },                     {}                 ],                 \"playlistType\": \"event\",                 \"numPlaylistSegments\": 12,                 \"videoFrameRate\": 25,                 \"enableMetadataInsertion\": true,                 \"enableStaticUrl\": true,                 \"recording\": {                     \"hlsVod\": true,                     \"singleFilePerLayer\": true,                     \"layers\": [                         {                             \"width\": 720,                             \"height\": 1920,                             \"videoBitrate\": 2000,                             \"audioBitrate\": 64                         }                     ],                     \"thumbnails\": {                         \"enabled\": true,                         \"width\": 720,                         \"height\": 1920,                         \"offsets\": [2],                         \"fps\": 60                     },                     \"presignDuration\": 604800                 }             }         }     },     \"createdAt\": \"2022-09-16T12:03:40.068Z\",     \"updatedAt\": \"2022-09-16T12:03:40.068Z\",     \"_id\": \"6324661c4da877930beaecaa\",     \"customer\": \"627cda54ff688c037a39291b\" } ```  </ResponseBox>  ## Main arguments  | Name                Type       Description                                                                                                                                                                                                                                                                                            Required | | :-----------------  :--------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>          `string`   A unique identifier  can assign  100ms templates. Accepted characters  `a-z, A-Z, 0-9,  . - : _`. If  provided,   generated automatically. <br/><br/> **Notes**: <br/>If `create Template`  called   existing template name,   template will  overwritten.<br/>  No       | | default <br/>       `boolean`  Whether   default template   customer. Default template   customer  used   template  provided  [create room API](/server-side/v2/Rooms/create-via-api).                                                                                                                      No       | | roles <br/>         `object`   Map  `{roleName:roleObject}`. Some sane defaults  set  values    provided   roles object.                                                                                                                                                                                       No       | | settings <br/>      `object`   Global settings   template.                                                                                                                                                                                                                                                                     No       | | destinations <br/>  `object`   Object  type `destinations`. This object contains information  enabling/configuring features like `browserRecordings`, `rtmpDestinations`, & `hlsDestinations`.                                                                                                                                   No       |  ## roles object  | Name             Type      Description                                                                                                                                                                                                Required | | ---------------  :-------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name             `string`  Alias   role associated   particular template.                                                                                                                                                  No       | | publishParams    `object`  Publish parameters   role. <br/><br/>Object  type [publishParams](#publishparams-object)   collection  objects   `allowed`, `audio`, `video`, `screen`, etc                        No       | | subscribeParams  `object`  Subscribe parameters   role. <br/><br/>Object  type [subscribeParams](#subscribe-object)   mix  arguments  objects like `subscribeToRoles`, `maxSubsBitRate`, & `subscribeDegradation`  No       | | permissions      `object`  Permissions   role. <br/><br/>Object  type [permission](#permissions-object)  collection  objects like `browserRecordings`, `rtmpDestinations`, & `hlsDestinations`.                        No       | | priority         `int`     Priority   role  subscribing/publishing. <br/><br/>Priority will determine  order    roles will  degraded. A lower number represents  higher priority.                             No       |  ### publishParams object  | Name     Type      Description                                                Required | | :------  :-------  :--------------------------------------------------------  :------- | | allowed  `array`   Allowed tracks. Subarray  [`audio`, `video`, `screen`].  No       | | audio    `object`  Audio publish parameters.                                  No       | | video    `object`  Video publish parameters.                                  No       | | screen   `object`  Screenshare publish parameters.                            No       |  #### audio object  | Name     Type      Description                                                      Default  Required | | :------  :-------  :--------------------------------------------------------------  :------  :------- | | bitRate  `int`     Audio Max bitrate  audio track  kbps.<br/>Range: `16`-`128`  32       No       | | codec    `string`  Codec   audio track.<br/>Options: [`opus`]                 opus     No       |  #### video object  | Name       Type      Description                                                 Default  Required | | :--------  :-------  :---------------------------------------------------------  :------  :------- | | bitRate    `int`     Max bitrate  video track  kbps.<br/>Range: `30`-`2000`  256      No       | | codec      `string`  Codec   video track.<br/>Options: [`vp8`]             vp8      No       | | frameRate  `int`     Max number  video frames per second.<br/>Range: `1`-`30`  25       No       | | height     `int`     Height   video track.<br/>Range: `50`-`1080`           180      No       | | width      `int`     Width   video track.<br/>Range: `50`-`1920`            320      No       |  #### screen object  | Name       Type      Description                                                 Default  Required | | :--------  :-------  :---------------------------------------------------------  :------  :------- | | bitRate    `int`     Max bitrate  screen track  kbps.<br/>Range: `>=500` `   1024     No       | | codec      `string`  Codec   screen track.<br/>Options: [`vp8`]            vp8      No       | | frameRate  `int`     Max number  screen frames per second<br/>Range: `1`-`30`  10       No       | | height     `int`     Height   screen track.<br/>Range: `270`-`1080`         720      No       | | width      `int`     Width   screen track.<br/>Range: `480`-`1920`          1280     No       |  ### subscribeParams object  | Name                  Type      Description                                                               Required | | :-------------------  :-------  :-----------------------------------------------------------------------  :------- | | maxSubsBitRate        `int`     Maximum bitrate (in kbps)  can subscribed.                            No       | | subscribeToRoles      `array`   List  roles  can  subscribed to.                                 No       | | subscribeDegradation  `object`  Subscribe degradation parameters (adding  enables screen simulcast).  No       |  #### subscribeDegradation object  | Name                       Type   Description                                             Default  Required | | :------------------------  :----  :-----------------------------------------------------  :------  :------- | | packetLossThreshold        `int`  Threshold  packet loss.<br/>Range: `1`-`100`         50       No       | | degradeGracePeriodSeconds  `int`  Degrade grace period (in seconds).<br/>Range: `1`-`10`  1        No       | | recoverGracePeriodSeconds  `int`  Recover grace period (in seconds).<br/>Range: `1`-`10`  4        No       |  ### permissions object  | Name              Type       Description                                                                                                                                                                  Required  Default | | :---------------  :--------  :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :-------  :------ | | endRoom           `boolean`  Permission  end room  all.                                                                                                                                              No        `false` | | removeOthers      `boolean`  Permission  remove others   room.                                                                                                                                   No        `false` | | mute              `boolean`  Permission  request others  mute them.                                                                                                                                   No        `false` | | unmute            `boolean`  Permission  request others  unmute them.                                                                                                                                 No        `false` | | changeRole        `boolean`  Permission  request others  change  role.                                                                                                                           No        `false` | | sendRoomState     `boolean`  Permission  receive room state like peer-count  peer-list                                                                                                               No        `false` | | browserRecording  `boolean`  Permission  start/stop browser (beam) recording. <br/><br/> This  also required  start/stop RTMP + browser recording  conjunction  `rtmpStreaming` permissions.  No        `true`  | | rtmpStreaming     `boolean`  Permission  start/stop RTMP streaming. <br/><br/> This  also required  start/stop RTMP + browser recording  conjunction  `browserRecording` permissions.         No        `true`  | | hlsStreaming      `boolean`  Permission  start/stop HLS streaming (with  without recording). <br/><br/>This  also required  - pause/unpause HLS recording  insert metadata  HLS stream.       No        `true`  |  ## settings object  | Name       Type      Description                                                                                                                                                                                                                                                Required | | :--------  :-------  :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | region     `string`  Region    room will  hosted  default. Possible values   `in`, `us`, `eu`  `auto` (automatic region selection).                                                                                                                      No       | | recording  `object`  Object  type `recording`. This object contains information  enabling recording/setting storage location  recordings.                                                                                                                               No       | | roomState  `object`  Object  type `roomState`. This object will help   define strategy  sending state updates  client SDKs. <br/><br/>Also, enables   build  \"preview\" screen  shows  state   room  joining  providing  list  peers  No       |  ### recording object  | Name     Type       Description                                                                                                                                                                                 Required | | :------  :--------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | enabled  `boolean`  Enable  SFU recording   rooms. Disabled  default.                                                                                                                                No       | | upload   `object`   Object  type `upload`. This object contains information  recordings storage location. If  want  store recording  100ms,   use   s3,  add    object  No       |  #### upload object  | Name         Type      Description                                                                                             Required | | :----------  :-------  :-----------------------------------------------------------------------------------------------------  :------- | | type         `string`  Upload destination type. Currently,  s3  supported.                                               Yes      | | location     `string`  Name   AWS s3 bucket    want  store  recordings                                     Yes      | | prefix       `string`  Upload prefix path                                                                                      Yes      | | options      `object`  Additional configurations  type Options   used  uploading                                      No       | | credentials  `object`  Object  type `credentials`. This  used  share AWS credentials  access  s3 bucket specified.  No       |  #### options object  | Name    Type      Description                                                                                        Required | | :-----  :-------  :------------------------------------------------------------------------------------------------  :------- | | region  `string`  Region   AWS account hosting  s3 bucket. If  provided   assumed   `ap-south-1`  No       |  #### credentials object  | Name       Type      Description                                                                           Required | | :--------  :-------  :-----------------------------------------------------------------------------------  :------- | | key        `string`  `access key ID`   AWS account hosting  s3 bucket  storing recordings      Yes      | | secretKey  `string`  `secret access key`   AWS account hosting  s3 bucket  storing recordings  Yes      |  ### roomState object  | Name             Type       Description                                                                                                                                                                                                                                                             Required | | :--------------  :--------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | messageInterval  `int`      Room-state data will  sent   regular interval   many seconds. <br/><br/>Consequently,  room state displayed   preview screen will refresh accordingly. <br/><br/>This value must   multiple  5,  5  3600 seconds,  inclusive.  No       | | sendPeerList     `boolean`  Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                                           No       | | enabled          `boolean`  This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                                                   No       |  ## destinations object  | Name               Type      Description                                                                                                                                             Required | | :----------------  :-------  :-----------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | browserRecordings  `object`  Object  type `browserRecordings`. This can  used  record  sessions   file,  subsequent access.                                          No       | | rtmpDestinations   `object`  Object  type `rtmpDestinations`. This can  used  live stream  video conferencing apps  platforms like YouTube, Twitch, Facebook, MUX, etc.  No       | | hlsDestinations    `object`  Object  type `hlsDestinations`. This can  used  configure arguments   HLS live streaming                                                   No       |  ### browserRecordings object  | Name             Type      Description                                                                                              Required | | :--------------  :-------  :------------------------------------------------------------------------------------------------------  :------- | | name             `string`  The name  can assign  identify  browser recording                                                No       | | width            `int`     Indicates  width   screen   recorded  pixels. For example, 1280 pixels                     No       | | height           `int`     Indicates  height   screen   recorded  pixels. For example, 720 pixels                     No       | | maxDuration      `int`     Sets  maximum duration,  seconds,   recording. For example, 1800 seconds(30 mins)              No       | | thumbnails       `object`  Object  type `thumbnails`. This can  used  configure thumbnail's dimension                         No       | | presignDuration  `int`     Indicates  expiry   pre-signed URLs—the duration    pre-signed URL   signed.  No       |  ### rtmpDestinations object  | Name              Type       Description                                                                                                         Required | | :---------------  :--------  :-----------------------------------------------------------------------------------------------------------------  :------- | | name              `string`   The name  can assign  identify  RTMP destination                                                            No       | | width             `int`      Indicates  width   screen   recorded  pixels. For example, 1280 pixels                                No       | | height            `int`      Indicates  height   screen   recorded  pixels. For example, 720 pixels                                No       | | maxDuration       `int`      Sets  maximum duration,  seconds,   recording. For example, 1800 seconds(30 mins)                         No       | | rtmpUrls          `object`   Object  type `rtmpUrls`. This can  used  configure  RTMP URLs(max 3)  wish  broadcast  stream to.  No       | | recordingEnabled  `boolean`  If recording  required  can  set  true. This value   effect  streaming.                            No       |  ### hlsDestinations object  | Name                     Type       Description                                                                                                                 Required | | :----------------------  :--------  :-------------------------------------------------------------------------------------------------------------------------  :------- | | name                     `string`   The name  can assign  identify  HLS destination                                                                     No       | | maxDuration              `int`      Sets  maximum duration,  seconds,   recording. For example, 1800 seconds(30 mins)                                 No       | | layers                   `object`   Object  type `layers`. This can  used  configure  various dimensions   supported  HLS streaming.            No       | | playlistType             `string`   Indicates  type  playlist. Can   type `event`  `live`.                                                           No       | | numPlaylistSegments      `int`      Indicates  number  media segments   playlist. Applicable   `live` playlistType. Min/max/default = 3/12/5.  No       | | videoFrameRate           `int`      Set  argument  configure  frames per second (or FPS)   stream. For example, 25                              No       | | enableMetadataInsertion  `boolean`  Set   true  enable metadata insertion along   stream.                                                        No       | | enableStaticUrl          `boolean`  If recording  required  can  set  true. This value   effect  streaming.                                    No       | | recording                `object`   Object  type `recording`. This can  used  enable HLS recording  configure  layers, thumbnails, etc.             No       |  #### HLS - recording object  | Name                Type       Description                                                                                                                                                    Required | | :-----------------  :--------  :------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | hlsVod              `boolean`  Set   `True`  enabled Video  Demand. Output will   ZIP file  m3u8 format    chunks.                                                   No       | | singleFilePerLayer  `boolean`  Set   `True`  HLS recording   available  separate files  various dimensions supported. Output will  Individual mp4 file per HLS layer.  No       | | layers              `object`   Object  type `layers`. This can  used  configure  various dimensions   supported  HLS recording.                                               No       | | thumbnails          `object`   Object  type `thumbnails`. This can  used  configure thumbnail's dimension                                                                               No       | | presignDuration     `int`      Indicates  expiry   pre-signed URLs—the duration    pre-signed URL   signed.                                                        No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/create-template-via-api"
    },
    {
        "title": "create-template-via-dashboard.mdx",
        "link": "/server-side/v2/policy/create-template-via-dashboard",
        "keywords": [],
        "headings": [
            "Introduction",
            "Create a template via dashboard",
            "Roles",
            "Name",
            "Priority",
            "Publish Strategies",
            "Subscribe Strategies",
            "Permissions",
            "Advanced Settings",
            "Preview room state"
        ],
        "content": "--- title: Create  template via dashboard nav: 5.3 ---  ## Introduction  A template   collection  roles, room settings, recording  RTMP settings (if used),   used   SDK  decide  geography  connect to,  tracks  return   client, whether  turn  recording   room  created, etc. Each room  associated   template.  ## Create  template via dashboard  Users can see  modify  templates  visiting [Templates  Dashboard](https://dashboard.100ms.live/templates)  via API(see below). After updating  template   part   like permissions,  need  rejoin  restart  session   template updates  take place.  ![Template](/docs/v2/template.png)  ## Roles  Role   collection  permissions  allows   perform certain set  operations   part   room. It   following attributes:  ### Name  Every role   name    unique inside  template. This name will  used  generating app tokens  referencing inside  template.  ### Priority  Priority will determine  order    roles will  degraded. A lower number represents  higher priority.  ### Publish Strategies  Publish strategies will  used  determine  tracks   quality  can  published   role.  | Strategy             Description                                                                                                                                                                                                                                                                                   | | -------------------  --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can share audio      Whether  role  allowed  publish  audio track  not.                                                                                                                                                                                                                                | | Can share video      Whether  role  allowed  publish  video track                                                                                                                                                                                                                                   | | Can share screen     Whether  role  allowed   screen share                                                                                                                                                                                                                                           | | Video quality        Quality   video track   going   published   role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p`  `120p`  predefined   user can select one    values. This option will  visible    **Can share video**  enabled. | | Screenshare quality  Quality   screen   going   shared   role. Currently, 2 video qualities `720p`  `1080p`  predefined   user can select one    values. This option will  visible    **Can share screen**  enabled.                                       |  ### Subscribe Strategies  Subscribe strategies will  used  determine   roles,  role can subscribe to.  | Strategy               Description                                                                                                                                                                                                                                                      | | ---------------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Subscribe            You can select   roles   template   role will subscribe                                                                                                                                                                                      | | Subscribe Degradation  When  flag  turned on, one   remote video tracks will  muted automatically   network condition worsens. Such tracks will  marked  `degraded`. When  network condition improves,  `degraded` tracks will automatically  unmuted. |  ### Permissions  Permissions will contain  list  additional privileges   role will have.  | Permission                            Description                                                                                                                                                                     | | ------------------------------------  ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Can change  participant's role     With  permission, user will  able  change  role    participant's   present   room                                                               | | Can mute  participant              With  permission, user will  able  mute  participant's audio and/or video.                                                                                           | | Can ask participant  unmute         With  permission, user will  able  ask  participant  unmute  audio and/or video.                                                                              | | Can remove participant   room  With  permission, user will  able  remove  participant   current session   room.                                                                         | | Can end current session   room   With  permission, user will  able  end  current session   room.                                                                                                 | | Can receive room state                With  permission, user will  able  receive room state like peer-count  peer-list   preview screen.                                                              | | Can start/stop RTMP livestream        With  permission, user will  able  publish live audio/video livestream externally  social media  custom platforms (e.g Youtube/Facebook/Twitter).                  | | Can start/stop HLS livestream         With  permission, user will  able  publish audio/video livestream   HLS format.                                                                                    | | Can start/stop Beam Recording         With  permission, user will  able  record meeting/livestream via  browser recording approach   bot will join  room  record  meeting/livestream  is. |  ## Advanced Settings  As  name suggests, Advanced Settings section contains  settings  controls   advanced user.  ![Template](/docs/v2/advanced-settings.png)  ### Preview room state  Preview room state enables   build  \"preview\" screen  shows  state   room  joining. This room state includes  list  peers,  can  used  show     room. Preview room state also includes recording  streaming state.  Preview room state settings define strategy  sending state updates  client SDKs.  | Setting                                   Description                                                                                                                                                                                                                                        | | ----------------------------------------  -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Room-state Message Interval (in seconds)  Room-state data will  sent   regular interval   many seconds. Consequently,  room state displayed   preview screen will refresh accordingly. This value must   multiple  5,  5  3600 seconds,  inclusive. | | Send Peer List  Room-state              Enabling  will send peer-list info   room. If disabled,   peer count  sent.                                                                                                                                                      | | Enable Room-State                         If enabled, room-state data will  sent   preview screen. If disabled,   room-state data will  sent.                                                                                                                                 | | Roles  room-state permission          This   list    roles  will get  room-state data. You can also individually toggle  settings   Roles tab   Permissions section.                                                                              | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/create-template-via-dashboard"
    },
    {
        "title": "create-update-role.mdx",
        "link": "/server-side/v2/policy/create-update-role",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Create/update  role nav: 5.7 ---  This endpoint  used  create/modify  role.  <PostRequest title=\"https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>\" />  <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"publishParams\": {         \"allowed\": [             \"audio\",             \"video\",             \"screen\"         ],         \"audio\": {             \"bitRate\": 32,             \"codec\": \"opus\"         },         \"video\": {             \"bitRate\": 310,             \"codec\": \"vp8\",             \"frameRate\": 30,             \"width\": 480,             \"height\": 360         },         \"screen\": {             \"codec\": \"vp8\",             \"frameRate\": 10,             \"width\": 1920,             \"height\": 1080         },         \"videoSimulcastLayers\": {},         \"screenSimulcastLayers\": {}     },     \"subscribeParams\": {         \"subscribeToRoles\": [             \"guest\",             \"host\"         ],         \"maxSubsBitRate\": 3200,         \"subscribeDegradation\": {             \"packetLossThreshold\": 25,             \"degradeGracePeriodSeconds\": 1,             \"recoverGracePeriodSeconds\": 4         }     },     \"permissions\": {         \"endRoom\": true,         \"removeOthers\": true,         \"mute\": true,         \"unmute\": true,         \"changeRole\": true,         \"sendRoomState\": false     },     \"priority\": 1,     \"maxPeerCount\": 0 }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"name\": \"testurlpath\",     \"publishParams\": {         \"allowed\": [\"audio\", \"video\", \"screen\"],         \"audio\": {             \"bitRate\": 32,             \"codec\": \"opus\"         },         \"video\": {             \"bitRate\": 310,             \"codec\": \"vp8\",             \"frameRate\": 30,             \"width\": 480,             \"height\": 360         },         \"screen\": {             \"codec\": \"vp8\",             \"frameRate\": 10,             \"width\": 1920,             \"height\": 1080         },         \"videoSimulcastLayers\": {},         \"screenSimulcastLayers\": {}     },     \"subscribeParams\": {         \"subscribeToRoles\": [\"guest\", \"host\"],         \"maxSubsBitRate\": 3200,         \"subscribeDegradation\": {             \"packetLossThreshold\": 25,             \"degradeGracePeriodSeconds\": 1,             \"recoverGracePeriodSeconds\": 4         }     },     \"permissions\": {         \"endRoom\": true,         \"removeOthers\": true,         \"mute\": true,         \"unmute\": true,         \"changeRole\": true,         \"rtmpStreaming\": true,         \"hlsStreaming\": true,         \"browserRecording\": true,         \"sendRoomState\": false     },     \"priority\": 1,     \"maxPeerCount\": 0 } ```  </ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                                                                                                                   Required | | :-----------------------------  :-------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | roleObject <br/>                `object`  Role object corresponding   given role. <br/><br/>check  [roles object arguments section](/server-side/v2/policy/create-template-via-api#roles-object)   list  arguments supported  Yes      | | name <br/> — path param         `string`  Providing  name renames  role   provided name. If  role    name already exists,  gives  overwrite error.                                                                             Yes      | | template_id <br/> — path param  `string`  Unique identifier   template  wish  associate  role. <br/><br/>**Example**: 627ce5b637300e55a72ba7ed                                                                                             Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/create-update-role"
    },
    {
        "title": "delete-a-role.mdx",
        "link": "/server-side/v2/policy/delete-a-role",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Delete  role nav: 5.9 ---  This endpoint  used  delete  role. Subsequent requests  deleting role    exist gives 404.  <DeleteRequest title=\"https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>\" /> <Request id=\"req-0\">  ```bash curl --location --request DELETE 'https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"204 No Content\"></ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                         Required | | :-----------------------------  :-------  :-----------------------------------------------------------------------------------------------------------------  :------- | | name <br/> — path param         `string`  Alias   role  wish  delete.                                                                               Yes      | | template_id <br/> — path param  `string`  Unique identifier   template    role  associated. <br/><br/>**Example**: 627ce5b637300e55a72ba7ed  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/delete-a-role"
    },
    {
        "title": "list-templates.mdx",
        "link": "/server-side/v2/policy/list-templates",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: List  templates nav: 5.5 ---  This API retrieves details    templates   account.  <GetRequest title=\"https://api.100ms.live/v2/templates\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/templates' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"limit\": 10,     \"data\": [         {             \"id\": \"63188115d11d6db790c73c60\",             \"name\": \"new-template-1662550293\",             \"customerId\": \"627cdddff2e4e30487862ad1\",             \"roles\": {                 \"guest\": {                     \"name\": \"guest\",                     \"publishParams\": {                         \"allowed\": [                             \"audio\",                             \"video\",                             \"screen\"                         ],                         \"audio\": {                             \"bitRate\": 32,                             \"codec\": \"opus\"                         },                         \"video\": {                             \"bitRate\": 300,                             \"codec\": \"vp8\",                             \"frameRate\": 30,                             \"width\": 480,                             \"height\": 360                         },                         \"screen\": {                             \"codec\": \"vp8\",                             \"frameRate\": 10,                             \"width\": 1920,                             \"height\": 1080                         },                         \"videoSimulcastLayers\": {},                         \"screenSimulcastLayers\": {}                     },                     \"subscribeParams\": {                         \"subscribeToRoles\": [                             \"host\",                             \"guest\"                         ],                         \"maxSubsBitRate\": 3200,                         \"subscribeDegradation\": {                             \"packetLossThreshold\": 25,                             \"degradeGracePeriodSeconds\": 1,                             \"recoverGracePeriodSeconds\": 4                         }                     },                     \"permissions\": {                         \"rtmpStreaming\": true,                         \"hlsStreaming\": true,                         \"browserRecording\": true,                         \"sendRoomState\": false                     },                     \"priority\": 1,                     \"maxPeerCount\": 0                 },                 \"host\": {                     \"name\": \"host\",                     \"publishParams\": {                         \"allowed\": [                             \"audio\",                             \"video\",                             \"screen\"                         ],                         \"audio\": {                             \"bitRate\": 32,                             \"codec\": \"opus\"                         },                         \"video\": {                             \"bitRate\": 300,                             \"codec\": \"vp8\",                             \"frameRate\": 30,                             \"width\": 480,                             \"height\": 360                         },                         \"screen\": {                             \"codec\": \"vp8\",                             \"frameRate\": 10,                             \"width\": 1920,                             \"height\": 1080                         },                         \"videoSimulcastLayers\": {},                         \"screenSimulcastLayers\": {}                     },                     \"subscribeParams\": {                         \"subscribeToRoles\": [                             \"guest\",                             \"host\"                         ],                         \"maxSubsBitRate\": 3200,                         \"subscribeDegradation\": {                             \"packetLossThreshold\": 25,                             \"degradeGracePeriodSeconds\": 1,                             \"recoverGracePeriodSeconds\": 4                         }                     },                     \"permissions\": {                         \"endRoom\": true,                         \"removeOthers\": true,                         \"mute\": true,                         \"unmute\": true,                         \"changeRole\": true,                         \"rtmpStreaming\": true,                         \"hlsStreaming\": true,                         \"browserRecording\": true,                         \"sendRoomState\": false                     },                     \"priority\": 1,                     \"maxPeerCount\": 0                 }             },             \"settings\": {                 \"region\": \"in\",                 \"subscribeDegradation\": {},                 \"screenSimulcastLayers\": {},                 \"videoSimulcastLayers\": {},                 \"recording\": null,                 \"roomState\": {                     \"messageInterval\": 5,                     \"sendPeerList\": false,                     \"stopRoomStateOnJoin\": true,                     \"enabled\": false                 },                 \"retry\": {}             },             \"destinations\": {},             \"createdAt\": \"2022-09-07T11:31:33.618Z\",             \"updatedAt\": \"2022-09-07T11:31:33.618Z\",             \"_id\": \"63188115d11d6db790c73c60\",             \"customer\": \"627cdddff2e4e30487862ad1\"         },         .....         .....         .....         .....         .....         {             \"id\": \"627ce39e37300e55a72b6339\",             \"name\": \"nixon_edtech_93d47c52-d1fd-43ce-bed1-5b2df2cdabe0\",             \"customerId\": \"627cdddff2e4e30487862ad1\",             \"roles\": {                 \"student\": {                     \"name\": \"student\",                     \"publishParams\": {                         \"allowed\": [                             \"audio\",                             \"video\"                         ],                         \"audio\": {                             \"bitRate\": 32,                             \"codec\": \"opus\"                         },                         \"video\": {                             \"bitRate\": 300,                             \"codec\": \"vp8\",                             \"frameRate\": 30,                             \"width\": 480,                             \"height\": 360                         },                         \"screen\": {                             \"codec\": \"vp8\",                             \"frameRate\": 10,                             \"width\": 1920,                             \"height\": 1080                         },                         \"videoSimulcastLayers\": {},                         \"screenSimulcastLayers\": {}                     },                     \"subscribeParams\": {                         \"subscribeToRoles\": [                             \"teacher\",                             \"student\"                         ],                         \"maxSubsBitRate\": 3200,                         \"subscribeDegradation\": {                             \"packetLossThreshold\": 25,                             \"degradeGracePeriodSeconds\": 1,                             \"recoverGracePeriodSeconds\": 4                         }                     },                     \"permissions\": {                         \"rtmpStreaming\": true,                         \"hlsStreaming\": true,                         \"browserRecording\": true,                         \"sendRoomState\": false                     },                     \"priority\": 1,                     \"maxPeerCount\": 0                 },                 \"teacher\": {                     \"name\": \"teacher\",                     \"publishParams\": {                         \"allowed\": [                             \"audio\",                             \"video\",                             \"screen\"                         ],                         \"audio\": {                             \"bitRate\": 32,                             \"codec\": \"opus\"                         },                         \"video\": {                             \"bitRate\": 300,                             \"codec\": \"vp8\",                             \"frameRate\": 30,                             \"width\": 480,                             \"height\": 360                         },                         \"screen\": {                             \"codec\": \"vp8\",                             \"frameRate\": 10,                             \"width\": 1920,                             \"height\": 1080                         },                         \"videoSimulcastLayers\": {},                         \"screenSimulcastLayers\": {}                     },                     \"subscribeParams\": {                         \"subscribeToRoles\": [                             \"student\",                             \"teacher\"                         ],                         \"maxSubsBitRate\": 3200,                         \"subscribeDegradation\": {                             \"packetLossThreshold\": 25,                             \"degradeGracePeriodSeconds\": 1,                             \"recoverGracePeriodSeconds\": 4                         }                     },                     \"permissions\": {                         \"endRoom\": true,                         \"removeOthers\": true,                         \"mute\": true,                         \"unmute\": true,                         \"changeRole\": true,                         \"rtmpStreaming\": true,                         \"hlsStreaming\": true,                         \"browserRecording\": true,                         \"sendRoomState\": false                     },                     \"priority\": 1,                     \"maxPeerCount\": 0                 }             },             \"settings\": {                 \"region\": \"in\",                 \"subscribeDegradation\": {},                 \"screenSimulcastLayers\": {},                 \"videoSimulcastLayers\": {},                 \"recording\": null,                 \"roomState\": {                     \"messageInterval\": 5,                     \"sendPeerList\": false,                     \"stopRoomStateOnJoin\": true,                     \"enabled\": false                 },                 \"retry\": {}             },             \"destinations\": {},             \"createdAt\": \"2022-05-12T10:38:22.193Z\",             \"updatedAt\": \"2022-05-12T10:38:22.23Z\",             \"_id\": \"627ce39e37300e55a72b6339\",             \"customer\": \"627cdddff2e4e30487862ad1\"         }     ],     \"last\": \"627ce39e37300e55a72b6339\" } ```  </ResponseBox>  ## Arguments  | Name         Type      Description                                                                                                                                                   Required | | :----------  :-------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | limit <br/>  `int`     Determines  number  template objects   included  response. <br/><br/>`Default`: 10, <br/>`Allowed values`: **Min**: 10, **Max**: 100                 No       | | start <br/>  `string`  Determines  starting point. <br/>\"last\" field   response can  used  start   subsequent request. <br/><br/>For example \"627cda81ab4f3b56a077dc33\".  No       ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/list-templates"
    },
    {
        "title": "retrieve-a-role.mdx",
        "link": "/server-side/v2/policy/retrieve-a-role",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Retrieve  specific role nav: 5.8 ---  Retrieves  details   specific role. 100ms provides options  retrieve details   role   name.  <GetRequest title=\"https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/templates/<template_id>/roles/<role_name>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"name\": \"testurlpath\",     \"publishParams\": {         \"allowed\": [\"audio\", \"video\", \"screen\"],         \"audio\": {             \"bitRate\": 32,             \"codec\": \"opus\"         },         \"video\": {             \"bitRate\": 310,             \"codec\": \"vp8\",             \"frameRate\": 30,             \"width\": 480,             \"height\": 360         },         \"screen\": {             \"codec\": \"vp8\",             \"frameRate\": 10,             \"width\": 1920,             \"height\": 1080         },         \"videoSimulcastLayers\": {},         \"screenSimulcastLayers\": {}     },     \"subscribeParams\": {         \"subscribeToRoles\": [\"guest\", \"host\"],         \"maxSubsBitRate\": 3200,         \"subscribeDegradation\": {             \"packetLossThreshold\": 25,             \"degradeGracePeriodSeconds\": 1,             \"recoverGracePeriodSeconds\": 4         }     },     \"permissions\": {         \"endRoom\": true,         \"removeOthers\": true,         \"mute\": true,         \"unmute\": true,         \"changeRole\": true,         \"rtmpStreaming\": true,         \"hlsStreaming\": true,         \"browserRecording\": true,         \"sendRoomState\": false     },     \"priority\": 1,     \"maxPeerCount\": 0 } ```  </ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                         Required | | :-----------------------------  :-------  :-----------------------------------------------------------------------------------------------------------------  :------- | | name <br/> — path param         `string`  Alias   role  wish  fetch details for.                                                                    Yes      | | template_id <br/> — path param  `string`  Unique identifier   template    role  associated. <br/><br/>**Example**: 627ce5b637300e55a72ba7ed  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/retrieve-a-role"
    },
    {
        "title": "retrieve-a-template.mdx",
        "link": "/server-side/v2/policy/retrieve-a-template",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Retrieve  specific template nav: 5.4 ---  Retrieves  details   specific template. 100ms provides options  retrieve details   room   ID.  <GetRequest title=\"https://api.100ms.live/v2/templates/<template_id>\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/templates/<template_id>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"627ce5b637300e55a72ba7ed\",     \"name\": \"nixon-samuel_eventapp_bf337846-259e-40c1-97bd-52ac0e876d55\",     \"customerId\": \"627cdddff2e4e30487862ad1\",     \"roles\": {         \"backstage\": {             \"name\": \"backstage\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 400,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 640,                     \"height\": 480                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"stage\", \"backstage\", \"invitee\", \"viewer\"],                 \"maxSubsBitRate\": 5200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"endRoom\": true,                 \"removeOthers\": true,                 \"mute\": true,                 \"unmute\": true,                 \"changeRole\": true,                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"invitee\": {             \"name\": \"invitee\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 400,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 640,                     \"height\": 480                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"stage\", \"invitee\", \"backstage\"],                 \"maxSubsBitRate\": 5200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"stage\": {             \"name\": \"stage\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 400,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 640,                     \"height\": 480                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"stage\", \"invitee\", \"backstage\"],                 \"maxSubsBitRate\": 5200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"endRoom\": true,                 \"changeRole\": true,                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"viewer\": {             \"name\": \"viewer\",             \"publishParams\": {                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 400,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 640,                     \"height\": 480                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"stage\", \"invitee\", \"backstage\"],                 \"maxSubsBitRate\": 5200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         }     },     \"settings\": {         \"region\": \"in\",         \"subscribeDegradation\": {},         \"screenSimulcastLayers\": {},         \"videoSimulcastLayers\": {},         \"recording\": null,         \"roomState\": {             \"messageInterval\": 5,             \"sendPeerList\": false,             \"stopRoomStateOnJoin\": true,             \"enabled\": false         },         \"retry\": {}     },     \"destinations\": {         \"hlsDestinations\": {             \"40c39240-4ab6-4ba3-b406-231b1d6f8bc3\": {                 \"name\": \"40c39240-4ab6-4ba3-b406-231b1d6f8bc3\",                 \"role\": \"__internal_recorder\",                 \"layers\": [                     {                         \"width\": 1280,                         \"height\": 720,                         \"videoBitrate\": 2048,                         \"audioBitrate\": 64                     },                     {                         \"width\": 960,                         \"height\": 540,                         \"videoBitrate\": 1228,                         \"audioBitrate\": 64                     },                     {                         \"width\": 852,                         \"height\": 480,                         \"videoBitrate\": 850,                         \"audioBitrate\": 64                     },                     {                         \"width\": 640,                         \"height\": 360,                         \"videoBitrate\": 500,                         \"audioBitrate\": 64                     }                 ],                 \"recording\": {                     \"thumbnails\": {                         \"width\": 0,                         \"height\": 0                     }                 }             }         }     },     \"createdAt\": \"2022-05-12T10:47:18.588Z\",     \"updatedAt\": \"2022-05-12T10:47:18.588Z\",     \"_id\": \"627ce5b637300e55a72ba7ed\",     \"customer\": \"627cdddff2e4e30487862ad1\" } ```  </ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                       Required | | :-----------------------------  :-------  :---------------------------------------------------------------------------------------------------------------  :------- | | template_id <br/> — path param  `string`  Unique identifier   template  wish  fetch details for. <br/><br/>**Example**: 627ce5b637300e55a72ba7ed  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/retrieve-a-template"
    },
    {
        "title": "retrieve-settings.mdx",
        "link": "/server-side/v2/policy/retrieve-settings",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Retrieve settings nav: 10 ---  This endpoint  used  fetch settings.  <GetRequest title=\"https://api.100ms.live/v2/templates/<template_id>/settings\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/templates/<template_id>/settings' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"region\": \"in\",     \"subscribeDegradation\": {},     \"screenSimulcastLayers\": {},     \"videoSimulcastLayers\": {},     \"recording\": null,     \"roomState\": {         \"messageInterval\": 5,         \"sendPeerList\": false,         \"stopRoomStateOnJoin\": true,         \"enabled\": false     },     \"retry\": {} } ```  </ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                            Required | | :-----------------------------  :-------  :--------------------------------------------------------------------------------------------------------------------  :------- | | template_id <br/> — path param  `string`  Unique identifier   template  wish  fetch settings details for. <br/> **Example:** 6316d5ca5a2635a5849a0216  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/retrieve-settings"
    },
    {
        "title": "template-object.mdx",
        "link": "/server-side/v2/policy/template-object",
        "keywords": [],
        "headings": [
            "Overview",
            "Template object",
            "Understand sub-objects hierarchy",
            "Postman collection"
        ],
        "content": "--- title: Template object nav: 5.1 ---  ## Overview  Template   blueprint   room. It defines  settings   room along   behavior  users   part  it. Room will inherit  properties   template    specified  creating it. If    specified  template   will pick  default template. Each template will  identified   id  name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`  <EndpointRequest title=\"https://api.100ms.live/v2/templates\" />  ## Template object  | Argument      Description                                                                                                                                                                                                                                    | | ------------  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | id            Unique identifier   template. <br/><br/> **Deprecation notice**: `_id` argument   available   previous version   deprecated.                                                                                       | | name          Alias   template                                                                                                                                                                                                                         | | customer_id   Unique identifier   account. <br/><br/> **Deprecation notice**: `customer` argument   available   previous version   deprecated.                                                                                  | | roles         Array  [roles objects](/server-side/v2/policy/create-template-via-api#roles-object)   collection  arguments  objects   `name`, `publishParams`, `subscribeParams`, `permissions`, `priority`, `maxPeerCount`, etc. | | settings      Object  type [settings](/server-side/v2/policy/create-template-via-api#settings-object)   collection  arguments  objects   `region`, `subscribeDegradation`, `recording`, `roomState`, etc.                      | | destinations  Object  type `destinations`. This object contains information  enabling/configuring features like `browserRecordings`, `rtmpDestinations`, & `hlsDestinations`.                                                                           | | default       Whether   default template   customer. Default template   customer  used   template  provided  [create room API](/server-side/v2/Rooms/create-via-api).                                                              |  ## Understand sub-objects hierarchy  ![Template sub-objects hierarchy](/docs/v2/template-object-hierarchy.png)  Refer   sub-objects attributes [here](/server-side/v2/policy/create-template-via-api#main-arguments)  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/template-object"
    },
    {
        "title": "update-a-template.mdx",
        "link": "/server-side/v2/policy/update-a-template",
        "keywords": [],
        "headings": ["Understand sub-objects hierarchy", "Arguments"],
        "content": "--- title: Update  template nav: 5.6 ---  This endpoint  used  modify  Template. You need  provide  options  roles  settings    want  apply.  ## Understand sub-objects hierarchy  ![Template sub-objects hierarchy](/docs/v2/template-object-hierarchy.png) Refer   sub-objects attributes [here](/server-side/v2/policy/create-template-via-api#main-arguments)  <PostRequest title=\"https://api.100ms.live/v2/templates/<template_id>\" />  <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/templates/6316d5ca5a2635a5849a0216' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"new-template-1662552998\",     \"default\": false,     \"roles\": {         \"guest\": {             \"name\": \"guest\",             \"publishParams\": {},             \"subscribeParams\": {},             \"permissions\": {                 \"sendRoomState\": true             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"host\": {}     },     \"settings\": {} }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"6316d5ca5a2635a5849a0216\",     \"name\": \"new-template-1662552988\",     \"customerId\": \"627cdddff2e4e30487862ad1\",     \"roles\": {         \"guest\": {             \"name\": \"guest\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"host\", \"guest\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         },         \"host\": {             \"name\": \"host\",             \"publishParams\": {                 \"allowed\": [\"audio\", \"video\", \"screen\"],                 \"audio\": {                     \"bitRate\": 32,                     \"codec\": \"opus\"                 },                 \"video\": {                     \"bitRate\": 300,                     \"codec\": \"vp8\",                     \"frameRate\": 30,                     \"width\": 480,                     \"height\": 360                 },                 \"screen\": {                     \"codec\": \"vp8\",                     \"frameRate\": 10,                     \"width\": 1920,                     \"height\": 1080                 },                 \"videoSimulcastLayers\": {},                 \"screenSimulcastLayers\": {}             },             \"subscribeParams\": {                 \"subscribeToRoles\": [\"guest\", \"host\"],                 \"maxSubsBitRate\": 3200,                 \"subscribeDegradation\": {                     \"packetLossThreshold\": 25,                     \"degradeGracePeriodSeconds\": 1,                     \"recoverGracePeriodSeconds\": 4                 }             },             \"permissions\": {                 \"endRoom\": true,                 \"removeOthers\": true,                 \"mute\": true,                 \"unmute\": true,                 \"changeRole\": true,                 \"rtmpStreaming\": true,                 \"hlsStreaming\": true,                 \"browserRecording\": true,                 \"sendRoomState\": false             },             \"priority\": 1,             \"maxPeerCount\": 0         }     },     \"settings\": {         \"region\": \"in\",         \"subscribeDegradation\": {},         \"screenSimulcastLayers\": {},         \"videoSimulcastLayers\": {},         \"recording\": null,         \"roomState\": {             \"messageInterval\": 5,             \"sendPeerList\": false,             \"stopRoomStateOnJoin\": true,             \"enabled\": false         },         \"retry\": {}     },     \"destinations\": {},     \"createdAt\": \"0001-01-01T00:00:00Z\",     \"updatedAt\": \"0001-01-01T00:00:00Z\",     \"_id\": \"6316d5ca5a2635a5849a0216\",     \"customer\": \"627cdddff2e4e30487862ad1\" } ```  </ResponseBox>  ## Arguments  | Name                            Type       Description                                                                                                                                                                                                                                                                                             Required | | :-----------------------------  :--------  :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | template_id <br/> — path param  `string`   Unique identifier   template  wish  update. <br/><br/>**Example**: 627ce5b637300e55a72ba7ed                                                                                                                                                                                                   Yes      | | roles <br/>                     `object`   Modified map  `{roleName:roleObject}`. Since    POST request,  need  provide  whole roles object  modify/persist/override it. <br/><br/>check  [roles object arguments section](/server-side/v2/policy/create-template-via-api#roles-object)   list  arguments supported  Yes      | | settings <br/>                  `object`   Modified settings. Since    POST request,  need  provide  whole settings object  modify/persist/override it. <br/><br/>check  [settings object arguments section](/server-side/v2/policy/create-template-via-api#settings-object)   list  arguments supported               Yes      | | name <br/>                      `string`   If   provide  `name`, earlier provided name  used. Trying  modify  template's name  match another existing template's name produces overwrite error.                                                                                                                                  No       | | default <br/>                   `boolean`  Whether   default template  customer. The default template   customer  used   template  provided  create room API.                                                                                                                                                             No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/update-a-template"
    },
    {
        "title": "update-settings.mdx",
        "link": "/server-side/v2/policy/update-settings",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Update settings nav: 11 ---  This endpoint  used  update settings.  <PostRequest title=\"https://api.100ms.live/v2/templates/<template_id>/settings\" />  <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/<template_id>/settings' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"region\": \"eu\",     \"subscribeDegradation\": {},     \"recording\": {         \"enabled\": true,         \"upload\": {             \"type\": \"s3\",             \"location\": \"<Name   AWS s3 bucket>\",             \"prefix\": \"<Upload prefix path>\",             \"options\": {                 \"region\": \"<region   s3 bucket>\"             },             \"credentials\": {                 \"key\": \"<access key ID   AWS account/S3 bucket>\",                 \"secretKey\": \"<secret access key   AWS account/S3 bucket>\"             }         }     },     \"screenSimulcastLayers\": {},     \"videoSimulcastLayers\": {},     \"roomState\": {         \"messageInterval\": 5,         \"sendPeerList\": false,         \"stopRoomStateOnJoin\": true,         \"enabled\": false     } }' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"region\": \"eu\",     \"subscribeDegradation\": {},     \"screenSimulcastLayers\": {},     \"videoSimulcastLayers\": {},     \"recording\": {         \"enabled\": true,         \"upload\": {             \"location\": \"<Name   AWS s3 bucket>\",             \"type\": \"s3\",             \"prefix\": \"<Upload prefix path>\",             \"credentials\": {                 \"key\": \"<access key ID   AWS account/S3 bucket>\",                 \"secret\": \"<secret access key   AWS account/S3 bucket>\"             },             \"options\": {                 \"region\": \"<region   s3 bucket>\"             }         }     },     \"roomState\": {         \"messageInterval\": 5,         \"sendPeerList\": false,         \"stopRoomStateOnJoin\": true,         \"enabled\": false     },     \"retry\": {} } ```  </ResponseBox>  ## Arguments  | Name                            Type      Description                                                                                                                                                                                                          Required | | :-----------------------------  :-------  :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | template_id <br/> — path param  `string`  Unique identifier   template  wish  update settings details for. <br/> **Example:** 6316d5ca5a2635a5849a0216                                                                                               Yes      | | settingsObject <br/>            `object`  Settings object corresponding   given template_id. <br/><br/>check  [settings object arguments section](/server-side/v2/policy/create-template-via-api#settings-object)   list  arguments supported  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/policy/update-settings"
    },
    {
        "title": "create-via-api.mdx",
        "link": "/server-side/v2/Rooms/create-via-api",
        "keywords": [],
        "headings": [
            "Main Arguments",
            "recording_info arguments",
            "upload_info arguments",
            "Options arguments",
            "Credentials arguments"
        ],
        "content": "--- title: Create via API nav: 2.3 ---  Creates  new room. This provides   scalable way  creating  room.  <PostRequest title=\"https://api.100ms.live/v2/rooms\" /> <Request id=\"req-comp-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/rooms' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"new-room-1662723668\",     \"description\": \"This   sample description   room\",     \"template_id\": \"<template_id   template  wish  associate   room>\",     \"region\": \"us\" }' ```  </Request> <ResponseBox id=\"resp-0\" status=\"200 OK\">  ```json {     \"id\": \"631b2654f771854d9bf633df\",     \"name\": \"new-room-1662723668\",     \"enabled\": true,     \"description\": \"This   sample description   room\",     \"customer\": \"627cdddff2e4e30487862ad1\",     \"recording_info\": {         \"enabled\": false     },     \"template_id\": \"63188115d11d6db790c73c60\",     \"template\": \"new-template-1662550293\",     \"region\": \"us\",     \"created_at\": \"2022-09-09T11:41:08.082Z\",     \"updated_at\": \"2022-09-09T11:41:08.074Z\" } ```  </ResponseBox>  ## Main Arguments  | Name                  Type      Description                                                                                                                                                                                                                                                                                                                                                     Required | | :-------------------  :-------  :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | name <br/>            `string`  An alias  can assign  100ms rooms. This  `case-insensitive`. <br/><br/>Accepted characters  `a-z, A-Z, 0-9,  . - : _`. If  provided,   generated automatically. <br/><br/>**Note**: If `Create room request`  triggered   existing room name,   corresponding room ID  returned.                                         No       | | description <br/>     `string`  A string  describe  room's usage. For example \"9PM English Class Batch 2\"                                                                                                                                                                                                                                                                                 No       | | template_id <br/>     `string`  Template ID  template  wish  associate   room. You can get template ID either   templates section   [dashboard](https://dashboard.100ms.live/dashboard)  use  [Template API](../policy/retrieve-a-template). <br/><br/>**Note**: `default template` will  assigned  template   specified   `create room request`.  No       | | recording_info <br/>  `object`  Object  type `recording_info`. This object contains information  enabling recording/setting storage location  recordings. <br/><br/>Check  [recording_info arguments](#recording-info-arguments)    information.                                                                                                                         No       | | region <br/>          `string`  Region    want  create room. <br/><br/> `in` - India <br/> `us` - United States <br/> `eu` - European Union <br/> `auto` - Automatic region selection (default,   case  parameter   provided)                                                                                                                                         No       |  > **Warning:** If  create  room   name   existing room,   room will  updated   new configuration passed   request payload. <br/> For example,   existing room  assigned  template-ABC earlier    request payload  used template-DEF,  template-DEF will  assigned   existing room.  ## recording_info arguments  > **Note**: This object enables recording  configuring storage  room creation. But  recommend configuring    template level   [Dashboard](https://dashboard.100ms.live/dashboard),   config validator can help  validating inputs proactively.  | Name         Type       Description                                                                                                                                                                                                                                                                                                            Required | | :----------  :--------  :--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | enabled      `boolean`  Enable SFU recording. Disabled  default. <br/><br/> **Note:** This argument   applicable  enable/disable [SFU recording](/server-side/v2/Destinations/recording). Refer  [RTMP Streaming & Browser Recording](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording) guide   options.  No       | | upload_info  `object`   Object  type `upload_info`. This object contains information  recordings storage location. <br/><br/>If  want  store recording  100ms,   use   s3,  add    object. <br/><br/>Check  [upload_info object](#upload-info-arguments)    information.                No       |  `recording_info`   room acts   atomic property. It depends   recording settings defined   template  below:  -   If  `recording_info` key   provided   API,  room will fill   recording settings   template. And  response body will include `recording_source_template: true`. This implies  whenever recording info  modified   template,  recording settings   room will also  updated. -   If  `recording_info` key  provided   API,  recording settings   room   affected   template  all.  To know   recording please visit [Recording](/server-side/v2/Destinations/recording).  ### upload_info arguments  | Name         Type      Description                                                                                                                                                                   Required | | :----------  :-------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | type         `string`  Upload Destination type. Currently,  `s3`  supported                                                                                                                    Yes      | | location     `string`  Name   AWS s3 bucket    want  store  recordings                                                                                                           Yes      | | prefix       `string`  Upload prefix path                                                                                                                                                            No       | | options      `object`  Additional configurations  type `Options`   used  uploading. <br/><br/>Check  options arguments    information.                                       No       | | credentials  `object`  Object  type `Credentials`. This  used  share AWS credentials  access  s3 bucket specified. <br/><br/>Check  credentials arguments    information.  No       |  #### Options arguments  | Name    Type      Description                                                                                                               Required | | :-----  :-------  :-----------------------------------------------------------------------------------------------------------------------  :------- | | region  `string`  Region   AWS account hosting  s3 bucket  storing recordings. If  provided   assumed   `ap-south-1`  No       |  #### Credentials arguments  | Name    Type      Description                                                                           Required | | :-----  :-------  :-----------------------------------------------------------------------------------  :------- | | key     `string`  `access key ID`   AWS account hosting  s3 bucket  storing recordings      Yes      | | secret  `string`  `secret access key`   AWS account hosting  s3 bucket  storing recordings  Yes      |  The access keys   read(GetObject)  write(PutObject) permissions   s3 bucket. For  details check - https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/create-via-api"
    },
    {
        "title": "create-via-dashboard.mdx",
        "link": "/server-side/v2/Rooms/create-via-dashboard",
        "keywords": [],
        "headings": ["Introduction", "Create Room via Dashboard"],
        "content": "--- title: Create via dashboard nav: 2.4 ---  ## Introduction  Room   virtual space  holds conferencing   people. To allow users  join  100ms video conferencing session inside  app,  first need  create  `room`.  ## Create Room via Dashboard  You can create room  [100ms Dashboard](https://dashboard.100ms.live/create-room). While creating  room  can specify  name, template, region and/or enable SFU recording.  Room creation via dashboard  helpful   quick POC  creating smaller number  rooms.  ![Create  room](/docs/v2/create-a-room.png)  > **Warning:** If  create  room   name   existing room,   room will  updated   new configuration passed   request payload. <br/> For example,   existing room  assigned  template-ABC earlier    request payload  used template-DEF,  template-DEF will  assigned   existing room.  You can add  modify templates  [100ms Dashboard](https://dashboard.100ms.live/templates).  ![Room details  dashboard](/docs/v2/role-dashboard.png) ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/create-via-dashboard"
    },
    {
        "title": "disable-or-enable.mdx",
        "link": "/server-side/v2/Rooms/disable-or-enable",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Disable/Enable  room nav: 2.8 ---  Trigger  request  disable  specific room.  > **Note:** If  disable  room,  room can  used    current session  users will   able  join  room later. You can use  API   `enabled` param set  `true`  enable  room again.  <PostRequest title=\"https://api.100ms.live/v2/rooms/<room_id>\" /> <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/rooms/<room_id>' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"enabled\": false }' ```  </Request> <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"6316d5cfae8c4271df5d0554\",     \"name\": \"new-room-1662440912\",     \"enabled\": false,     \"description\": \"\",     \"customer_id\": \"627cdddff2e4e30487862ad1\",     \"recording_source_template\": true,     \"enabled_source_template\": true,     \"recording\": null,     \"template_id\": \"\",     \"template\": \"\",     \"region\": \"\",     \"created_at\": \"2022-09-06T05:08:31.935Z\",     \"updated_at\": \"2022-09-08T14:58:25.629819038Z\" } ```  </ResponseBox>  ## Arguments  | Name                        Type       Description                                                                                                          Required | | :-------------------------  :--------  :------------------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param  `string`   Unique identifier   room  wish  disable. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                   Yes      | | enabled <br/> — body param  `boolean`  Status   room   set. <br/>`Allowed values`: true, false. <br/>Should  set  `false`  disable  room  Yes      | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/disable-or-enable"
    },
    {
        "title": "list-rooms.mdx",
        "link": "/server-side/v2/Rooms/list-rooms",
        "keywords": [],
        "headings": ["Overview", "List all rooms", "Allowed filters"],
        "content": "--- title: List rooms nav: 2.6 ---  ## Overview  This API retrieves details   list  rooms   account. 100ms provides options to  -   retrieve  complete list  rooms or -   rooms   enabled/disabled or -   rooms based   creation time-range or -   combinations  these.  ## List  rooms  This API retrieves details    rooms   account.  <GetRequest title=\"https://api.100ms.live/v2/rooms\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/rooms' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"limit\": 10,     \"data\": [         {             \"id\": \"62bbc84********0a6aa1a\",             \"name\": \"test-room\",             \"enabled\": true,             \"description\": \"This   test room\",             \"customer\": \"627cda********a39291b\",             \"recording_source_template\": true,             \"template_id\": \"627cd********784227d3\",             \"template\": \"default_createown_e319635a-****-****-****-ae9e95891e31\",             \"region\": \"in\",             \"created_at\": \"2022-06-29T03:34:30.194Z\",             \"key\": \"627***********a39291b:test-room\",             \"updated_at\": \"0001-01-01T00:00:00Z\"         },         {             \"id\": \"627cda81********6b077bc33\",             \"name\": \"4b2705aa-****-****-****-f470c06d0c03\",             \"enabled\": true,             \"description\": \"This   test room\",             \"customer\": \"627cd********037a39291b\",             \"recording_source_template\": false,             \"recording\": {                 \"enabled\": false             },             \"template_id\": \"627cda********84227d3\",             \"template\": \"default_createown_e319635a-****-****-****-ae9e95891e31\",             \"region\": \"in\",             \"created_at\": \"2022-05-12T09:59:29.343Z\",             \"key\": \"627cda********037a39291b:4b2705aa-****-****-****-f470c06d0c03\",             \"updated_at\": \"0001-01-01T00:00:00Z\"         }     ],     \"last\": \"627cda81bd4f3b56b077bc33\" } ```  </ResponseBox>     ## Allowed filters  | Name           Type       Description                                                                                                                                                       Required | | :------------  :--------  :---------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | enabled <br/>  `boolean`  Flag  indicate   room  enabled. <br/><br/>`Default`: true, <br/>`Allowed values`: true, false                                                            No       | |  <br/>    `string`   Check  rooms created   timestamp greater   equal  \"after\" <br/><br/>`Format`: YYYY-MM-DDTHH:mm:ss.s+z.                                            No       | |  <br/>   `string`   Check  rooms created   timestamp less   equal  \"after\" <br/><br/>`Format`: YYYY-MM-DDTHH:mm:ss.s+z.                                               No       | | limit <br/>    `int`      Determines  number  room objects   included  response. <br/><br/>`Default`: 10, <br/>`Allowed values`: **Min**: 10, **Max**: 100                         No       | | start <br/>    `string`   Determines  starting point. <br/>`last` field   response can  used  start   subsequent request. <br/><br/>**For example** \"627cda81ab4f3b56a077dc33\".  No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/list-rooms"
    },
    {
        "title": "object.mdx",
        "link": "/server-side/v2/Rooms/object",
        "keywords": [],
        "headings": ["Object", "Postman collection"],
        "content": "--- title: Room object nav: 2.2 ---  <EndpointRequest title=\"https://api.100ms.live/v2/rooms\" />  ## Object  | Argument        Description                                                                                                                                                                                                                                                                                                                                                                                                             | | --------------  ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | id              Unique identifier   room                                                                                                                                                                                                                                                                                                                                                                                          | | name            Alias   room                                                                                                                                                                                                                                                                                                                                                                                                      | | enabled         Indicates whether  room  enabled  disabled. <br/><br/> **Note:** If  disable  room,  room can  used    current session  users will   able  join  room later. You can use  [Disable/Enable  room API](/server-side/v2/Rooms/disable-or-enable)   `enabled` param set  `true`  enable  room again.                                                              | | description     Description   room                                                                                                                                                                                                                                                                                                                                                                                                | | customer        Unique identifier   account                                                                                                                                                                                                                                                                                                                                                                                      | | recording_info  Indicates whether  recording  enabled  disabled. <br/><br/> **Note:** `enabled` [argument](/server-side/v2/Rooms/create-via-api#recording-info-arguments)   object   applicable  enable/disable [SFU recording](/server-side/v2/Destinations/recording). Refer  [RTMP Streaming & Browser Recording](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording) guide   options. | | template_id     Identifier   template used   room                                                                                                                                                                                                                                                                                                                                                                          | | template        Name   template                                                                                                                                                                                                                                                                                                                                                                                                   | | region          The region    room    created                                                                                                                                                                                                                                                                                                                                                                          |  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/object"
    },
    {
        "title": "overview.mdx",
        "link": "/server-side/v2/Rooms/overview",
        "keywords": [],
        "headings": ["What is a room?", "Room APIs", "Postman collection"],
        "content": "--- title: Overview nav: 2.1 ---  ## What   room?  A room   virtual space  one   peers communicate   other. It   central entity  provides real-time communication capabilities   video conferencing  live streaming session.  To allow users  join  100ms video conferencing   live streaming session inside  app,  first need  create  room.  ![Room](/docs/v2/room.png)  The  diagram illustrates   room acts   central entity   lifecycle   interactive audio/video session   transition   room  one state  another based   configuration   room   peer's presence.  ## Room APIs  Room APIs will enable   script actions   server side based   business logic  requirements, actions  as:  -   [creating  room](/server-side/v2/Rooms/create-via-api), -   [updating room properties](/server-side/v2/Rooms/update-a-room), -   [retrieving room details](/server-side/v2/Rooms/retrieve-room), and -   [disabling/enabling  room](/server-side/v2/Rooms/disable-or-enable).  You can control peer behavior  build interactivity scenarios   active room   help  [active room APIs](/server-side/v2/active-rooms/overview).  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/overview"
    },
    {
        "title": "retrieve-room.mdx",
        "link": "/server-side/v2/Rooms/retrieve-room",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Retrieve  specific room nav: 2.5 ---  Retrieves  details   specific room. 100ms provides options  retrieve details   room   ID  name.  <GetRequest title=\"https://api.100ms.live/v2/rooms/<room_id>\" /> <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/rooms/<room_id>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"631a05390e6ffae22efa610b\",     \"name\": \"sampleroom\",     \"enabled\": true,     \"description\": \"This  sample description  room\",     \"customer\": \"627cdddff2e4e30487862ad1\",     \"recording_source_template\": false,     \"recording_info\": {         \"enabled\": true,         \"upload_info\": {             \"type\": \"s3\",             \"location\": \"brytecam-test-bucket-ap-south-1\",             \"prefix\": \"dev/627cdddff2e4e30487862ad1\"         }     },     \"template_id\": \"63188115d11d6db790c73c60\",     \"template\": \"new-template-1662550293\",     \"region\": \"in\",     \"created_at\": \"2022-09-08T15:07:37.83Z\",     \"updated_at\": \"2022-09-08T15:07:37.83Z\" } ```  </ResponseBox>  ## Arguments  | Name                        Type      Description                                                                                                   Required | | :-------------------------  :-------  :-----------------------------------------------------------------------------------------------------------  :------- | | room_id <br/> — path param  `string`  Unique identifier   room  wish  fetch details for. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33  Yes      | | name <br/> — query param    `string`  Alias   room  wish  fetch details for. <br/><br/>**Example**: test-room                             No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/retrieve-room"
    },
    {
        "title": "update-a-room.mdx",
        "link": "/server-side/v2/Rooms/update-a-room",
        "keywords": [],
        "headings": ["Arguments"],
        "content": "--- title: Update  room nav: 2.7 ---  You can use  API  update various details   room   name, description, recording_info  region.  > **Note**: [recording_info](./create-via-api#recording-info-arguments) object enables recording  configuring storage  room creation. But  recommend configuring    template level   [Dashboard](https://dashboard.100ms.live/dashboard),   config validator can help  validating inputs proactively.  <PostRequest title=\"https://api.100ms.live/v2/rooms/<room_id>\" /> <Request id=\"req-0\">  ```bash curl --location --request POST 'https://api.100ms.live/v2/rooms/<room_id>' \\ --header 'Authorization: Bearer <management_token>' \\ --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"update-room-name\",     \"description\": \"Updated description   room\",     \"recording_info\": {         \"enabled\": true,         \"upload_info\": {             \"type\": \"s3\",             \"location\": \"<Updated Name   AWS s3 bucket>\",             \"prefix\": \"<Updated Upload prefix path>\",             \"options\": {                 \"region\": \"<Updated region   s3 bucket, example `ap-south-1`>\"             },             \"credentials\": {                 \"key\": \"<Updated access key ID   AWS account/S3 bucket>\",                 \"secret\": \"<Updated secret access key   AWS account/S3 bucket>\"             }         }     },     \"region\": \"us\" }' ```  </Request> <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"63215ea14354ff09328378c6\",     \"name\": \"update-room-name\",     \"enabled\": true,     \"description\": \"Updated description   room\",     \"customer_id\": \"627cda54ff688c037a39291b\",     \"recording_source_template\": false,     \"enabled_source_template\": false,     \"recording_info\": {         \"enabled\": true,         \"upload_info\": {             \"type\": \"s3\",             \"location\": \"<Updated Name   AWS s3 bucket>\",             \"prefix\": \"<Upload prefix path>\",             \"credentials\": {                 \"key\": \"<Updated access key ID   AWS account/S3 bucket>\",                 \"secret\": \"<Updated secret access key   AWS account/S3 bucket>\"             },             \"options\": {                 \"region\": \"<Updated region   s3 bucket, example `ap-south-1`>\"             }         }     },     \"template_id\": \"6311c9b3ba3f6f0133f899ee\",     \"template\": \"new-template-1662110132\",     \"region\": \"us\",     \"created_at\": \"2022-09-14T04:54:57.707Z\",     \"updated_at\": \"2022-09-26T12:17:48.37Z\",     \"customer\": \"627cda54ff688c037a39291b\" } ```  </ResponseBox>  ## Arguments  | Name                  Type      Descriptionequired | || | name <br/>            `string`  An alias  can assign  100ms rooms. This  `case-insensitive`. <br/><br/>Accepted characters  `a-z, A-Z, 0-9,  . - : _`. If  provided,   generated automatically. <br/><br/>**Note**: `Update room request`  triggered   existing room name,   corresponding room ID  returned.                                                                                                                                                                                                                                    No       | | description <br/>     `string`  A string  describe  room's usage. For example \"9PM English Class Batch 2\"                                                                                                                                                                                                                                                                                                                                                                                                                                                                         No       | | recording_info <br/>  `object`  Object  type `recording_info`. This object contains information  enabling recording/setting storage location  recordings. <br/><br/>Check  [recording_info arguments](/server-side/v2/Rooms/create-via-api#recording-info-arguments)    information. <br/><br/> **Note:** This argument   applicable  enable/disable [SFU recording](/server-side/v2/Destinations/recording). Refer  [RTMP Streaming & Browser Recording](/server-side/v2/Destinations/rtmp-streaming-and-browser-recording) guide   options.  No       | | region <br/>          `string`  Region    want  create room. <br/><br/> `in` - India <br/> `us` - United States <br/> `eu` - European Union <br/> `auto` - Automatic region selection (default,   case  parameter   provided)                                                                                                                                                                                                                                                                                                                                 No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Rooms/update-a-room"
    },
    {
        "title": "list-sessions.mdx",
        "link": "/server-side/v2/Sessions/list-sessions",
        "keywords": [],
        "headings": ["Allowed filters"],
        "content": "--- title: List sessions nav: 4.3 ---  This API retrieves details   list  sessions   account.  <GetRequest title=\"https://api.100ms.live/v2/sessions/\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/sessions' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"limit\": 10,     \"data\": [         {             \"id\": \"631a0fa23e3d9fdb00832596\",             \"room_id\": \"631a0f990e6ffae22efa610c\",             \"customer_id\": \"627cdddff2e4e30487862ad1\",             \"active\": false,             \"peers\": {                 \"a24687bb-de68-4276-9758-e1efa5e7e4d8\": {                     \"id\": \"a24687bb-de68-4276-9758-e1efa5e7e4d8\",                     \"session_id\": \"631a0fa23e3d9fdb00832596\",                     \"name\": \"asdas\",                     \"role\": \"host\",                     \"user\": \"16a868ef-670d-4ad2-ac62-a6966f608d8a\",                     \"joined_at\": \"2022-09-08T15:52:02.194Z\",                     \"left_at\": \"2022-09-08T15:52:04.009Z\"                 }             },             \"created_at\": \"2022-09-08T15:52:02.197Z\",             \"updated_at\": \"2022-09-08T15:52:04.015Z\"         },         ......         ......         ......         ......         {             \"id\": \"63172c2d3e3d9fdb008322e1\",             \"room_id\": \"627ce5b8f2e4e30487862adb\",             \"customer_id\": \"627cdddff2e4e30487862ad1\",             \"active\": false,             \"peers\": {                 \"2d873b0a-c2c9-41dc-ac72-c6ea9b2f2cc3\": {                     \"id\": \"2d873b0a-c2c9-41dc-ac72-c6ea9b2f2cc3\",                     \"session_id\": \"63172c2d3e3d9fdb008322e1\",                     \"name\": \"Nixon K\",                     \"role\": \"backstage\",                     \"user\": \"ba71cf83-dfbf-4a41-b9e6-945ed12d237c\",                     \"joined_at\": \"2022-09-06T11:17:01.816Z\",                     \"left_at\": \"2022-09-06T11:17:03.643Z\"                 }             },             \"created_at\": \"2022-09-06T11:17:01.817Z\",             \"updated_at\": \"2022-09-06T11:17:03.65Z\"         }     ],     \"last\": \"63172c2d3e3d9fdb008322e1\" } ```  </ResponseBox>  ## Allowed filters  | Name           Type       Description                                                                                                                                                              Required | | :------------  :--------  :----------------------------------------------------------------------------------------------------------------------------------------------------------------------  :------- | | active <br/>   `boolean`  Flag  fetch  list  active room sessions. <br/><br/>`Default`: true, <br/>`Allowed values`: true, false                                                                 No       | | room_id <br/>  `string`   Fetch  list  sessions created   room specified. <br/><br/>**Example**: 627cda81ab4f3b56a077dc33                                                                No       | |  <br/>    `string`   Check  sessions started   timestamp greater   equal  \"after\" <br/><br/>`Format`: YYYY-MM-DDTHH:mm:ss.s+z.                                                No       | |  <br/>   `string`   Check  sessions started   timestamp less   equal  \"after\" <br/><br/>`Format`: YYYY-MM-DDTHH:mm:ss.s+z.                                                   No       | | limit <br/>    `int`      Determines  number  session objects   included  response. <br/><br/>`Default`: 10, <br/>`Allowed values`: **Min**: 10, **Max**: 100                           No       | | start <br/>    `string`   Determines  starting point. <br/>`last` field   response can  used  start   subsequent request. <br/><br/>**For example** \"63172c2d3e3d9fdb008322e1\".  No       | ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Sessions/list-sessions"
    },
    {
        "title": "object.mdx",
        "link": "/server-side/v2/Sessions/object",
        "keywords": [],
        "headings": ["Overview", "Session object", "Peer object", "Postman collection"],
        "content": "--- title: Session object nav: 4.1 ---  ## Overview  Session   single continuous call   [room](/server-side/v2/Rooms/create-via-api). To allow users  join  100ms video conferencing session inside  app,  first need  create  room. A single room can  multiple sessions. You will need  [management token](/server-side/v2/introduction/authentication-and-tokens)   bearer token   requests.  This API retrieves details   list  sessions   account. 100ms provides actions to  1. retrieve  specific session 2. retrieve  list  sessions based  filters like:     - status(active/inactive)     - room_id     - started time-range  > **Note**: The maximum allowed duration   session   100ms platform  12 hours.  <EndpointRequest title=\"https://api.100ms.live/v2/sessions\" />  ## Session object  | Argument     Description                                                                                                           | | -----------  --------------------------------------------------------------------------------------------------------------------- | | id           Unique identifier   session.                                                                                    | | room_id      Unique identifier   room used   particular session.                                                       | | customer_id  Unique identifier   account                                                                                    | | active       Indicates whether  session  active  inactive                                                                   | | peers        Array  peer objects  arguments   `id`, `session_id`, `name`, `role`, `user`, `joined_at`, `left_at`, etc. |  ### Peer object  | Argument    Description                                                           | | ----------  --------------------------------------------------------------------- | | id          Unique identifier   peer.                                       | | session_id  Unique identifier   session.                                    | | name        Alias/name   peer used  join  session.                      | | role        Indicates  name   role. Example: Host, Guest, Backstage, etc. | | user        Unique identifier   peer generated  100ms                     | | joined_at   Timestamp   peer joined  session.                           | | left_at     Timestamp   peer left  session.                             |  ## Postman collection  You can use  Postman collection  start exploring 100ms APIs.  [![Run  Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a?action=collection%2Ffork&collection-url=entityId%3D22726679-47dcd974-29d5-4965-a35b-bf9b74a8b25a%26entityType%3Dcollection%26workspaceId%3Dd9145dd6-337b-4761-81d6-21a30b4147a2)  Refer   [Postman guide](/server-side/v2/introduction/postman-guide)  get started  100ms API collection. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Sessions/object"
    },
    {
        "title": "retrieve-a-session.mdx",
        "link": "/server-side/v2/Sessions/retrieve-a-session",
        "keywords": [],
        "headings": ["Arguments", "How to calculate session duration"],
        "content": "--- title: Retrieve  specific session nav: 4.2 ---  Retrieves  details   specific session. 100ms provides options  retrieve details   session   ID.  <GetRequest title=\"https://api.100ms.live/v2/sessions/<session_id>\" />  <Request id=\"req-0\">  ```bash curl --location --request GET 'https://api.100ms.live/v2/sessions/<session_id>' \\ --header 'Authorization: Bearer <management_token>' ```  </Request>  <ResponseBox id=\"res-0\" status=\"200 OK\">  ```json {     \"id\": \"63172c2d3e3d9fdb008322e1\",     \"room_id\": \"627ce5b8f2e4e30487862adb\",     \"customer_id\": \"627cdddff2e4e30487862ad1\",     \"active\": false,     \"peers\": {         \"2d873b0a-c2c9-41dc-ac72-c6ea9b2f2cc3\": {             \"id\": \"2d873b0a-c2c9-41dc-ac72-c6ea9b2f2cc3\",             \"session_id\": \"63172c2d3e3d9fdb008322e1\",             \"name\": \"Nixon K\",             \"role\": \"backstage\",             \"user\": \"ba71cf83-dfbf-4a41-b9e6-945ed12d237c\",             \"joined_at\": \"2022-09-06T11:17:01.816Z\",             \"left_at\": \"2022-09-06T11:17:03.643Z\"         }     },     \"created_at\": \"2022-09-06T11:17:01.817Z\",     \"updated_at\": \"2022-09-06T11:17:03.65Z\" } ```  </ResponseBox>  ## Arguments  | Name                           Type      Description                                                                                                      Required | | :----------------------------  :-------  :--------------------------------------------------------------------------------------------------------------  :------- | | session_id <br/> — path param  `string`  Unique identifier   session  wish  fetch details for. <br/><br/>**Example**: 63172c2d3e3d9fdb008322e1  Yes      |  ## How  calculate session duration  You can calculate peer duration  subtracting joined_at timestamp  left_at   given peer. Similarly,  can calculate session duration  adding  peers' duration. ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/Sessions/retrieve-a-session"
    },
    {
        "title": "audio-rooms-with-raise-hand",
        "link": "/server-side/v2/thinking-in-roles/audio-rooms-with-raise-",
        "keywords": [],
        "headings": ["TODO"],
        "content": "--- title:  [draft] Audio rooms  raise hand nav: 4.2 ---  # TODO ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/thinking-in-roles/audio-rooms-with-raise-"
    },
    {
        "title": "classes-with-breakout-rooms",
        "link": "/server-side/v2/thinking-in-roles/classes-with-breakout-r",
        "keywords": [],
        "headings": ["TODO"],
        "content": "--- title:  [draft] Classes  breakout rooms nav: 4.1 ---  # TODO ",
        "platformName": "Server-side",
        "objectID": "/server-side/v2/thinking-in-roles/classes-with-breakout-r"
    }
]

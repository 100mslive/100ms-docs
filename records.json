{
    "<Content alias=\"adaptiveBitrate1\" />": "Adaptive bitrate (ABR) refers to features that enable dynamic adjustments to video quality—to optimise for end-user experience under diverse network conditions. ABR ensures that every participant is able to consume the highest possible quality video in conferencing or streaming use-cases, based on their bandwidth constraints.\r\n\r\nIn addition to network, ABR can also optimise for the right video quality based on the size of the video element. For example, a video call running on active speaker layout has larger video tiles that require higher quality video track. These adjustments can be made dynamically with adaptive bitrate.\r\n\r\nLearn about how 100ms enables adaptive bitrate in:\r\n\r\n* [Conferencing scenarios](#abr-in-conferencing)\r\n* [Live streaming scenarios](#abr-in-live-streaming)\r\n\r\n## ABR in conferencing\r\n\r\nPeers in 100ms rooms can publish multiple video quality levels simultaneously. This is called “simulcast” in 100ms. Peers that consume these video tracks can upgrade or downgrade video quality.\r\n\r\nYou can enable simulcast on the publishing role's template, and use manual or automatic layer changes on the subscriber's side.\r\n\r\n### Publisher-side configuration\r\n\r\nSimulcast configuration is opt-in and can be enabled on the role's configuration inside your template. The role's publish video quality determines video quality layers on simulcast. For example, a role configured to publish at 720p can simulcast 180p, 360p and 720p layers.\r\n\r\n| Video publish quality | Possible simulcast layers |\r\n|-----------------------|---------------------------|\r\n| 1080p                 | 1080p, 540p, 270p         |\r\n| 720p                  | 720p, 360p, 180p          |\r\n| 480p                  | 480p, 240p                |\r\n| 360p                  | 360p, 180p                |\r\n| 240p                  | 240p                      |\r\n| 180p                  | 180p                      |\r\n\r\n#### Enable via dashboard\r\n\r\nEnable \"can publish simulcast\" on the template page for a particular role. You can also specify how many video quality layers will be simultaneously published by peers of this role. The peer will publish these layers assuming network bandwidth permits.\r\n\r\n![Simulcast configuration](/docs/guides/simulcast-on-dashboard.png)\r\n\r\n#### Enable via API\r\n\r\nUpdate role configuration using the [server-side API](/docs/server-side/v2/policy/create-update-role). The simulcast config payload can include 2 or 3 layers that scale down the selected publish layer.\r\n\r\nIn the example below, the role is configured to publish 720p with 3 simulcast layers:\r\n\r\n* `f` for full with scale down factor of 1 (= 720p)\r\n* `h` for half with scale down factor of 2 (= 360p)\r\n* `q` for quarter with scale down factor of 4 (= 180p)",
    "<Content alias=\"adaptiveBitrate2\" />": "\r\n### Subscribe-side behavior\r\n\r\n#### Manual layer selection\r\n\r\nThe 100ms client-side SDKs provide methods to set a preferred quality layer for a remote peer's video track. See docs for your preferred platform:\r\n\r\n* [JavaScript](/docs/javascript/v2/advanced-features/simulcast)\r\n* [iOS](/docs/ios/v2/advanced-features/simulcast)\r\n* [Android](/docs/android/v2/advanced-features/simulcast)\r\n\r\n#### Automatic layer selection\r\n\r\n<br/>\r\n<video loop=\"true\" controls=\"controls\" id=\"vid\" muted>\r\n    <source src=\"/docs/guides/simulcast-tile-size-1.mp4\" type=\"video/mp4\" />\r\n</video>\r\n<br/>\r\n\r\n- Based on video tile size: The SDK automatically ensures appropriate video layer is subscribed to, as demonstrated in the video above. For example, if the video element is 360 px in width, 360p or the closest layer will be selected.\r\n    - **JavaScript**: The `useVideo` hook in the 100ms React SDK auto-selects the appropriate video quality layer.\r\n    - **iOS**: `HMSVideoView` can auto-select video quality layer.\r\n    - **Android**: `HMSVideoView` ([see docs](/docs/android/v2/migrations/surfaceview-migration)) can auto-select video quality layer.\r\n- Based on network quality: ABR will work alongside subscribe degradation and auto-downgrade video quality for peers. This is _coming soon_.\r\n\r\n## ABR in live streaming\r\n\r\n100ms uses the HTTP Live Streaming (HLS) protocol in live streaming scenarios. HLS supports adaptive bitrate out of the box, and HLS video players can automatically or manually pick appropriate video quality levels.\r\n\r\nLearn more on [how HLS works on our blog](https://www.100ms.live/blog/hls-101-beginners-guide).\r\n",
    "<Content alias=\"androidSdkVersionShield\" />": "[![](https://img.shields.io/badge/dynamic/xml.svg?label=100ms&color=blue&query=%2F%2Fmetadata%2Fversioning%2Flatest&url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Flive%2F100ms%2Fandroid-sdk%2Fmaven-metadata.xml)](https://jitpack.io/#100mslive/android-sdk)\n",
    "<Content alias=\"basics\" />": "## Architecture\n\n100ms is a cloud platform that allows developers to add video and audio conferencing to Web, Android and iOS applications.\n\nThe platform provides REST APIs, SDKs, and a dashboard that makes it simple to capture, distribute, record, and render live interactive audio, video.\n\nAny application built using 100ms' SDK has 2 components.\n\n-   **Client:** Use 100ms android, iOS, Web SDKs to manage connections, room states, render audio/video.\n\n-   **Server:** Use 100ms' APIs or dashboard to create rooms, setup room templates, trigger recording or RTMP streaming, access events.\n\n![Architecture](/docs/docs/v2/arch.png)\n\n## Basic Concepts\n\n-   `Room` A room is the basic object that 100ms SDKs return on successful connection. This contains references to peers, tracks and everything you need to render a live a/v or live streaming app.\n-   `Peer` A peer is the object returned by 100ms SDKs that contains all information about a user - name, role, video track etc.\n-   `Session` A session depicts activity in a room. A session is created when one or more peers join a room to communicate with each other. A single room can have multiple sessions; a unique ID will be assigned to each session. The maximum allowed duration for a session on the 100ms platform is 12 hours.\n-   `Track` A track is a segment of media (audio/video) captured from the peer's camera and microphone. Peers in a session publish local tracks and subscribe to remote tracks from other peers.\n-   `Role` A role defines who can a peer see/hear, the quality at which they publish their video, whether they have permissions to publish video/screenshare, mute someone, change someone's role.\n-   `Template` A template is a collection of roles, room settings, recording and RTMP settings (if used), that are used by the SDK to decide which geography to connect to, which tracks to return to the client, whether to turn on recording when a room is created, etc. Each room is associated with a template.\n-   `Destinations` Destinations is used to save audio/video calls for offline viewing. 100ms supports 2 kinds of recording - [SFU recording](/docs/javascript/v2/foundation/recordings#sfu-recording-advanced) and [Browser recording](/docs/javascript/v2/foundation/recordings#browser-recording-recommended). Also, `HLS enabled` configuration will allow you to live stream your room over HLS.\n-   `RTMP` RTMP streaming is used to live stream your video conferencing apps to platforms like YouTube, Twitch, Facebook, MUX, etc.\n-   `Webhooks` Webhook is an HTTP(S) endpoint used for pushing the notifications to your application. It will be invoked by 100ms servers to notify events of your room.\n-   `Workspace` A workspace is an isolated environment which contains account data like templates, rooms, room and session history, etc. You can use workspaces to represent environments like “Production” and “Development” and invite team members to a workspace.\n\n## What are the steps to build a live app with 100ms?\n1. Sign up on 100ms using the **Try For Free** button in the top navbar.\n\n![Signup for 100ms account](/docs/docs/v2/signup.png)\n\n2. Once you're logged in to the dashboard, click on `Create Your First App`\n\n![Signup for 100ms account](/docs/docs/v2/create-your-first-app.png)\n\n3. **Hover** on one of the Starter Kits. Deploy one of them. (We will use the **Video Conference Starter Kit** for this example)\n\n![Dashboard _ 100ms.png](/docs/docs/v2/select-starter-kit.png)\n\n4. Select your account type and fill in the details\n\n![Dashboard _ 100ms.png](/docs/docs/v2/personal-details.png)\n\n5. Choose a deployment option. This could be 100ms or Vercel (based on the Starter Kit you are deploying)\n\n![Video Conferencing Starter Kit](/docs/docs/v2/choose-your-deployment.png)\n\n6. Enter a subdomain of your choice. Please avoid entering https/http/www or dots while entering the subdomain. Select a region closest to you and hit Continue.\n\n![choose subdomain](/docs/docs/v2/choose-subdomain.png)\n\n7. Join or Invite someone to your deployed app with one of the roles:\n\n\n![join or invite](/docs/docs/v2/demo-your-app.png)\n\n## Where should I start?\n",
    "<Content alias=\"bulkRoleChangeErrors\" />": "### Bulk Role Change Errors\n\nYou may get the following errors for bulk role change:\n\n| Message                                | Meaning                                                  |\n|----------------------------------------|----------------------------------------------------------|\n| invalid role                   | A role in the list of roles to change does not exist in this room.           |\n| target role clash with requested roles | the 'toRole' is also listed as one to change to 'toRole' |\n| role does not have required permission | Peer does not have role change permission.               |\n| peer left                              | The peer who's role was to be changed has left.          |\n| role invalid                           | The 'toRole' is invalid.                                 |",
    "<Content alias=\"firewallAndPorts\" />": "\n",
    "<Content alias=\"liveStreaming\" />": "## Overview\n\nLive video interactions can span various levels of interactivity. For example, in a virtual event, some participants can be on stage talking to each other, whereas participants in the audience can be listening to them.\n\nAt 100ms, we think of this as the **3 levels of interactivity**. 100ms enables you to build live video use-cases by mixing and matching these 3 levels to get to your ideal solution.\n\n-   **Level 1**: Full duplex audio/video in real-time\n\n    Level 1 participants publish their audio/video, and interact with others in sub-second latency. This is real-time video conferencing, similar to Zoom or Google Meet.\n\n-   **Level 2**: Webinar-style audience in real-time\n\n    Level 2 participants consume audio/video from level 1 participants with sub-second latency, without publishing their own audio/video. Level 2 participants can engage with level 1 through messaging (chat, emojis, custom events). This is similar to a Zoom webinar.\n\n    Levels 1 and 2 are enabled using WebRTC.\n\n-   **Level 3**: Live stream audience consuming in near real-time\n\n    Level 3 participants consume a composite live stream in near real-time (<10 secs of latency) without publishing their audio/video. They can interact with other participants via messaging. This is similar to viewers on Twitch or YouTube Live, and is enabled via **100ms Interactive Live Streaming**.\n\n    Live streaming uses [HLS](https://www.100ms.live/blog/hls-101-beginners-guide) to achieve near real-time latency at scale.\n\nThe [roles primitive](/docs/javascript/v2/foundation/templates-and-roles) can be used to define capabilities of a participant and associate them to an interaction level. A participant can move between levels using a single API call to change roles.\n\n## Try Interactive Live Streaming\n\nUse our [Live Streaming Starter Kit](https://www.100ms.live/marketplace/live-streaming-starter-kit) to try out the experience before you write a line of code.\n\n<StepsToc\n  parentId=\"try-live-streaming\"\n  descriptions={[\"Use our Live streaming starter kit to try out the experience before you write a line of code.\", \"Understand the difference between a stream broadcaster and stream viewer.\", \"Use the demo app link to go live for the first time as a broadcaster and join the stream as viewer.\", \"Use the 100ms self-serve dashboard to update the layout, aspect ratio, etc of the stream.\"]}\n>\n\n<StepsContainer id=\"try-live-streaming\">\n\n### Create a new app\n\n![Live streaming starter kit](/docs/docs/v2/live-streaming-starter-kit.png)\n\n1. Make sure that you have [an account with 100ms](https://dashboard.100ms.live/register) and can access the [100ms dashboard](https://dashboard.100ms.live/)\n1. On the dashboard, create a new app using the Live Streaming Starter Kit\n1. Specify a subdomain and region to deploy the app\n\n### Understand roles\n\n![Live Streaming roles](/docs/docs/v2/live-streaming-roles.png)\n\nThis starter kit configures your new app with [two roles](/docs/javascript/v2/foundation/templates-and-roles):\n\n-   `broadcaster`: This role represents a streamer who publishes their audio/video. There can be multiple peers who join as broadcasters\n-   `hls-viewer`: This role represents a circle 3 audience, who subscribes to the composite live stream and can interact using messaging\n\n### Go live\n\n![Go live](/docs/docs/v2/live-streaming-go-live.gif)\n\n1. To go live for the first time, join the room as a `broadcaster` and start the live stream\n2. Once the stream has started, join the room as an `hls-viewer` and you should be able to see the ongoing live stream\n3. Use chat messages to interact between the viewer and the broadcaster\n\n### Customize the stream\n\n![Go live](/docs/docs/v2/live-streaming-customise.png)\n\nBy default, the live stream is composed in landscape mode for desktop viewers (with an aspect ratio of 16:9). You can customise the live stream for viewers on mobile or to support multiple broadcaster tiles.\n\n1. On the 100ms dashboard, click the gear icon on your app to open configuration settings\n2. Go to \"destinations\" and scroll down to find live stream (HLS) configuration\n3. Update the configuration based on your needs:\n    - If your viewers are on mobile, change the video aspect ratio to 9:16\n    - If you have multiple broadcasters joining in, choose grid or active speaker based on your needs\n    - In case of grid layout, choose the tile size that fits your use-case. For example, a stream with 2 streamers looks better with 1:1 tiles.\n\n</StepsContainer>\n\n## Integrate in your app\n\nTo integrate 100ms Interactive Live Streaming in your app, follow these steps:\n\n1. [Enable live streaming destination](#enable-destination)\n2. [Integrate the 100ms SDK in your app](#sdk-integration)\n3. [Integrate live stream playback](#live-stream-playback)\n4. [Video on demand (VOD) use cases](#video-on-demand-vod-use-cases)\n\n### Enable destination\n\n![Enable HLS](/docs/docs/v2/live-streaming-enable.gif)\n\nIf your app is based on the Live Streaming Starter Kit (as shown above), the live streaming destination is enabled out-of-the-box.\n\nFor custom apps, you can enable the live streaming destination manually:\n\n1. Open configuration for your existing app using the 100ms dashboard\n1. In the \"destinations\" tab, enable \"Live Streaming with HLS\"\n1. Ensure that you have roles for the broadcaster (who can publish their audio/video) and the viewer (who cannot publish audio/video)\n\n### SDK integration\n\nUse the 100ms client-side SDKs to integrate streaming in your application. See code snippets for the client-side SDK [here](/docs/javascript/v2/features/hls).\n\n### Live stream playback\n\nUsing our client-side SDKs, you can enable live stream playback and add interactive experiences like chat, raise hand and other functionalities to your app using [peer metadata](/docs/javascript/v2/advanced-features/peer-metadata).\n\nThe process is so simple:\n\n1. Once you [start](#step-3-go-live) live streaming, you will get an HLS URL (M3U8 URL) which you can use for playback.\n2. You can use the [client-side SDK](/docs/javascript/v2/features/hls) to get the HLS URL by checking the [current state](/docs/javascript/v2/features/hls#current-room-status) of the room and start playback.\n\nIf you need to only enable HLS playback and don't need interactivity, you can follow one of the below approaches to get the HLS URL:\n\n-   **Webhook:** You can listen to `hls.started.success` [webhook event](/docs/server-side/v2/introduction/webhook#hls-started-success) and get the HLS URL from the `url` field. Please check the [webhooks guide](/docs/server-side/v2/introduction/webhook) to learn more about webhooks.\n-   **Static URL:** This configuration will help you get a static URL for playback. You can enable the `Static playback URLs` in your template from the [dashboard](https://dashboard.100ms.live/dashboard). You can go to Destination > enable \"Live streaming with HLS\" > under \"Customise stream video output\" section > enable \"Static playback URLs.\"\n\n    ![Enable Static URL](/docs/docs/v2/enable-static-url.png)\n\n    -   _Format_: https://cdn.100ms.live/beam/<customer_id>/<room_id>/master.m3u8\n    -   `customer_id`: replace this placeholder with your customer_id from [developer section](https://dashboard.100ms.live/developer) on your dashboard.\n    -   `room_id`: replace this placeholder with the `room_id` of the respective room from which the stream will be broadcasted.\n\n### Video on Demand (VOD) use cases\n\nIf you wish to replay your HLS stream for Video on demand (VOD) use case, 100ms provides the capability to record the HLS stream which will be posted to your webhook as a ZIP file of M3U8 format (same playback format as HLS) with all the chunks once the stream ends.\n\nYou can start recording a live stream using the [client-side SDK](/docs/javascript/v2/features/hls) or using the [server API](/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording#start-streaming-recording). Once the HLS recording is completed, you will get the details of recording as a callback to the webhook configured in your account. Check `hls.recording.success` [webhook event](/docs/server-side/v2/introduction/webhook#hls-recording-success) for more information.\n",
    "<Content alias=\"network\" />": "## Introduction\n\n100ms handles a lot of standard audio/video issues internally without the developer needing to handle it explicitly. This page describes some common issues and how 100ms handles them.\n\nThere are 3 major issues of issues that can occur in a audio/video conference\n\n- Device capture exceptions\n- Network disconnection/switching network exceptions\n- Network bandwidth limitation/large room exceptions\n\n## Device failure\n\nA common issue is a failure to capture mic/camera even though the user has all devices connected. Common causes include differences in OS/browser implementations of device capture APIs, permission not being granted by the user, or the device being in use by another program.\n\nThe usual recourse in these exceptions is to prompt a user action - \"Grant permission\", \"Please close any other app using microphone\", \"Switch to Safari\"\n\n100ms' SDKs come with a [preview method](../features/preview) that can be called before joining a room. This will test for device failures, network connectivity and throw errors with a recommended user action.\n\n## Network disconnection/Switching networks\n\nAnother set of common issues are minor network blips. Common causes are when a user moves from one room to another, or switches from wifi to data.\n\n100ms will send a notification within 10s of detecting a network disconnection and will automatically retry when connection is available upto 60s. After 60s, a terminal error is thrown to the client.\n\n## Network bandwidth limitation/large rooms\n\nA common occurrence in large rooms, or constrained networks is dropped frames. This results in robotic voices, frozen frames, pixelated screenshare or entire pieces of audio/video that are lost.\n\n100ms will automatically prioritize connections if network limits are reached. This prioritization can be controlled by developers using the dashboard or 100ms APIs.\n\neg. A developer can prioritize host's screenshare higher than guests' videos. In low bandwidth constraints, guests' videos will be turned off, while host's screenshare will remain.\n",
    "<Content alias=\"recordings\" />": "Recordings are an important part of the live video stack as they convert live, ephemeral content into a long-term asset. But the use of this asset varies from business to business depending on their respective use case.\n\nFor example, one of the common use cases for recording is for archival purposes versus, for some, its content to be publicized.\n\nBased on your end goal, you can choose one of the recording types and its implementation. You can understand some key differences using the comparison table below.\n\n## Recording types\n\n- [Recording types](#recording-types)\n  - [Quick Comparison](#quick-comparison)\n  - [Browser Recording \\[Recommended\\]](#browser-recording-recommended)\n  - [SFU Recording \\[Advanced\\]](#sfu-recording-advanced)\n  - [Recordings for Live Streaming Use-cases](#recordings-for-live-streaming-use-cases)\n    - [Video-on-demand Recording](#video-on-demand-recording)\n    - [Multiresolution Recording](#multiresolution-recording)\n- [Configure storage](#configure-storage)\n  - [How to configure recording storage?](#how-to-configure-recording-storage)\n\n### Quick Comparison\n\n| Recording Features                   | Browser Recording [Recommended] | SFU Recording [Advanced]         |\n| ------------------------------------ | ------------------------------- | -------------------------------- |\n| Resolution                           | Upto 1080p                      | Only 720p                        |\n| Participant-level Audio/Video Tracks | Not Available                   | Available                        |\n| Portrait/Landscape Mode              | Available                       | Not Available                    |\n| Start/Stop Recording                 | On-demand                       | Auto start/stop with the session |\n| Custom Layout                        | Available                       | Not Available                    |\n| Role-Specific Recording              | Available                       | Not Available                    |\n| Recording Output                     | MP4                             | MP4, WebM                        |\n\n\n### Browser Recording [Recommended]\n\nBrowser recording is built to give users a participant-first recording experience. When enabled, our browser-based bot Beam joins a room to record the viewport like any other participant. The output is an MP4 file that captures the room's published audio/video tracks together into one single file. This option removes the complexity of syncing various audio/video tracks and offers an intuitive, participant-first recording experience. An example use case is to record a sales meeting for later usage.\n\n**Resources**\n\n-  [How to implement Browser Recording](https://www.100ms.live/docs/server-side/v2/Destinations/rtmp-streaming-and-browser-recording)\n\n### SFU Recording [Advanced]\n\nSFU recording is built for advanced use cases, which require individual audio and video tracks for each participant. This recording option allows you to isolate recording at a participant level. Track recording allows you to record audio and video streams separately, making it easier to edit, layer, or reuse each of them. An example use case is to record a live podcast and later edit it for publishing.\n\nYou can get track recordings in two forms:\n\n-   Individual: Media for each peer is provided as a separate mp4 file. This file will have both audio and video of the peer. These files can be used for offline review or in implementing custom composition.\n\n-   Composite [currently in beta]: Audio and video of all peers are composed as per their joining/leaving the meeting and provided as a single mp4. This file can be used for offline viewing of the meeting.\n\n**Resources**\n\n-   [How to implement SFU Recording](https://www.100ms.live/docs/server-side/v2/Destinations/recording)\n\n### Recordings for Live Streaming Use-cases\nThese are the types of live streaming recordings:\n\n#### Video-on-demand Recording\n\nVideo-on-demand recording is available for our Interactive Live Streaming capability. This recording will be a file with an M3U8 file (same playback format as HLS), which can be used for replaying your HLS stream. This option is more suitable for Video-on-Demand use cases. For the implementation of this type of recording, please [contact us](https://www.100ms.live/contact).\n\n#### Multiresolution Recording\n\nA multi-resolution recording is available for Interactive Live Streaming capability. This type of recording will have a multi-file structure for all available resolutions of the stream. The output will be multiple MP4 files with these resolutions: 240p, 480p, 720p, and 1080p. For an implementation of this type of recording, please [contact us](https://www.100ms.live/contact).\n\n\n## Configure storage\n\nYou can specify a cloud storage location for your recording files in your template. Our current offering allows you to store your recordings in Amazon S3 buckets. Once you configure the S3 config of your bucket in a template, all respective recordings of sessions created via those templates will be sent to your configured bucket. This holds true for all types of aforementioned recordings.\n\n### How to configure recording storage?\n\n1. Generate your credentials; for this example, you can check out a [guide from AWS](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html). You can skip this step if you already have credentials. Please note that if you are running a Browser recording, you need to give upload permission to your key, but if you are running an SFU recording, you need to give both upload and download permission.\n\n2. Go to 100ms Dashboard and go to template **configuration by selecting the configure icon**.\n\n![Create your first app](/docs/docs/v2/recording-storage-settings-step2.png)\n\n3. Head over to the **Destinations** tab.\n\n![Destinations](/docs/docs/v2/recording-storage-settings-step3.png)\n\n1. Key in your credentials (using an example of an S3 bucket here):\n\n    - Access Key: Access Key generated from AWS IAM Console\n    - Secret Key: Secret Key generated from AWS IAM Console\n    - Bucket: Name of the bucket in S3\n    - Region: Name of the region, for example, ap-south1\n    - Prefix for Upload Path: Define the directory name (optional)\n\n![Destinations](/docs/docs/v2/recording-storage-settings-step4.png)\n\n5. Use the **Validate Config** button to test your storage setup.\n\n![Destinations](/docs/docs/v2/recording-storage-settings-step5.png)\n\n6. You will see a message that the AWS **configuration was successfully validated**.\n\n![Destinations](/docs/docs/v2/recording-storage-settings-step6.png)\n\nThe above message ensures that your configuration is successful now, and all your recordings will start collecting in your configured destination.\n",
    "<Content alias=\"rtmpExternalConfig\" />": "- Please refer to the platform specific documentation for details on how to obtain the stream URL and stream key. Here are some examples: \n    -   [YouTube](https://support.google.com/youtube/answer/2907883?hl=en&ref_topic=9257892)\n    -   [Facebook](https://www.facebook.com/help/587160588142067)\n    -   [Instagram](https://about.instagram.com/blog/tips-and-tricks/instagram-live-producer)\n    -   [Twitch](https://help.twitch.tv/s/article/twitch-stream-key-faq?language=en_US)\n    -   [LinkedIn](https://www.linkedin.com/help/linkedin/answer/a564446/go-live-using-a-custom-stream-rtmp)",
    "<Content alias=\"securityTokens1\" />": "## Introduction\n\nIn 100ms, two types of tokens are used to authenticate requests coming from your `Client apps` and `Backend application server` into the 100ms platform.\n\n-   [App token](#app-token) : Used to authenticate and allow end-users (peers) to join 100ms rooms. An App Token controls `Peer identity` and `Room permissions` in your real-time or Interactive live-streaming video application.\n-   [Management token](#management-token) : Used to authenticate all the requests to 100ms REST API.\n\nYou can set the expiry to both these tokens; if you follow the code samples from this guide, the expiry will be set as 24 hours. However, a best practice is to set the expiry as short as feasible for your application.\n\nYou must host your server to generate these tokens while transitioning your app to production.\n\n## App Token\n\n100ms _client-side SDKs_ use App Tokens to authenticate a peer (participant) while [joining a room](./../features/join). Generate this token on the server side and make it available for your client-side apps that use the 100ms SDKs.\n\nTo create an App Token, you need to use `app_access_key`, `app_secret`, `room_id`, and `user_id`.\n\n-   You can get the `app_access_key` and `app_secret` from the [developer section](https://dashboard.100ms.live/developer) in your 100ms dashboard. This key and secret differ across workspaces so please ensure you are in the intended workspace before copying these credentials. \n-   **room_id**: This is the unique identifier for your room. You can get it from the [rooms page](https://dashboard.100ms.live/rooms) in your dashboard or in the response payload of the [create room server-side API](/docs/server-side/v2/Rooms/create-via-api).\n-   **user_id**: This identifier can be used to map a 100ms peer to your own internal user object for business logic. Specify your internal user identifier as the peer's user_id. If not available, use any random string.\n\n### How to use?\nYou can get App tokens using a couple of approaches based on your app's lifecycle stage. Please check the below sections for more information:\n\n-   [Set up your own authentication endpoint](./../foundation/security-and-tokens#set-up-your-own-authentication-endpoint)\n-   [Get app tokens from the token endpoint](./../foundation/security-and-tokens#get-app-tokens-from-the-token-endpoint)\n-   [Get app tokens from the dashboard](./../foundation/security-and-tokens#get-app-tokens-from-the-dashboard)\n\n#### Set up your own authentication endpoint\n\nWhen you have completed your integration with 100ms, and while transitioning your app to production, we recommend you create your backend service for app token generation; use the code snippet below and set up the token generation service as per your preferred programming language.\n",
    "<Content alias=\"securityTokens2\" />": "#### Get app tokens from the token endpoint\n\nIf you are building integration with 100ms, you can get app tokens from the 100ms token endpoint without hosting a token generation backend service. Refer to [this guide](./../guides/token-endpoint#get-an-app-token-using-token-endpoint) for more information. \n\n#### Get app tokens from the dashboard\n\nIf you are building your first app by following one of our [quickstart guides](/docs/javascript/v2/guides/javascript-quickstart), you can get the app token directly from 100ms dashboard to join a room for the first time. Refer to [this guide](./../guides/token#get-a-temporary-token-from-100ms-dashboard) for more information.\n\n## Management Token\n\n100ms uses management tokens to authenticate REST APIs. \n\nIf you're evaluating 100ms [server APIs](/docs/server-side/v2/introduction/basics), you can use our public [Postman collection](/docs/server-side/v2/introduction/postman-guide#fork-the-collection), which doesn't require you to create a management token as we've managed it using a [pre-request script](/docs/server-side/v2/introduction/postman-guide#simplified-token-generation) within the collection.\n\nIf you're transitioning your app to production, we recommend you create your backend service for management token generation. You must use the `app_access_key` and `app_secret` from the [developer section](https://dashboard.100ms.live/developer) in your 100ms dashboard to create the management token.",
    "<Content alias=\"templatesAndRoles\" />": "## Introduction\n\nTemplate is the blueprint of the room. It defines the settings of the room along with the behavior of users who are part of it.\nRoom will inherit the properties from a template that you have specified while creating it. If you have not specified any template then it will pick the default template.\nEach template will be identified by its id or name. For example `default_videoconf_7e450ffc-8ef1-4572-ab28-b32474107b89`\n\nUsers can see or modify the templates by visiting [Templates on Dashboard](https://dashboard.100ms.live/templates) or via API(see below). After updating a template or some part of its like permissions, you need to rejoin or restart the session for the template updates to take place.\n\n![Template](/docs/docs/v2/template.png)\n\n## Roles\n\nRole is a collection of permissions that allows you to perform certain set of operations while being part of the room. It has the following attributes:\n\n### Name\n\nEvery role has a name that should be unique inside a template. This name will be used while generating app tokens and referencing inside a template.\n\n### Priority\n\nPriority will determine the order in which the roles will be degraded. A lower number represents a higher priority.\n\n### Publish Strategies\n\nPublish strategies will be used to determine the tracks and their quality which can be published by this role.\n\n| Strategy            | Description                                                                                                                                                                                                                                                                                   |\n| ------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Can share audio     | Whether the role is allowed to publish the audio track or not.                                                                                                                                                                                                                                |\n| Can share video     | Whether the role is allowed to publish the video track or not                                                                                                                                                                                                                                 |\n| Can share screen    | Whether the role is allowed to do screen share or not                                                                                                                                                                                                                                         |\n| Video quality       | Quality of the video track which is going to be published by the role. Currently, 6 video qualities `1080p`,`720p`, `480p`, `360p`, `240p` and `120p` are predefined and the user can select one out of these values. This option will be visible only if the **Can share video** is enabled. |\n| Screenshare quality | Quality of the screen which is going to be shared by the role. Currently, 2 video qualities `720p` and `1080p` are predefined and the user can select one out of these values. This option will be visible only if the **Can share screen** is enabled.                                       |\n\n### Subscribe Strategies\n\nSubscribe strategies will be used to determine what all roles, this role can subscribe to.\n\n| Strategy              | Description                                                                                                                                                                                                                                                      |\n| --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Subscribe to          | You can select all the roles of the template which this role will subscribe                                                                                                                                                                                      |\n| Subscribe Degradation | When this flag is turned on, one or more remote video tracks will be muted automatically when the network condition worsens. Such tracks will be marked as `degraded`. When the network condition improves, the `degraded` tracks will automatically be unmuted. |\n\n### Permissions\n\nPermissions will contain a list of additional privileges that this role will have.\n\n| Permission                           | Description                                                                                                                                                                     |\n| ------------------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Can change any participant's role    | With this permission, user will be able to change the role of the other participant's who are present in the room                                                               |\n| Can mute any participant             | With this permission, user will be able to mute any participant's audio and/or video.                                                                                           |\n| Can ask participant to unmute        | With this permission, user will be able to ask any participant to unmute their audio and/or video.                                                                              |\n| Can remove participant from the room | With this permission, user will be able to remove any participant from the current session of the room.                                                                         |\n| Can end current session of the room  | With this permission, user will be able to end the current session of the room.                                                                                                 |\n| Can receive room state               | With this permission, user will be able to receive room state like peer-count and peer-list on the preview screen.                                                              |\n| Can start/stop RTMP livestream       | With this permission, user will be able to publish live audio/video livestream externally to social media and custom platforms (e.g Youtube/Facebook/Twitter).                  |\n| Can start/stop HLS livestream        | With this permission, user will be able to publish audio/video livestream in the HLS format.                                                                                    |\n| Can start/stop Beam Recording        | With this permission, user will be able to record meeting/livestream via the browser recording approach where a bot will join the room and record the meeting/livestream as is. |\n\n## Advanced Settings\n\nAs the name suggests, Advanced Settings section contains more settings and controls for the advanced user.\n\n![Template](/docs/docs/v2/advanced-settings.png)\n\n### Preview room state\n\nPreview room state enables you to build a \"preview\" screen which shows the state of the room before joining. This room state includes a list of peers, which can be used to show who is in the room. Preview room state also includes recording and streaming state.\n\nPreview room state settings define strategy of sending state updates to client SDKs.\n\n| Setting                                  | Description                                                                                                                                                                                                                                        |\n| ---------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Room-state Message Interval (in seconds) | Room-state data will be sent over a regular interval of these many seconds. Consequently, the room state displayed on the preview screen will refresh accordingly. This value must be a multiple of 5, between 5 and 3600 seconds, both inclusive. |\n| Send Peer List in Room-state             | Enabling this will send peer-list info of the room. If disabled, only the peer count is sent.                                                                                                                                                      |\n| Enable Room-State                        | If enabled, room-state data will be sent to the preview screen. If disabled, no such room-state data will be sent.                                                                                                                                 |\n| Roles with room-state permission         | This is the list of all the roles which will get the room-state data. You can also individually toggle these settings in the Roles tab under the Permissions section.                                                                              |\n",
    "<Content alias=\"tokenEndpoint\" />": "",
    "<Content alias=\"token\" />": "## Create an 100ms account\n\n- Create an account at [Dashboard of 100ms](https://dashboard.100ms.live/)\n\n![Create Account](/docs/guides/token/create-account.png)\n\n- After you have created your account you have to Confirm your Email , check the promotions tab in your Mail Box if you can't find it.\n\n- Login to the Dashboard and you will see an option to Create your first app. Click on it.\n\n![Create your first app](/docs/guides/token/starter-kit-initialize-first-step.png)\n\n- Then you would see this popup with multiple starter kits, hover over one of the starter kits and click `Deploy`. We will choose \"Video Conferencing\" for now.\n\n![Initialize Started Kit](/docs/guides/token/starter-kit-initialize.png)\n\n- In the `Choose your deployment` step, select 100ms and enter the subdomain you wish in the `Subdomain` field.\n\n![Domain details](/docs/guides/token/domain-details.png)\n\n- After you're App is set click on \"Go to Dashboard\" or [Go Here](https://dashboard.100ms.live/dashboard)\n\n![Dasboard](/docs/guides/token/go-to-dashboard.png)\n\n## Create a room\n\n- Go over to [Room in Dashboard](https://dashboard.100ms.live/rooms) and click on \"Create Room\" , While creating a room you can specify it's name, roles or enable recording.\n\n![Create Room](/docs/guides/token/create-room.png)\n\n- You will now see \"Room Details\" section and we have a `room_id` created, copy it somewhere.\n\n![Room Id](/docs/guides/token/room-id.png)\n\n## Get a temporary token from 100ms dashboard\n\nAny client connecting calling 100ms' service needs to authenticate using an auth token. In production you would have your own servers generating the tokens (see more [here](/docs/javascript/v2/foundation/security-and-tokens)), but for a quick start you can use the dashboard to create a token for you. The token will expire in 24 hours and should not be hard-coded into a production app.\n\n- To get a temporary token click on \"Join room\" button.\n\n![Join Room](/docs/guides/token/join-room.png)\n\n- In the popup that shows up click on icon with a key shape next to the role you want to join as.\n\n![Copy Token](/docs/guides/token/copy-token.png)\n\nThe token will be copied to your clipboard. Use this along with the `room_id` to proceed with the quickstart guide."
}
